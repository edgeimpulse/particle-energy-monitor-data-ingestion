
/Users/brennandayberry/Downloads/2023_edge_impulse_imagine_demo/target/5.4.1/p2/2023_edge_impulse_imagine_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f9000  085f9000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f9018  085f9018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f9770  085f90a8  00009770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00006878  023f9778  085f90b0  00009778  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000088  1007a5e0  085ff928  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000980  1007a668  1007a668  0002a668  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff9b0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000604  085ff9b4  085ff9b4  0001f9b4  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f9b4  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00192a3f  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001b7c1  00000000  00000000  001b2a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0004f80d  00000000  00000000  001ce200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000036a0  00000000  00000000  0021da0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000cf18  00000000  00000000  002210ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003247f  00000000  00000000  0022dfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005dacf  00000000  00000000  00260444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d388c  00000000  00000000  002bdf13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a2ac  00000000  00000000  003917a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f9018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f9018:	4813      	ldr	r0, [pc, #76]	; (85f9068 <module_user_pre_init+0x50>)
 85f901a:	4914      	ldr	r1, [pc, #80]	; (85f906c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f901c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f901e:	4288      	cmp	r0, r1
 85f9020:	d005      	beq.n	85f902e <module_user_pre_init+0x16>
 85f9022:	4a13      	ldr	r2, [pc, #76]	; (85f9070 <module_user_pre_init+0x58>)
 85f9024:	4282      	cmp	r2, r0
 85f9026:	d002      	beq.n	85f902e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f9028:	4b12      	ldr	r3, [pc, #72]	; (85f9074 <module_user_pre_init+0x5c>)
 85f902a:	1a12      	subs	r2, r2, r0
 85f902c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f902e:	4812      	ldr	r0, [pc, #72]	; (85f9078 <module_user_pre_init+0x60>)
 85f9030:	4a12      	ldr	r2, [pc, #72]	; (85f907c <module_user_pre_init+0x64>)
 85f9032:	2100      	movs	r1, #0
 85f9034:	4b12      	ldr	r3, [pc, #72]	; (85f9080 <module_user_pre_init+0x68>)
 85f9036:	1a12      	subs	r2, r2, r0
 85f9038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f903a:	4812      	ldr	r0, [pc, #72]	; (85f9084 <module_user_pre_init+0x6c>)
 85f903c:	4912      	ldr	r1, [pc, #72]	; (85f9088 <module_user_pre_init+0x70>)
 85f903e:	4288      	cmp	r0, r1
 85f9040:	d005      	beq.n	85f904e <module_user_pre_init+0x36>
 85f9042:	4a12      	ldr	r2, [pc, #72]	; (85f908c <module_user_pre_init+0x74>)
 85f9044:	4282      	cmp	r2, r0
 85f9046:	d002      	beq.n	85f904e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f9048:	4b0a      	ldr	r3, [pc, #40]	; (85f9074 <module_user_pre_init+0x5c>)
 85f904a:	1a12      	subs	r2, r2, r0
 85f904c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f904e:	4810      	ldr	r0, [pc, #64]	; (85f9090 <module_user_pre_init+0x78>)
 85f9050:	4910      	ldr	r1, [pc, #64]	; (85f9094 <module_user_pre_init+0x7c>)
 85f9052:	4288      	cmp	r0, r1
 85f9054:	d005      	beq.n	85f9062 <module_user_pre_init+0x4a>
 85f9056:	4a10      	ldr	r2, [pc, #64]	; (85f9098 <module_user_pre_init+0x80>)
 85f9058:	4282      	cmp	r2, r0
 85f905a:	d002      	beq.n	85f9062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f905c:	4b05      	ldr	r3, [pc, #20]	; (85f9074 <module_user_pre_init+0x5c>)
 85f905e:	1a12      	subs	r2, r2, r0
 85f9060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f9062:	4801      	ldr	r0, [pc, #4]	; (85f9068 <module_user_pre_init+0x50>)
 85f9064:	bd08      	pop	{r3, pc}
 85f9066:	bf00      	nop
 85f9068:	1007a5e0 	.word	0x1007a5e0
 85f906c:	085ff928 	.word	0x085ff928
 85f9070:	1007a668 	.word	0x1007a668
 85f9074:	10110d2d 	.word	0x10110d2d
 85f9078:	1007a668 	.word	0x1007a668
 85f907c:	1007afe8 	.word	0x1007afe8
 85f9080:	10110ea1 	.word	0x10110ea1
 85f9084:	023f9770 	.word	0x023f9770
 85f9088:	085f90a8 	.word	0x085f90a8
 85f908c:	023f9778 	.word	0x023f9778
 85f9090:	023f9778 	.word	0x023f9778
 85f9094:	085f90b0 	.word	0x085f90b0
 85f9098:	023ffff0 	.word	0x023ffff0

085f909c <dynalib_preinit>:
 85f909c:	085f9019 00000000                       .._.....

Disassembly of section .psram_text:

023f9778 <strcmp>:
 23f9778:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f977c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f9780:	2a01      	cmp	r2, #1
 23f9782:	bf28      	it	cs
 23f9784:	429a      	cmpcs	r2, r3
 23f9786:	d0f7      	beq.n	23f9778 <strcmp>
 23f9788:	1ad0      	subs	r0, r2, r3
 23f978a:	4770      	bx	lr

023f978c <strlen>:
 23f978c:	4603      	mov	r3, r0
 23f978e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f9792:	2a00      	cmp	r2, #0
 23f9794:	d1fb      	bne.n	23f978e <strlen+0x2>
 23f9796:	1a18      	subs	r0, r3, r0
 23f9798:	3801      	subs	r0, #1
 23f979a:	4770      	bx	lr

023f979c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f979c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f979e:	f004 ff45 	bl	23fe62c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f97a2:	2500      	movs	r5, #0
 23f97a4:	4e05      	ldr	r6, [pc, #20]	; (23f97bc <module_user_init+0x20>)
 23f97a6:	4c06      	ldr	r4, [pc, #24]	; (23f97c0 <module_user_init+0x24>)
 23f97a8:	1ba4      	subs	r4, r4, r6
 23f97aa:	08a4      	lsrs	r4, r4, #2
 23f97ac:	42ac      	cmp	r4, r5
 23f97ae:	d100      	bne.n	23f97b2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f97b0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f97b2:	f856 3b04 	ldr.w	r3, [r6], #4
 23f97b6:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f97b8:	3501      	adds	r5, #1
 23f97ba:	e7f7      	b.n	23f97ac <module_user_init+0x10>
 23f97bc:	023fffcc 	.word	0x023fffcc
 23f97c0:	023ffff0 	.word	0x023ffff0

023f97c4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f97c4:	f000 b946 	b.w	23f9a54 <setup>

023f97c8 <module_user_loop>:
}

void module_user_loop() {
 23f97c8:	b508      	push	{r3, lr}
    loop();
 23f97ca:	f000 f9ad 	bl	23f9b28 <loop>
    _post_loop();
}
 23f97ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f97d2:	f004 bee3 	b.w	23fe59c <_post_loop>

023f97d6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f97d6:	f002 bc63 	b.w	23fc0a0 <malloc>

023f97da <_Znaj>:
 23f97da:	f002 bc61 	b.w	23fc0a0 <malloc>

023f97de <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f97de:	f002 bc6d 	b.w	23fc0bc <free>
	...

023f97e4 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f97e4:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f97e6:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f97e8:	4a02      	ldr	r2, [pc, #8]	; (23f97f4 <__cxa_pure_virtual+0x10>)
 23f97ea:	4903      	ldr	r1, [pc, #12]	; (23f97f8 <__cxa_pure_virtual+0x14>)
 23f97ec:	f002 fad0 	bl	23fbd90 <panic_>
  while (1);
 23f97f0:	e7fe      	b.n	23f97f0 <__cxa_pure_virtual+0xc>
 23f97f2:	bf00      	nop
 23f97f4:	023fb835 	.word	0x023fb835
 23f97f8:	023fed30 	.word	0x023fed30

023f97fc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f97fc:	7800      	ldrb	r0, [r0, #0]
 23f97fe:	fab0 f080 	clz	r0, r0
 23f9802:	0940      	lsrs	r0, r0, #5
 23f9804:	4770      	bx	lr

023f9806 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f9806:	2301      	movs	r3, #1
 23f9808:	7003      	strb	r3, [r0, #0]
 23f980a:	4770      	bx	lr

023f980c <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f980c:	4770      	bx	lr

023f980e <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 23f980e:	6943      	ldr	r3, [r0, #20]
 23f9810:	b113      	cbz	r3, 23f9818 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f9812:	6983      	ldr	r3, [r0, #24]
 23f9814:	300c      	adds	r0, #12
 23f9816:	4718      	bx	r3
            callback();
        }
    }
 23f9818:	4770      	bx	lr

023f981a <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 23f981a:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 23f981c:	2100      	movs	r1, #0
 23f981e:	4604      	mov	r4, r0
 23f9820:	4608      	mov	r0, r1
 23f9822:	f001 ff6d 	bl	23fb700 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 23f9826:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 23f9828:	4620      	mov	r0, r4
 23f982a:	a901      	add	r1, sp, #4
            void* id = nullptr;
 23f982c:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 23f982e:	f001 ff91 	bl	23fb754 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 23f9832:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 23f9834:	b10c      	cbz	r4, 23f983a <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 23f9836:	2301      	movs	r3, #1
 23f9838:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 23f983a:	2100      	movs	r1, #0
 23f983c:	2001      	movs	r0, #1
 23f983e:	f001 ff5f 	bl	23fb700 <os_thread_scheduling>
            }
        }
        if (t) {
 23f9842:	b12c      	cbz	r4, 23f9850 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 23f9844:	6823      	ldr	r3, [r4, #0]
 23f9846:	4620      	mov	r0, r4
 23f9848:	689b      	ldr	r3, [r3, #8]
 23f984a:	4798      	blx	r3
            t->running = false;
 23f984c:	2300      	movs	r3, #0
 23f984e:	7123      	strb	r3, [r4, #4]
        }
    }
 23f9850:	b002      	add	sp, #8
 23f9852:	bd10      	pop	{r4, pc}

023f9854 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23f9854:	2a01      	cmp	r2, #1
 23f9856:	d102      	bne.n	23f985e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f9858:	6001      	str	r1, [r0, #0]
      }
 23f985a:	2000      	movs	r0, #0
 23f985c:	4770      	bx	lr
	  switch (__op)
 23f985e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f9860:	bf04      	itt	eq
 23f9862:	680b      	ldreq	r3, [r1, #0]
 23f9864:	6003      	streq	r3, [r0, #0]
	      break;
 23f9866:	e7f8      	b.n	23f985a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023f9868 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f9868:	6803      	ldr	r3, [r0, #0]
 23f986a:	4718      	bx	r3

023f986c <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 23f986c:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 23f986e:	6880      	ldr	r0, [r0, #8]
 23f9870:	b130      	cbz	r0, 23f9880 <_ZN5Timer4stopEj.isra.0+0x14>
 23f9872:	2300      	movs	r3, #0
 23f9874:	e9cd 1300 	strd	r1, r3, [sp]
 23f9878:	461a      	mov	r2, r3
 23f987a:	2102      	movs	r1, #2
 23f987c:	f001 ff78 	bl	23fb770 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 23f9880:	b003      	add	sp, #12
 23f9882:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f9888 <_Z10sampleDatav>:
        Log.info("FAILED TO SET GAIN");
    }  
}

void sampleData()
{
 23f9888:	b510      	push	{r4, lr}
    voltageADC = analogRead(voltagePIN); //read ADC values
 23f988a:	4b13      	ldr	r3, [pc, #76]	; (23f98d8 <_Z10sampleDatav+0x50>)
 23f988c:	4c13      	ldr	r4, [pc, #76]	; (23f98dc <_Z10sampleDatav+0x54>)
 23f988e:	8818      	ldrh	r0, [r3, #0]
 23f9890:	f004 ff66 	bl	23fe760 <analogRead>
    currentADC = analogRead(currentPIN);
 23f9894:	4b12      	ldr	r3, [pc, #72]	; (23f98e0 <_Z10sampleDatav+0x58>)
    voltageADC = analogRead(voltagePIN); //read ADC values
 23f9896:	6020      	str	r0, [r4, #0]
    currentADC = analogRead(currentPIN);
 23f9898:	8818      	ldrh	r0, [r3, #0]
 23f989a:	f004 ff61 	bl	23fe760 <analogRead>
 23f989e:	4b11      	ldr	r3, [pc, #68]	; (23f98e4 <_Z10sampleDatav+0x5c>)
    payloadBuffer[0][sampleIndex] = voltageADC;
 23f98a0:	4a11      	ldr	r2, [pc, #68]	; (23f98e8 <_Z10sampleDatav+0x60>)
 23f98a2:	4912      	ldr	r1, [pc, #72]	; (23f98ec <_Z10sampleDatav+0x64>)
 23f98a4:	6824      	ldr	r4, [r4, #0]
    currentADC = analogRead(currentPIN);
 23f98a6:	6018      	str	r0, [r3, #0]
    payloadBuffer[0][sampleIndex] = voltageADC;
 23f98a8:	6813      	ldr	r3, [r2, #0]
 23f98aa:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
    payloadBuffer[1][sampleIndex] = currentADC;
 23f98ae:	f103 0450 	add.w	r4, r3, #80	; 0x50
    sampleIndex++;
 23f98b2:	3301      	adds	r3, #1
    if(sampleIndex == NUM_SAMPLES)  //we are done sampling for this event
 23f98b4:	2b50      	cmp	r3, #80	; 0x50
    payloadBuffer[1][sampleIndex] = currentADC;
 23f98b6:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
    sampleIndex++;
 23f98ba:	6013      	str	r3, [r2, #0]
    if(sampleIndex == NUM_SAMPLES)  //we are done sampling for this event
 23f98bc:	d10b      	bne.n	23f98d6 <_Z10sampleDatav+0x4e>
    {
        sendData = true;
 23f98be:	2101      	movs	r1, #1
 23f98c0:	4b0b      	ldr	r3, [pc, #44]	; (23f98f0 <_Z10sampleDatav+0x68>)
        sampleIndex = 0;
        sample.stop();  
 23f98c2:	480c      	ldr	r0, [pc, #48]	; (23f98f4 <_Z10sampleDatav+0x6c>)
        sendData = true;
 23f98c4:	7019      	strb	r1, [r3, #0]
        sampleIndex = 0;
 23f98c6:	2300      	movs	r3, #0
 23f98c8:	6013      	str	r3, [r2, #0]
        sample.stop();  
 23f98ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    }
}
 23f98ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        sample.stop();  
 23f98d2:	f7ff bfcb 	b.w	23f986c <_ZN5Timer4stopEj.isra.0>
}
 23f98d6:	bd10      	pop	{r4, pc}
 23f98d8:	1007a5f0 	.word	0x1007a5f0
 23f98dc:	1007ae48 	.word	0x1007ae48
 23f98e0:	1007a5e4 	.word	0x1007a5e4
 23f98e4:	1007aa74 	.word	0x1007aa74
 23f98e8:	1007ad48 	.word	0x1007ad48
 23f98ec:	1007aa9c 	.word	0x1007aa9c
 23f98f0:	1007ad5c 	.word	0x1007ad5c
 23f98f4:	1007ad2c 	.word	0x1007ad2c

023f98f8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f98f8:	b510      	push	{r4, lr}
 23f98fa:	4604      	mov	r4, r0
 23f98fc:	4b09      	ldr	r3, [pc, #36]	; (23f9924 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f98fe:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f9900:	f003 fc30 	bl	23fd164 <_ZN5spark10LogManager8instanceEv>
 23f9904:	4621      	mov	r1, r4
 23f9906:	f003 fe67 	bl	23fd5d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f990a:	f004 fdb7 	bl	23fe47c <_Z16_fetch_usbserialv>
 23f990e:	f004 fda9 	bl	23fe464 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f9912:	4620      	mov	r0, r4
 23f9914:	4b04      	ldr	r3, [pc, #16]	; (23f9928 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f9916:	f840 3b04 	str.w	r3, [r0], #4
 23f991a:	f003 fcf9 	bl	23fd310 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f991e:	4620      	mov	r0, r4
 23f9920:	bd10      	pop	{r4, pc}
 23f9922:	bf00      	nop
 23f9924:	023fedd8 	.word	0x023fedd8
 23f9928:	023fedc0 	.word	0x023fedc0

023f992c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f992c:	b510      	push	{r4, lr}
 23f992e:	4604      	mov	r4, r0
    }
 23f9930:	f7ff ffe2 	bl	23f98f8 <_ZN5spark16SerialLogHandlerD1Ev>
 23f9934:	4620      	mov	r0, r4
 23f9936:	2124      	movs	r1, #36	; 0x24
 23f9938:	f7ff ff51 	bl	23f97de <_ZdlPvj>
 23f993c:	4620      	mov	r0, r4
 23f993e:	bd10      	pop	{r4, pc}

023f9940 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f9940:	b510      	push	{r4, lr}
      if (_M_manager)
 23f9942:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f9944:	4604      	mov	r4, r0
      if (_M_manager)
 23f9946:	b113      	cbz	r3, 23f994e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f9948:	2203      	movs	r2, #3
 23f994a:	4601      	mov	r1, r0
 23f994c:	4798      	blx	r3
    }
 23f994e:	4620      	mov	r0, r4
 23f9950:	bd10      	pop	{r4, pc}
	...

023f9954 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 23f9954:	b538      	push	{r3, r4, r5, lr}
 23f9956:	4b0f      	ldr	r3, [pc, #60]	; (23f9994 <_ZN5TimerD1Ev+0x40>)
 23f9958:	4604      	mov	r4, r0
 23f995a:	6003      	str	r3, [r0, #0]
        if (handle) {
 23f995c:	6883      	ldr	r3, [r0, #8]
 23f995e:	b19b      	cbz	r3, 23f9988 <_ZN5TimerD1Ev+0x34>
            stop();
 23f9960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23f9964:	f7ff ff82 	bl	23f986c <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
 23f9968:	2100      	movs	r1, #0
 23f996a:	68a0      	ldr	r0, [r4, #8]
 23f996c:	f001 ff46 	bl	23fb7fc <os_timer_set_id>
            while (running) {
 23f9970:	7923      	ldrb	r3, [r4, #4]
 23f9972:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 23f9976:	b113      	cbz	r3, 23f997e <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
 23f9978:	f001 feb4 	bl	23fb6e4 <os_thread_yield>
            while (running) {
 23f997c:	e7f8      	b.n	23f9970 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
 23f997e:	4629      	mov	r1, r5
 23f9980:	68a0      	ldr	r0, [r4, #8]
 23f9982:	f001 fed9 	bl	23fb738 <os_timer_destroy>
            handle = nullptr;
 23f9986:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 23f9988:	f104 000c 	add.w	r0, r4, #12
 23f998c:	f7ff ffd8 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
    }
 23f9990:	4620      	mov	r0, r4
 23f9992:	bd38      	pop	{r3, r4, r5, pc}
 23f9994:	023fedac 	.word	0x023fedac

023f9998 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 23f9998:	b510      	push	{r4, lr}
 23f999a:	4604      	mov	r4, r0
    }
 23f999c:	f7ff ffda 	bl	23f9954 <_ZN5TimerD1Ev>
 23f99a0:	4620      	mov	r0, r4
 23f99a2:	211c      	movs	r1, #28
 23f99a4:	f7ff ff1b 	bl	23f97de <_ZdlPvj>
 23f99a8:	4620      	mov	r0, r4
 23f99aa:	bd10      	pop	{r4, pc}

023f99ac <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23f99ac:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f99ae:	f04f 0c20 	mov.w	ip, #32
 23f99b2:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23f99b4:	b500      	push	{lr}
 23f99b6:	b08c      	sub	sp, #48	; 0x30
 23f99b8:	aa0d      	add	r2, sp, #52	; 0x34
 23f99ba:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f99be:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f99c2:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f99c6:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f99c8:	6801      	ldr	r1, [r0, #0]
 23f99ca:	aa04      	add	r2, sp, #16
 23f99cc:	201e      	movs	r0, #30
 23f99ce:	f002 f9ed 	bl	23fbdac <log_message_v>
}
 23f99d2:	b00c      	add	sp, #48	; 0x30
 23f99d4:	f85d eb04 	ldr.w	lr, [sp], #4
 23f99d8:	b003      	add	sp, #12
 23f99da:	4770      	bx	lr

023f99dc <_Z7setGainv>:
{
 23f99dc:	b510      	push	{r4, lr}
    Wire.beginTransmission(0x2f);
 23f99de:	f004 feed 	bl	23fe7bc <_Z19__fetch_global_Wirev>
 23f99e2:	212f      	movs	r1, #47	; 0x2f
 23f99e4:	f002 ff92 	bl	23fc90c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(0x00);
 23f99e8:	f004 fee8 	bl	23fe7bc <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23f99ec:	6803      	ldr	r3, [r0, #0]
 23f99ee:	2100      	movs	r1, #0
 23f99f0:	689b      	ldr	r3, [r3, #8]
 23f99f2:	4798      	blx	r3
    Wire.write(GAIN_VALUE);
 23f99f4:	f004 fee2 	bl	23fe7bc <_Z19__fetch_global_Wirev>
 23f99f8:	6803      	ldr	r3, [r0, #0]
 23f99fa:	21d4      	movs	r1, #212	; 0xd4
 23f99fc:	689b      	ldr	r3, [r3, #8]
 23f99fe:	4798      	blx	r3
    Wire.endTransmission();
 23f9a00:	f004 fedc 	bl	23fe7bc <_Z19__fetch_global_Wirev>
 23f9a04:	f002 ff89 	bl	23fc91a <_ZN7TwoWire15endTransmissionEv>
    delay(5);
 23f9a08:	2005      	movs	r0, #5
 23f9a0a:	f002 fbc7 	bl	23fc19c <delay>
    Wire.requestFrom(0x2f,1);
 23f9a0e:	f004 fed5 	bl	23fe7bc <_Z19__fetch_global_Wirev>
 23f9a12:	2201      	movs	r2, #1
 23f9a14:	212f      	movs	r1, #47	; 0x2f
 23f9a16:	f002 ff72 	bl	23fc8fe <_ZN7TwoWire11requestFromEhj>
    gainRet = Wire.read();
 23f9a1a:	f004 fecf 	bl	23fe7bc <_Z19__fetch_global_Wirev>
 23f9a1e:	6803      	ldr	r3, [r0, #0]
 23f9a20:	695b      	ldr	r3, [r3, #20]
 23f9a22:	4798      	blx	r3
 23f9a24:	4604      	mov	r4, r0
    Wire.endTransmission(); 
 23f9a26:	f004 fec9 	bl	23fe7bc <_Z19__fetch_global_Wirev>
 23f9a2a:	f002 ff76 	bl	23fc91a <_ZN7TwoWire15endTransmissionEv>
    if(gainRet == GAIN_VALUE)
 23f9a2e:	b2e2      	uxtb	r2, r4
 23f9a30:	2ad4      	cmp	r2, #212	; 0xd4
 23f9a32:	d104      	bne.n	23f9a3e <_Z7setGainv+0x62>
        Log.info("SUCCESS SETTING GAIN: %d", gainRet);
 23f9a34:	4904      	ldr	r1, [pc, #16]	; (23f9a48 <_Z7setGainv+0x6c>)
 23f9a36:	4805      	ldr	r0, [pc, #20]	; (23f9a4c <_Z7setGainv+0x70>)
 23f9a38:	f7ff ffb8 	bl	23f99ac <_ZNK5spark6Logger4infoEPKcz>
}
 23f9a3c:	bd10      	pop	{r4, pc}
        Log.info("FAILED TO SET GAIN");
 23f9a3e:	4904      	ldr	r1, [pc, #16]	; (23f9a50 <_Z7setGainv+0x74>)
 23f9a40:	4802      	ldr	r0, [pc, #8]	; (23f9a4c <_Z7setGainv+0x70>)
 23f9a42:	f7ff ffb3 	bl	23f99ac <_ZNK5spark6Logger4infoEPKcz>
}
 23f9a46:	e7f9      	b.n	23f9a3c <_Z7setGainv+0x60>
 23f9a48:	023fed45 	.word	0x023fed45
 23f9a4c:	1007ae70 	.word	0x1007ae70
 23f9a50:	023fed5e 	.word	0x023fed5e

023f9a54 <setup>:

void setup() {
 23f9a54:	b508      	push	{r3, lr}
    pinMode(redLED, OUTPUT);
 23f9a56:	4b0d      	ldr	r3, [pc, #52]	; (23f9a8c <setup+0x38>)
 23f9a58:	2101      	movs	r1, #1
 23f9a5a:	8818      	ldrh	r0, [r3, #0]
 23f9a5c:	f004 fe56 	bl	23fe70c <pinMode>
    Serial.begin(9600);
 23f9a60:	f004 fd0c 	bl	23fe47c <_Z16_fetch_usbserialv>
 23f9a64:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f9a68:	f004 fcf8 	bl	23fe45c <_ZN9USBSerial5beginEl>
    Log.info("OLED FeatherWing test");
 23f9a6c:	4908      	ldr	r1, [pc, #32]	; (23f9a90 <setup+0x3c>)
 23f9a6e:	4809      	ldr	r0, [pc, #36]	; (23f9a94 <setup+0x40>)
 23f9a70:	f7ff ff9c 	bl	23f99ac <_ZNK5spark6Logger4infoEPKcz>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 23f9a74:	f002 fa34 	bl	23fbee0 <spark_cloud_flag_connect>
    Particle.connect();
    ui.begin();
 23f9a78:	4807      	ldr	r0, [pc, #28]	; (23f9a98 <setup+0x44>)
 23f9a7a:	f000 fa6f 	bl	23f9f5c <_ZN9UIDisplay5beginEv>
    delay(5);
 23f9a7e:	2005      	movs	r0, #5
 23f9a80:	f002 fb8c 	bl	23fc19c <delay>
    setGain();
    //sample.start();
}
 23f9a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setGain();
 23f9a88:	f7ff bfa8 	b.w	23f99dc <_Z7setGainv>
 23f9a8c:	1007a5ec 	.word	0x1007a5ec
 23f9a90:	023fed71 	.word	0x023fed71
 23f9a94:	1007ae70 	.word	0x1007ae70
 23f9a98:	1007ad60 	.word	0x1007ad60

023f9a9c <_Z7tx_data6String>:

bool tx_data(String data_in) {
 23f9a9c:	b530      	push	{r4, r5, lr}
 23f9a9e:	4b20      	ldr	r3, [pc, #128]	; (23f9b20 <_Z7tx_data6String+0x84>)
 23f9aa0:	b085      	sub	sp, #20
 23f9aa2:	781b      	ldrb	r3, [r3, #0]
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23f9aa4:	6802      	ldr	r2, [r0, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23f9aa6:	491f      	ldr	r1, [pc, #124]	; (23f9b24 <_Z7tx_data6String+0x88>)
 23f9aa8:	f88d 3000 	strb.w	r3, [sp]
 23f9aac:	a802      	add	r0, sp, #8
 23f9aae:	233c      	movs	r3, #60	; 0x3c
 23f9ab0:	f002 fd00 	bl	23fc4b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 23f9ab4:	2000      	movs	r0, #0
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23f9ab6:	9c02      	ldr	r4, [sp, #8]
 23f9ab8:	f002 f9cc 	bl	23fbe54 <application_thread_current>
 23f9abc:	1c65      	adds	r5, r4, #1
        if (ContextT::isApplicationThreadCurrent()) {
 23f9abe:	b128      	cbz	r0, 23f9acc <_Z7tx_data6String+0x30>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 23f9ac0:	782b      	ldrb	r3, [r5, #0]
 23f9ac2:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23f9ac4:	b913      	cbnz	r3, 23f9acc <_Z7tx_data6String+0x30>
        spark_process();
 23f9ac6:	f002 f9fd 	bl	23fbec4 <spark_process>
    }
 23f9aca:	e7f9      	b.n	23f9ac0 <_Z7tx_data6String+0x24>
 23f9acc:	e8d5 3f8f 	ldab	r3, [r5]
 23f9ad0:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23f9ad2:	b9ab      	cbnz	r3, 23f9b00 <_Z7tx_data6String+0x64>
        return std::move(defaultValue);
 23f9ad4:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
 23f9ad6:	9c03      	ldr	r4, [sp, #12]
 23f9ad8:	b17c      	cbz	r4, 23f9afa <_Z7tx_data6String+0x5e>
      if (--_M_use_count == 0)
 23f9ada:	6863      	ldr	r3, [r4, #4]
 23f9adc:	3b01      	subs	r3, #1
 23f9ade:	6063      	str	r3, [r4, #4]
 23f9ae0:	b95b      	cbnz	r3, 23f9afa <_Z7tx_data6String+0x5e>
          _M_dispose();
 23f9ae2:	6823      	ldr	r3, [r4, #0]
 23f9ae4:	4620      	mov	r0, r4
 23f9ae6:	689b      	ldr	r3, [r3, #8]
 23f9ae8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f9aea:	68a3      	ldr	r3, [r4, #8]
 23f9aec:	3b01      	subs	r3, #1
 23f9aee:	60a3      	str	r3, [r4, #8]
 23f9af0:	b91b      	cbnz	r3, 23f9afa <_Z7tx_data6String+0x5e>
            _M_destroy();
 23f9af2:	6823      	ldr	r3, [r4, #0]
 23f9af4:	4620      	mov	r0, r4
 23f9af6:	68db      	ldr	r3, [r3, #12]
 23f9af8:	4798      	blx	r3
    bool retval = false;
    retval = Particle.publish("edge/ingest/lamp", data_in, PRIVATE);  //manually set appliance label here
    return retval;
}
 23f9afa:	4628      	mov	r0, r5
 23f9afc:	b005      	add	sp, #20
 23f9afe:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
 23f9b00:	2000      	movs	r0, #0
 23f9b02:	f002 f9a7 	bl	23fbe54 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f9b06:	b128      	cbz	r0, 23f9b14 <_Z7tx_data6String+0x78>
 23f9b08:	782b      	ldrb	r3, [r5, #0]
 23f9b0a:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23f9b0c:	b913      	cbnz	r3, 23f9b14 <_Z7tx_data6String+0x78>
        spark_process();
 23f9b0e:	f002 f9d9 	bl	23fbec4 <spark_process>
    }
 23f9b12:	e7f9      	b.n	23f9b08 <_Z7tx_data6String+0x6c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23f9b14:	7823      	ldrb	r3, [r4, #0]
 23f9b16:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23f9b18:	2b01      	cmp	r3, #1
 23f9b1a:	d1db      	bne.n	23f9ad4 <_Z7tx_data6String+0x38>
            return result_;
 23f9b1c:	7b25      	ldrb	r5, [r4, #12]
 23f9b1e:	e7da      	b.n	23f9ad6 <_Z7tx_data6String+0x3a>
 23f9b20:	1007a66c 	.word	0x1007a66c
 23f9b24:	023fed87 	.word	0x023fed87

023f9b28 <loop>:

void loop() {
 23f9b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 
    static unsigned long now = millis();
 23f9b2a:	4d42      	ldr	r5, [pc, #264]	; (23f9c34 <loop+0x10c>)
void loop() {
 23f9b2c:	b08f      	sub	sp, #60	; 0x3c
    static unsigned long now = millis();
 23f9b2e:	e8d5 3f8f 	ldab	r3, [r5]
 23f9b32:	f013 0f01 	tst.w	r3, #1
 23f9b36:	4c40      	ldr	r4, [pc, #256]	; (23f9c38 <loop+0x110>)
 23f9b38:	d109      	bne.n	23f9b4e <loop+0x26>
 23f9b3a:	4628      	mov	r0, r5
 23f9b3c:	f7ff fe5e 	bl	23f97fc <__cxa_guard_acquire>
 23f9b40:	b128      	cbz	r0, 23f9b4e <loop+0x26>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f9b42:	f001 fe85 	bl	23fb850 <HAL_Timer_Get_Milli_Seconds>
 23f9b46:	6020      	str	r0, [r4, #0]
 23f9b48:	4628      	mov	r0, r5
 23f9b4a:	f7ff fe5c 	bl	23f9806 <__cxa_guard_release>
    static bool state = false;

    digitalWrite(redLED, LOW);
 23f9b4e:	4d3b      	ldr	r5, [pc, #236]	; (23f9c3c <loop+0x114>)

    if(firstSample)
 23f9b50:	4e3b      	ldr	r6, [pc, #236]	; (23f9c40 <loop+0x118>)
    digitalWrite(redLED, LOW);
 23f9b52:	2100      	movs	r1, #0
 23f9b54:	8828      	ldrh	r0, [r5, #0]
 23f9b56:	f004 fdea 	bl	23fe72e <digitalWrite>
    if(firstSample)
 23f9b5a:	7833      	ldrb	r3, [r6, #0]
 23f9b5c:	b14b      	cbz	r3, 23f9b72 <loop+0x4a>
    {
        while(millis() - now < 20000); //wait until 20s have passed to allow time for cloud connect
 23f9b5e:	f644 671f 	movw	r7, #19999	; 0x4e1f
 23f9b62:	f001 fe75 	bl	23fb850 <HAL_Timer_Get_Milli_Seconds>
 23f9b66:	6823      	ldr	r3, [r4, #0]
 23f9b68:	1ac0      	subs	r0, r0, r3
 23f9b6a:	42b8      	cmp	r0, r7
 23f9b6c:	d9f9      	bls.n	23f9b62 <loop+0x3a>
        firstSample = false;
 23f9b6e:	2300      	movs	r3, #0
 23f9b70:	7033      	strb	r3, [r6, #0]
 23f9b72:	f001 fe6d 	bl	23fb850 <HAL_Timer_Get_Milli_Seconds>
    }

    if (millis() - now > SAMPLE_PERIOD) {
 23f9b76:	6823      	ldr	r3, [r4, #0]
 23f9b78:	1ac0      	subs	r0, r0, r3
 23f9b7a:	f241 3388 	movw	r3, #5000	; 0x1388
 23f9b7e:	4298      	cmp	r0, r3
 23f9b80:	d912      	bls.n	23f9ba8 <loop+0x80>
        stop(fromISR);
 23f9b82:	4e30      	ldr	r6, [pc, #192]	; (23f9c44 <loop+0x11c>)
 23f9b84:	2100      	movs	r1, #0
 23f9b86:	4630      	mov	r0, r6
 23f9b88:	f7ff fe70 	bl	23f986c <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 23f9b8c:	68b0      	ldr	r0, [r6, #8]
 23f9b8e:	b140      	cbz	r0, 23f9ba2 <loop+0x7a>
 23f9b90:	2300      	movs	r3, #0
 23f9b92:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23f9b96:	4619      	mov	r1, r3
 23f9b98:	e9cd 2300 	strd	r2, r3, [sp]
 23f9b9c:	461a      	mov	r2, r3
 23f9b9e:	f001 fde7 	bl	23fb770 <os_timer_change>
 23f9ba2:	f001 fe55 	bl	23fb850 <HAL_Timer_Get_Milli_Seconds>
        //state = !state;
        //ui.setBlenderState(state ? ElementState::ON : ElementState::OFF);
        //Log.info("Change Blender state: %s", state ? "ON" : "OFF");

        sample.start();
        now = millis();
 23f9ba6:	6020      	str	r0, [r4, #0]
    }

    if(sendData) {
 23f9ba8:	4e27      	ldr	r6, [pc, #156]	; (23f9c48 <loop+0x120>)
 23f9baa:	7833      	ldrb	r3, [r6, #0]
 23f9bac:	2b00      	cmp	r3, #0
 23f9bae:	d03e      	beq.n	23f9c2e <loop+0x106>
        digitalWrite(redLED, HIGH);
 23f9bb0:	8828      	ldrh	r0, [r5, #0]
 23f9bb2:	2101      	movs	r1, #1
 23f9bb4:	f004 fdbb 	bl	23fe72e <digitalWrite>
        memset(buf, 0, sizeof(buf));
 23f9bb8:	4b24      	ldr	r3, [pc, #144]	; (23f9c4c <loop+0x124>)
 23f9bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23f9bbe:	4618      	mov	r0, r3
 23f9bc0:	2100      	movs	r1, #0
 23f9bc2:	f004 ff1c 	bl	23fe9fe <memset>
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 23f9bc6:	2400      	movs	r4, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 23f9bc8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23f9bcc:	4a20      	ldr	r2, [pc, #128]	; (23f9c50 <loop+0x128>)
 23f9bce:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 23f9bd2:	4d20      	ldr	r5, [pc, #128]	; (23f9c54 <loop+0x12c>)
        state_(BEGIN) {
 23f9bd4:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        n_(0) {
 23f9bd8:	9209      	str	r2, [sp, #36]	; 0x24
 23f9bda:	900b      	str	r0, [sp, #44]	; 0x2c
        JSONBufferWriter writer(buf, sizeof(buf) - 1);

        for(int i=0; i<NUM_SAMPLES; i++)
        {
            writer.beginArray();
 23f9bdc:	a809      	add	r0, sp, #36	; 0x24
 23f9bde:	f003 f87f 	bl	23fcce0 <_ZN5spark10JSONWriter10beginArrayEv>
            writer.value(payloadBuffer[0][i]);
 23f9be2:	f855 1b04 	ldr.w	r1, [r5], #4
 23f9be6:	a809      	add	r0, sp, #36	; 0x24
 23f9be8:	f003 f892 	bl	23fcd10 <_ZN5spark10JSONWriter5valueEi>
            writer.value(payloadBuffer[1][i]);
 23f9bec:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 23f9bf0:	a809      	add	r0, sp, #36	; 0x24
 23f9bf2:	f003 f88d 	bl	23fcd10 <_ZN5spark10JSONWriter5valueEi>
        for(int i=0; i<NUM_SAMPLES; i++)
 23f9bf6:	3401      	adds	r4, #1
            writer.endArray();
 23f9bf8:	a809      	add	r0, sp, #36	; 0x24
 23f9bfa:	f003 f852 	bl	23fcca2 <_ZN5spark10JSONWriter8endArrayEv>
        for(int i=0; i<NUM_SAMPLES; i++)
 23f9bfe:	2c50      	cmp	r4, #80	; 0x50
 23f9c00:	d1ec      	bne.n	23f9bdc <loop+0xb4>
        }

        Log.info(buf);
 23f9c02:	4912      	ldr	r1, [pc, #72]	; (23f9c4c <loop+0x124>)
 23f9c04:	4814      	ldr	r0, [pc, #80]	; (23f9c58 <loop+0x130>)
 23f9c06:	f7ff fed1 	bl	23f99ac <_ZNK5spark6Logger4infoEPKcz>
        bool result = tx_data(buf);
 23f9c0a:	4910      	ldr	r1, [pc, #64]	; (23f9c4c <loop+0x124>)
 23f9c0c:	a805      	add	r0, sp, #20
 23f9c0e:	f004 faff 	bl	23fe210 <_ZN6StringC1EPK19__FlashStringHelper>
 23f9c12:	a805      	add	r0, sp, #20
 23f9c14:	f7ff ff42 	bl	23f9a9c <_Z7tx_data6String>
 23f9c18:	9003      	str	r0, [sp, #12]
 23f9c1a:	a805      	add	r0, sp, #20
 23f9c1c:	f004 faad 	bl	23fe17a <_ZN6StringD1Ev>
        Log.info("result: %d" ,result);
 23f9c20:	9a03      	ldr	r2, [sp, #12]
 23f9c22:	490e      	ldr	r1, [pc, #56]	; (23f9c5c <loop+0x134>)
 23f9c24:	480c      	ldr	r0, [pc, #48]	; (23f9c58 <loop+0x130>)
 23f9c26:	f7ff fec1 	bl	23f99ac <_ZNK5spark6Logger4infoEPKcz>
    
        sendData = false;
 23f9c2a:	2300      	movs	r3, #0
 23f9c2c:	7033      	strb	r3, [r6, #0]
    }
}
 23f9c2e:	b00f      	add	sp, #60	; 0x3c
 23f9c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f9c32:	bf00      	nop
 23f9c34:	1007a668 	.word	0x1007a668
 23f9c38:	1007a670 	.word	0x1007a670
 23f9c3c:	1007a5ec 	.word	0x1007a5ec
 23f9c40:	1007a5e8 	.word	0x1007a5e8
 23f9c44:	1007ad2c 	.word	0x1007ad2c
 23f9c48:	1007ad5c 	.word	0x1007ad5c
 23f9c4c:	1007a674 	.word	0x1007a674
 23f9c50:	023ffc60 	.word	0x023ffc60
 23f9c54:	1007aa9c 	.word	0x1007aa9c
 23f9c58:	1007ae70 	.word	0x1007ae70
 23f9c5c:	023fed98 	.word	0x023fed98

023f9c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f9c60:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f9c62:	2614      	movs	r6, #20
 23f9c64:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f9c68:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f9c6a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f9c6e:	42ae      	cmp	r6, r5
 23f9c70:	d004      	beq.n	23f9c7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f9c72:	4628      	mov	r0, r5
 23f9c74:	f004 fa81 	bl	23fe17a <_ZN6StringD1Ev>
 23f9c78:	3514      	adds	r5, #20
 23f9c7a:	e7f8      	b.n	23f9c6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f9c7c:	6820      	ldr	r0, [r4, #0]
 23f9c7e:	f002 fa1d 	bl	23fc0bc <free>
    AllocatorT::free(data_);
}
 23f9c82:	4620      	mov	r0, r4
 23f9c84:	bd70      	pop	{r4, r5, r6, pc}

023f9c86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f9c86:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f9c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9c8a:	4604      	mov	r4, r0
 23f9c8c:	460d      	mov	r5, r1
 23f9c8e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f9c90:	d916      	bls.n	23f9cc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f9c92:	4290      	cmp	r0, r2
 23f9c94:	d215      	bcs.n	23f9cc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f9c96:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f9c9a:	1a75      	subs	r5, r6, r1
 23f9c9c:	f1a1 0714 	sub.w	r7, r1, #20
 23f9ca0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f9ca2:	42b7      	cmp	r7, r6
 23f9ca4:	d01c      	beq.n	23f9ce0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f9ca6:	b12c      	cbz	r4, 23f9cb4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f9ca8:	4631      	mov	r1, r6
 23f9caa:	4620      	mov	r0, r4
 23f9cac:	f004 fae2 	bl	23fe274 <_ZN6StringC1EOS_>
 23f9cb0:	7c33      	ldrb	r3, [r6, #16]
 23f9cb2:	7423      	strb	r3, [r4, #16]
 23f9cb4:	4630      	mov	r0, r6
 23f9cb6:	f004 fa60 	bl	23fe17a <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f9cba:	3e14      	subs	r6, #20
 23f9cbc:	3c14      	subs	r4, #20
 23f9cbe:	e7f0      	b.n	23f9ca2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f9cc0:	d00e      	beq.n	23f9ce0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f9cc2:	42b5      	cmp	r5, r6
 23f9cc4:	d00c      	beq.n	23f9ce0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f9cc6:	b12c      	cbz	r4, 23f9cd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f9cc8:	4629      	mov	r1, r5
 23f9cca:	4620      	mov	r0, r4
 23f9ccc:	f004 fad2 	bl	23fe274 <_ZN6StringC1EOS_>
 23f9cd0:	7c2b      	ldrb	r3, [r5, #16]
 23f9cd2:	7423      	strb	r3, [r4, #16]
 23f9cd4:	4628      	mov	r0, r5
 23f9cd6:	f004 fa50 	bl	23fe17a <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f9cda:	3514      	adds	r5, #20
 23f9cdc:	3414      	adds	r4, #20
 23f9cde:	e7f0      	b.n	23f9cc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f9ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f9ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f9ce2:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f9ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f9ce8:	e9c0 3300 	strd	r3, r3, [r0]
 23f9cec:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f9cee:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f9cf0:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f9cf2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f9cf4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f9cf6:	dd24      	ble.n	23f9d42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f9cf8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f9cfc:	fb08 f007 	mul.w	r0, r8, r7
 23f9d00:	f002 f9ce 	bl	23fc0a0 <malloc>
            if (!d) {
 23f9d04:	4605      	mov	r5, r0
 23f9d06:	b1e0      	cbz	r0, 23f9d42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f9d08:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f9d0c:	fb08 1202 	mla	r2, r8, r2, r1
 23f9d10:	f7ff ffb9 	bl	23f9c86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f9d14:	6820      	ldr	r0, [r4, #0]
 23f9d16:	f002 f9d1 	bl	23fc0bc <free>
        data_ = d;
 23f9d1a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f9d1c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f9d1e:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f9d22:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f9d26:	45b8      	cmp	r8, r7
 23f9d28:	d009      	beq.n	23f9d3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f9d2a:	4639      	mov	r1, r7
 23f9d2c:	4628      	mov	r0, r5
 23f9d2e:	f004 fabb 	bl	23fe2a8 <_ZN6StringC1ERKS_>
 23f9d32:	7c3b      	ldrb	r3, [r7, #16]
 23f9d34:	3514      	adds	r5, #20
 23f9d36:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f9d3a:	3714      	adds	r7, #20
 23f9d3c:	e7f3      	b.n	23f9d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f9d3e:	6873      	ldr	r3, [r6, #4]
 23f9d40:	6063      	str	r3, [r4, #4]
}
 23f9d42:	4620      	mov	r0, r4
 23f9d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f9d48 <_GLOBAL__sub_I_logHandler>:
 23f9d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f9d4c:	f04f 0801 	mov.w	r8, #1
        capacity_(0) {
 23f9d50:	2500      	movs	r5, #0
 23f9d52:	4b3c      	ldr	r3, [pc, #240]	; (23f9e44 <_GLOBAL__sub_I_logHandler+0xfc>)
 23f9d54:	b090      	sub	sp, #64	; 0x40
 23f9d56:	f883 8000 	strb.w	r8, [r3]
SYSTEM_THREAD(ENABLED);
 23f9d5a:	2100      	movs	r1, #0
 23f9d5c:	4640      	mov	r0, r8
 23f9d5e:	f002 f86b 	bl	23fbe38 <system_thread_set_state>
 23f9d62:	e9cd 5503 	strd	r5, r5, [sp, #12]
 23f9d66:	9505      	str	r5, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
 23f9d68:	f004 fb88 	bl	23fe47c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f9d6c:	4f36      	ldr	r7, [pc, #216]	; (23f9e48 <_GLOBAL__sub_I_logHandler+0x100>)
 23f9d6e:	4681      	mov	r9, r0
 23f9d70:	46ba      	mov	sl, r7
        stream_(&stream) {
 23f9d72:	ae09      	add	r6, sp, #36	; 0x24
 23f9d74:	a903      	add	r1, sp, #12
 23f9d76:	a806      	add	r0, sp, #24
 23f9d78:	f7ff ffb3 	bl	23f9ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f9d7c:	a906      	add	r1, sp, #24
 23f9d7e:	4630      	mov	r0, r6
 23f9d80:	f7ff ffaf 	bl	23f9ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f9d84:	4b31      	ldr	r3, [pc, #196]	; (23f9e4c <_GLOBAL__sub_I_logHandler+0x104>)
 23f9d86:	ac0c      	add	r4, sp, #48	; 0x30
 23f9d88:	f84a 3b04 	str.w	r3, [sl], #4
 23f9d8c:	4631      	mov	r1, r6
 23f9d8e:	4620      	mov	r0, r4
 23f9d90:	f7ff ffa7 	bl	23f9ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f9d94:	4622      	mov	r2, r4
 23f9d96:	211e      	movs	r1, #30
 23f9d98:	4650      	mov	r0, sl
 23f9d9a:	f003 fcff 	bl	23fd79c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f9d9e:	4620      	mov	r0, r4
 23f9da0:	f7ff ff5e 	bl	23f9c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f9da4:	4630      	mov	r0, r6
 23f9da6:	f7ff ff5b 	bl	23f9c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f9daa:	4b29      	ldr	r3, [pc, #164]	; (23f9e50 <_GLOBAL__sub_I_logHandler+0x108>)
 23f9dac:	a806      	add	r0, sp, #24
 23f9dae:	603b      	str	r3, [r7, #0]
 23f9db0:	f8c7 9020 	str.w	r9, [r7, #32]
 23f9db4:	f7ff ff54 	bl	23f9c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f9db8:	4b26      	ldr	r3, [pc, #152]	; (23f9e54 <_GLOBAL__sub_I_logHandler+0x10c>)
 23f9dba:	603b      	str	r3, [r7, #0]
        Serial.begin();
 23f9dbc:	f004 fb5e 	bl	23fe47c <_Z16_fetch_usbserialv>
 23f9dc0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f9dc4:	f004 fb4a 	bl	23fe45c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f9dc8:	f003 f9cc 	bl	23fd164 <_ZN5spark10LogManager8instanceEv>
 23f9dcc:	4639      	mov	r1, r7
 23f9dce:	f003 fbbd 	bl	23fd54c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23f9dd2:	a803      	add	r0, sp, #12
 23f9dd4:	f7ff ff44 	bl	23f9c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
String payloadString;
 23f9dd8:	491f      	ldr	r1, [pc, #124]	; (23f9e58 <_GLOBAL__sub_I_logHandler+0x110>)
 23f9dda:	4820      	ldr	r0, [pc, #128]	; (23f9e5c <_GLOBAL__sub_I_logHandler+0x114>)
 23f9ddc:	f004 fa18 	bl	23fe210 <_ZN6StringC1EPK19__FlashStringHelper>
String sampleString;
 23f9de0:	491d      	ldr	r1, [pc, #116]	; (23f9e58 <_GLOBAL__sub_I_logHandler+0x110>)
 23f9de2:	481f      	ldr	r0, [pc, #124]	; (23f9e60 <_GLOBAL__sub_I_logHandler+0x118>)
 23f9de4:	f004 fa14 	bl	23fe210 <_ZN6StringC1EPK19__FlashStringHelper>
UIDisplay ui;
 23f9de8:	481e      	ldr	r0, [pc, #120]	; (23f9e64 <_GLOBAL__sub_I_logHandler+0x11c>)
 23f9dea:	f000 f861 	bl	23f9eb0 <_ZN9UIDisplayC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f9dee:	4b1e      	ldr	r3, [pc, #120]	; (23f9e68 <_GLOBAL__sub_I_logHandler+0x120>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 23f9df0:	4a1e      	ldr	r2, [pc, #120]	; (23f9e6c <_GLOBAL__sub_I_logHandler+0x124>)
 23f9df2:	930c      	str	r3, [sp, #48]	; 0x30
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9df4:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f9df8:	4b1d      	ldr	r3, [pc, #116]	; (23f9e70 <_GLOBAL__sub_I_logHandler+0x128>)
 23f9dfa:	e886 0003 	stmia.w	r6, {r0, r1}
 23f9dfe:	601a      	str	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f9e00:	f103 020c 	add.w	r2, r3, #12
 23f9e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 23f9e08:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f9e0c:	e896 0003 	ldmia.w	r6, {r0, r1}
 23f9e10:	e882 0003 	stmia.w	r2, {r0, r1}
 23f9e14:	4a17      	ldr	r2, [pc, #92]	; (23f9e74 <_GLOBAL__sub_I_logHandler+0x12c>)
 23f9e16:	711d      	strb	r5, [r3, #4]
 23f9e18:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f9e1a:	699a      	ldr	r2, [r3, #24]
 23f9e1c:	609d      	str	r5, [r3, #8]
 23f9e1e:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 23f9e20:	4a15      	ldr	r2, [pc, #84]	; (23f9e78 <_GLOBAL__sub_I_logHandler+0x130>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 23f9e22:	4641      	mov	r1, r8
 23f9e24:	619a      	str	r2, [r3, #24]
 23f9e26:	f103 0008 	add.w	r0, r3, #8
 23f9e2a:	4a14      	ldr	r2, [pc, #80]	; (23f9e7c <_GLOBAL__sub_I_logHandler+0x134>)
 23f9e2c:	e9cd 5500 	strd	r5, r5, [sp]
      __a = _GLIBCXX_MOVE(__b);
 23f9e30:	950e      	str	r5, [sp, #56]	; 0x38
 23f9e32:	f001 fc73 	bl	23fb71c <os_timer_create>
    class function<_Res(_ArgTypes...)>
 23f9e36:	4620      	mov	r0, r4
 23f9e38:	f7ff fd82 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
}
 23f9e3c:	b010      	add	sp, #64	; 0x40
 23f9e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f9e42:	bf00      	nop
 23f9e44:	1007a66c 	.word	0x1007a66c
 23f9e48:	1007aa78 	.word	0x1007aa78
 23f9e4c:	023fedc0 	.word	0x023fedc0
 23f9e50:	023ffd04 	.word	0x023ffd04
 23f9e54:	023fedd8 	.word	0x023fedd8
 23f9e58:	023ffcca 	.word	0x023ffcca
 23f9e5c:	1007ad1c 	.word	0x1007ad1c
 23f9e60:	1007ad4c 	.word	0x1007ad4c
 23f9e64:	1007ad60 	.word	0x1007ad60
 23f9e68:	023f9889 	.word	0x023f9889
 23f9e6c:	023fedac 	.word	0x023fedac
 23f9e70:	1007ad2c 	.word	0x1007ad2c
 23f9e74:	023f9855 	.word	0x023f9855
 23f9e78:	023f9869 	.word	0x023f9869
 23f9e7c:	023f981b 	.word	0x023f981b

023f9e80 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23f9e80:	b40e      	push	{r1, r2, r3}
    attr.flags = 0;
 23f9e82:	f04f 0c20 	mov.w	ip, #32
 23f9e86:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23f9e88:	b500      	push	{lr}
 23f9e8a:	b08c      	sub	sp, #48	; 0x30
 23f9e8c:	aa0d      	add	r2, sp, #52	; 0x34
 23f9e8e:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f9e92:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f9e96:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f9e9a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f9e9c:	6801      	ldr	r1, [r0, #0]
 23f9e9e:	aa04      	add	r2, sp, #16
 23f9ea0:	2032      	movs	r0, #50	; 0x32
 23f9ea2:	f001 ff83 	bl	23fbdac <log_message_v>
}
 23f9ea6:	b00c      	add	sp, #48	; 0x30
 23f9ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 23f9eac:	b003      	add	sp, #12
 23f9eae:	4770      	bx	lr

023f9eb0 <_ZN9UIDisplayC1Ev>:
#include "UIDisplay.h"
#include "Particle.h"
#include "icons.h"
#include "Org_01.h"

UIDisplay::UIDisplay() 
 23f9eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f9eb2:	4604      	mov	r4, r0
    : _display(64, 128, &Wire), 
 23f9eb4:	f004 fc82 	bl	23fe7bc <_Z19__fetch_global_Wirev>
      toasterElement(Bitmaps::toaster, 0, 0), 
      blenderElement(Bitmaps::blender, 0, 28), 
      fridgeElement(Bitmaps::fridge, 0, 56), 
      fanElement(Bitmaps::fan, 0, 84) {}
 23f9eb8:	4a15      	ldr	r2, [pc, #84]	; (23f9f10 <_ZN9UIDisplayC1Ev+0x60>)
 23f9eba:	4916      	ldr	r1, [pc, #88]	; (23f9f14 <_ZN9UIDisplayC1Ev+0x64>)
    : _display(64, 128, &Wire), 
 23f9ebc:	4603      	mov	r3, r0
      fanElement(Bitmaps::fan, 0, 84) {}
 23f9ebe:	e9cd 2101 	strd	r2, r1, [sp, #4]
 23f9ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f9ec6:	2140      	movs	r1, #64	; 0x40
 23f9ec8:	9200      	str	r2, [sp, #0]
 23f9eca:	4620      	mov	r0, r4
 23f9ecc:	2280      	movs	r2, #128	; 0x80
 23f9ece:	f001 fab5 	bl	23fb43c <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
 23f9ed2:	2300      	movs	r3, #0
 23f9ed4:	4910      	ldr	r1, [pc, #64]	; (23f9f18 <_ZN9UIDisplayC1Ev+0x68>)
 23f9ed6:	461a      	mov	r2, r3
 23f9ed8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 23f9edc:	f000 f864 	bl	23f9fa8 <_ZN9UIElementC1EPKhii>
 23f9ee0:	231c      	movs	r3, #28
 23f9ee2:	2200      	movs	r2, #0
 23f9ee4:	490d      	ldr	r1, [pc, #52]	; (23f9f1c <_ZN9UIDisplayC1Ev+0x6c>)
 23f9ee6:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 23f9eea:	f000 f85d 	bl	23f9fa8 <_ZN9UIElementC1EPKhii>
 23f9eee:	2338      	movs	r3, #56	; 0x38
 23f9ef0:	2200      	movs	r2, #0
 23f9ef2:	490b      	ldr	r1, [pc, #44]	; (23f9f20 <_ZN9UIDisplayC1Ev+0x70>)
 23f9ef4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 23f9ef8:	f000 f856 	bl	23f9fa8 <_ZN9UIElementC1EPKhii>
 23f9efc:	2354      	movs	r3, #84	; 0x54
 23f9efe:	2200      	movs	r2, #0
 23f9f00:	4908      	ldr	r1, [pc, #32]	; (23f9f24 <_ZN9UIDisplayC1Ev+0x74>)
 23f9f02:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 23f9f06:	f000 f84f 	bl	23f9fa8 <_ZN9UIElementC1EPKhii>
 23f9f0a:	4620      	mov	r0, r4
 23f9f0c:	b004      	add	sp, #16
 23f9f0e:	bd10      	pop	{r4, pc}
 23f9f10:	00061a80 	.word	0x00061a80
 23f9f14:	000186a0 	.word	0x000186a0
 23f9f18:	023feee6 	.word	0x023feee6
 23f9f1c:	023fee9e 	.word	0x023fee9e
 23f9f20:	023fee56 	.word	0x023fee56
 23f9f24:	023fee0e 	.word	0x023fee0e

023f9f28 <_ZN9UIDisplay7drawAllEv>:
    Log.info("OLED begun");
    _display.clearDisplay();
    drawAll();
}

void UIDisplay::drawAll() {
 23f9f28:	b510      	push	{r4, lr}
 23f9f2a:	4604      	mov	r4, r0
    toasterElement.draw(_display);
 23f9f2c:	4601      	mov	r1, r0
 23f9f2e:	3058      	adds	r0, #88	; 0x58
 23f9f30:	f000 f84c 	bl	23f9fcc <_ZN9UIElement4drawER15Adafruit_SH1107>
    blenderElement.draw(_display);
 23f9f34:	4621      	mov	r1, r4
 23f9f36:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 23f9f3a:	f000 f847 	bl	23f9fcc <_ZN9UIElement4drawER15Adafruit_SH1107>
    fridgeElement.draw(_display);
 23f9f3e:	4621      	mov	r1, r4
 23f9f40:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 23f9f44:	f000 f842 	bl	23f9fcc <_ZN9UIElement4drawER15Adafruit_SH1107>
    fanElement.draw(_display);
 23f9f48:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 23f9f4c:	4621      	mov	r1, r4
 23f9f4e:	f000 f83d 	bl	23f9fcc <_ZN9UIElement4drawER15Adafruit_SH1107>
    _display.display();
 23f9f52:	4620      	mov	r0, r4
}
 23f9f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _display.display();
 23f9f58:	f001 baf6 	b.w	23fb548 <_ZN15Adafruit_SH110X7displayEv>

023f9f5c <_ZN9UIDisplay5beginEv>:
void UIDisplay::begin() {
 23f9f5c:	b510      	push	{r4, lr}
    if(!_display.begin(0x3C, true)) {
 23f9f5e:	2201      	movs	r2, #1
 23f9f60:	213c      	movs	r1, #60	; 0x3c
void UIDisplay::begin() {
 23f9f62:	4604      	mov	r4, r0
    if(!_display.begin(0x3C, true)) {
 23f9f64:	f001 fa7e 	bl	23fb464 <_ZN15Adafruit_SH11075beginEhb>
 23f9f68:	b950      	cbnz	r0, 23f9f80 <_ZN9UIDisplay5beginEv+0x24>
        Log.error("Could not initialize OLED!");
 23f9f6a:	490b      	ldr	r1, [pc, #44]	; (23f9f98 <_ZN9UIDisplay5beginEv+0x3c>)
 23f9f6c:	480b      	ldr	r0, [pc, #44]	; (23f9f9c <_ZN9UIDisplay5beginEv+0x40>)
 23f9f6e:	f7ff ff87 	bl	23f9e80 <_ZNK5spark6Logger5errorEPKcz>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f9f72:	4c0b      	ldr	r4, [pc, #44]	; (23f9fa0 <_ZN9UIDisplay5beginEv+0x44>)
		return HAL_Timer_Get_Milli_Seconds();
 23f9f74:	f001 fc6c 	bl	23fb850 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 23f9f78:	6020      	str	r0, [r4, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
 23f9f7a:	f001 ffa3 	bl	23fbec4 <spark_process>
 23f9f7e:	e7f9      	b.n	23f9f74 <_ZN9UIDisplay5beginEv+0x18>
    Log.info("OLED begun");
 23f9f80:	4908      	ldr	r1, [pc, #32]	; (23f9fa4 <_ZN9UIDisplay5beginEv+0x48>)
 23f9f82:	4806      	ldr	r0, [pc, #24]	; (23f9f9c <_ZN9UIDisplay5beginEv+0x40>)
 23f9f84:	f7ff fd12 	bl	23f99ac <_ZNK5spark6Logger4infoEPKcz>
    _display.clearDisplay();
 23f9f88:	4620      	mov	r0, r4
 23f9f8a:	f001 f9b1 	bl	23fb2f0 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    drawAll();
 23f9f8e:	4620      	mov	r0, r4
}
 23f9f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    drawAll();
 23f9f94:	f7ff bfc8 	b.w	23f9f28 <_ZN9UIDisplay7drawAllEv>
 23f9f98:	023fede8 	.word	0x023fede8
 23f9f9c:	1007ae70 	.word	0x1007ae70
 23f9fa0:	1007aef0 	.word	0x1007aef0
 23f9fa4:	023fee03 	.word	0x023fee03

023f9fa8 <_ZN9UIElementC1EPKhii>:
#include "UIElement.h"
#include "Org_01.h"

UIElement::UIElement(const uint8_t *iconBitmap, int x, int y) 
    : icon(iconBitmap), posX(x), posY(y), state(OFF) {}
 23f9fa8:	e9c0 1200 	strd	r1, r2, [r0]
 23f9fac:	6083      	str	r3, [r0, #8]
 23f9fae:	2240      	movs	r2, #64	; 0x40
 23f9fb0:	2318      	movs	r3, #24
 23f9fb2:	2122      	movs	r1, #34	; 0x22
 23f9fb4:	e9c0 2303 	strd	r2, r3, [r0, #12]
 23f9fb8:	231b      	movs	r3, #27
 23f9fba:	e9c0 1305 	strd	r1, r3, [r0, #20]
 23f9fbe:	2311      	movs	r3, #17
 23f9fc0:	61c3      	str	r3, [r0, #28]
 23f9fc2:	2301      	movs	r3, #1
UIElement::UIElement(const uint8_t *iconBitmap, int x, int y) 
 23f9fc4:	b510      	push	{r4, lr}
    : icon(iconBitmap), posX(x), posY(y), state(OFF) {}
 23f9fc6:	f880 3020 	strb.w	r3, [r0, #32]
 23f9fca:	bd10      	pop	{r4, pc}

023f9fcc <_ZN9UIElement4drawER15Adafruit_SH1107>:

void UIElement::setState(ElementState newState) {
    state = newState;
}

void UIElement::draw(Adafruit_SH1107& display) {
 23f9fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9fce:	460d      	mov	r5, r1
 23f9fd0:	4604      	mov	r4, r0
    display.setFont(&Org_01);
 23f9fd2:	493d      	ldr	r1, [pc, #244]	; (23fa0c8 <_ZN9UIElement4drawER15Adafruit_SH1107+0xfc>)
 23f9fd4:	4628      	mov	r0, r5
void UIElement::draw(Adafruit_SH1107& display) {
 23f9fd6:	b085      	sub	sp, #20
    display.setFont(&Org_01);
 23f9fd8:	f001 f857 	bl	23fb08a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    display.setTextSize(2);
 23f9fdc:	2102      	movs	r1, #2
 23f9fde:	4628      	mov	r0, r5
 23f9fe0:	f001 f84d 	bl	23fb07e <_ZN12Adafruit_GFX11setTextSizeEh>

    if (state == ON) {
 23f9fe4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 23f9fe8:	f894 6020 	ldrb.w	r6, [r4, #32]
 23f9fec:	6861      	ldr	r1, [r4, #4]
 23f9fee:	6920      	ldr	r0, [r4, #16]
 23f9ff0:	2e00      	cmp	r6, #0
 23f9ff2:	d130      	bne.n	23fa056 <_ZN9UIElement4drawER15Adafruit_SH1107+0x8a>
        display.fillRoundRect(posX, posY, WIDTH, ICON_SIZE + 2, 3, 1);
 23f9ff4:	f04f 0c01 	mov.w	ip, #1
 23f9ff8:	2703      	movs	r7, #3
 23f9ffa:	3002      	adds	r0, #2
 23f9ffc:	b200      	sxth	r0, r0
 23f9ffe:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 23fa002:	9000      	str	r0, [sp, #0]
 23fa004:	b21b      	sxth	r3, r3
 23fa006:	4628      	mov	r0, r5
 23fa008:	b212      	sxth	r2, r2
 23fa00a:	b209      	sxth	r1, r1
 23fa00c:	f000 fd91 	bl	23fab32 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
        display.drawBitmap(posX + 1, posY + 1, icon, ICON_SIZE, ICON_SIZE, 0);
 23fa010:	68a2      	ldr	r2, [r4, #8]
 23fa012:	6861      	ldr	r1, [r4, #4]
 23fa014:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 23fa018:	3201      	adds	r2, #1
 23fa01a:	3101      	adds	r1, #1
 23fa01c:	e9cd 3601 	strd	r3, r6, [sp, #4]
 23fa020:	9300      	str	r3, [sp, #0]
 23fa022:	b212      	sxth	r2, r2
 23fa024:	6823      	ldr	r3, [r4, #0]
 23fa026:	b209      	sxth	r1, r1
 23fa028:	4628      	mov	r0, r5
 23fa02a:	f000 fde6 	bl	23fabfa <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        display.setCursor(posX + TEXT_ON_X, posY + TEXT_Y);
 23fa02e:	69e2      	ldr	r2, [r4, #28]
 23fa030:	68a3      	ldr	r3, [r4, #8]
 23fa032:	6961      	ldr	r1, [r4, #20]
 23fa034:	4413      	add	r3, r2
 23fa036:	6862      	ldr	r2, [r4, #4]
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    cursor_y = y;
 23fa038:	826b      	strh	r3, [r5, #18]
 23fa03a:	440a      	add	r2, r1
        display.setTextColor(0);
        display.println("ON");
 23fa03c:	4923      	ldr	r1, [pc, #140]	; (23fa0cc <_ZN9UIElement4drawER15Adafruit_SH1107+0x100>)
    cursor_x = x;
 23fa03e:	822a      	strh	r2, [r5, #16]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa040:	616e      	str	r6, [r5, #20]
        
        display.drawRoundRect(posX, posY, WIDTH, ICON_SIZE + 2, 3, 1);
        display.drawBitmap(posX + 1, posY + 1, icon, ICON_SIZE, ICON_SIZE, 1);
        display.setCursor(posX + TEXT_OFF_X, posY + TEXT_Y);
        display.setTextColor(1);
        display.println("OFF");
 23fa042:	4628      	mov	r0, r5
 23fa044:	f003 ffab 	bl	23fdf9e <_ZN5Print7printlnEPKc>
    }

    display.display();
 23fa048:	4628      	mov	r0, r5
 23fa04a:	682b      	ldr	r3, [r5, #0]
 23fa04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 23fa04e:	b005      	add	sp, #20
 23fa050:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    display.display();
 23fa054:	4718      	bx	r3
        display.fillRoundRect(posX, posY, WIDTH, ICON_SIZE + 1, 3, 0);  // Clear screen first
 23fa056:	2703      	movs	r7, #3
 23fa058:	2600      	movs	r6, #0
 23fa05a:	e9cd 7601 	strd	r7, r6, [sp, #4]
        display.drawRoundRect(posX, posY, WIDTH, ICON_SIZE + 2, 3, 1);
 23fa05e:	2601      	movs	r6, #1
        display.fillRoundRect(posX, posY, WIDTH, ICON_SIZE + 1, 3, 0);  // Clear screen first
 23fa060:	3001      	adds	r0, #1
 23fa062:	b200      	sxth	r0, r0
 23fa064:	9000      	str	r0, [sp, #0]
 23fa066:	b21b      	sxth	r3, r3
 23fa068:	4628      	mov	r0, r5
 23fa06a:	b212      	sxth	r2, r2
 23fa06c:	b209      	sxth	r1, r1
 23fa06e:	f000 fd60 	bl	23fab32 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
        display.drawRoundRect(posX, posY, WIDTH, ICON_SIZE + 2, 3, 1);
 23fa072:	6923      	ldr	r3, [r4, #16]
 23fa074:	4628      	mov	r0, r5
 23fa076:	3302      	adds	r3, #2
 23fa078:	b21b      	sxth	r3, r3
 23fa07a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 23fa07e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 23fa082:	9300      	str	r3, [sp, #0]
 23fa084:	e9cd 7601 	strd	r7, r6, [sp, #4]
 23fa088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 23fa08c:	f000 fcb8 	bl	23faa00 <_ZN12Adafruit_GFX13drawRoundRectEssssst>
        display.drawBitmap(posX + 1, posY + 1, icon, ICON_SIZE, ICON_SIZE, 1);
 23fa090:	68a2      	ldr	r2, [r4, #8]
 23fa092:	6861      	ldr	r1, [r4, #4]
 23fa094:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 23fa098:	4432      	add	r2, r6
 23fa09a:	4431      	add	r1, r6
 23fa09c:	e9cd 3601 	strd	r3, r6, [sp, #4]
 23fa0a0:	9300      	str	r3, [sp, #0]
 23fa0a2:	b212      	sxth	r2, r2
 23fa0a4:	6823      	ldr	r3, [r4, #0]
 23fa0a6:	b209      	sxth	r1, r1
 23fa0a8:	4628      	mov	r0, r5
 23fa0aa:	f000 fda6 	bl	23fabfa <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        display.setCursor(posX + TEXT_OFF_X, posY + TEXT_Y);
 23fa0ae:	69e2      	ldr	r2, [r4, #28]
 23fa0b0:	68a3      	ldr	r3, [r4, #8]
 23fa0b2:	69a1      	ldr	r1, [r4, #24]
 23fa0b4:	4413      	add	r3, r2
 23fa0b6:	6862      	ldr	r2, [r4, #4]
    cursor_y = y;
 23fa0b8:	826b      	strh	r3, [r5, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa0ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 23fa0be:	440a      	add	r2, r1
    cursor_x = x;
 23fa0c0:	822a      	strh	r2, [r5, #16]
        display.println("OFF");
 23fa0c2:	4903      	ldr	r1, [pc, #12]	; (23fa0d0 <_ZN9UIElement4drawER15Adafruit_SH1107+0x104>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa0c4:	616b      	str	r3, [r5, #20]
 23fa0c6:	e7bc      	b.n	23fa042 <_ZN9UIElement4drawER15Adafruit_SH1107+0x76>
 23fa0c8:	023ff340 	.word	0x023ff340
 23fa0cc:	023fef2e 	.word	0x023fef2e
 23fa0d0:	023fef31 	.word	0x023fef31

023fa0d4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 23fa0d4:	6042      	str	r2, [r0, #4]
  _begun = false;
 23fa0d6:	2200      	movs	r2, #0
 23fa0d8:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
 23fa0da:	2220      	movs	r2, #32
  _addr = addr;
 23fa0dc:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 23fa0de:	60c2      	str	r2, [r0, #12]
#endif
}
 23fa0e0:	4770      	bx	lr

023fa0e2 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 23fa0e2:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 23fa0e4:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 23fa0e6:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 23fa0e8:	b153      	cbz	r3, 23fa100 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 23fa0ea:	7821      	ldrb	r1, [r4, #0]
 23fa0ec:	6860      	ldr	r0, [r4, #4]
 23fa0ee:	f002 fc09 	bl	23fc904 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 23fa0f2:	6860      	ldr	r0, [r4, #4]
 23fa0f4:	f002 fc11 	bl	23fc91a <_ZN7TwoWire15endTransmissionEv>
 23fa0f8:	fab0 f080 	clz	r0, r0
 23fa0fc:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 23fa0fe:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 23fa100:	2101      	movs	r1, #1
 23fa102:	f000 f803 	bl	23fa10c <_ZN18Adafruit_I2CDevice5beginEb>
 23fa106:	2800      	cmp	r0, #0
 23fa108:	d1ef      	bne.n	23fa0ea <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 23fa10a:	e7f8      	b.n	23fa0fe <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

023fa10c <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23fa10c:	b538      	push	{r3, r4, r5, lr}
 23fa10e:	4604      	mov	r4, r0
  _wire->begin();
 23fa110:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23fa112:	460d      	mov	r5, r1
  _wire->begin();
 23fa114:	f002 fbc4 	bl	23fc8a0 <_ZN7TwoWire5beginEv>
  _begun = true;
 23fa118:	2001      	movs	r0, #1
 23fa11a:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 23fa11c:	b125      	cbz	r5, 23fa128 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 23fa11e:	4620      	mov	r0, r4
}
 23fa120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 23fa124:	f7ff bfdd 	b.w	23fa0e2 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 23fa128:	bd38      	pop	{r3, r4, r5, pc}

023fa12a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23fa12a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fa12e:	461f      	mov	r7, r3
 23fa130:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23fa134:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23fa136:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23fa138:	4432      	add	r2, r6
 23fa13a:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23fa13c:	4604      	mov	r4, r0
 23fa13e:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23fa140:	d902      	bls.n	23fa148 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23fa142:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 23fa144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23fa148:	7801      	ldrb	r1, [r0, #0]
 23fa14a:	6840      	ldr	r0, [r0, #4]
 23fa14c:	f002 fbda 	bl	23fc904 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fa150:	b97e      	cbnz	r6, 23fa172 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23fa152:	6860      	ldr	r0, [r4, #4]
 23fa154:	462a      	mov	r2, r5
 23fa156:	6803      	ldr	r3, [r0, #0]
 23fa158:	4641      	mov	r1, r8
 23fa15a:	68db      	ldr	r3, [r3, #12]
 23fa15c:	4798      	blx	r3
 23fa15e:	4285      	cmp	r5, r0
 23fa160:	d1ef      	bne.n	23fa142 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23fa162:	4639      	mov	r1, r7
 23fa164:	6860      	ldr	r0, [r4, #4]
 23fa166:	f002 fbd4 	bl	23fc912 <_ZN7TwoWire15endTransmissionEh>
 23fa16a:	fab0 f080 	clz	r0, r0
 23fa16e:	0940      	lsrs	r0, r0, #5
 23fa170:	e7e8      	b.n	23fa144 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fa172:	f1b9 0f00 	cmp.w	r9, #0
 23fa176:	d0ec      	beq.n	23fa152 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23fa178:	6860      	ldr	r0, [r4, #4]
 23fa17a:	4632      	mov	r2, r6
 23fa17c:	6803      	ldr	r3, [r0, #0]
 23fa17e:	4649      	mov	r1, r9
 23fa180:	68db      	ldr	r3, [r3, #12]
 23fa182:	4798      	blx	r3
 23fa184:	4286      	cmp	r6, r0
 23fa186:	d1dc      	bne.n	23fa142 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23fa188:	e7e3      	b.n	23fa152 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023fa18a <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
 23fa18a:	b508      	push	{r3, lr}
	  setSpeed(speed);
 23fa18c:	6840      	ldr	r0, [r0, #4]
 23fa18e:	f002 fb83 	bl	23fc898 <_ZN7TwoWire8setSpeedEm>

#else
  (void)desiredclk;
  return false;
#endif
}
 23fa192:	2001      	movs	r0, #1
 23fa194:	bd08      	pop	{r3, pc}

023fa196 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 23fa196:	b510      	push	{r4, lr}
 23fa198:	4604      	mov	r4, r0
  if (_spiSetting)
 23fa19a:	6840      	ldr	r0, [r0, #4]
 23fa19c:	b110      	cbz	r0, 23fa1a4 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 23fa19e:	6803      	ldr	r3, [r0, #0]
 23fa1a0:	689b      	ldr	r3, [r3, #8]
 23fa1a2:	4798      	blx	r3
}
 23fa1a4:	4620      	mov	r0, r4
 23fa1a6:	bd10      	pop	{r4, pc}

023fa1a8 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
 23fa1a8:	b538      	push	{r3, r4, r5, lr}
 23fa1aa:	4604      	mov	r4, r0
  if (_cs != -1) {
 23fa1ac:	f990 000e 	ldrsb.w	r0, [r0, #14]
 23fa1b0:	1c41      	adds	r1, r0, #1
 23fa1b2:	d009      	beq.n	23fa1c8 <_ZN18Adafruit_SPIDevice5beginEv+0x20>
    pinMode(_cs, OUTPUT);
 23fa1b4:	2101      	movs	r1, #1
 23fa1b6:	b280      	uxth	r0, r0
 23fa1b8:	f004 faa8 	bl	23fe70c <pinMode>
    digitalWrite(_cs, HIGH);
 23fa1bc:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23fa1c0:	2101      	movs	r1, #1
 23fa1c2:	b280      	uxth	r0, r0
 23fa1c4:	f004 fab3 	bl	23fe72e <digitalWrite>
  }

  if (_spi) { // hardware SPI
 23fa1c8:	6825      	ldr	r5, [r4, #0]
 23fa1ca:	b135      	cbz	r5, 23fa1da <_ZN18Adafruit_SPIDevice5beginEv+0x32>
#ifdef BUSIO_HAS_HW_SPI
    _spi->begin();
 23fa1cc:	4628      	mov	r0, r5
 23fa1ce:	f003 ff25 	bl	23fe01c <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
 23fa1d2:	2001      	movs	r0, #1
 23fa1d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
 23fa1d8:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
 23fa1da:	f994 000f 	ldrsb.w	r0, [r4, #15]
 23fa1de:	2101      	movs	r1, #1
 23fa1e0:	b280      	uxth	r0, r0
 23fa1e2:	f004 fa93 	bl	23fe70c <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
 23fa1e6:	7b63      	ldrb	r3, [r4, #13]
 23fa1e8:	f994 000f 	ldrsb.w	r0, [r4, #15]
 23fa1ec:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
 23fa1ee:	bf94      	ite	ls
 23fa1f0:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
 23fa1f2:	2101      	movhi	r1, #1
 23fa1f4:	b280      	uxth	r0, r0
 23fa1f6:	f004 fa9a 	bl	23fe72e <digitalWrite>
    if (_mosi != -1) {
 23fa1fa:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fa1fe:	1c42      	adds	r2, r0, #1
 23fa200:	d009      	beq.n	23fa216 <_ZN18Adafruit_SPIDevice5beginEv+0x6e>
      pinMode(_mosi, OUTPUT);
 23fa202:	2101      	movs	r1, #1
 23fa204:	b280      	uxth	r0, r0
 23fa206:	f004 fa81 	bl	23fe70c <pinMode>
      digitalWrite(_mosi, HIGH);
 23fa20a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fa20e:	2101      	movs	r1, #1
 23fa210:	b280      	uxth	r0, r0
 23fa212:	f004 fa8c 	bl	23fe72e <digitalWrite>
    if (_miso != -1) {
 23fa216:	f994 0011 	ldrsb.w	r0, [r4, #17]
 23fa21a:	1c43      	adds	r3, r0, #1
 23fa21c:	d0d9      	beq.n	23fa1d2 <_ZN18Adafruit_SPIDevice5beginEv+0x2a>
      pinMode(_miso, INPUT);
 23fa21e:	2100      	movs	r1, #0
 23fa220:	b280      	uxth	r0, r0
 23fa222:	f004 fa73 	bl	23fe70c <pinMode>
 23fa226:	e7d4      	b.n	23fa1d2 <_ZN18Adafruit_SPIDevice5beginEv+0x2a>

023fa228 <_ZN18Adafruit_SPIDevice8transferEPhj>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23fa228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa22c:	4604      	mov	r4, r0
  //
  // HARDWARE SPI
  //
  if (_spi) {
 23fa22e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23fa230:	460d      	mov	r5, r1
 23fa232:	b085      	sub	sp, #20
  if (_spi) {
 23fa234:	b140      	cbz	r0, 23fa248 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
#ifdef BUSIO_HAS_HW_SPI
#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, nullptr);
 23fa236:	2300      	movs	r3, #0
 23fa238:	9300      	str	r3, [sp, #0]
 23fa23a:	4613      	mov	r3, r2
 23fa23c:	460a      	mov	r2, r1
 23fa23e:	f003 ff89 	bl	23fe154 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 23fa242:	b005      	add	sp, #20
 23fa244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 23fa248:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fa24a:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 23fa24c:	2b00      	cmp	r3, #0
 23fa24e:	bf0c      	ite	eq
 23fa250:	f04f 0b01 	moveq.w	fp, #1
 23fa254:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23fa258:	780b      	ldrb	r3, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fa25a:	4f44      	ldr	r7, [pc, #272]	; (23fa36c <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23fa25c:	ea1b 0f03 	tst.w	fp, r3
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fa260:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23fa264:	bf0c      	ite	eq
 23fa266:	f04f 0901 	moveq.w	r9, #1
 23fa26a:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fa26e:	188b      	adds	r3, r1, r2
 23fa270:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 23fa272:	9303      	str	r3, [sp, #12]
 23fa274:	9b03      	ldr	r3, [sp, #12]
 23fa276:	42ab      	cmp	r3, r5
 23fa278:	d0e3      	beq.n	23fa242 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 23fa27a:	465e      	mov	r6, fp
    uint8_t reply = 0;
 23fa27c:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 23fa280:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 23fa284:	b117      	cbz	r7, 23fa28c <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fa286:	4638      	mov	r0, r7
 23fa288:	f001 fad4 	bl	23fb834 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 23fa28c:	7b63      	ldrb	r3, [r4, #13]
 23fa28e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 23fa292:	d141      	bne.n	23fa318 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23fa294:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23fa298:	1c5a      	adds	r2, r3, #1
 23fa29a:	d00f      	beq.n	23fa2bc <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 23fa29c:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23fa2a0:	bf14      	ite	ne
 23fa2a2:	2301      	movne	r3, #1
 23fa2a4:	2300      	moveq	r3, #0
 23fa2a6:	454b      	cmp	r3, r9
 23fa2a8:	d008      	beq.n	23fa2bc <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort |= mosiPinMask;
 23fa2aa:	6963      	ldr	r3, [r4, #20]
 23fa2ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fa2ae:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 23fa2b0:	2900      	cmp	r1, #0
 23fa2b2:	d02c      	beq.n	23fa30e <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 23fa2b4:	f04f 0901 	mov.w	r9, #1
 23fa2b8:	4302      	orrs	r2, r0
 23fa2ba:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 23fa2bc:	69a1      	ldr	r1, [r4, #24]
 23fa2be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fa2c0:	680a      	ldr	r2, [r1, #0]
 23fa2c2:	4313      	orrs	r3, r2
 23fa2c4:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23fa2c6:	b117      	cbz	r7, 23fa2ce <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 23fa2c8:	4638      	mov	r0, r7
 23fa2ca:	f001 fab3 	bl	23fb834 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 23fa2ce:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23fa2d2:	3301      	adds	r3, #1
 23fa2d4:	d006      	beq.n	23fa2e4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 23fa2d6:	69e3      	ldr	r3, [r4, #28]
 23fa2d8:	681a      	ldr	r2, [r3, #0]
 23fa2da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23fa2dc:	421a      	tst	r2, r3
            reply |= b;
 23fa2de:	bf18      	it	ne
 23fa2e0:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 23fa2e4:	69a1      	ldr	r1, [r4, #24]
 23fa2e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fa2e8:	680a      	ldr	r2, [r1, #0]
 23fa2ea:	ea22 0303 	bic.w	r3, r2, r3
 23fa2ee:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 23fa2f0:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23fa2f4:	3301      	adds	r3, #1
        buffer[i] = reply;
 23fa2f6:	bf18      	it	ne
 23fa2f8:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 23fa2fc:	7b23      	ldrb	r3, [r4, #12]
 23fa2fe:	2b00      	cmp	r3, #0
 23fa300:	d132      	bne.n	23fa368 <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 23fa302:	0076      	lsls	r6, r6, #1
 23fa304:	b2f6      	uxtb	r6, r6
 23fa306:	2e00      	cmp	r6, #0
 23fa308:	d1bc      	bne.n	23fa284 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 23fa30a:	3501      	adds	r5, #1
 23fa30c:	e7b2      	b.n	23fa274 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 23fa30e:	ea22 0200 	bic.w	r2, r2, r0
 23fa312:	4689      	mov	r9, r1
 23fa314:	601a      	str	r2, [r3, #0]
 23fa316:	e7d1      	b.n	23fa2bc <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 23fa318:	69a1      	ldr	r1, [r4, #24]
 23fa31a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fa31c:	680a      	ldr	r2, [r1, #0]
 23fa31e:	4313      	orrs	r3, r2
 23fa320:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23fa322:	b117      	cbz	r7, 23fa32a <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 23fa324:	4638      	mov	r0, r7
 23fa326:	f001 fa85 	bl	23fb834 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 23fa32a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23fa32e:	3301      	adds	r3, #1
 23fa330:	d008      	beq.n	23fa344 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort |= mosiPinMask;
 23fa332:	6963      	ldr	r3, [r4, #20]
 23fa334:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23fa336:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 23fa338:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 23fa33c:	bf14      	ite	ne
 23fa33e:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 23fa340:	438a      	biceq	r2, r1
 23fa342:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 23fa344:	69a1      	ldr	r1, [r4, #24]
 23fa346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fa348:	680a      	ldr	r2, [r1, #0]
 23fa34a:	ea22 0303 	bic.w	r3, r2, r3
 23fa34e:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 23fa350:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23fa354:	3301      	adds	r3, #1
 23fa356:	d0cb      	beq.n	23fa2f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 23fa358:	69e3      	ldr	r3, [r4, #28]
 23fa35a:	681a      	ldr	r2, [r3, #0]
 23fa35c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23fa35e:	421a      	tst	r2, r3
            reply |= b;
 23fa360:	bf18      	it	ne
 23fa362:	ea46 0808 	orrne.w	r8, r6, r8
 23fa366:	e7c3      	b.n	23fa2f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 23fa368:	0876      	lsrs	r6, r6, #1
 23fa36a:	e7cc      	b.n	23fa306 <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 23fa36c:	0007a120 	.word	0x0007a120

023fa370 <_ZN18Adafruit_SPIDevice8transferEh>:
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 23fa370:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 23fa372:	2201      	movs	r2, #1
  uint8_t data = send;
 23fa374:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 23fa378:	f10d 0107 	add.w	r1, sp, #7
 23fa37c:	f7ff ff54 	bl	23fa228 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 23fa380:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23fa384:	b003      	add	sp, #12
 23fa386:	f85d fb04 	ldr.w	pc, [sp], #4

023fa38a <_ZN18Adafruit_SPIDevice16beginTransactionEv>:
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
 23fa38a:	6803      	ldr	r3, [r0, #0]
 23fa38c:	b11b      	cbz	r3, 23fa396 <_ZN18Adafruit_SPIDevice16beginTransactionEv+0xc>
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
 23fa38e:	6841      	ldr	r1, [r0, #4]
 23fa390:	4618      	mov	r0, r3
 23fa392:	f003 be71 	b.w	23fe078 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
#endif
  }
}
 23fa396:	4770      	bx	lr

023fa398 <_ZN18Adafruit_SPIDevice14endTransactionEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 */
void Adafruit_SPIDevice::endTransaction(void) {
  if (_spi) {
 23fa398:	6800      	ldr	r0, [r0, #0]
 23fa39a:	b108      	cbz	r0, 23fa3a0 <_ZN18Adafruit_SPIDevice14endTransactionEv+0x8>
#ifdef BUSIO_HAS_HW_SPI
    _spi->endTransaction();
 23fa39c:	f003 be52 	b.w	23fe044 <_ZN8SPIClass14endTransactionEv>
#endif
  }
}
 23fa3a0:	4770      	bx	lr

023fa3a2 <_ZN18Adafruit_SPIDevice13setChipSelectEi>:
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
 23fa3a2:	f990 000e 	ldrsb.w	r0, [r0, #14]
 23fa3a6:	1c43      	adds	r3, r0, #1
 23fa3a8:	d003      	beq.n	23fa3b2 <_ZN18Adafruit_SPIDevice13setChipSelectEi+0x10>
    digitalWrite(_cs, value);
 23fa3aa:	b2c9      	uxtb	r1, r1
 23fa3ac:	b280      	uxth	r0, r0
 23fa3ae:	f004 b9be 	b.w	23fe72e <digitalWrite>
  }
}
 23fa3b2:	4770      	bx	lr

023fa3b4 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>:
 *    @brief  Write a buffer or two to the SPI device, with transaction
 * management.
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
 23fa3b4:	b510      	push	{r4, lr}
 23fa3b6:	4604      	mov	r4, r0
  beginTransaction();
 23fa3b8:	f7ff ffe7 	bl	23fa38a <_ZN18Adafruit_SPIDevice16beginTransactionEv>
  setChipSelect(LOW);
 23fa3bc:	4620      	mov	r0, r4
}
 23fa3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setChipSelect(LOW);
 23fa3c2:	2100      	movs	r1, #0
 23fa3c4:	f7ff bfed 	b.w	23fa3a2 <_ZN18Adafruit_SPIDevice13setChipSelectEi>

023fa3c8 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
 23fa3c8:	b510      	push	{r4, lr}
 23fa3ca:	4604      	mov	r4, r0
  setChipSelect(HIGH);
 23fa3cc:	2101      	movs	r1, #1
 23fa3ce:	f7ff ffe8 	bl	23fa3a2 <_ZN18Adafruit_SPIDevice13setChipSelectEi>
  endTransaction();
 23fa3d2:	4620      	mov	r0, r4
}
 23fa3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  endTransaction();
 23fa3d8:	f7ff bfde 	b.w	23fa398 <_ZN18Adafruit_SPIDevice14endTransactionEv>

023fa3dc <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23fa3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fa3e0:	461c      	mov	r4, r3
 23fa3e2:	4606      	mov	r6, r0
 23fa3e4:	460d      	mov	r5, r1
 23fa3e6:	4617      	mov	r7, r2
  beginTransactionWithAssertingCS();
 23fa3e8:	f7ff ffe4 	bl	23fa3b4 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
 23fa3ec:	9b06      	ldr	r3, [sp, #24]
 23fa3ee:	eb04 0803 	add.w	r8, r4, r3
 23fa3f2:	4544      	cmp	r4, r8
 23fa3f4:	d108      	bne.n	23fa408 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x2c>
 23fa3f6:	442f      	add	r7, r5
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
 23fa3f8:	42bd      	cmp	r5, r7
 23fa3fa:	d00b      	beq.n	23fa414 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x38>
      transfer(buffer[i]);
 23fa3fc:	4630      	mov	r0, r6
 23fa3fe:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fa402:	f7ff ffb5 	bl	23fa370 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < len; i++) {
 23fa406:	e7f7      	b.n	23fa3f8 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x1c>
      transfer(prefix_buffer[i]);
 23fa408:	4630      	mov	r0, r6
 23fa40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fa40e:	f7ff ffaf 	bl	23fa370 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < prefix_len; i++) {
 23fa412:	e7ee      	b.n	23fa3f2 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x16>
    }
  }
  endTransactionWithDeassertingCS();
 23fa414:	4630      	mov	r0, r6
 23fa416:	f7ff ffd7 	bl	23fa3c8 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23fa41a:	2001      	movs	r0, #1
 23fa41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fa420 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 23fa420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa424:	461f      	mov	r7, r3
 23fa426:	b085      	sub	sp, #20
 23fa428:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fa42c:	eba7 0a01 	sub.w	sl, r7, r1
 23fa430:	eba8 0902 	sub.w	r9, r8, r2
 23fa434:	f1b9 0f00 	cmp.w	r9, #0
 23fa438:	bfb8      	it	lt
 23fa43a:	f1c9 0900 	rsblt	r9, r9, #0
 23fa43e:	f1ba 0f00 	cmp.w	sl, #0
 23fa442:	bfb8      	it	lt
 23fa444:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23fa448:	45d1      	cmp	r9, sl
                             uint16_t color) {
 23fa44a:	4683      	mov	fp, r0
 23fa44c:	460c      	mov	r4, r1
 23fa44e:	4615      	mov	r5, r2
 23fa450:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23fa454:	dd04      	ble.n	23fa460 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23fa456:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 23fa458:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 23fa45a:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 23fa45c:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
 23fa45e:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23fa460:	42bc      	cmp	r4, r7
 23fa462:	dd05      	ble.n	23fa470 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23fa464:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 23fa466:	4645      	mov	r5, r8
 23fa468:	4690      	mov	r8, r2
  if (x0 > x1) {
 23fa46a:	4622      	mov	r2, r4
 23fa46c:	463c      	mov	r4, r7
 23fa46e:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23fa470:	1b3e      	subs	r6, r7, r4
 23fa472:	b2b2      	uxth	r2, r6
 23fa474:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23fa476:	eba8 0205 	sub.w	r2, r8, r5
 23fa47a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fa47e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23fa482:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fa486:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23fa48a:	4545      	cmp	r5, r8
 23fa48c:	bfb4      	ite	lt
 23fa48e:	2201      	movlt	r2, #1
 23fa490:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
 23fa494:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23fa496:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23fa498:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 23fa49a:	42bc      	cmp	r4, r7
 23fa49c:	dc1c      	bgt.n	23fa4d8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
 23fa49e:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23fa4a2:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 23fa4a4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23fa4a8:	bfc7      	ittee	gt
 23fa4aa:	4629      	movgt	r1, r5
 23fa4ac:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 23fa4ae:	462a      	movle	r2, r5
 23fa4b0:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 23fa4b2:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 23fa4b4:	4658      	mov	r0, fp
 23fa4b6:	47c0      	blx	r8
    }
    err -= dy;
 23fa4b8:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 23fa4ba:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23fa4bc:	1ab6      	subs	r6, r6, r2
 23fa4be:	b2b1      	uxth	r1, r6
 23fa4c0:	b236      	sxth	r6, r6
    if (err < 0) {
 23fa4c2:	2e00      	cmp	r6, #0
 23fa4c4:	da05      	bge.n	23fa4d2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
 23fa4c6:	9a02      	ldr	r2, [sp, #8]
 23fa4c8:	4415      	add	r5, r2
      err += dx;
 23fa4ca:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23fa4cc:	b22d      	sxth	r5, r5
      err += dx;
 23fa4ce:	1856      	adds	r6, r2, r1
 23fa4d0:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 23fa4d2:	3401      	adds	r4, #1
 23fa4d4:	b224      	sxth	r4, r4
 23fa4d6:	e7e0      	b.n	23fa49a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
 23fa4d8:	b005      	add	sp, #20
 23fa4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fa4de <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 23fa4de:	4770      	bx	lr

023fa4e0 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fa4e0:	b410      	push	{r4}
  drawPixel(x, y, color);
 23fa4e2:	6804      	ldr	r4, [r0, #0]
 23fa4e4:	6924      	ldr	r4, [r4, #16]
 23fa4e6:	46a4      	mov	ip, r4
}
 23fa4e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 23fa4ec:	4760      	bx	ip

023fa4ee <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 23fa4ee:	b430      	push	{r4, r5}
 23fa4f0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 23fa4f4:	6804      	ldr	r4, [r0, #0]
 23fa4f6:	9502      	str	r5, [sp, #8]
 23fa4f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fa4fa:	46a4      	mov	ip, r4
}
 23fa4fc:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 23fa4fe:	4760      	bx	ip

023fa500 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 23fa500:	b430      	push	{r4, r5}
 23fa502:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 23fa506:	6804      	ldr	r4, [r0, #0]
 23fa508:	9502      	str	r5, [sp, #8]
 23fa50a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fa50c:	46a4      	mov	ip, r4
}
 23fa50e:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 23fa510:	4760      	bx	ip

023fa512 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 23fa512:	b470      	push	{r4, r5, r6}
 23fa514:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fa518:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 23fa51c:	6804      	ldr	r4, [r0, #0]
 23fa51e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fa522:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fa524:	46a4      	mov	ip, r4
}
 23fa526:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 23fa528:	4760      	bx	ip

023fa52a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 23fa52a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fa52e:	461c      	mov	r4, r3
 23fa530:	4616      	mov	r6, r2
 23fa532:	4605      	mov	r5, r0
 23fa534:	460f      	mov	r7, r1
  startWrite();
 23fa536:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 23fa538:	3c01      	subs	r4, #1
                                 uint16_t color) {
 23fa53a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23fa53e:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 23fa540:	4434      	add	r4, r6
  startWrite();
 23fa542:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 23fa544:	b224      	sxth	r4, r4
 23fa546:	682b      	ldr	r3, [r5, #0]
 23fa548:	f8cd 8004 	str.w	r8, [sp, #4]
 23fa54c:	9400      	str	r4, [sp, #0]
 23fa54e:	4628      	mov	r0, r5
 23fa550:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fa552:	4632      	mov	r2, r6
 23fa554:	463b      	mov	r3, r7
 23fa556:	4639      	mov	r1, r7
 23fa558:	47a0      	blx	r4
  endWrite();
 23fa55a:	4628      	mov	r0, r5
 23fa55c:	682b      	ldr	r3, [r5, #0]
 23fa55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa560:	b002      	add	sp, #8
 23fa562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23fa566:	4718      	bx	r3

023fa568 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 23fa568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fa56c:	4617      	mov	r7, r2
 23fa56e:	4604      	mov	r4, r0
 23fa570:	461d      	mov	r5, r3
 23fa572:	460e      	mov	r6, r1
  startWrite();
 23fa574:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 23fa576:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23fa57a:	695b      	ldr	r3, [r3, #20]
 23fa57c:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 23fa57e:	e9cd 7800 	strd	r7, r8, [sp]
 23fa582:	6822      	ldr	r2, [r4, #0]
 23fa584:	1e6b      	subs	r3, r5, #1
 23fa586:	4433      	add	r3, r6
 23fa588:	4620      	mov	r0, r4
 23fa58a:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fa58c:	4631      	mov	r1, r6
 23fa58e:	463a      	mov	r2, r7
 23fa590:	b21b      	sxth	r3, r3
 23fa592:	47a8      	blx	r5
  endWrite();
 23fa594:	4620      	mov	r0, r4
 23fa596:	6823      	ldr	r3, [r4, #0]
 23fa598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa59a:	b002      	add	sp, #8
 23fa59c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23fa5a0:	4718      	bx	r3

023fa5a2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23fa5a2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fa5a6:	461e      	mov	r6, r3
  startWrite();
 23fa5a8:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23fa5aa:	460c      	mov	r4, r1
  startWrite();
 23fa5ac:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23fa5ae:	4605      	mov	r5, r0
 23fa5b0:	4617      	mov	r7, r2
 23fa5b2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fa5b6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23fa5ba:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 23fa5bc:	4426      	add	r6, r4
 23fa5be:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
 23fa5c0:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
 23fa5c2:	da0b      	bge.n	23fa5dc <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 23fa5c4:	f8cd 8000 	str.w	r8, [sp]
 23fa5c8:	4621      	mov	r1, r4
 23fa5ca:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fa5ce:	463a      	mov	r2, r7
 23fa5d0:	464b      	mov	r3, r9
 23fa5d2:	4628      	mov	r0, r5
 23fa5d4:	3401      	adds	r4, #1
 23fa5d6:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 23fa5d8:	b224      	sxth	r4, r4
 23fa5da:	e7f0      	b.n	23fa5be <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 23fa5dc:	4628      	mov	r0, r5
 23fa5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa5e0:	b002      	add	sp, #8
 23fa5e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fa5e6:	4718      	bx	r3

023fa5e8 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fa5e8:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23fa5ea:	9101      	str	r1, [sp, #4]
 23fa5ec:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fa5f0:	6802      	ldr	r2, [r0, #0]
 23fa5f2:	9100      	str	r1, [sp, #0]
 23fa5f4:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fa5f6:	2200      	movs	r2, #0
 23fa5f8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fa5fc:	4611      	mov	r1, r2
 23fa5fe:	47a0      	blx	r4
}
 23fa600:	b002      	add	sp, #8
 23fa602:	bd10      	pop	{r4, pc}

023fa604 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 23fa604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
 23fa608:	4299      	cmp	r1, r3
                            uint16_t color) {
 23fa60a:	4616      	mov	r6, r2
 23fa60c:	4680      	mov	r8, r0
 23fa60e:	460d      	mov	r5, r1
 23fa610:	461c      	mov	r4, r3
 23fa612:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fa616:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fa61a:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 23fa61c:	d112      	bne.n	23fa644 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 23fa61e:	42be      	cmp	r6, r7
 23fa620:	bfc2      	ittt	gt
 23fa622:	4633      	movgt	r3, r6
 23fa624:	463e      	movgt	r6, r7
 23fa626:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fa628:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fa62c:	1c7b      	adds	r3, r7, #1
 23fa62e:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23fa630:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fa632:	4632      	mov	r2, r6
 23fa634:	4629      	mov	r1, r5
 23fa636:	4640      	mov	r0, r8
 23fa638:	46a4      	mov	ip, r4
 23fa63a:	b21b      	sxth	r3, r3
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 23fa63c:	b003      	add	sp, #12
 23fa63e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fa642:	4760      	bx	ip
  } else if (y0 == y1) {
 23fa644:	42be      	cmp	r6, r7
 23fa646:	d10a      	bne.n	23fa65e <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 23fa648:	4299      	cmp	r1, r3
 23fa64a:	bfc2      	ittt	gt
 23fa64c:	460b      	movgt	r3, r1
 23fa64e:	4625      	movgt	r5, r4
 23fa650:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fa652:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fa656:	1c63      	adds	r3, r4, #1
 23fa658:	1b5b      	subs	r3, r3, r5
 23fa65a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fa65c:	e7e9      	b.n	23fa632 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 23fa65e:	6953      	ldr	r3, [r2, #20]
 23fa660:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 23fa662:	e9cd 7900 	strd	r7, r9, [sp]
 23fa666:	f8d8 3000 	ldr.w	r3, [r8]
 23fa66a:	4640      	mov	r0, r8
 23fa66c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23fa66e:	4632      	mov	r2, r6
 23fa670:	4623      	mov	r3, r4
 23fa672:	4629      	mov	r1, r5
 23fa674:	47b8      	blx	r7
    endWrite();
 23fa676:	4640      	mov	r0, r8
 23fa678:	f8d8 3000 	ldr.w	r3, [r8]
 23fa67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa67e:	b003      	add	sp, #12
 23fa680:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 23fa684:	4718      	bx	r3

023fa686 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23fa686:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fa68a:	4604      	mov	r4, r0
 23fa68c:	460f      	mov	r7, r1
 23fa68e:	4616      	mov	r6, r2
 23fa690:	461d      	mov	r5, r3
  startWrite();
 23fa692:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23fa694:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23fa698:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23fa69a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 23fa69e:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 23fa6a0:	6823      	ldr	r3, [r4, #0]
 23fa6a2:	f8cd 8000 	str.w	r8, [sp]
 23fa6a6:	4632      	mov	r2, r6
 23fa6a8:	4639      	mov	r1, r7
 23fa6aa:	4620      	mov	r0, r4
 23fa6ac:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fa6b0:	462b      	mov	r3, r5
 23fa6b2:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 23fa6b4:	6823      	ldr	r3, [r4, #0]
 23fa6b6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23fa6ba:	f8cd 8000 	str.w	r8, [sp]
 23fa6be:	4432      	add	r2, r6
 23fa6c0:	4639      	mov	r1, r7
 23fa6c2:	4620      	mov	r0, r4
 23fa6c4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fa6c8:	b212      	sxth	r2, r2
 23fa6ca:	462b      	mov	r3, r5
 23fa6cc:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 23fa6ce:	6823      	ldr	r3, [r4, #0]
 23fa6d0:	f8cd 8000 	str.w	r8, [sp]
 23fa6d4:	4632      	mov	r2, r6
 23fa6d6:	4639      	mov	r1, r7
 23fa6d8:	4620      	mov	r0, r4
 23fa6da:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fa6de:	464b      	mov	r3, r9
 23fa6e0:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 23fa6e2:	1e6b      	subs	r3, r5, #1
 23fa6e4:	19d9      	adds	r1, r3, r7
 23fa6e6:	6823      	ldr	r3, [r4, #0]
 23fa6e8:	f8cd 8000 	str.w	r8, [sp]
 23fa6ec:	4620      	mov	r0, r4
 23fa6ee:	6a1d      	ldr	r5, [r3, #32]
 23fa6f0:	4632      	mov	r2, r6
 23fa6f2:	464b      	mov	r3, r9
 23fa6f4:	b209      	sxth	r1, r1
 23fa6f6:	47a8      	blx	r5
  endWrite();
 23fa6f8:	4620      	mov	r0, r4
 23fa6fa:	6823      	ldr	r3, [r4, #0]
 23fa6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa6fe:	b002      	add	sp, #8
 23fa700:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fa704:	4718      	bx	r3

023fa706 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 23fa706:	4770      	bx	lr

023fa708 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 23fa708:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 23fa70c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 23fa710:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 23fa712:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch (rotation) {
 23fa716:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 23fa718:	bf59      	ittee	pl
 23fa71a:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 23fa71c:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 23fa71e:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 23fa720:	81c3      	strhmi	r3, [r0, #14]
}
 23fa722:	4770      	bx	lr

023fa724 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23fa724:	b530      	push	{r4, r5, lr}
 23fa726:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 23fa728:	2400      	movs	r4, #0
  _width = WIDTH;
 23fa72a:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 23fa72c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23fa730:	4d05      	ldr	r5, [pc, #20]	; (23fa748 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fa732:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 23fa734:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 23fa736:	4a05      	ldr	r2, [pc, #20]	; (23fa74c <_ZN12Adafruit_GFXC1Ess+0x28>)
 23fa738:	6044      	str	r4, [r0, #4]
 23fa73a:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23fa73e:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 23fa740:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 23fa742:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 23fa744:	6204      	str	r4, [r0, #32]
}
 23fa746:	bd30      	pop	{r4, r5, pc}
 23fa748:	023ff858 	.word	0x023ff858
 23fa74c:	01000101 	.word	0x01000101

023fa750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>:
                                    uint8_t cornername, uint16_t color) {
 23fa750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa754:	461c      	mov	r4, r3
 23fa756:	b087      	sub	sp, #28
 23fa758:	9200      	str	r2, [sp, #0]
  int16_t f = 1 - r;
 23fa75a:	b2a2      	uxth	r2, r4
 23fa75c:	f1c2 0601 	rsb	r6, r2, #1
  int16_t ddF_y = -2 * r;
 23fa760:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 23fa764:	0052      	lsls	r2, r2, #1
 23fa766:	b212      	sxth	r2, r2
 23fa768:	9203      	str	r2, [sp, #12]
  int16_t x = 0;
 23fa76a:	2200      	movs	r2, #0
                                    uint8_t cornername, uint16_t color) {
 23fa76c:	4680      	mov	r8, r0
 23fa76e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  int16_t x = 0;
 23fa772:	9202      	str	r2, [sp, #8]
                                    uint8_t cornername, uint16_t color) {
 23fa774:	9301      	str	r3, [sp, #4]
    if (cornername & 0x4) {
 23fa776:	9a01      	ldr	r2, [sp, #4]
                                    uint8_t cornername, uint16_t color) {
 23fa778:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (cornername & 0x4) {
 23fa77c:	f002 0204 	and.w	r2, r2, #4
  int16_t f = 1 - r;
 23fa780:	b236      	sxth	r6, r6
    if (cornername & 0x4) {
 23fa782:	9204      	str	r2, [sp, #16]
      writePixel(x0 + x, y0 + y, color);
 23fa784:	b28f      	uxth	r7, r1
  while (x < y) {
 23fa786:	9a02      	ldr	r2, [sp, #8]
 23fa788:	42a2      	cmp	r2, r4
 23fa78a:	f280 8099 	bge.w	23fa8c0 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x170>
    if (f >= 0) {
 23fa78e:	2e00      	cmp	r6, #0
 23fa790:	db08      	blt.n	23fa7a4 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x54>
      ddF_y += 2;
 23fa792:	9a03      	ldr	r2, [sp, #12]
      y--;
 23fa794:	3c01      	subs	r4, #1
      ddF_y += 2;
 23fa796:	3202      	adds	r2, #2
 23fa798:	b211      	sxth	r1, r2
      f += ddF_y;
 23fa79a:	fa16 f682 	uxtah	r6, r6, r2
      y--;
 23fa79e:	b224      	sxth	r4, r4
      ddF_y += 2;
 23fa7a0:	9103      	str	r1, [sp, #12]
      f += ddF_y;
 23fa7a2:	b236      	sxth	r6, r6
    x++;
 23fa7a4:	9a02      	ldr	r2, [sp, #8]
 23fa7a6:	3201      	adds	r2, #1
 23fa7a8:	b295      	uxth	r5, r2
 23fa7aa:	b212      	sxth	r2, r2
 23fa7ac:	9202      	str	r2, [sp, #8]
    ddF_x += 2;
 23fa7ae:	eb06 0645 	add.w	r6, r6, r5, lsl #1
    if (cornername & 0x4) {
 23fa7b2:	9a04      	ldr	r2, [sp, #16]
    f += ddF_x;
 23fa7b4:	3601      	adds	r6, #1
 23fa7b6:	b236      	sxth	r6, r6
    if (cornername & 0x4) {
 23fa7b8:	b1f2      	cbz	r2, 23fa7f8 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0xa8>
      writePixel(x0 + x, y0 + y, color);
 23fa7ba:	9a00      	ldr	r2, [sp, #0]
 23fa7bc:	f8d8 0000 	ldr.w	r0, [r8]
 23fa7c0:	fa1f fa84 	uxth.w	sl, r4
 23fa7c4:	fa1a f282 	uxtah	r2, sl, r2
 23fa7c8:	1979      	adds	r1, r7, r5
 23fa7ca:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23fa7ce:	f8bd 9000 	ldrh.w	r9, [sp]
 23fa7d2:	4640      	mov	r0, r8
 23fa7d4:	9305      	str	r3, [sp, #20]
 23fa7d6:	b212      	sxth	r2, r2
 23fa7d8:	b209      	sxth	r1, r1
 23fa7da:	47d8      	blx	fp
      writePixel(x0 + y, y0 + x, color);
 23fa7dc:	f8d8 3000 	ldr.w	r3, [r8]
 23fa7e0:	eb09 0205 	add.w	r2, r9, r5
 23fa7e4:	eb07 010a 	add.w	r1, r7, sl
 23fa7e8:	f8d3 b018 	ldr.w	fp, [r3, #24]
 23fa7ec:	4640      	mov	r0, r8
 23fa7ee:	9b05      	ldr	r3, [sp, #20]
 23fa7f0:	b212      	sxth	r2, r2
 23fa7f2:	b209      	sxth	r1, r1
 23fa7f4:	47d8      	blx	fp
 23fa7f6:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x2) {
 23fa7f8:	9a01      	ldr	r2, [sp, #4]
 23fa7fa:	0790      	lsls	r0, r2, #30
 23fa7fc:	d51d      	bpl.n	23fa83a <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0xea>
      writePixel(x0 + x, y0 - y, color);
 23fa7fe:	f8bd 9000 	ldrh.w	r9, [sp]
 23fa802:	f8d8 0000 	ldr.w	r0, [r8]
 23fa806:	fa1f fa84 	uxth.w	sl, r4
 23fa80a:	eba9 020a 	sub.w	r2, r9, sl
 23fa80e:	1979      	adds	r1, r7, r5
 23fa810:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23fa814:	9305      	str	r3, [sp, #20]
 23fa816:	4640      	mov	r0, r8
 23fa818:	b212      	sxth	r2, r2
 23fa81a:	b209      	sxth	r1, r1
 23fa81c:	47d8      	blx	fp
      writePixel(x0 + y, y0 - x, color);
 23fa81e:	f8d8 3000 	ldr.w	r3, [r8]
 23fa822:	eba9 0205 	sub.w	r2, r9, r5
 23fa826:	eb07 010a 	add.w	r1, r7, sl
 23fa82a:	f8d3 b018 	ldr.w	fp, [r3, #24]
 23fa82e:	4640      	mov	r0, r8
 23fa830:	9b05      	ldr	r3, [sp, #20]
 23fa832:	b212      	sxth	r2, r2
 23fa834:	b209      	sxth	r1, r1
 23fa836:	47d8      	blx	fp
 23fa838:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x8) {
 23fa83a:	9a01      	ldr	r2, [sp, #4]
 23fa83c:	0711      	lsls	r1, r2, #28
 23fa83e:	d51e      	bpl.n	23fa87e <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x12e>
      writePixel(x0 - y, y0 + x, color);
 23fa840:	9a00      	ldr	r2, [sp, #0]
 23fa842:	f8d8 0000 	ldr.w	r0, [r8]
 23fa846:	fa1f f984 	uxth.w	r9, r4
 23fa84a:	fa15 f282 	uxtah	r2, r5, r2
 23fa84e:	eba7 0109 	sub.w	r1, r7, r9
 23fa852:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23fa856:	f8bd a000 	ldrh.w	sl, [sp]
 23fa85a:	4640      	mov	r0, r8
 23fa85c:	9305      	str	r3, [sp, #20]
 23fa85e:	b212      	sxth	r2, r2
 23fa860:	b209      	sxth	r1, r1
 23fa862:	47d8      	blx	fp
      writePixel(x0 - x, y0 + y, color);
 23fa864:	f8d8 3000 	ldr.w	r3, [r8]
 23fa868:	eb09 020a 	add.w	r2, r9, sl
 23fa86c:	1b79      	subs	r1, r7, r5
 23fa86e:	f8d3 b018 	ldr.w	fp, [r3, #24]
 23fa872:	4640      	mov	r0, r8
 23fa874:	9b05      	ldr	r3, [sp, #20]
 23fa876:	b212      	sxth	r2, r2
 23fa878:	b209      	sxth	r1, r1
 23fa87a:	47d8      	blx	fp
 23fa87c:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x1) {
 23fa87e:	9a01      	ldr	r2, [sp, #4]
 23fa880:	07d2      	lsls	r2, r2, #31
 23fa882:	d580      	bpl.n	23fa786 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x36>
      writePixel(x0 - y, y0 - x, color);
 23fa884:	f8bd 9000 	ldrh.w	r9, [sp]
 23fa888:	f8d8 0000 	ldr.w	r0, [r8]
 23fa88c:	fa1f fa84 	uxth.w	sl, r4
 23fa890:	eba9 0205 	sub.w	r2, r9, r5
 23fa894:	eba7 010a 	sub.w	r1, r7, sl
 23fa898:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23fa89c:	9305      	str	r3, [sp, #20]
 23fa89e:	4640      	mov	r0, r8
 23fa8a0:	b212      	sxth	r2, r2
 23fa8a2:	b209      	sxth	r1, r1
 23fa8a4:	47d8      	blx	fp
      writePixel(x0 - x, y0 - y, color);
 23fa8a6:	1b79      	subs	r1, r7, r5
 23fa8a8:	f8d8 5000 	ldr.w	r5, [r8]
 23fa8ac:	eba9 020a 	sub.w	r2, r9, sl
 23fa8b0:	9b05      	ldr	r3, [sp, #20]
 23fa8b2:	4640      	mov	r0, r8
 23fa8b4:	69ad      	ldr	r5, [r5, #24]
 23fa8b6:	b212      	sxth	r2, r2
 23fa8b8:	b209      	sxth	r1, r1
 23fa8ba:	47a8      	blx	r5
 23fa8bc:	9b05      	ldr	r3, [sp, #20]
 23fa8be:	e762      	b.n	23fa786 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x36>
}
 23fa8c0:	b007      	add	sp, #28
 23fa8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fa8c6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
                                    uint16_t color) {
 23fa8c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa8ca:	461c      	mov	r4, r3
 23fa8cc:	b08b      	sub	sp, #44	; 0x2c
 23fa8ce:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 23fa8d2:	4683      	mov	fp, r0
 23fa8d4:	9304      	str	r3, [sp, #16]
  int16_t f = 1 - r;
 23fa8d6:	b2a3      	uxth	r3, r4
 23fa8d8:	f1c3 0501 	rsb	r5, r3, #1
  int16_t ddF_y = -2 * r;
 23fa8dc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 23fa8e0:	005b      	lsls	r3, r3, #1
 23fa8e2:	b21b      	sxth	r3, r3
 23fa8e4:	9307      	str	r3, [sp, #28]
  delta++; // Avoid some +1's in the loop
 23fa8e6:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
                                    uint16_t color) {
 23fa8ea:	4688      	mov	r8, r1
  delta++; // Avoid some +1's in the loop
 23fa8ec:	3301      	adds	r3, #1
 23fa8ee:	b29b      	uxth	r3, r3
 23fa8f0:	9305      	str	r3, [sp, #20]
 23fa8f2:	b293      	uxth	r3, r2
 23fa8f4:	9306      	str	r3, [sp, #24]
 23fa8f6:	9b05      	ldr	r3, [sp, #20]
                                    uint16_t color) {
 23fa8f8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
  delta++; // Avoid some +1's in the loop
 23fa8fc:	9303      	str	r3, [sp, #12]
  int16_t x = 0;
 23fa8fe:	2300      	movs	r3, #0
 23fa900:	9302      	str	r3, [sp, #8]
      if (corners & 1)
 23fa902:	f001 0301 	and.w	r3, r1, #1
 23fa906:	9308      	str	r3, [sp, #32]
  delta++; // Avoid some +1's in the loop
 23fa908:	f8dd a018 	ldr.w	sl, [sp, #24]
      if (corners & 2)
 23fa90c:	f001 0302 	and.w	r3, r1, #2
  int16_t f = 1 - r;
 23fa910:	b22d      	sxth	r5, r5
      if (corners & 2)
 23fa912:	9309      	str	r3, [sp, #36]	; 0x24
  while (x < y) {
 23fa914:	9b02      	ldr	r3, [sp, #8]
 23fa916:	42a3      	cmp	r3, r4
 23fa918:	da6f      	bge.n	23fa9fa <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
    if (f >= 0) {
 23fa91a:	2d00      	cmp	r5, #0
 23fa91c:	db6b      	blt.n	23fa9f6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
      ddF_y += 2;
 23fa91e:	9b07      	ldr	r3, [sp, #28]
      y--;
 23fa920:	1e66      	subs	r6, r4, #1
      ddF_y += 2;
 23fa922:	3302      	adds	r3, #2
 23fa924:	b21a      	sxth	r2, r3
      f += ddF_y;
 23fa926:	fa15 f583 	uxtah	r5, r5, r3
      y--;
 23fa92a:	b236      	sxth	r6, r6
      ddF_y += 2;
 23fa92c:	9207      	str	r2, [sp, #28]
      f += ddF_y;
 23fa92e:	b22d      	sxth	r5, r5
    x++;
 23fa930:	9f02      	ldr	r7, [sp, #8]
 23fa932:	3701      	adds	r7, #1
 23fa934:	fa1f f987 	uxth.w	r9, r7
 23fa938:	b23b      	sxth	r3, r7
    ddF_x += 2;
 23fa93a:	eb05 0549 	add.w	r5, r5, r9, lsl #1
    f += ddF_x;
 23fa93e:	3501      	adds	r5, #1
    if (x < (y + 1)) {
 23fa940:	429e      	cmp	r6, r3
 23fa942:	9302      	str	r3, [sp, #8]
    f += ddF_x;
 23fa944:	b22d      	sxth	r5, r5
    if (x < (y + 1)) {
 23fa946:	db29      	blt.n	23fa99c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
      if (corners & 1)
 23fa948:	9b08      	ldr	r3, [sp, #32]
 23fa94a:	b193      	cbz	r3, 23fa972 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
        writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 23fa94c:	9804      	ldr	r0, [sp, #16]
 23fa94e:	9906      	ldr	r1, [sp, #24]
 23fa950:	9000      	str	r0, [sp, #0]
 23fa952:	f8db 0000 	ldr.w	r0, [fp]
 23fa956:	9b05      	ldr	r3, [sp, #20]
 23fa958:	6a00      	ldr	r0, [r0, #32]
 23fa95a:	b2b2      	uxth	r2, r6
 23fa95c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 23fa960:	1a8a      	subs	r2, r1, r2
 23fa962:	eb09 0108 	add.w	r1, r9, r8
 23fa966:	4607      	mov	r7, r0
 23fa968:	b21b      	sxth	r3, r3
 23fa96a:	4658      	mov	r0, fp
 23fa96c:	b212      	sxth	r2, r2
 23fa96e:	b209      	sxth	r1, r1
 23fa970:	47b8      	blx	r7
      if (corners & 2)
 23fa972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fa974:	b193      	cbz	r3, 23fa99c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
        writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 23fa976:	9804      	ldr	r0, [sp, #16]
 23fa978:	9906      	ldr	r1, [sp, #24]
 23fa97a:	9b05      	ldr	r3, [sp, #20]
 23fa97c:	b2b2      	uxth	r2, r6
 23fa97e:	9000      	str	r0, [sp, #0]
 23fa980:	f8db 0000 	ldr.w	r0, [fp]
 23fa984:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 23fa988:	1a8a      	subs	r2, r1, r2
 23fa98a:	eba8 0109 	sub.w	r1, r8, r9
 23fa98e:	b21b      	sxth	r3, r3
 23fa990:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fa994:	b212      	sxth	r2, r2
 23fa996:	4658      	mov	r0, fp
 23fa998:	b209      	sxth	r1, r1
 23fa99a:	47c8      	blx	r9
    if (y != py) {
 23fa99c:	42b4      	cmp	r4, r6
 23fa99e:	d020      	beq.n	23fa9e2 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
      if (corners & 1)
 23fa9a0:	9b08      	ldr	r3, [sp, #32]
 23fa9a2:	b173      	cbz	r3, 23fa9c2 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
        writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 23fa9a4:	9a04      	ldr	r2, [sp, #16]
 23fa9a6:	f8db 3000 	ldr.w	r3, [fp]
 23fa9aa:	9200      	str	r2, [sp, #0]
 23fa9ac:	eb08 0104 	add.w	r1, r8, r4
 23fa9b0:	f8d3 9020 	ldr.w	r9, [r3, #32]
 23fa9b4:	4658      	mov	r0, fp
 23fa9b6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 23fa9ba:	fa0f f28a 	sxth.w	r2, sl
 23fa9be:	b209      	sxth	r1, r1
 23fa9c0:	47c8      	blx	r9
      if (corners & 2)
 23fa9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fa9c4:	b16b      	cbz	r3, 23fa9e2 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
        writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 23fa9c6:	9a04      	ldr	r2, [sp, #16]
 23fa9c8:	f8db 3000 	ldr.w	r3, [fp]
 23fa9cc:	eba8 0104 	sub.w	r1, r8, r4
 23fa9d0:	9200      	str	r2, [sp, #0]
 23fa9d2:	6a1c      	ldr	r4, [r3, #32]
 23fa9d4:	4658      	mov	r0, fp
 23fa9d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 23fa9da:	fa0f f28a 	sxth.w	r2, sl
 23fa9de:	b209      	sxth	r1, r1
 23fa9e0:	47a0      	blx	r4
 23fa9e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 23fa9e6:	fa1f fa83 	uxth.w	sl, r3
 23fa9ea:	9b03      	ldr	r3, [sp, #12]
                                    uint16_t color) {
 23fa9ec:	4634      	mov	r4, r6
 23fa9ee:	3302      	adds	r3, #2
 23fa9f0:	b29b      	uxth	r3, r3
 23fa9f2:	9303      	str	r3, [sp, #12]
 23fa9f4:	e78e      	b.n	23fa914 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
 23fa9f6:	4626      	mov	r6, r4
 23fa9f8:	e79a      	b.n	23fa930 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
 23fa9fa:	b00b      	add	sp, #44	; 0x2c
 23fa9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023faa00 <_ZN12Adafruit_GFX13drawRoundRectEssssst>:
                                 int16_t r, uint16_t color) {
 23faa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23faa04:	b089      	sub	sp, #36	; 0x24
 23faa06:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 23faa0a:	468b      	mov	fp, r1
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23faa0c:	4599      	cmp	r9, r3
 23faa0e:	464d      	mov	r5, r9
 23faa10:	bfa8      	it	ge
 23faa12:	461d      	movge	r5, r3
                                 int16_t r, uint16_t color) {
 23faa14:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23faa18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 23faa1c:	106e      	asrs	r6, r5, #1
 23faa1e:	428e      	cmp	r6, r1
 23faa20:	bfa8      	it	ge
 23faa22:	460e      	movge	r6, r1
                                 int16_t r, uint16_t color) {
 23faa24:	4604      	mov	r4, r0
  startWrite();
 23faa26:	6801      	ldr	r1, [r0, #0]
                                 int16_t r, uint16_t color) {
 23faa28:	9205      	str	r2, [sp, #20]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23faa2a:	9302      	str	r3, [sp, #8]
  startWrite();
 23faa2c:	6949      	ldr	r1, [r1, #20]
                                 int16_t r, uint16_t color) {
 23faa2e:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
  startWrite();
 23faa32:	4788      	blx	r1
  writeFastHLine(x + r, y, w - 2 * r, color);         // Top
 23faa34:	fa1f f38b 	uxth.w	r3, fp
 23faa38:	9304      	str	r3, [sp, #16]
 23faa3a:	9b02      	ldr	r3, [sp, #8]
 23faa3c:	fa1f fa86 	uxth.w	sl, r6
 23faa40:	b29b      	uxth	r3, r3
 23faa42:	9302      	str	r3, [sp, #8]
 23faa44:	ea4f 034a 	mov.w	r3, sl, lsl #1
 23faa48:	b29b      	uxth	r3, r3
 23faa4a:	9303      	str	r3, [sp, #12]
 23faa4c:	6821      	ldr	r1, [r4, #0]
 23faa4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 23faa52:	fa1a f88b 	uxtah	r8, sl, fp
 23faa56:	1a9b      	subs	r3, r3, r2
 23faa58:	fa0f f888 	sxth.w	r8, r8
 23faa5c:	b21b      	sxth	r3, r3
 23faa5e:	9700      	str	r7, [sp, #0]
 23faa60:	4620      	mov	r0, r4
 23faa62:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 23faa64:	9a05      	ldr	r2, [sp, #20]
 23faa66:	4641      	mov	r1, r8
 23faa68:	9307      	str	r3, [sp, #28]
 23faa6a:	47a8      	blx	r5
  writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 23faa6c:	9a05      	ldr	r2, [sp, #20]
 23faa6e:	6821      	ldr	r1, [r4, #0]
 23faa70:	b295      	uxth	r5, r2
 23faa72:	1e6a      	subs	r2, r5, #1
 23faa74:	fa1f f389 	uxth.w	r3, r9
 23faa78:	fa12 f289 	uxtah	r2, r2, r9
 23faa7c:	9305      	str	r3, [sp, #20]
 23faa7e:	9700      	str	r7, [sp, #0]
 23faa80:	b293      	uxth	r3, r2
 23faa82:	4620      	mov	r0, r4
 23faa84:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 23faa88:	9306      	str	r3, [sp, #24]
 23faa8a:	4641      	mov	r1, r8
 23faa8c:	9b07      	ldr	r3, [sp, #28]
 23faa8e:	b212      	sxth	r2, r2
 23faa90:	47c8      	blx	r9
  writeFastVLine(x, y + r, h - 2 * r, color);         // Left
 23faa92:	9903      	ldr	r1, [sp, #12]
 23faa94:	9b05      	ldr	r3, [sp, #20]
 23faa96:	eb0a 0205 	add.w	r2, sl, r5
 23faa9a:	1a5b      	subs	r3, r3, r1
 23faa9c:	6821      	ldr	r1, [r4, #0]
 23faa9e:	b212      	sxth	r2, r2
 23faaa0:	b21b      	sxth	r3, r3
 23faaa2:	9700      	str	r7, [sp, #0]
 23faaa4:	4620      	mov	r0, r4
 23faaa6:	6a0d      	ldr	r5, [r1, #32]
 23faaa8:	9305      	str	r3, [sp, #20]
 23faaaa:	4659      	mov	r1, fp
 23faaac:	9203      	str	r2, [sp, #12]
 23faaae:	47a8      	blx	r5
  writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 23faab0:	9b04      	ldr	r3, [sp, #16]
 23faab2:	6820      	ldr	r0, [r4, #0]
 23faab4:	1e59      	subs	r1, r3, #1
 23faab6:	9b02      	ldr	r3, [sp, #8]
 23faab8:	9a03      	ldr	r2, [sp, #12]
 23faaba:	4419      	add	r1, r3
 23faabc:	9700      	str	r7, [sp, #0]
 23faabe:	6a05      	ldr	r5, [r0, #32]
 23faac0:	9b05      	ldr	r3, [sp, #20]
 23faac2:	4620      	mov	r0, r4
 23faac4:	fa1f f981 	uxth.w	r9, r1
 23faac8:	9202      	str	r2, [sp, #8]
 23faaca:	b209      	sxth	r1, r1
 23faacc:	47a8      	blx	r5
  drawCircleHelper(x + r, y + r, r, 1, color);
 23faace:	2301      	movs	r3, #1
 23faad0:	4641      	mov	r1, r8
 23faad2:	4620      	mov	r0, r4
 23faad4:	9a02      	ldr	r2, [sp, #8]
 23faad6:	9300      	str	r3, [sp, #0]
 23faad8:	9701      	str	r7, [sp, #4]
 23faada:	4633      	mov	r3, r6
 23faadc:	f7ff fe38 	bl	23fa750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 23faae0:	2302      	movs	r3, #2
 23faae2:	eba9 010a 	sub.w	r1, r9, sl
 23faae6:	4620      	mov	r0, r4
 23faae8:	9a02      	ldr	r2, [sp, #8]
 23faaea:	b209      	sxth	r1, r1
 23faaec:	9300      	str	r3, [sp, #0]
 23faaee:	9701      	str	r7, [sp, #4]
 23faaf0:	4633      	mov	r3, r6
 23faaf2:	9103      	str	r1, [sp, #12]
 23faaf4:	f7ff fe2c 	bl	23fa750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 23faaf8:	9b06      	ldr	r3, [sp, #24]
 23faafa:	4620      	mov	r0, r4
 23faafc:	eba3 020a 	sub.w	r2, r3, sl
 23fab00:	2304      	movs	r3, #4
 23fab02:	9903      	ldr	r1, [sp, #12]
 23fab04:	b212      	sxth	r2, r2
 23fab06:	9300      	str	r3, [sp, #0]
 23fab08:	9701      	str	r7, [sp, #4]
 23fab0a:	4633      	mov	r3, r6
 23fab0c:	9202      	str	r2, [sp, #8]
 23fab0e:	f7ff fe1f 	bl	23fa750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 23fab12:	2308      	movs	r3, #8
 23fab14:	4620      	mov	r0, r4
 23fab16:	9300      	str	r3, [sp, #0]
 23fab18:	4641      	mov	r1, r8
 23fab1a:	4633      	mov	r3, r6
 23fab1c:	9a02      	ldr	r2, [sp, #8]
 23fab1e:	9701      	str	r7, [sp, #4]
 23fab20:	f7ff fe16 	bl	23fa750 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  endWrite();
 23fab24:	4620      	mov	r0, r4
 23fab26:	6823      	ldr	r3, [r4, #0]
 23fab28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fab2a:	b009      	add	sp, #36	; 0x24
 23fab2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23fab30:	4718      	bx	r3

023fab32 <_ZN12Adafruit_GFX13fillRoundRectEssssst>:
                                 int16_t r, uint16_t color) {
 23fab32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fab36:	ed2d 8b02 	vpush	{d8}
 23fab3a:	4699      	mov	r9, r3
 23fab3c:	b087      	sub	sp, #28
 23fab3e:	f9bd 5048 	ldrsh.w	r5, [sp, #72]	; 0x48
 23fab42:	460f      	mov	r7, r1
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fab44:	454d      	cmp	r5, r9
 23fab46:	462b      	mov	r3, r5
 23fab48:	bfa8      	it	ge
 23fab4a:	464b      	movge	r3, r9
                                 int16_t r, uint16_t color) {
 23fab4c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fab50:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23fab54:	105c      	asrs	r4, r3, #1
 23fab56:	428c      	cmp	r4, r1
 23fab58:	bfa8      	it	ge
 23fab5a:	460c      	movge	r4, r1
  startWrite();
 23fab5c:	6803      	ldr	r3, [r0, #0]
                                 int16_t r, uint16_t color) {
 23fab5e:	4606      	mov	r6, r0
  writeFillRect(x + r, y, w - 2 * r, h, color);
 23fab60:	fa1f f884 	uxth.w	r8, r4
  startWrite();
 23fab64:	695b      	ldr	r3, [r3, #20]
                                 int16_t r, uint16_t color) {
 23fab66:	4693      	mov	fp, r2
 23fab68:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 23fab6c:	4798      	blx	r3
  writeFillRect(x + r, y, w - 2 * r, h, color);
 23fab6e:	b2bb      	uxth	r3, r7
 23fab70:	fa18 f787 	uxtah	r7, r8, r7
 23fab74:	9305      	str	r3, [sp, #20]
 23fab76:	b23b      	sxth	r3, r7
 23fab78:	ee08 3a10 	vmov	s16, r3
 23fab7c:	e9cd 5a00 	strd	r5, sl, [sp]
 23fab80:	6831      	ldr	r1, [r6, #0]
 23fab82:	fa1f f389 	uxth.w	r3, r9
 23fab86:	ea4f 0948 	mov.w	r9, r8, lsl #1
 23fab8a:	69ca      	ldr	r2, [r1, #28]
 23fab8c:	fa1f f989 	uxth.w	r9, r9
 23fab90:	9304      	str	r3, [sp, #16]
 23fab92:	eba3 0309 	sub.w	r3, r3, r9
 23fab96:	4617      	mov	r7, r2
 23fab98:	ee18 1a10 	vmov	r1, s16
 23fab9c:	465a      	mov	r2, fp
 23fab9e:	4630      	mov	r0, r6
 23faba0:	b21b      	sxth	r3, r3
 23faba2:	47b8      	blx	r7
  fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 23faba4:	9b05      	ldr	r3, [sp, #20]
 23faba6:	3d01      	subs	r5, #1
 23faba8:	1e59      	subs	r1, r3, #1
 23fabaa:	9b04      	ldr	r3, [sp, #16]
 23fabac:	eba5 0509 	sub.w	r5, r5, r9
 23fabb0:	4419      	add	r1, r3
 23fabb2:	2301      	movs	r3, #1
 23fabb4:	b22d      	sxth	r5, r5
 23fabb6:	eb08 020b 	add.w	r2, r8, fp
 23fabba:	eba1 0108 	sub.w	r1, r1, r8
 23fabbe:	4630      	mov	r0, r6
 23fabc0:	b212      	sxth	r2, r2
 23fabc2:	9300      	str	r3, [sp, #0]
 23fabc4:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 23fabc8:	4623      	mov	r3, r4
 23fabca:	b209      	sxth	r1, r1
 23fabcc:	9204      	str	r2, [sp, #16]
 23fabce:	f7ff fe7a 	bl	23fa8c6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 23fabd2:	2302      	movs	r3, #2
 23fabd4:	4630      	mov	r0, r6
 23fabd6:	9300      	str	r3, [sp, #0]
 23fabd8:	ee18 1a10 	vmov	r1, s16
 23fabdc:	4623      	mov	r3, r4
 23fabde:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 23fabe2:	9a04      	ldr	r2, [sp, #16]
 23fabe4:	f7ff fe6f 	bl	23fa8c6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 23fabe8:	4630      	mov	r0, r6
 23fabea:	6833      	ldr	r3, [r6, #0]
 23fabec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fabee:	b007      	add	sp, #28
 23fabf0:	ecbd 8b02 	vpop	{d8}
 23fabf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23fabf8:	4718      	bx	r3

023fabfa <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
 23fabfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 23fabfe:	2600      	movs	r6, #0
  uint8_t b = 0;
 23fac00:	4635      	mov	r5, r6
                              int16_t w, int16_t h, uint16_t color) {
 23fac02:	b089      	sub	sp, #36	; 0x24
 23fac04:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fac08:	9304      	str	r3, [sp, #16]
  startWrite();
 23fac0a:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
 23fac0c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 23fac10:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
  startWrite();
 23fac14:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
 23fac16:	9305      	str	r3, [sp, #20]
 23fac18:	4604      	mov	r4, r0
 23fac1a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 23fac1e:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 23fac20:	f118 0207 	adds.w	r2, r8, #7
 23fac24:	bf48      	it	mi
 23fac26:	f108 020e 	addmi.w	r2, r8, #14
 23fac2a:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
 23fac2e:	9601      	str	r6, [sp, #4]
 23fac30:	9b03      	ldr	r3, [sp, #12]
 23fac32:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
 23fac34:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 23fac38:	189a      	adds	r2, r3, r2
 23fac3a:	9b05      	ldr	r3, [sp, #20]
 23fac3c:	b212      	sxth	r2, r2
 23fac3e:	428b      	cmp	r3, r1
 23fac40:	dd27      	ble.n	23fac92 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 23fac42:	f04f 0900 	mov.w	r9, #0
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23fac46:	9b04      	ldr	r3, [sp, #16]
 23fac48:	4433      	add	r3, r6
 23fac4a:	9306      	str	r3, [sp, #24]
 23fac4c:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
 23fac50:	4580      	cmp	r8, r0
 23fac52:	fa1f f189 	uxth.w	r1, r9
 23fac56:	dd17      	ble.n	23fac88 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if (i & 7)
 23fac58:	074f      	lsls	r7, r1, #29
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23fac5a:	bf05      	ittet	eq
 23fac5c:	9b06      	ldreq	r3, [sp, #24]
 23fac5e:	10c0      	asreq	r0, r0, #3
        b <<= 1;
 23fac60:	006d      	lslne	r5, r5, #1
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23fac62:	5c1d      	ldrbeq	r5, [r3, r0]
        b <<= 1;
 23fac64:	bf18      	it	ne
 23fac66:	b2ed      	uxtbne	r5, r5
      if (b & 0x80)
 23fac68:	062b      	lsls	r3, r5, #24
 23fac6a:	d50a      	bpl.n	23fac82 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
        writePixel(x + i, y, color);
 23fac6c:	9b02      	ldr	r3, [sp, #8]
 23fac6e:	6820      	ldr	r0, [r4, #0]
 23fac70:	4419      	add	r1, r3
 23fac72:	6983      	ldr	r3, [r0, #24]
 23fac74:	9207      	str	r2, [sp, #28]
 23fac76:	461f      	mov	r7, r3
 23fac78:	4620      	mov	r0, r4
 23fac7a:	4653      	mov	r3, sl
 23fac7c:	b209      	sxth	r1, r1
 23fac7e:	47b8      	blx	r7
 23fac80:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
 23fac82:	f109 0901 	add.w	r9, r9, #1
 23fac86:	e7e1      	b.n	23fac4c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
  for (int16_t j = 0; j < h; j++, y++) {
 23fac88:	9b01      	ldr	r3, [sp, #4]
 23fac8a:	445e      	add	r6, fp
 23fac8c:	3301      	adds	r3, #1
 23fac8e:	9301      	str	r3, [sp, #4]
 23fac90:	e7ce      	b.n	23fac30 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
  endWrite();
 23fac92:	4620      	mov	r0, r4
 23fac94:	6823      	ldr	r3, [r4, #0]
 23fac96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fac98:	b009      	add	sp, #36	; 0x24
 23fac9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23fac9e:	4718      	bx	r3

023faca0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 23faca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23faca4:	ed2d 8b02 	vpush	{d8}
 23faca8:	b091      	sub	sp, #68	; 0x44
 23facaa:	4616      	mov	r6, r2
 23facac:	461f      	mov	r7, r3
  if (!gfxFont) { // 'Classic' built-in font
 23facae:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 23facb0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23facb4:	4683      	mov	fp, r0
 23facb6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23facba:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23facbe:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23facc2:	9103      	str	r1, [sp, #12]
 23facc4:	9304      	str	r3, [sp, #16]
  if (!gfxFont) { // 'Classic' built-in font
 23facc6:	2a00      	cmp	r2, #0
 23facc8:	f040 80c5 	bne.w	23fae56 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
 23faccc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23facd0:	428b      	cmp	r3, r1
 23facd2:	f340 814c 	ble.w	23faf6e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23facd6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23facda:	42b3      	cmp	r3, r6
 23facdc:	f340 8147 	ble.w	23faf6e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23face0:	2306      	movs	r3, #6
 23face2:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 23face6:	2b00      	cmp	r3, #0
 23face8:	f340 8141 	ble.w	23faf6e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 23facec:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23facf0:	2b00      	cmp	r3, #0
 23facf2:	f340 813c 	ble.w	23faf6e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
 23facf6:	7f03      	ldrb	r3, [r0, #28]
 23facf8:	b91b      	cbnz	r3, 23fad02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23facfa:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 23facfc:	bf84      	itt	hi
 23facfe:	3701      	addhi	r7, #1
 23fad00:	b2ff      	uxtbhi	r7, r7
    startWrite();
 23fad02:	f8db 3000 	ldr.w	r3, [fp]
 23fad06:	4658      	mov	r0, fp
 23fad08:	695b      	ldr	r3, [r3, #20]
 23fad0a:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fad0c:	2205      	movs	r2, #5
 23fad0e:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23fad10:	2200      	movs	r2, #0
 23fad12:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fad14:	4a98      	ldr	r2, [pc, #608]	; (23faf78 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fad16:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fad1a:	18d3      	adds	r3, r2, r3
 23fad1c:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
 23fad1e:	b2b3      	uxth	r3, r6
 23fad20:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fad22:	9a05      	ldr	r2, [sp, #20]
 23fad24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fad26:	fb02 f905 	mul.w	r9, r2, r5
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fad2a:	5c9b      	ldrb	r3, [r3, r2]
 23fad2c:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fad2e:	b2ab      	uxth	r3, r5
 23fad30:	930b      	str	r3, [sp, #44]	; 0x2c
 23fad32:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fad36:	9308      	str	r3, [sp, #32]
 23fad38:	9b03      	ldr	r3, [sp, #12]
 23fad3a:	fa19 f983 	uxtah	r9, r9, r3
 23fad3e:	fa0f f389 	sxth.w	r3, r9
 23fad42:	ee08 3a10 	vmov	s16, r3
 23fad46:	2308      	movs	r3, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23fad48:	f04f 0900 	mov.w	r9, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fad4c:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
 23fad4e:	9b03      	ldr	r3, [sp, #12]
 23fad50:	eb02 0a03 	add.w	sl, r2, r3
 23fad54:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
 23fad58:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
 23fad5a:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
 23fad5e:	07d2      	lsls	r2, r2, #31
 23fad60:	d552      	bpl.n	23fae08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
 23fad62:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23fad64:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23fad68:	d13e      	bne.n	23fade8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fad6a:	2c01      	cmp	r4, #1
 23fad6c:	d13c      	bne.n	23fade8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
 23fad6e:	699b      	ldr	r3, [r3, #24]
 23fad70:	9906      	ldr	r1, [sp, #24]
 23fad72:	461f      	mov	r7, r3
 23fad74:	9b04      	ldr	r3, [sp, #16]
 23fad76:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 23fad78:	4651      	mov	r1, sl
 23fad7a:	4658      	mov	r0, fp
 23fad7c:	b212      	sxth	r2, r2
 23fad7e:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23fad80:	f109 0301 	add.w	r3, r9, #1
 23fad84:	fa4f f983 	sxtb.w	r9, r3
 23fad88:	9b07      	ldr	r3, [sp, #28]
 23fad8a:	085b      	lsrs	r3, r3, #1
 23fad8c:	9307      	str	r3, [sp, #28]
 23fad8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fad90:	3b01      	subs	r3, #1
 23fad92:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fad96:	930a      	str	r3, [sp, #40]	; 0x28
 23fad98:	d1de      	bne.n	23fad58 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23fad9a:	9f05      	ldr	r7, [sp, #20]
 23fad9c:	3701      	adds	r7, #1
 23fad9e:	b27b      	sxtb	r3, r7
 23fada0:	9305      	str	r3, [sp, #20]
 23fada2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fada4:	3b01      	subs	r3, #1
 23fada6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fadaa:	9309      	str	r3, [sp, #36]	; 0x24
 23fadac:	d1b9      	bne.n	23fad22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
 23fadae:	9b04      	ldr	r3, [sp, #16]
 23fadb0:	4543      	cmp	r3, r8
 23fadb2:	d00f      	beq.n	23fadd4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
 23fadb4:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
 23fadb6:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
 23fadba:	d13b      	bne.n	23fae34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fadbc:	2c01      	cmp	r4, #1
 23fadbe:	d139      	bne.n	23fae34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
 23fadc0:	9908      	ldr	r1, [sp, #32]
 23fadc2:	f8cd 8000 	str.w	r8, [sp]
 23fadc6:	3105      	adds	r1, #5
 23fadc8:	6a1c      	ldr	r4, [r3, #32]
 23fadca:	4632      	mov	r2, r6
 23fadcc:	2308      	movs	r3, #8
 23fadce:	4658      	mov	r0, fp
 23fadd0:	b209      	sxth	r1, r1
 23fadd2:	47a0      	blx	r4
    endWrite();
 23fadd4:	4658      	mov	r0, fp
 23fadd6:	f8db 3000 	ldr.w	r3, [fp]
 23fadda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23faddc:	b011      	add	sp, #68	; 0x44
 23fadde:	ecbd 8b02 	vpop	{d8}
 23fade2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23fade6:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 23fade8:	fb14 f202 	smulbb	r2, r4, r2
 23fadec:	9906      	ldr	r1, [sp, #24]
 23fadee:	440a      	add	r2, r1
 23fadf0:	9904      	ldr	r1, [sp, #16]
 23fadf2:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fadf4:	9400      	str	r4, [sp, #0]
 23fadf6:	69db      	ldr	r3, [r3, #28]
 23fadf8:	ee18 1a10 	vmov	r1, s16
 23fadfc:	461f      	mov	r7, r3
 23fadfe:	4658      	mov	r0, fp
 23fae00:	462b      	mov	r3, r5
 23fae02:	b212      	sxth	r2, r2
 23fae04:	47b8      	blx	r7
 23fae06:	e7bb      	b.n	23fad80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
 23fae08:	9a04      	ldr	r2, [sp, #16]
 23fae0a:	4542      	cmp	r2, r8
 23fae0c:	d0b8      	beq.n	23fad80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
 23fae0e:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23fae10:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23fae14:	d107      	bne.n	23fae26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fae16:	2c01      	cmp	r4, #1
 23fae18:	d105      	bne.n	23fae26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
 23fae1a:	699b      	ldr	r3, [r3, #24]
 23fae1c:	9906      	ldr	r1, [sp, #24]
 23fae1e:	461f      	mov	r7, r3
 23fae20:	440a      	add	r2, r1
 23fae22:	4643      	mov	r3, r8
 23fae24:	e7a8      	b.n	23fad78 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fae26:	fb14 f202 	smulbb	r2, r4, r2
 23fae2a:	9906      	ldr	r1, [sp, #24]
 23fae2c:	f8cd 8004 	str.w	r8, [sp, #4]
 23fae30:	440a      	add	r2, r1
 23fae32:	e7df      	b.n	23fadf4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 23fae34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fae36:	00e4      	lsls	r4, r4, #3
 23fae38:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fae3c:	9a08      	ldr	r2, [sp, #32]
 23fae3e:	f8cd 8004 	str.w	r8, [sp, #4]
 23fae42:	440a      	add	r2, r1
 23fae44:	4611      	mov	r1, r2
 23fae46:	9400      	str	r4, [sp, #0]
 23fae48:	69dc      	ldr	r4, [r3, #28]
 23fae4a:	4632      	mov	r2, r6
 23fae4c:	462b      	mov	r3, r5
 23fae4e:	4658      	mov	r0, fp
 23fae50:	b209      	sxth	r1, r1
 23fae52:	47a0      	blx	r4
    endWrite();
 23fae54:	e7be      	b.n	23fadd4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fae56:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 23fae58:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fae5a:	1aff      	subs	r7, r7, r3
  return gfxFont->bitmap;
 23fae5c:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 23fae5e:	b2ff      	uxtb	r7, r7
  return gfxFont->bitmap;
 23fae60:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fae62:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
  return gfxFont->glyph + c;
 23fae66:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fae6a:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23fae6c:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 23fae6e:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23fae70:	9209      	str	r2, [sp, #36]	; 0x24
 23fae72:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 23fae74:	f993 a006 	ldrsb.w	sl, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23fae78:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 23fae7a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fae7e:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
 23fae80:	d801      	bhi.n	23fae86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fae82:	2c01      	cmp	r4, #1
 23fae84:	d957      	bls.n	23faf36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
 23fae86:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fae8a:	9308      	str	r3, [sp, #32]
      yo16 = yo;
 23fae8c:	fa0f f38a 	sxth.w	r3, sl
 23fae90:	9307      	str	r3, [sp, #28]
    uint8_t xx, yy, bits = 0, bit = 0;
 23fae92:	f04f 0800 	mov.w	r8, #0
 23fae96:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
 23fae98:	4647      	mov	r7, r8
    startWrite();
 23fae9a:	f8db 3000 	ldr.w	r3, [fp]
 23fae9e:	4658      	mov	r0, fp
 23faea0:	695b      	ldr	r3, [r3, #20]
 23faea2:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23faea4:	b2b3      	uxth	r3, r6
 23faea6:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
 23faea8:	fa1a f386 	uxtah	r3, sl, r6
 23faeac:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 23faeae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23faeb0:	429f      	cmp	r7, r3
 23faeb2:	d28f      	bcs.n	23fadd4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23faeb4:	9b07      	ldr	r3, [sp, #28]
 23faeb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23faeb8:	443b      	add	r3, r7
 23faeba:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
 23faebe:	2200      	movs	r2, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23faec0:	b21b      	sxth	r3, r3
 23faec2:	ee08 3a10 	vmov	s16, r3
 23faec6:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
 23faec8:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
 23faeca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23faecc:	eb02 0a07 	add.w	sl, r2, r7
 23faed0:	fa0f fa8a 	sxth.w	sl, sl
      for (xx = 0; xx < w; xx++) {
 23faed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23faed6:	9905      	ldr	r1, [sp, #20]
 23faed8:	4291      	cmp	r1, r2
 23faeda:	d241      	bcs.n	23faf60 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
 23faedc:	1c5a      	adds	r2, r3, #1
 23faede:	b2d2      	uxtb	r2, r2
 23faee0:	075b      	lsls	r3, r3, #29
 23faee2:	920d      	str	r2, [sp, #52]	; 0x34
 23faee4:	d107      	bne.n	23faef6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
 23faee6:	9b06      	ldr	r3, [sp, #24]
 23faee8:	9906      	ldr	r1, [sp, #24]
 23faeea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23faeec:	3301      	adds	r3, #1
 23faeee:	b29b      	uxth	r3, r3
 23faef0:	f812 9001 	ldrb.w	r9, [r2, r1]
 23faef4:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 23faef6:	f019 0f80 	tst.w	r9, #128	; 0x80
 23faefa:	d012      	beq.n	23faf22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
 23faefc:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
 23faefe:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23faf02:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
 23faf06:	d11a      	bne.n	23faf3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23faf08:	2c01      	cmp	r4, #1
 23faf0a:	d118      	bne.n	23faf3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
 23faf0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23faf0e:	699b      	ldr	r3, [r3, #24]
 23faf10:	4411      	add	r1, r2
 23faf12:	9a05      	ldr	r2, [sp, #20]
 23faf14:	461e      	mov	r6, r3
 23faf16:	4411      	add	r1, r2
 23faf18:	4658      	mov	r0, fp
 23faf1a:	4652      	mov	r2, sl
 23faf1c:	9b04      	ldr	r3, [sp, #16]
 23faf1e:	b209      	sxth	r1, r1
 23faf20:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
 23faf22:	9e05      	ldr	r6, [sp, #20]
        bits <<= 1;
 23faf24:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 23faf28:	3601      	adds	r6, #1
 23faf2a:	b2f3      	uxtb	r3, r6
 23faf2c:	9305      	str	r3, [sp, #20]
        bits <<= 1;
 23faf2e:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
 23faf32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
 23faf34:	e7ce      	b.n	23faed4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
 23faf36:	2300      	movs	r3, #0
 23faf38:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23faf3c:	e7a9      	b.n	23fae92 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23faf3e:	9805      	ldr	r0, [sp, #20]
 23faf40:	9a08      	ldr	r2, [sp, #32]
 23faf42:	4402      	add	r2, r0
 23faf44:	fb02 1105 	mla	r1, r2, r5, r1
 23faf48:	9a04      	ldr	r2, [sp, #16]
 23faf4a:	4658      	mov	r0, fp
 23faf4c:	e9cd 4200 	strd	r4, r2, [sp]
 23faf50:	69db      	ldr	r3, [r3, #28]
 23faf52:	ee18 2a10 	vmov	r2, s16
 23faf56:	461e      	mov	r6, r3
 23faf58:	b209      	sxth	r1, r1
 23faf5a:	462b      	mov	r3, r5
 23faf5c:	47b0      	blx	r6
 23faf5e:	e7e0      	b.n	23faf22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23faf60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
 23faf62:	3701      	adds	r7, #1
 23faf64:	4498      	add	r8, r3
 23faf66:	fa5f f888 	uxtb.w	r8, r8
 23faf6a:	b2ff      	uxtb	r7, r7
 23faf6c:	e79f      	b.n	23faeae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23faf6e:	b011      	add	sp, #68	; 0x44
 23faf70:	ecbd 8b02 	vpop	{d8}
 23faf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23faf78:	023ff350 	.word	0x023ff350

023faf7c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23faf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 23faf7e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23faf80:	4604      	mov	r4, r0
 23faf82:	460b      	mov	r3, r1
 23faf84:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 23faf86:	2a00      	cmp	r2, #0
 23faf88:	d134      	bne.n	23faff4 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 23faf8a:	290a      	cmp	r1, #10
 23faf8c:	d108      	bne.n	23fafa0 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 23faf8e:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 23faf90:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23faf92:	7e42      	ldrb	r2, [r0, #25]
 23faf94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 23faf98:	8263      	strh	r3, [r4, #18]
}
 23faf9a:	2001      	movs	r0, #1
 23faf9c:	b005      	add	sp, #20
 23faf9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 23fafa0:	290d      	cmp	r1, #13
 23fafa2:	d0fa      	beq.n	23faf9a <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fafa4:	7ee1      	ldrb	r1, [r4, #27]
 23fafa6:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23fafa8:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fafaa:	b171      	cbz	r1, 23fafca <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fafac:	2106      	movs	r1, #6
 23fafae:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fafb2:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fafb6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fafba:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
 23fafbc:	bfc1      	itttt	gt
 23fafbe:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 23fafc2:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 23fafc4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fafc8:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23fafca:	8ae2      	ldrh	r2, [r4, #22]
 23fafcc:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fafd0:	9201      	str	r2, [sp, #4]
 23fafd2:	8aa2      	ldrh	r2, [r4, #20]
 23fafd4:	4620      	mov	r0, r4
 23fafd6:	9200      	str	r2, [sp, #0]
 23fafd8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fafdc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fafe0:	f7ff fe5e 	bl	23faca0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 23fafe4:	7e23      	ldrb	r3, [r4, #24]
 23fafe6:	8a22      	ldrh	r2, [r4, #16]
 23fafe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fafec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 23faff0:	8223      	strh	r3, [r4, #16]
 23faff2:	e7d2      	b.n	23faf9a <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 23faff4:	290a      	cmp	r1, #10
 23faff6:	d107      	bne.n	23fb008 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 23faff8:	2300      	movs	r3, #0
 23faffa:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23faffc:	7e41      	ldrb	r1, [r0, #25]
 23faffe:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
 23fb000:	8a43      	ldrh	r3, [r0, #18]
 23fb002:	fb01 3302 	mla	r3, r1, r2, r3
 23fb006:	e7c7      	b.n	23faf98 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 23fb008:	290d      	cmp	r1, #13
 23fb00a:	d0c6      	beq.n	23faf9a <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 23fb00c:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fb00e:	42a9      	cmp	r1, r5
 23fb010:	d3c3      	bcc.n	23faf9a <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fb012:	7a91      	ldrb	r1, [r2, #10]
 23fb014:	4299      	cmp	r1, r3
 23fb016:	d3c0      	bcc.n	23faf9a <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 23fb018:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 23fb01a:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 23fb01c:	b2ed      	uxtb	r5, r5
 23fb01e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 23fb022:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fb024:	b328      	cbz	r0, 23fb072 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fb026:	78e9      	ldrb	r1, [r5, #3]
 23fb028:	b319      	cbz	r1, 23fb072 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fb02a:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb02c:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23fb02e:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fb030:	b191      	cbz	r1, 23fb058 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fb032:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fb036:	4408      	add	r0, r1
 23fb038:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb03c:	fb06 1100 	mla	r1, r6, r0, r1
 23fb040:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fb044:	4281      	cmp	r1, r0
 23fb046:	dd07      	ble.n	23fb058 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 23fb048:	2000      	movs	r0, #0
 23fb04a:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23fb04c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fb050:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 23fb052:	fb02 1207 	mla	r2, r2, r7, r1
 23fb056:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23fb058:	8ae2      	ldrh	r2, [r4, #22]
 23fb05a:	4620      	mov	r0, r4
 23fb05c:	9201      	str	r2, [sp, #4]
 23fb05e:	8aa2      	ldrh	r2, [r4, #20]
 23fb060:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fb064:	9200      	str	r2, [sp, #0]
 23fb066:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb06a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fb06e:	f7ff fe17 	bl	23faca0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fb072:	7929      	ldrb	r1, [r5, #4]
 23fb074:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 23fb076:	8a23      	ldrh	r3, [r4, #16]
 23fb078:	fb01 3302 	mla	r3, r1, r2, r3
 23fb07c:	e7b8      	b.n	23faff0 <_ZN12Adafruit_GFX5writeEh+0x74>

023fb07e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
 23fb07e:	2901      	cmp	r1, #1
 23fb080:	bf38      	it	cc
 23fb082:	2101      	movcc	r1, #1
 23fb084:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 23fb086:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 23fb088:	4770      	bx	lr

023fb08a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
    if (!gfxFont) { // And no current font struct?
 23fb08a:	6a03      	ldr	r3, [r0, #32]
  if (f) {          // Font struct pointer passed in?
 23fb08c:	b129      	cbz	r1, 23fb09a <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x10>
    if (!gfxFont) { // And no current font struct?
 23fb08e:	b913      	cbnz	r3, 23fb096 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
      cursor_y += 6;
 23fb090:	8a43      	ldrh	r3, [r0, #18]
 23fb092:	3306      	adds	r3, #6
    cursor_y -= 6;
 23fb094:	8243      	strh	r3, [r0, #18]
  gfxFont = (GFXfont *)f;
 23fb096:	6201      	str	r1, [r0, #32]
}
 23fb098:	4770      	bx	lr
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
 23fb09a:	2b00      	cmp	r3, #0
 23fb09c:	d0fb      	beq.n	23fb096 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
    cursor_y -= 6;
 23fb09e:	8a43      	ldrh	r3, [r0, #18]
 23fb0a0:	3b06      	subs	r3, #6
 23fb0a2:	e7f7      	b.n	23fb094 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xa>

023fb0a4 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23fb0a4:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fb0a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23fb0a8:	db66      	blt.n	23fb178 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
 23fb0aa:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fb0ae:	428c      	cmp	r4, r1
 23fb0b0:	dd62      	ble.n	23fb178 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
 23fb0b2:	2a00      	cmp	r2, #0
 23fb0b4:	db60      	blt.n	23fb178 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
 23fb0b6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fb0ba:	4294      	cmp	r4, r2
 23fb0bc:	dd5c      	ble.n	23fb178 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 23fb0be:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 23fb0c0:	2c02      	cmp	r4, #2
 23fb0c2:	d05a      	beq.n	23fb17a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
 23fb0c4:	2c03      	cmp	r4, #3
 23fb0c6:	d061      	beq.n	23fb18c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
 23fb0c8:	2c01      	cmp	r4, #1
 23fb0ca:	d104      	bne.n	23fb0d6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
 23fb0cc:	43d2      	mvns	r2, r2
 23fb0ce:	8904      	ldrh	r4, [r0, #8]
 23fb0d0:	4414      	add	r4, r2
      break;
 23fb0d2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 23fb0d4:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
 23fb0d6:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
 23fb0da:	428c      	cmp	r4, r1
 23fb0dc:	bfa8      	it	ge
 23fb0de:	460c      	movge	r4, r1
 23fb0e0:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
 23fb0e2:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 23fb0e6:	4294      	cmp	r4, r2
 23fb0e8:	bfa8      	it	ge
 23fb0ea:	4614      	movge	r4, r2
 23fb0ec:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
 23fb0ee:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
 23fb0f2:	428c      	cmp	r4, r1
 23fb0f4:	bfb8      	it	lt
 23fb0f6:	460c      	movlt	r4, r1
 23fb0f8:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
 23fb0fa:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 23fb0fe:	4294      	cmp	r4, r2
 23fb100:	bfb8      	it	lt
 23fb102:	4614      	movlt	r4, r2
 23fb104:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
 23fb106:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 23fb10a:	2c01      	cmp	r4, #1
 23fb10c:	d116      	bne.n	23fb13c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
 23fb10e:	2b01      	cmp	r3, #1
 23fb110:	d042      	beq.n	23fb198 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
 23fb112:	2b02      	cmp	r3, #2
 23fb114:	d051      	beq.n	23fb1ba <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
 23fb116:	b98b      	cbnz	r3, 23fb13c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 23fb118:	4614      	mov	r4, r2
 23fb11a:	2a00      	cmp	r2, #0
 23fb11c:	8905      	ldrh	r5, [r0, #8]
 23fb11e:	bfb8      	it	lt
 23fb120:	1dd4      	addlt	r4, r2, #7
 23fb122:	10e4      	asrs	r4, r4, #3
 23fb124:	fb14 1405 	smlabb	r4, r4, r5, r1
 23fb128:	2501      	movs	r5, #1
 23fb12a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 23fb12c:	f002 0607 	and.w	r6, r2, #7
 23fb130:	fa05 f606 	lsl.w	r6, r5, r6
 23fb134:	5d3d      	ldrb	r5, [r7, r4]
 23fb136:	ea25 0506 	bic.w	r5, r5, r6
 23fb13a:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
 23fb13c:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 23fb140:	2c04      	cmp	r4, #4
 23fb142:	d119      	bne.n	23fb178 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
 23fb144:	8904      	ldrh	r4, [r0, #8]
 23fb146:	fb14 f202 	smulbb	r2, r4, r2
 23fb14a:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 23fb14e:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
 23fb152:	f342 024f 	sbfx	r2, r2, #1, #16
 23fb156:	eb02 0264 	add.w	r2, r2, r4, asr #1
 23fb15a:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
 23fb15c:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
 23fb15e:	5ca0      	ldrb	r0, [r4, r2]
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
 23fb160:	bf4b      	itete	mi
 23fb162:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
 23fb166:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
 23fb16a:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
 23fb16e:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
 23fb172:	bf48      	it	mi
 23fb174:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
 23fb176:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
 23fb178:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 23fb17a:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 23fb17c:	8904      	ldrh	r4, [r0, #8]
 23fb17e:	3c01      	subs	r4, #1
 23fb180:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 23fb182:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 23fb184:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 23fb186:	4422      	add	r2, r4
 23fb188:	b212      	sxth	r2, r2
      break;
 23fb18a:	e7a4      	b.n	23fb0d6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 23fb18c:	8944      	ldrh	r4, [r0, #10]
 23fb18e:	3c01      	subs	r4, #1
 23fb190:	1a64      	subs	r4, r4, r1
      break;
 23fb192:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 23fb194:	b222      	sxth	r2, r4
      break;
 23fb196:	e79e      	b.n	23fb0d6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 23fb198:	4614      	mov	r4, r2
 23fb19a:	2a00      	cmp	r2, #0
 23fb19c:	8905      	ldrh	r5, [r0, #8]
 23fb19e:	bfb8      	it	lt
 23fb1a0:	1dd4      	addlt	r4, r2, #7
 23fb1a2:	10e4      	asrs	r4, r4, #3
 23fb1a4:	fb14 1405 	smlabb	r4, r4, r5, r1
 23fb1a8:	2501      	movs	r5, #1
 23fb1aa:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23fb1ac:	f002 0707 	and.w	r7, r2, #7
 23fb1b0:	40bd      	lsls	r5, r7
 23fb1b2:	5d37      	ldrb	r7, [r6, r4]
 23fb1b4:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23fb1b6:	5535      	strb	r5, [r6, r4]
        break;
 23fb1b8:	e7c0      	b.n	23fb13c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23fb1ba:	4614      	mov	r4, r2
 23fb1bc:	2a00      	cmp	r2, #0
 23fb1be:	8905      	ldrh	r5, [r0, #8]
 23fb1c0:	bfb8      	it	lt
 23fb1c2:	1dd4      	addlt	r4, r2, #7
 23fb1c4:	10e4      	asrs	r4, r4, #3
 23fb1c6:	fb14 1405 	smlabb	r4, r4, r5, r1
 23fb1ca:	2501      	movs	r5, #1
 23fb1cc:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23fb1ce:	f002 0707 	and.w	r7, r2, #7
 23fb1d2:	40bd      	lsls	r5, r7
 23fb1d4:	5d37      	ldrb	r7, [r6, r4]
 23fb1d6:	407d      	eors	r5, r7
 23fb1d8:	e7ed      	b.n	23fb1b6 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>
	...

023fb1dc <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
 23fb1dc:	b538      	push	{r3, r4, r5, lr}
 23fb1de:	460d      	mov	r5, r1
 23fb1e0:	4611      	mov	r1, r2
 23fb1e2:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 23fb1e4:	b21a      	sxth	r2, r3
 23fb1e6:	b209      	sxth	r1, r1
 23fb1e8:	f7ff fa9c 	bl	23fa724 <_ZN12Adafruit_GFXC1Ess>
 23fb1ec:	4b0b      	ldr	r3, [pc, #44]	; (23fb21c <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
 23fb1ee:	9a06      	ldr	r2, [sp, #24]
 23fb1f0:	6023      	str	r3, [r4, #0]
 23fb1f2:	2300      	movs	r3, #0
 23fb1f4:	62e2      	str	r2, [r4, #44]	; 0x2c
 23fb1f6:	9a07      	ldr	r2, [sp, #28]
 23fb1f8:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 23fb1fc:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 23fb200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fb204:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 23fb208:	f99d 3014 	ldrsb.w	r3, [sp, #20]
}
 23fb20c:	4620      	mov	r0, r4
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 23fb20e:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
 23fb210:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 23fb212:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
 23fb216:	6523      	str	r3, [r4, #80]	; 0x50
}
 23fb218:	bd38      	pop	{r3, r4, r5, pc}
 23fb21a:	bf00      	nop
 23fb21c:	023ff8b0 	.word	0x023ff8b0

023fb220 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
 23fb220:	b538      	push	{r3, r4, r5, lr}
 23fb222:	4b0c      	ldr	r3, [pc, #48]	; (23fb254 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
 23fb224:	4604      	mov	r4, r0
 23fb226:	6003      	str	r3, [r0, #0]
  if (buffer) {
 23fb228:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23fb22a:	b118      	cbz	r0, 23fb234 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
 23fb22c:	f000 ff46 	bl	23fc0bc <free>
    buffer = NULL;
 23fb230:	2300      	movs	r3, #0
 23fb232:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
 23fb234:	6a65      	ldr	r5, [r4, #36]	; 0x24
 23fb236:	b135      	cbz	r5, 23fb246 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
 23fb238:	4628      	mov	r0, r5
 23fb23a:	f7fe ffac 	bl	23fa196 <_ZN18Adafruit_SPIDeviceD1Ev>
 23fb23e:	2138      	movs	r1, #56	; 0x38
 23fb240:	4628      	mov	r0, r5
 23fb242:	f7fe facc 	bl	23f97de <_ZdlPvj>
  if (i2c_dev)
 23fb246:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23fb248:	b110      	cbz	r0, 23fb250 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
 23fb24a:	2110      	movs	r1, #16
 23fb24c:	f7fe fac7 	bl	23f97de <_ZdlPvj>
}
 23fb250:	4620      	mov	r0, r4
 23fb252:	bd38      	pop	{r3, r4, r5, pc}
 23fb254:	023ff8b0 	.word	0x023ff8b0

023fb258 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 23fb258:	b530      	push	{r4, r5, lr}
  if (i2c_dev) {                // I2C
 23fb25a:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 23fb25c:	b087      	sub	sp, #28
 23fb25e:	4604      	mov	r4, r0
 23fb260:	f88d 100f 	strb.w	r1, [sp, #15]
  if (i2c_dev) {                // I2C
 23fb264:	b17d      	cbz	r5, 23fb286 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 23fb266:	2300      	movs	r3, #0
 23fb268:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
 23fb26a:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 23fb26e:	f88d 3014 	strb.w	r3, [sp, #20]
 23fb272:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
 23fb276:	2301      	movs	r3, #1
 23fb278:	2202      	movs	r2, #2
 23fb27a:	4628      	mov	r0, r5
 23fb27c:	a905      	add	r1, sp, #20
 23fb27e:	f7fe ff54 	bl	23fa12a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23fb282:	b007      	add	sp, #28
 23fb284:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
 23fb286:	4629      	mov	r1, r5
 23fb288:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 23fb28c:	f003 fa4f 	bl	23fe72e <digitalWrite>
    spi_dev->write(&c, 1);
 23fb290:	462b      	mov	r3, r5
 23fb292:	2201      	movs	r2, #1
 23fb294:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb296:	9500      	str	r5, [sp, #0]
 23fb298:	f10d 010f 	add.w	r1, sp, #15
 23fb29c:	f7ff f89e 	bl	23fa3dc <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
}
 23fb2a0:	e7ef      	b.n	23fb282 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

023fb2a2 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
 23fb2a2:	2900      	cmp	r1, #0
 23fb2a4:	bf14      	ite	ne
 23fb2a6:	21a7      	movne	r1, #167	; 0xa7
 23fb2a8:	21a6      	moveq	r1, #166	; 0xa6
 23fb2aa:	f7ff bfd5 	b.w	23fb258 <_ZN17Adafruit_GrayOLED12oled_commandEh>

023fb2ae <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
 23fb2ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
 23fb2b0:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
 23fb2b2:	4604      	mov	r4, r0
 23fb2b4:	460e      	mov	r6, r1
 23fb2b6:	4617      	mov	r7, r2
 23fb2b8:	b085      	sub	sp, #20
  if (i2c_dev) {            // I2C
 23fb2ba:	b165      	cbz	r5, 23fb2d6 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
 23fb2bc:	2300      	movs	r3, #0
 23fb2be:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
 23fb2c2:	2301      	movs	r3, #1
 23fb2c4:	f10d 000f 	add.w	r0, sp, #15
 23fb2c8:	9000      	str	r0, [sp, #0]
 23fb2ca:	9301      	str	r3, [sp, #4]
 23fb2cc:	4628      	mov	r0, r5
 23fb2ce:	f7fe ff2c 	bl	23fa12a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23fb2d2:	b005      	add	sp, #20
 23fb2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
 23fb2d6:	4629      	mov	r1, r5
 23fb2d8:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 23fb2dc:	f003 fa27 	bl	23fe72e <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
 23fb2e0:	462b      	mov	r3, r5
 23fb2e2:	463a      	mov	r2, r7
 23fb2e4:	4631      	mov	r1, r6
 23fb2e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb2e8:	9500      	str	r5, [sp, #0]
 23fb2ea:	f7ff f877 	bl	23fa3dc <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
 23fb2ee:	e7f0      	b.n	23fb2d2 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

023fb2f0 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
 23fb2f0:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
 23fb2f2:	8903      	ldrh	r3, [r0, #8]
 23fb2f4:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 23fb2f8:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 23fb2fc:	fb12 f203 	smulbb	r2, r2, r3
 23fb300:	1dcb      	adds	r3, r1, #7
 23fb302:	bf48      	it	mi
 23fb304:	f101 030e 	addmi.w	r3, r1, #14
 23fb308:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
 23fb30a:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
 23fb30c:	435a      	muls	r2, r3
 23fb30e:	2100      	movs	r1, #0
 23fb310:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23fb312:	f003 fb74 	bl	23fe9fe <memset>
  window_x1 = 0;
 23fb316:	2300      	movs	r3, #0
 23fb318:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
 23fb31a:	8923      	ldrh	r3, [r4, #8]
 23fb31c:	3b01      	subs	r3, #1
 23fb31e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
 23fb320:	8963      	ldrh	r3, [r4, #10]
 23fb322:	3b01      	subs	r3, #1
 23fb324:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
 23fb326:	bd10      	pop	{r4, pc}

023fb328 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
 23fb328:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
 23fb32a:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
 23fb32c:	4604      	mov	r4, r0
 23fb32e:	460e      	mov	r6, r1
 23fb330:	4615      	mov	r5, r2
  if ((!buffer) &&
 23fb332:	b30b      	cbz	r3, 23fb378 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
 23fb334:	2d00      	cmp	r5, #0
 23fb336:	d133      	bne.n	23fb3a0 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
 23fb338:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23fb33a:	2b00      	cmp	r3, #0
 23fb33c:	d050      	beq.n	23fb3e0 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
 23fb33e:	2010      	movs	r0, #16
 23fb340:	f7fe fa49 	bl	23f97d6 <_Znwj>
 23fb344:	4605      	mov	r5, r0
 23fb346:	b118      	cbz	r0, 23fb350 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
 23fb348:	4631      	mov	r1, r6
 23fb34a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 23fb34c:	f7fe fec2 	bl	23fa0d4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23fb350:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
 23fb352:	b31d      	cbz	r5, 23fb39c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
 23fb354:	2101      	movs	r1, #1
 23fb356:	4628      	mov	r0, r5
 23fb358:	f7fe fed8 	bl	23fa10c <_ZN18Adafruit_I2CDevice5beginEb>
 23fb35c:	b1f0      	cbz	r0, 23fb39c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
 23fb35e:	4620      	mov	r0, r4
 23fb360:	f7ff ffc6 	bl	23fb2f0 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
 23fb364:	2300      	movs	r3, #0
 23fb366:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
 23fb368:	8923      	ldrh	r3, [r4, #8]
  return true; // Success
 23fb36a:	2001      	movs	r0, #1
  window_x2 = WIDTH - 1;
 23fb36c:	3b01      	subs	r3, #1
 23fb36e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
 23fb370:	8963      	ldrh	r3, [r4, #10]
 23fb372:	3b01      	subs	r3, #1
 23fb374:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
 23fb376:	e012      	b.n	23fb39e <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
 23fb378:	8923      	ldrh	r3, [r4, #8]
 23fb37a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 23fb37e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 23fb382:	fb10 f003 	smulbb	r0, r0, r3
 23fb386:	1dd3      	adds	r3, r2, #7
 23fb388:	bf48      	it	mi
 23fb38a:	f102 030e 	addmi.w	r3, r2, #14
 23fb38e:	10db      	asrs	r3, r3, #3
 23fb390:	4358      	muls	r0, r3
 23fb392:	f000 fe85 	bl	23fc0a0 <malloc>
 23fb396:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
 23fb398:	2800      	cmp	r0, #0
 23fb39a:	d1cb      	bne.n	23fb334 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
 23fb39c:	2000      	movs	r0, #0
}
 23fb39e:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
 23fb3a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 23fb3a2:	2800      	cmp	r0, #0
 23fb3a4:	dbc8      	blt.n	23fb338 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
 23fb3a6:	2101      	movs	r1, #1
 23fb3a8:	b280      	uxth	r0, r0
 23fb3aa:	f003 f9af 	bl	23fe70c <pinMode>
    digitalWrite(rstPin, HIGH);
 23fb3ae:	2101      	movs	r1, #1
 23fb3b0:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 23fb3b4:	f003 f9bb 	bl	23fe72e <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
 23fb3b8:	200a      	movs	r0, #10
 23fb3ba:	f000 feef 	bl	23fc19c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 23fb3be:	2100      	movs	r1, #0
 23fb3c0:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 23fb3c4:	f003 f9b3 	bl	23fe72e <digitalWrite>
    delay(10);                  // Wait 10 ms
 23fb3c8:	200a      	movs	r0, #10
 23fb3ca:	f000 fee7 	bl	23fc19c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 23fb3ce:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 23fb3d2:	2101      	movs	r1, #1
 23fb3d4:	f003 f9ab 	bl	23fe72e <digitalWrite>
    delay(10);
 23fb3d8:	200a      	movs	r0, #10
 23fb3da:	f000 fedf 	bl	23fc19c <delay>
 23fb3de:	e7ab      	b.n	23fb338 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
 23fb3e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb3e2:	2800      	cmp	r0, #0
 23fb3e4:	d0da      	beq.n	23fb39c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
 23fb3e6:	f7fe fedf 	bl	23fa1a8 <_ZN18Adafruit_SPIDevice5beginEv>
 23fb3ea:	2800      	cmp	r0, #0
 23fb3ec:	d0d6      	beq.n	23fb39c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 23fb3ee:	2101      	movs	r1, #1
 23fb3f0:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 23fb3f4:	f003 f98a 	bl	23fe70c <pinMode>
 23fb3f8:	e7b1      	b.n	23fb35e <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

023fb3fa <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 23fb3fa:	2381      	movs	r3, #129	; 0x81
void Adafruit_GrayOLED::setContrast(uint8_t level) {
 23fb3fc:	b507      	push	{r0, r1, r2, lr}
  oled_commandList(cmd, 2);
 23fb3fe:	2202      	movs	r2, #2
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 23fb400:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
 23fb404:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 23fb406:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
 23fb40a:	f7ff ff50 	bl	23fb2ae <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
 23fb40e:	b003      	add	sp, #12
 23fb410:	f85d fb04 	ldr.w	pc, [sp], #4

023fb414 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
 23fb414:	b510      	push	{r4, lr}
 23fb416:	4604      	mov	r4, r0
 23fb418:	4b02      	ldr	r3, [pc, #8]	; (23fb424 <_ZN15Adafruit_SH1107D1Ev+0x10>)
 23fb41a:	6003      	str	r3, [r0, #0]
 23fb41c:	f000 f958 	bl	23fb6d0 <_ZN15Adafruit_SH110XD1Ev>
 23fb420:	4620      	mov	r0, r4
 23fb422:	bd10      	pop	{r4, pc}
 23fb424:	023ffaec 	.word	0x023ffaec

023fb428 <_ZN15Adafruit_SH1107D0Ev>:
 23fb428:	b510      	push	{r4, lr}
 23fb42a:	4604      	mov	r4, r0
 23fb42c:	f7ff fff2 	bl	23fb414 <_ZN15Adafruit_SH1107D1Ev>
 23fb430:	4620      	mov	r0, r4
 23fb432:	2158      	movs	r1, #88	; 0x58
 23fb434:	f7fe f9d3 	bl	23f97de <_ZdlPvj>
 23fb438:	4620      	mov	r0, r4
 23fb43a:	bd10      	pop	{r4, pc}

023fb43c <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
 23fb43c:	b530      	push	{r4, r5, lr}
 23fb43e:	4604      	mov	r4, r0
 23fb440:	b085      	sub	sp, #20
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
 23fb442:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fb444:	9502      	str	r5, [sp, #8]
 23fb446:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fb448:	9501      	str	r5, [sp, #4]
 23fb44a:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 23fb44e:	9500      	str	r5, [sp, #0]
 23fb450:	f000 f924 	bl	23fb69c <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
 23fb454:	4620      	mov	r0, r4
 23fb456:	4b02      	ldr	r3, [pc, #8]	; (23fb460 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
 23fb458:	6023      	str	r3, [r4, #0]
 23fb45a:	b005      	add	sp, #20
 23fb45c:	bd30      	pop	{r4, r5, pc}
 23fb45e:	bf00      	nop
 23fb460:	023ffaec 	.word	0x023ffaec

023fb464 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
 23fb464:	b530      	push	{r4, r5, lr}
 23fb466:	4604      	mov	r4, r0
 23fb468:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
 23fb46a:	f7ff ff5d 	bl	23fb328 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
 23fb46e:	212f      	movs	r1, #47	; 0x2f
 23fb470:	4620      	mov	r0, r4
 23fb472:	f7ff ffc2 	bl	23fb3fa <_ZN17Adafruit_GrayOLED11setContrastEh>

#ifndef SH110X_NO_SPLASH
  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
 23fb476:	68a2      	ldr	r2, [r4, #8]
 23fb478:	4b2f      	ldr	r3, [pc, #188]	; (23fb538 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
 23fb47a:	429a      	cmp	r2, r3
 23fb47c:	d121      	bne.n	23fb4c2 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
 23fb47e:	6823      	ldr	r3, [r4, #0]
 23fb480:	2101      	movs	r1, #1
 23fb482:	4620      	mov	r0, r4
 23fb484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb486:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
 23fb488:	2501      	movs	r5, #1
 23fb48a:	2320      	movs	r3, #32
 23fb48c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 23fb490:	2373      	movs	r3, #115	; 0x73
 23fb492:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 23fb496:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 23fb49a:	3a20      	subs	r2, #32
 23fb49c:	3973      	subs	r1, #115	; 0x73
 23fb49e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 23fb4a2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23fb4a6:	4620      	mov	r0, r4
 23fb4a8:	9300      	str	r3, [sp, #0]
 23fb4aa:	f341 014f 	sbfx	r1, r1, #1, #16
 23fb4ae:	4b23      	ldr	r3, [pc, #140]	; (23fb53c <_ZN15Adafruit_SH11075beginEhb+0xd8>)
 23fb4b0:	f342 024f 	sbfx	r2, r2, #1, #16
 23fb4b4:	f7ff fba1 	bl	23fabfa <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
 23fb4b8:	6823      	ldr	r3, [r4, #0]
 23fb4ba:	2100      	movs	r1, #0
 23fb4bc:	4620      	mov	r0, r4
 23fb4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb4c0:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
 23fb4c2:	68a3      	ldr	r3, [r4, #8]
 23fb4c4:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
 23fb4c8:	d117      	bne.n	23fb4fa <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
 23fb4ca:	2320      	movs	r3, #32
 23fb4cc:	2001      	movs	r0, #1
 23fb4ce:	e9cd 3001 	strd	r3, r0, [sp, #4]
 23fb4d2:	2373      	movs	r3, #115	; 0x73
 23fb4d4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 23fb4d8:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 23fb4dc:	3a20      	subs	r2, #32
 23fb4de:	3973      	subs	r1, #115	; 0x73
 23fb4e0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 23fb4e4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23fb4e8:	9300      	str	r3, [sp, #0]
 23fb4ea:	4620      	mov	r0, r4
 23fb4ec:	4b13      	ldr	r3, [pc, #76]	; (23fb53c <_ZN15Adafruit_SH11075beginEhb+0xd8>)
 23fb4ee:	f342 024f 	sbfx	r2, r2, #1, #16
 23fb4f2:	f341 014f 	sbfx	r1, r1, #1, #16
 23fb4f6:	f7ff fb80 	bl	23fabfa <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
 23fb4fa:	2216      	movs	r2, #22
 23fb4fc:	4620      	mov	r0, r4
 23fb4fe:	4910      	ldr	r1, [pc, #64]	; (23fb540 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
 23fb500:	f7ff fed5 	bl	23fb2ae <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
 23fb504:	4605      	mov	r5, r0
 23fb506:	b918      	cbnz	r0, 23fb510 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
 23fb508:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
 23fb50a:	4628      	mov	r0, r5
 23fb50c:	b005      	add	sp, #20
 23fb50e:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
 23fb510:	68a3      	ldr	r3, [r4, #8]
 23fb512:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
 23fb516:	d007      	beq.n	23fb528 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
 23fb518:	2064      	movs	r0, #100	; 0x64
 23fb51a:	f000 fe3f 	bl	23fc19c <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
 23fb51e:	21af      	movs	r1, #175	; 0xaf
 23fb520:	4620      	mov	r0, r4
 23fb522:	f7ff fe99 	bl	23fb258 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
 23fb526:	e7f0      	b.n	23fb50a <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
 23fb528:	2204      	movs	r2, #4
 23fb52a:	4620      	mov	r0, r4
 23fb52c:	4905      	ldr	r1, [pc, #20]	; (23fb544 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
 23fb52e:	f7ff febe 	bl	23fb2ae <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
 23fb532:	2800      	cmp	r0, #0
 23fb534:	d1f0      	bne.n	23fb518 <_ZN15Adafruit_SH11075beginEhb+0xb4>
 23fb536:	e7e7      	b.n	23fb508 <_ZN15Adafruit_SH11075beginEhb+0xa4>
 23fb538:	00800040 	.word	0x00800040
 23fb53c:	023ff904 	.word	0x023ff904
 23fb540:	023ffb44 	.word	0x023ffb44
 23fb544:	023ffb40 	.word	0x023ffb40

023fb548 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
 23fb548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb54c:	b089      	sub	sp, #36	; 0x24
 23fb54e:	4604      	mov	r4, r0
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
 23fb550:	f000 f8c8 	bl	23fb6e4 <os_thread_yield>
  // 32-byte transfer condition below.
  yield();

  // uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
  uint8_t *ptr = buffer;
  uint8_t dc_byte = 0x40;
 23fb554:	2340      	movs	r3, #64	; 0x40
 23fb556:	f88d 301b 	strb.w	r3, [sp, #27]
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fb55a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
 23fb55e:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint8_t bytes_per_page = WIDTH;
 23fb562:	f894 a008 	ldrb.w	sl, [r4, #8]
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fb566:	1dda      	adds	r2, r3, #7
  //  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 23fb568:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fb56c:	bf48      	it	mi
 23fb56e:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t first_page = window_y1 / 8;
 23fb572:	2d00      	cmp	r5, #0
 23fb574:	bfb8      	it	lt
 23fb576:	3507      	addlt	r5, #7
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 23fb578:	45d0      	cmp	r8, sl
 23fb57a:	bf28      	it	cs
 23fb57c:	46d0      	movcs	r8, sl
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fb57e:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 23fb582:	9303      	str	r3, [sp, #12]
  uint8_t first_page = window_y1 / 8;
 23fb584:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
 23fb588:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 23fb58c:	fb05 8b0a 	mla	fp, r5, sl, r8
 23fb590:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fb594:	f10a 0201 	add.w	r2, sl, #1
 23fb598:	fa52 f383 	uxtab	r3, r2, r3
 23fb59c:	9304      	str	r3, [sp, #16]
  for (uint8_t p = first_page; p < pages; p++) {
 23fb59e:	9b03      	ldr	r3, [sp, #12]
 23fb5a0:	429d      	cmp	r5, r3
 23fb5a2:	d271      	bcs.n	23fb688 <_ZN15Adafruit_SH110X7displayEv+0x140>
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fb5a4:	9b04      	ldr	r3, [sp, #16]
 23fb5a6:	8926      	ldrh	r6, [r4, #8]
    if (i2c_dev) { // I2C
      uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;

      uint8_t cmd[] = {
          0x00, (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fb5a8:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fb5ac:	1b9e      	subs	r6, r3, r6
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fb5ae:	4442      	add	r2, r8
    ptr += page_start;
 23fb5b0:	6b67      	ldr	r7, [r4, #52]	; 0x34
    if (i2c_dev) { // I2C
 23fb5b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fb5b4:	ea4f 1c22 	mov.w	ip, r2, asr #4
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fb5b8:	eba6 0608 	sub.w	r6, r6, r8
 23fb5bc:	f1a5 0150 	sub.w	r1, r5, #80	; 0x50
    ptr += page_start;
 23fb5c0:	445f      	add	r7, fp
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fb5c2:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
 23fb5c4:	b2c9      	uxtb	r1, r1
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fb5c6:	f10c 0c10 	add.w	ip, ip, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fb5ca:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
 23fb5ce:	2b00      	cmp	r3, #0
 23fb5d0:	d03a      	beq.n	23fb648 <_ZN15Adafruit_SH110X7displayEv+0x100>
      uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
 23fb5d2:	68d8      	ldr	r0, [r3, #12]
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fb5d4:	f88d 101d 	strb.w	r1, [sp, #29]
      uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
 23fb5d8:	3801      	subs	r0, #1
 23fb5da:	fa1f f980 	uxth.w	r9, r0
      uint8_t cmd[] = {
 23fb5de:	f04f 0000 	mov.w	r0, #0

      // Set high speed clk
      i2c_dev->setSpeed(i2c_preclk);
 23fb5e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      uint8_t cmd[] = {
 23fb5e4:	f88d 001c 	strb.w	r0, [sp, #28]
      i2c_dev->setSpeed(i2c_preclk);
 23fb5e8:	4618      	mov	r0, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fb5ea:	f88d c01e 	strb.w	ip, [sp, #30]
 23fb5ee:	f88d 201f 	strb.w	r2, [sp, #31]
      i2c_dev->setSpeed(i2c_preclk);
 23fb5f2:	f7fe fdca 	bl	23fa18a <_ZN18Adafruit_I2CDevice8setSpeedEm>

      i2c_dev->write(cmd, 4);
 23fb5f6:	2300      	movs	r3, #0
 23fb5f8:	2204      	movs	r2, #4
 23fb5fa:	e9cd 3300 	strd	r3, r3, [sp]
 23fb5fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23fb600:	2301      	movs	r3, #1
 23fb602:	a907      	add	r1, sp, #28
 23fb604:	f7fe fd91 	bl	23fa12a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

      while (bytes_remaining) {
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 23fb608:	fa5f f989 	uxtb.w	r9, r9
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 23fb60c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
 23fb60e:	b1a6      	cbz	r6, 23fb63a <_ZN15Adafruit_SH110X7displayEv+0xf2>
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 23fb610:	2301      	movs	r3, #1
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 23fb612:	45b1      	cmp	r9, r6
 23fb614:	464a      	mov	r2, r9
 23fb616:	bf28      	it	cs
 23fb618:	4632      	movcs	r2, r6
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 23fb61a:	9301      	str	r3, [sp, #4]
 23fb61c:	f10d 031b 	add.w	r3, sp, #27
 23fb620:	4639      	mov	r1, r7
 23fb622:	9300      	str	r3, [sp, #0]
 23fb624:	2301      	movs	r3, #1
 23fb626:	9205      	str	r2, [sp, #20]
 23fb628:	f7fe fd7f 	bl	23fa12a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
 23fb62c:	9a05      	ldr	r2, [sp, #20]
        bytes_remaining -= to_write;
 23fb62e:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
 23fb630:	4417      	add	r7, r2
        bytes_remaining -= to_write;
 23fb632:	b2f6      	uxtb	r6, r6
 23fb634:	f000 f856 	bl	23fb6e4 <os_thread_yield>
#endif // PLATFORM_THREADING
}
 23fb638:	e7e8      	b.n	23fb60c <_ZN15Adafruit_SH110X7displayEv+0xc4>
        yield();
      }

      // Set low speed clk
      i2c_dev->setSpeed(i2c_postclk);
 23fb63a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 23fb63c:	f7fe fda5 	bl	23fa18a <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
 23fb640:	3501      	adds	r5, #1
 23fb642:	b2ed      	uxtb	r5, r5
 23fb644:	44d3      	add	fp, sl
 23fb646:	e7aa      	b.n	23fb59e <_ZN15Adafruit_SH110X7displayEv+0x56>
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
 23fb648:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fb64c:	f88d 101c 	strb.w	r1, [sp, #28]
      digitalWrite(dcPin, LOW);
 23fb650:	4619      	mov	r1, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fb652:	f88d c01d 	strb.w	ip, [sp, #29]
 23fb656:	f88d 201e 	strb.w	r2, [sp, #30]
      digitalWrite(dcPin, LOW);
 23fb65a:	9305      	str	r3, [sp, #20]
 23fb65c:	f003 f867 	bl	23fe72e <digitalWrite>
      spi_dev->write(cmd, 3);
 23fb660:	9b05      	ldr	r3, [sp, #20]
 23fb662:	2203      	movs	r2, #3
 23fb664:	9300      	str	r3, [sp, #0]
 23fb666:	a907      	add	r1, sp, #28
 23fb668:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb66a:	f7fe feb7 	bl	23fa3dc <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
      digitalWrite(dcPin, HIGH);
 23fb66e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 23fb672:	2101      	movs	r1, #1
 23fb674:	f003 f85b 	bl	23fe72e <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
 23fb678:	9b05      	ldr	r3, [sp, #20]
 23fb67a:	4632      	mov	r2, r6
 23fb67c:	4639      	mov	r1, r7
 23fb67e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb680:	9300      	str	r3, [sp, #0]
 23fb682:	f7fe feab 	bl	23fa3dc <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
 23fb686:	e7db      	b.n	23fb640 <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
 23fb688:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 23fb68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fb690:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
 23fb694:	b009      	add	sp, #36	; 0x24
 23fb696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

023fb69c <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
 23fb69c:	b530      	push	{r4, r5, lr}
 23fb69e:	4604      	mov	r4, r0
 23fb6a0:	b085      	sub	sp, #20
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
 23fb6a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fb6a4:	9503      	str	r5, [sp, #12]
 23fb6a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fb6a8:	9502      	str	r5, [sp, #8]
 23fb6aa:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 23fb6ae:	e9cd 3500 	strd	r3, r5, [sp]
 23fb6b2:	4613      	mov	r3, r2
 23fb6b4:	460a      	mov	r2, r1
 23fb6b6:	2101      	movs	r1, #1
 23fb6b8:	f7ff fd90 	bl	23fb1dc <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
 23fb6bc:	4b03      	ldr	r3, [pc, #12]	; (23fb6cc <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
 23fb6be:	4620      	mov	r0, r4
 23fb6c0:	6023      	str	r3, [r4, #0]
 23fb6c2:	2300      	movs	r3, #0
 23fb6c4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 23fb6c8:	b005      	add	sp, #20
 23fb6ca:	bd30      	pop	{r4, r5, pc}
 23fb6cc:	023ffb64 	.word	0x023ffb64

023fb6d0 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
 23fb6d0:	b510      	push	{r4, lr}
 23fb6d2:	4604      	mov	r4, r0
 23fb6d4:	4b02      	ldr	r3, [pc, #8]	; (23fb6e0 <_ZN15Adafruit_SH110XD1Ev+0x10>)
 23fb6d6:	6003      	str	r3, [r0, #0]
 23fb6d8:	f7ff fda2 	bl	23fb220 <_ZN17Adafruit_GrayOLEDD1Ev>
 23fb6dc:	4620      	mov	r0, r4
 23fb6de:	bd10      	pop	{r4, pc}
 23fb6e0:	023ffb64 	.word	0x023ffb64

023fb6e4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 23fb6e4:	b509      	push	{r0, r3, lr}
 23fb6e6:	4804      	ldr	r0, [pc, #16]	; (23fb6f8 <os_thread_yield+0x14>)
 23fb6e8:	6800      	ldr	r0, [r0, #0]
 23fb6ea:	4b04      	ldr	r3, [pc, #16]	; (23fb6fc <os_thread_yield+0x18>)
 23fb6ec:	4403      	add	r3, r0
 23fb6ee:	681b      	ldr	r3, [r3, #0]
 23fb6f0:	68db      	ldr	r3, [r3, #12]
 23fb6f2:	9302      	str	r3, [sp, #8]
 23fb6f4:	bd09      	pop	{r0, r3, pc}
 23fb6f6:	0000      	.short	0x0000
 23fb6f8:	1007a5e0 	.word	0x1007a5e0
 23fb6fc:	00000030 	.word	0x00000030

023fb700 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 23fb700:	b509      	push	{r0, r3, lr}
 23fb702:	4804      	ldr	r0, [pc, #16]	; (23fb714 <os_thread_scheduling+0x14>)
 23fb704:	6800      	ldr	r0, [r0, #0]
 23fb706:	4b04      	ldr	r3, [pc, #16]	; (23fb718 <os_thread_scheduling+0x18>)
 23fb708:	4403      	add	r3, r0
 23fb70a:	681b      	ldr	r3, [r3, #0]
 23fb70c:	69db      	ldr	r3, [r3, #28]
 23fb70e:	9302      	str	r3, [sp, #8]
 23fb710:	bd09      	pop	{r0, r3, pc}
 23fb712:	0000      	.short	0x0000
 23fb714:	1007a5e0 	.word	0x1007a5e0
 23fb718:	00000030 	.word	0x00000030

023fb71c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 23fb71c:	b509      	push	{r0, r3, lr}
 23fb71e:	4804      	ldr	r0, [pc, #16]	; (23fb730 <os_timer_create+0x14>)
 23fb720:	6800      	ldr	r0, [r0, #0]
 23fb722:	4b04      	ldr	r3, [pc, #16]	; (23fb734 <os_timer_create+0x18>)
 23fb724:	4403      	add	r3, r0
 23fb726:	681b      	ldr	r3, [r3, #0]
 23fb728:	6a1b      	ldr	r3, [r3, #32]
 23fb72a:	9302      	str	r3, [sp, #8]
 23fb72c:	bd09      	pop	{r0, r3, pc}
 23fb72e:	0000      	.short	0x0000
 23fb730:	1007a5e0 	.word	0x1007a5e0
 23fb734:	00000030 	.word	0x00000030

023fb738 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 23fb738:	b509      	push	{r0, r3, lr}
 23fb73a:	4804      	ldr	r0, [pc, #16]	; (23fb74c <os_timer_destroy+0x14>)
 23fb73c:	6800      	ldr	r0, [r0, #0]
 23fb73e:	4b04      	ldr	r3, [pc, #16]	; (23fb750 <os_timer_destroy+0x18>)
 23fb740:	4403      	add	r3, r0
 23fb742:	681b      	ldr	r3, [r3, #0]
 23fb744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb746:	9302      	str	r3, [sp, #8]
 23fb748:	bd09      	pop	{r0, r3, pc}
 23fb74a:	0000      	.short	0x0000
 23fb74c:	1007a5e0 	.word	0x1007a5e0
 23fb750:	00000030 	.word	0x00000030

023fb754 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 23fb754:	b509      	push	{r0, r3, lr}
 23fb756:	4804      	ldr	r0, [pc, #16]	; (23fb768 <os_timer_get_id+0x14>)
 23fb758:	6800      	ldr	r0, [r0, #0]
 23fb75a:	4b04      	ldr	r3, [pc, #16]	; (23fb76c <os_timer_get_id+0x18>)
 23fb75c:	4403      	add	r3, r0
 23fb75e:	681b      	ldr	r3, [r3, #0]
 23fb760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb762:	9302      	str	r3, [sp, #8]
 23fb764:	bd09      	pop	{r0, r3, pc}
 23fb766:	0000      	.short	0x0000
 23fb768:	1007a5e0 	.word	0x1007a5e0
 23fb76c:	00000030 	.word	0x00000030

023fb770 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 23fb770:	b509      	push	{r0, r3, lr}
 23fb772:	4804      	ldr	r0, [pc, #16]	; (23fb784 <os_timer_change+0x14>)
 23fb774:	6800      	ldr	r0, [r0, #0]
 23fb776:	4b04      	ldr	r3, [pc, #16]	; (23fb788 <os_timer_change+0x18>)
 23fb778:	4403      	add	r3, r0
 23fb77a:	681b      	ldr	r3, [r3, #0]
 23fb77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb77e:	9302      	str	r3, [sp, #8]
 23fb780:	bd09      	pop	{r0, r3, pc}
 23fb782:	0000      	.short	0x0000
 23fb784:	1007a5e0 	.word	0x1007a5e0
 23fb788:	00000030 	.word	0x00000030

023fb78c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fb78c:	b509      	push	{r0, r3, lr}
 23fb78e:	4804      	ldr	r0, [pc, #16]	; (23fb7a0 <os_mutex_recursive_create+0x14>)
 23fb790:	6800      	ldr	r0, [r0, #0]
 23fb792:	4b04      	ldr	r3, [pc, #16]	; (23fb7a4 <os_mutex_recursive_create+0x18>)
 23fb794:	4403      	add	r3, r0
 23fb796:	681b      	ldr	r3, [r3, #0]
 23fb798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb79a:	9302      	str	r3, [sp, #8]
 23fb79c:	bd09      	pop	{r0, r3, pc}
 23fb79e:	0000      	.short	0x0000
 23fb7a0:	1007a5e0 	.word	0x1007a5e0
 23fb7a4:	00000030 	.word	0x00000030

023fb7a8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fb7a8:	b509      	push	{r0, r3, lr}
 23fb7aa:	4804      	ldr	r0, [pc, #16]	; (23fb7bc <os_mutex_recursive_destroy+0x14>)
 23fb7ac:	6800      	ldr	r0, [r0, #0]
 23fb7ae:	4b04      	ldr	r3, [pc, #16]	; (23fb7c0 <os_mutex_recursive_destroy+0x18>)
 23fb7b0:	4403      	add	r3, r0
 23fb7b2:	681b      	ldr	r3, [r3, #0]
 23fb7b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fb7b6:	9302      	str	r3, [sp, #8]
 23fb7b8:	bd09      	pop	{r0, r3, pc}
 23fb7ba:	0000      	.short	0x0000
 23fb7bc:	1007a5e0 	.word	0x1007a5e0
 23fb7c0:	00000030 	.word	0x00000030

023fb7c4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fb7c4:	b509      	push	{r0, r3, lr}
 23fb7c6:	4804      	ldr	r0, [pc, #16]	; (23fb7d8 <os_mutex_recursive_lock+0x14>)
 23fb7c8:	6800      	ldr	r0, [r0, #0]
 23fb7ca:	4b04      	ldr	r3, [pc, #16]	; (23fb7dc <os_mutex_recursive_lock+0x18>)
 23fb7cc:	4403      	add	r3, r0
 23fb7ce:	681b      	ldr	r3, [r3, #0]
 23fb7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fb7d2:	9302      	str	r3, [sp, #8]
 23fb7d4:	bd09      	pop	{r0, r3, pc}
 23fb7d6:	0000      	.short	0x0000
 23fb7d8:	1007a5e0 	.word	0x1007a5e0
 23fb7dc:	00000030 	.word	0x00000030

023fb7e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fb7e0:	b509      	push	{r0, r3, lr}
 23fb7e2:	4804      	ldr	r0, [pc, #16]	; (23fb7f4 <os_mutex_recursive_unlock+0x14>)
 23fb7e4:	6800      	ldr	r0, [r0, #0]
 23fb7e6:	4b04      	ldr	r3, [pc, #16]	; (23fb7f8 <os_mutex_recursive_unlock+0x18>)
 23fb7e8:	4403      	add	r3, r0
 23fb7ea:	681b      	ldr	r3, [r3, #0]
 23fb7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb7ee:	9302      	str	r3, [sp, #8]
 23fb7f0:	bd09      	pop	{r0, r3, pc}
 23fb7f2:	0000      	.short	0x0000
 23fb7f4:	1007a5e0 	.word	0x1007a5e0
 23fb7f8:	00000030 	.word	0x00000030

023fb7fc <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 23fb7fc:	b509      	push	{r0, r3, lr}
 23fb7fe:	4804      	ldr	r0, [pc, #16]	; (23fb810 <os_timer_set_id+0x14>)
 23fb800:	6800      	ldr	r0, [r0, #0]
 23fb802:	4b04      	ldr	r3, [pc, #16]	; (23fb814 <os_timer_set_id+0x18>)
 23fb804:	4403      	add	r3, r0
 23fb806:	681b      	ldr	r3, [r3, #0]
 23fb808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fb80a:	9302      	str	r3, [sp, #8]
 23fb80c:	bd09      	pop	{r0, r3, pc}
 23fb80e:	0000      	.short	0x0000
 23fb810:	1007a5e0 	.word	0x1007a5e0
 23fb814:	00000030 	.word	0x00000030

023fb818 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fb818:	b509      	push	{r0, r3, lr}
 23fb81a:	4804      	ldr	r0, [pc, #16]	; (23fb82c <HAL_RNG_GetRandomNumber+0x14>)
 23fb81c:	6800      	ldr	r0, [r0, #0]
 23fb81e:	4b04      	ldr	r3, [pc, #16]	; (23fb830 <HAL_RNG_GetRandomNumber+0x18>)
 23fb820:	4403      	add	r3, r0
 23fb822:	681b      	ldr	r3, [r3, #0]
 23fb824:	685b      	ldr	r3, [r3, #4]
 23fb826:	9302      	str	r3, [sp, #8]
 23fb828:	bd09      	pop	{r0, r3, pc}
 23fb82a:	0000      	.short	0x0000
 23fb82c:	1007a5e0 	.word	0x1007a5e0
 23fb830:	00000000 	.word	0x00000000

023fb834 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fb834:	b509      	push	{r0, r3, lr}
 23fb836:	4804      	ldr	r0, [pc, #16]	; (23fb848 <HAL_Delay_Microseconds+0x14>)
 23fb838:	6800      	ldr	r0, [r0, #0]
 23fb83a:	4b04      	ldr	r3, [pc, #16]	; (23fb84c <HAL_Delay_Microseconds+0x18>)
 23fb83c:	4403      	add	r3, r0
 23fb83e:	681b      	ldr	r3, [r3, #0]
 23fb840:	68db      	ldr	r3, [r3, #12]
 23fb842:	9302      	str	r3, [sp, #8]
 23fb844:	bd09      	pop	{r0, r3, pc}
 23fb846:	0000      	.short	0x0000
 23fb848:	1007a5e0 	.word	0x1007a5e0
 23fb84c:	00000000 	.word	0x00000000

023fb850 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fb850:	b509      	push	{r0, r3, lr}
 23fb852:	4804      	ldr	r0, [pc, #16]	; (23fb864 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fb854:	6800      	ldr	r0, [r0, #0]
 23fb856:	4b04      	ldr	r3, [pc, #16]	; (23fb868 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fb858:	4403      	add	r3, r0
 23fb85a:	681b      	ldr	r3, [r3, #0]
 23fb85c:	695b      	ldr	r3, [r3, #20]
 23fb85e:	9302      	str	r3, [sp, #8]
 23fb860:	bd09      	pop	{r0, r3, pc}
 23fb862:	0000      	.short	0x0000
 23fb864:	1007a5e0 	.word	0x1007a5e0
 23fb868:	00000000 	.word	0x00000000

023fb86c <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fb86c:	b509      	push	{r0, r3, lr}
 23fb86e:	4804      	ldr	r0, [pc, #16]	; (23fb880 <hal_pin_validate_function+0x14>)
 23fb870:	6800      	ldr	r0, [r0, #0]
 23fb872:	4b04      	ldr	r3, [pc, #16]	; (23fb884 <hal_pin_validate_function+0x18>)
 23fb874:	4403      	add	r3, r0
 23fb876:	681b      	ldr	r3, [r3, #0]
 23fb878:	685b      	ldr	r3, [r3, #4]
 23fb87a:	9302      	str	r3, [sp, #8]
 23fb87c:	bd09      	pop	{r0, r3, pc}
 23fb87e:	0000      	.short	0x0000
 23fb880:	1007a5e0 	.word	0x1007a5e0
 23fb884:	00000014 	.word	0x00000014

023fb888 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fb888:	b509      	push	{r0, r3, lr}
 23fb88a:	4804      	ldr	r0, [pc, #16]	; (23fb89c <hal_gpio_mode+0x14>)
 23fb88c:	6800      	ldr	r0, [r0, #0]
 23fb88e:	4b04      	ldr	r3, [pc, #16]	; (23fb8a0 <hal_gpio_mode+0x18>)
 23fb890:	4403      	add	r3, r0
 23fb892:	681b      	ldr	r3, [r3, #0]
 23fb894:	689b      	ldr	r3, [r3, #8]
 23fb896:	9302      	str	r3, [sp, #8]
 23fb898:	bd09      	pop	{r0, r3, pc}
 23fb89a:	0000      	.short	0x0000
 23fb89c:	1007a5e0 	.word	0x1007a5e0
 23fb8a0:	00000014 	.word	0x00000014

023fb8a4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fb8a4:	b509      	push	{r0, r3, lr}
 23fb8a6:	4804      	ldr	r0, [pc, #16]	; (23fb8b8 <hal_gpio_get_mode+0x14>)
 23fb8a8:	6800      	ldr	r0, [r0, #0]
 23fb8aa:	4b04      	ldr	r3, [pc, #16]	; (23fb8bc <hal_gpio_get_mode+0x18>)
 23fb8ac:	4403      	add	r3, r0
 23fb8ae:	681b      	ldr	r3, [r3, #0]
 23fb8b0:	68db      	ldr	r3, [r3, #12]
 23fb8b2:	9302      	str	r3, [sp, #8]
 23fb8b4:	bd09      	pop	{r0, r3, pc}
 23fb8b6:	0000      	.short	0x0000
 23fb8b8:	1007a5e0 	.word	0x1007a5e0
 23fb8bc:	00000014 	.word	0x00000014

023fb8c0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fb8c0:	b509      	push	{r0, r3, lr}
 23fb8c2:	4804      	ldr	r0, [pc, #16]	; (23fb8d4 <hal_gpio_write+0x14>)
 23fb8c4:	6800      	ldr	r0, [r0, #0]
 23fb8c6:	4b04      	ldr	r3, [pc, #16]	; (23fb8d8 <hal_gpio_write+0x18>)
 23fb8c8:	4403      	add	r3, r0
 23fb8ca:	681b      	ldr	r3, [r3, #0]
 23fb8cc:	691b      	ldr	r3, [r3, #16]
 23fb8ce:	9302      	str	r3, [sp, #8]
 23fb8d0:	bd09      	pop	{r0, r3, pc}
 23fb8d2:	0000      	.short	0x0000
 23fb8d4:	1007a5e0 	.word	0x1007a5e0
 23fb8d8:	00000014 	.word	0x00000014

023fb8dc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fb8dc:	b509      	push	{r0, r3, lr}
 23fb8de:	4804      	ldr	r0, [pc, #16]	; (23fb8f0 <hal_adc_read+0x14>)
 23fb8e0:	6800      	ldr	r0, [r0, #0]
 23fb8e2:	4b04      	ldr	r3, [pc, #16]	; (23fb8f4 <hal_adc_read+0x18>)
 23fb8e4:	4403      	add	r3, r0
 23fb8e6:	681b      	ldr	r3, [r3, #0]
 23fb8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb8ea:	9302      	str	r3, [sp, #8]
 23fb8ec:	bd09      	pop	{r0, r3, pc}
 23fb8ee:	0000      	.short	0x0000
 23fb8f0:	1007a5e0 	.word	0x1007a5e0
 23fb8f4:	00000014 	.word	0x00000014

023fb8f8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fb8f8:	b509      	push	{r0, r3, lr}
 23fb8fa:	4804      	ldr	r0, [pc, #16]	; (23fb90c <hal_i2c_set_speed+0x14>)
 23fb8fc:	6800      	ldr	r0, [r0, #0]
 23fb8fe:	4b04      	ldr	r3, [pc, #16]	; (23fb910 <hal_i2c_set_speed+0x18>)
 23fb900:	4403      	add	r3, r0
 23fb902:	681b      	ldr	r3, [r3, #0]
 23fb904:	681b      	ldr	r3, [r3, #0]
 23fb906:	9302      	str	r3, [sp, #8]
 23fb908:	bd09      	pop	{r0, r3, pc}
 23fb90a:	0000      	.short	0x0000
 23fb90c:	1007a5e0 	.word	0x1007a5e0
 23fb910:	00000010 	.word	0x00000010

023fb914 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fb914:	b509      	push	{r0, r3, lr}
 23fb916:	4804      	ldr	r0, [pc, #16]	; (23fb928 <hal_i2c_begin+0x14>)
 23fb918:	6800      	ldr	r0, [r0, #0]
 23fb91a:	4b04      	ldr	r3, [pc, #16]	; (23fb92c <hal_i2c_begin+0x18>)
 23fb91c:	4403      	add	r3, r0
 23fb91e:	681b      	ldr	r3, [r3, #0]
 23fb920:	68db      	ldr	r3, [r3, #12]
 23fb922:	9302      	str	r3, [sp, #8]
 23fb924:	bd09      	pop	{r0, r3, pc}
 23fb926:	0000      	.short	0x0000
 23fb928:	1007a5e0 	.word	0x1007a5e0
 23fb92c:	00000010 	.word	0x00000010

023fb930 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fb930:	b509      	push	{r0, r3, lr}
 23fb932:	4804      	ldr	r0, [pc, #16]	; (23fb944 <hal_i2c_begin_transmission+0x14>)
 23fb934:	6800      	ldr	r0, [r0, #0]
 23fb936:	4b04      	ldr	r3, [pc, #16]	; (23fb948 <hal_i2c_begin_transmission+0x18>)
 23fb938:	4403      	add	r3, r0
 23fb93a:	681b      	ldr	r3, [r3, #0]
 23fb93c:	699b      	ldr	r3, [r3, #24]
 23fb93e:	9302      	str	r3, [sp, #8]
 23fb940:	bd09      	pop	{r0, r3, pc}
 23fb942:	0000      	.short	0x0000
 23fb944:	1007a5e0 	.word	0x1007a5e0
 23fb948:	00000010 	.word	0x00000010

023fb94c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fb94c:	b509      	push	{r0, r3, lr}
 23fb94e:	4804      	ldr	r0, [pc, #16]	; (23fb960 <hal_i2c_end_transmission+0x14>)
 23fb950:	6800      	ldr	r0, [r0, #0]
 23fb952:	4b04      	ldr	r3, [pc, #16]	; (23fb964 <hal_i2c_end_transmission+0x18>)
 23fb954:	4403      	add	r3, r0
 23fb956:	681b      	ldr	r3, [r3, #0]
 23fb958:	69db      	ldr	r3, [r3, #28]
 23fb95a:	9302      	str	r3, [sp, #8]
 23fb95c:	bd09      	pop	{r0, r3, pc}
 23fb95e:	0000      	.short	0x0000
 23fb960:	1007a5e0 	.word	0x1007a5e0
 23fb964:	00000010 	.word	0x00000010

023fb968 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fb968:	b509      	push	{r0, r3, lr}
 23fb96a:	4804      	ldr	r0, [pc, #16]	; (23fb97c <hal_i2c_write+0x14>)
 23fb96c:	6800      	ldr	r0, [r0, #0]
 23fb96e:	4b04      	ldr	r3, [pc, #16]	; (23fb980 <hal_i2c_write+0x18>)
 23fb970:	4403      	add	r3, r0
 23fb972:	681b      	ldr	r3, [r3, #0]
 23fb974:	6a1b      	ldr	r3, [r3, #32]
 23fb976:	9302      	str	r3, [sp, #8]
 23fb978:	bd09      	pop	{r0, r3, pc}
 23fb97a:	0000      	.short	0x0000
 23fb97c:	1007a5e0 	.word	0x1007a5e0
 23fb980:	00000010 	.word	0x00000010

023fb984 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fb984:	b509      	push	{r0, r3, lr}
 23fb986:	4804      	ldr	r0, [pc, #16]	; (23fb998 <hal_i2c_available+0x14>)
 23fb988:	6800      	ldr	r0, [r0, #0]
 23fb98a:	4b04      	ldr	r3, [pc, #16]	; (23fb99c <hal_i2c_available+0x18>)
 23fb98c:	4403      	add	r3, r0
 23fb98e:	681b      	ldr	r3, [r3, #0]
 23fb990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb992:	9302      	str	r3, [sp, #8]
 23fb994:	bd09      	pop	{r0, r3, pc}
 23fb996:	0000      	.short	0x0000
 23fb998:	1007a5e0 	.word	0x1007a5e0
 23fb99c:	00000010 	.word	0x00000010

023fb9a0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fb9a0:	b509      	push	{r0, r3, lr}
 23fb9a2:	4804      	ldr	r0, [pc, #16]	; (23fb9b4 <hal_i2c_read+0x14>)
 23fb9a4:	6800      	ldr	r0, [r0, #0]
 23fb9a6:	4b04      	ldr	r3, [pc, #16]	; (23fb9b8 <hal_i2c_read+0x18>)
 23fb9a8:	4403      	add	r3, r0
 23fb9aa:	681b      	ldr	r3, [r3, #0]
 23fb9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb9ae:	9302      	str	r3, [sp, #8]
 23fb9b0:	bd09      	pop	{r0, r3, pc}
 23fb9b2:	0000      	.short	0x0000
 23fb9b4:	1007a5e0 	.word	0x1007a5e0
 23fb9b8:	00000010 	.word	0x00000010

023fb9bc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fb9bc:	b509      	push	{r0, r3, lr}
 23fb9be:	4804      	ldr	r0, [pc, #16]	; (23fb9d0 <hal_i2c_peek+0x14>)
 23fb9c0:	6800      	ldr	r0, [r0, #0]
 23fb9c2:	4b04      	ldr	r3, [pc, #16]	; (23fb9d4 <hal_i2c_peek+0x18>)
 23fb9c4:	4403      	add	r3, r0
 23fb9c6:	681b      	ldr	r3, [r3, #0]
 23fb9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb9ca:	9302      	str	r3, [sp, #8]
 23fb9cc:	bd09      	pop	{r0, r3, pc}
 23fb9ce:	0000      	.short	0x0000
 23fb9d0:	1007a5e0 	.word	0x1007a5e0
 23fb9d4:	00000010 	.word	0x00000010

023fb9d8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fb9d8:	b509      	push	{r0, r3, lr}
 23fb9da:	4804      	ldr	r0, [pc, #16]	; (23fb9ec <hal_i2c_flush+0x14>)
 23fb9dc:	6800      	ldr	r0, [r0, #0]
 23fb9de:	4b04      	ldr	r3, [pc, #16]	; (23fb9f0 <hal_i2c_flush+0x18>)
 23fb9e0:	4403      	add	r3, r0
 23fb9e2:	681b      	ldr	r3, [r3, #0]
 23fb9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb9e6:	9302      	str	r3, [sp, #8]
 23fb9e8:	bd09      	pop	{r0, r3, pc}
 23fb9ea:	0000      	.short	0x0000
 23fb9ec:	1007a5e0 	.word	0x1007a5e0
 23fb9f0:	00000010 	.word	0x00000010

023fb9f4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fb9f4:	b509      	push	{r0, r3, lr}
 23fb9f6:	4804      	ldr	r0, [pc, #16]	; (23fba08 <hal_i2c_is_enabled+0x14>)
 23fb9f8:	6800      	ldr	r0, [r0, #0]
 23fb9fa:	4b04      	ldr	r3, [pc, #16]	; (23fba0c <hal_i2c_is_enabled+0x18>)
 23fb9fc:	4403      	add	r3, r0
 23fb9fe:	681b      	ldr	r3, [r3, #0]
 23fba00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fba02:	9302      	str	r3, [sp, #8]
 23fba04:	bd09      	pop	{r0, r3, pc}
 23fba06:	0000      	.short	0x0000
 23fba08:	1007a5e0 	.word	0x1007a5e0
 23fba0c:	00000010 	.word	0x00000010

023fba10 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fba10:	b509      	push	{r0, r3, lr}
 23fba12:	4804      	ldr	r0, [pc, #16]	; (23fba24 <hal_i2c_init+0x14>)
 23fba14:	6800      	ldr	r0, [r0, #0]
 23fba16:	4b04      	ldr	r3, [pc, #16]	; (23fba28 <hal_i2c_init+0x18>)
 23fba18:	4403      	add	r3, r0
 23fba1a:	681b      	ldr	r3, [r3, #0]
 23fba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fba1e:	9302      	str	r3, [sp, #8]
 23fba20:	bd09      	pop	{r0, r3, pc}
 23fba22:	0000      	.short	0x0000
 23fba24:	1007a5e0 	.word	0x1007a5e0
 23fba28:	00000010 	.word	0x00000010

023fba2c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fba2c:	b509      	push	{r0, r3, lr}
 23fba2e:	4804      	ldr	r0, [pc, #16]	; (23fba40 <hal_i2c_request_ex+0x14>)
 23fba30:	6800      	ldr	r0, [r0, #0]
 23fba32:	4b04      	ldr	r3, [pc, #16]	; (23fba44 <hal_i2c_request_ex+0x18>)
 23fba34:	4403      	add	r3, r0
 23fba36:	681b      	ldr	r3, [r3, #0]
 23fba38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fba3a:	9302      	str	r3, [sp, #8]
 23fba3c:	bd09      	pop	{r0, r3, pc}
 23fba3e:	0000      	.short	0x0000
 23fba40:	1007a5e0 	.word	0x1007a5e0
 23fba44:	00000010 	.word	0x00000010

023fba48 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fba48:	b509      	push	{r0, r3, lr}
 23fba4a:	4804      	ldr	r0, [pc, #16]	; (23fba5c <inet_inet_ntop+0x14>)
 23fba4c:	6800      	ldr	r0, [r0, #0]
 23fba4e:	4b04      	ldr	r3, [pc, #16]	; (23fba60 <inet_inet_ntop+0x18>)
 23fba50:	4403      	add	r3, r0
 23fba52:	681b      	ldr	r3, [r3, #0]
 23fba54:	695b      	ldr	r3, [r3, #20]
 23fba56:	9302      	str	r3, [sp, #8]
 23fba58:	bd09      	pop	{r0, r3, pc}
 23fba5a:	0000      	.short	0x0000
 23fba5c:	1007a5e0 	.word	0x1007a5e0
 23fba60:	0000004c 	.word	0x0000004c

023fba64 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fba64:	b509      	push	{r0, r3, lr}
 23fba66:	4804      	ldr	r0, [pc, #16]	; (23fba78 <netdb_freeaddrinfo+0x14>)
 23fba68:	6800      	ldr	r0, [r0, #0]
 23fba6a:	4b04      	ldr	r3, [pc, #16]	; (23fba7c <netdb_freeaddrinfo+0x18>)
 23fba6c:	4403      	add	r3, r0
 23fba6e:	681b      	ldr	r3, [r3, #0]
 23fba70:	689b      	ldr	r3, [r3, #8]
 23fba72:	9302      	str	r3, [sp, #8]
 23fba74:	bd09      	pop	{r0, r3, pc}
 23fba76:	0000      	.short	0x0000
 23fba78:	1007a5e0 	.word	0x1007a5e0
 23fba7c:	00000050 	.word	0x00000050

023fba80 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fba80:	b509      	push	{r0, r3, lr}
 23fba82:	4804      	ldr	r0, [pc, #16]	; (23fba94 <netdb_getaddrinfo+0x14>)
 23fba84:	6800      	ldr	r0, [r0, #0]
 23fba86:	4b04      	ldr	r3, [pc, #16]	; (23fba98 <netdb_getaddrinfo+0x18>)
 23fba88:	4403      	add	r3, r0
 23fba8a:	681b      	ldr	r3, [r3, #0]
 23fba8c:	68db      	ldr	r3, [r3, #12]
 23fba8e:	9302      	str	r3, [sp, #8]
 23fba90:	bd09      	pop	{r0, r3, pc}
 23fba92:	0000      	.short	0x0000
 23fba94:	1007a5e0 	.word	0x1007a5e0
 23fba98:	00000050 	.word	0x00000050

023fba9c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fba9c:	b509      	push	{r0, r3, lr}
 23fba9e:	4804      	ldr	r0, [pc, #16]	; (23fbab0 <hal_spi_begin+0x14>)
 23fbaa0:	6800      	ldr	r0, [r0, #0]
 23fbaa2:	4b04      	ldr	r3, [pc, #16]	; (23fbab4 <hal_spi_begin+0x18>)
 23fbaa4:	4403      	add	r3, r0
 23fbaa6:	681b      	ldr	r3, [r3, #0]
 23fbaa8:	681b      	ldr	r3, [r3, #0]
 23fbaaa:	9302      	str	r3, [sp, #8]
 23fbaac:	bd09      	pop	{r0, r3, pc}
 23fbaae:	0000      	.short	0x0000
 23fbab0:	1007a5e0 	.word	0x1007a5e0
 23fbab4:	00000018 	.word	0x00000018

023fbab8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fbab8:	b509      	push	{r0, r3, lr}
 23fbaba:	4804      	ldr	r0, [pc, #16]	; (23fbacc <hal_spi_init+0x14>)
 23fbabc:	6800      	ldr	r0, [r0, #0]
 23fbabe:	4b04      	ldr	r3, [pc, #16]	; (23fbad0 <hal_spi_init+0x18>)
 23fbac0:	4403      	add	r3, r0
 23fbac2:	681b      	ldr	r3, [r3, #0]
 23fbac4:	69db      	ldr	r3, [r3, #28]
 23fbac6:	9302      	str	r3, [sp, #8]
 23fbac8:	bd09      	pop	{r0, r3, pc}
 23fbaca:	0000      	.short	0x0000
 23fbacc:	1007a5e0 	.word	0x1007a5e0
 23fbad0:	00000018 	.word	0x00000018

023fbad4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fbad4:	b509      	push	{r0, r3, lr}
 23fbad6:	4804      	ldr	r0, [pc, #16]	; (23fbae8 <hal_spi_is_enabled+0x14>)
 23fbad8:	6800      	ldr	r0, [r0, #0]
 23fbada:	4b04      	ldr	r3, [pc, #16]	; (23fbaec <hal_spi_is_enabled+0x18>)
 23fbadc:	4403      	add	r3, r0
 23fbade:	681b      	ldr	r3, [r3, #0]
 23fbae0:	6a1b      	ldr	r3, [r3, #32]
 23fbae2:	9302      	str	r3, [sp, #8]
 23fbae4:	bd09      	pop	{r0, r3, pc}
 23fbae6:	0000      	.short	0x0000
 23fbae8:	1007a5e0 	.word	0x1007a5e0
 23fbaec:	00000018 	.word	0x00000018

023fbaf0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fbaf0:	b509      	push	{r0, r3, lr}
 23fbaf2:	4804      	ldr	r0, [pc, #16]	; (23fbb04 <hal_spi_info+0x14>)
 23fbaf4:	6800      	ldr	r0, [r0, #0]
 23fbaf6:	4b04      	ldr	r3, [pc, #16]	; (23fbb08 <hal_spi_info+0x18>)
 23fbaf8:	4403      	add	r3, r0
 23fbafa:	681b      	ldr	r3, [r3, #0]
 23fbafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbafe:	9302      	str	r3, [sp, #8]
 23fbb00:	bd09      	pop	{r0, r3, pc}
 23fbb02:	0000      	.short	0x0000
 23fbb04:	1007a5e0 	.word	0x1007a5e0
 23fbb08:	00000018 	.word	0x00000018

023fbb0c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fbb0c:	b509      	push	{r0, r3, lr}
 23fbb0e:	4804      	ldr	r0, [pc, #16]	; (23fbb20 <hal_spi_transfer_dma+0x14>)
 23fbb10:	6800      	ldr	r0, [r0, #0]
 23fbb12:	4b04      	ldr	r3, [pc, #16]	; (23fbb24 <hal_spi_transfer_dma+0x18>)
 23fbb14:	4403      	add	r3, r0
 23fbb16:	681b      	ldr	r3, [r3, #0]
 23fbb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbb1a:	9302      	str	r3, [sp, #8]
 23fbb1c:	bd09      	pop	{r0, r3, pc}
 23fbb1e:	0000      	.short	0x0000
 23fbb20:	1007a5e0 	.word	0x1007a5e0
 23fbb24:	00000018 	.word	0x00000018

023fbb28 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fbb28:	b509      	push	{r0, r3, lr}
 23fbb2a:	4804      	ldr	r0, [pc, #16]	; (23fbb3c <hal_spi_transfer_dma_status+0x14>)
 23fbb2c:	6800      	ldr	r0, [r0, #0]
 23fbb2e:	4b04      	ldr	r3, [pc, #16]	; (23fbb40 <hal_spi_transfer_dma_status+0x18>)
 23fbb30:	4403      	add	r3, r0
 23fbb32:	681b      	ldr	r3, [r3, #0]
 23fbb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fbb36:	9302      	str	r3, [sp, #8]
 23fbb38:	bd09      	pop	{r0, r3, pc}
 23fbb3a:	0000      	.short	0x0000
 23fbb3c:	1007a5e0 	.word	0x1007a5e0
 23fbb40:	00000018 	.word	0x00000018

023fbb44 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fbb44:	b509      	push	{r0, r3, lr}
 23fbb46:	4804      	ldr	r0, [pc, #16]	; (23fbb58 <hal_spi_set_settings+0x14>)
 23fbb48:	6800      	ldr	r0, [r0, #0]
 23fbb4a:	4b04      	ldr	r3, [pc, #16]	; (23fbb5c <hal_spi_set_settings+0x18>)
 23fbb4c:	4403      	add	r3, r0
 23fbb4e:	681b      	ldr	r3, [r3, #0]
 23fbb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbb52:	9302      	str	r3, [sp, #8]
 23fbb54:	bd09      	pop	{r0, r3, pc}
 23fbb56:	0000      	.short	0x0000
 23fbb58:	1007a5e0 	.word	0x1007a5e0
 23fbb5c:	00000018 	.word	0x00000018

023fbb60 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fbb60:	b509      	push	{r0, r3, lr}
 23fbb62:	4804      	ldr	r0, [pc, #16]	; (23fbb74 <hal_spi_acquire+0x14>)
 23fbb64:	6800      	ldr	r0, [r0, #0]
 23fbb66:	4b04      	ldr	r3, [pc, #16]	; (23fbb78 <hal_spi_acquire+0x18>)
 23fbb68:	4403      	add	r3, r0
 23fbb6a:	681b      	ldr	r3, [r3, #0]
 23fbb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbb6e:	9302      	str	r3, [sp, #8]
 23fbb70:	bd09      	pop	{r0, r3, pc}
 23fbb72:	0000      	.short	0x0000
 23fbb74:	1007a5e0 	.word	0x1007a5e0
 23fbb78:	00000018 	.word	0x00000018

023fbb7c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fbb7c:	b509      	push	{r0, r3, lr}
 23fbb7e:	4804      	ldr	r0, [pc, #16]	; (23fbb90 <hal_spi_release+0x14>)
 23fbb80:	6800      	ldr	r0, [r0, #0]
 23fbb82:	4b04      	ldr	r3, [pc, #16]	; (23fbb94 <hal_spi_release+0x18>)
 23fbb84:	4403      	add	r3, r0
 23fbb86:	681b      	ldr	r3, [r3, #0]
 23fbb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbb8a:	9302      	str	r3, [sp, #8]
 23fbb8c:	bd09      	pop	{r0, r3, pc}
 23fbb8e:	0000      	.short	0x0000
 23fbb90:	1007a5e0 	.word	0x1007a5e0
 23fbb94:	00000018 	.word	0x00000018

023fbb98 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fbb98:	b509      	push	{r0, r3, lr}
 23fbb9a:	4804      	ldr	r0, [pc, #16]	; (23fbbac <hal_usart_end+0x14>)
 23fbb9c:	6800      	ldr	r0, [r0, #0]
 23fbb9e:	4b04      	ldr	r3, [pc, #16]	; (23fbbb0 <hal_usart_end+0x18>)
 23fbba0:	4403      	add	r3, r0
 23fbba2:	681b      	ldr	r3, [r3, #0]
 23fbba4:	689b      	ldr	r3, [r3, #8]
 23fbba6:	9302      	str	r3, [sp, #8]
 23fbba8:	bd09      	pop	{r0, r3, pc}
 23fbbaa:	0000      	.short	0x0000
 23fbbac:	1007a5e0 	.word	0x1007a5e0
 23fbbb0:	00000024 	.word	0x00000024

023fbbb4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fbbb4:	b509      	push	{r0, r3, lr}
 23fbbb6:	4804      	ldr	r0, [pc, #16]	; (23fbbc8 <hal_usart_write+0x14>)
 23fbbb8:	6800      	ldr	r0, [r0, #0]
 23fbbba:	4b04      	ldr	r3, [pc, #16]	; (23fbbcc <hal_usart_write+0x18>)
 23fbbbc:	4403      	add	r3, r0
 23fbbbe:	681b      	ldr	r3, [r3, #0]
 23fbbc0:	68db      	ldr	r3, [r3, #12]
 23fbbc2:	9302      	str	r3, [sp, #8]
 23fbbc4:	bd09      	pop	{r0, r3, pc}
 23fbbc6:	0000      	.short	0x0000
 23fbbc8:	1007a5e0 	.word	0x1007a5e0
 23fbbcc:	00000024 	.word	0x00000024

023fbbd0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fbbd0:	b509      	push	{r0, r3, lr}
 23fbbd2:	4804      	ldr	r0, [pc, #16]	; (23fbbe4 <hal_usart_available+0x14>)
 23fbbd4:	6800      	ldr	r0, [r0, #0]
 23fbbd6:	4b04      	ldr	r3, [pc, #16]	; (23fbbe8 <hal_usart_available+0x18>)
 23fbbd8:	4403      	add	r3, r0
 23fbbda:	681b      	ldr	r3, [r3, #0]
 23fbbdc:	691b      	ldr	r3, [r3, #16]
 23fbbde:	9302      	str	r3, [sp, #8]
 23fbbe0:	bd09      	pop	{r0, r3, pc}
 23fbbe2:	0000      	.short	0x0000
 23fbbe4:	1007a5e0 	.word	0x1007a5e0
 23fbbe8:	00000024 	.word	0x00000024

023fbbec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fbbec:	b509      	push	{r0, r3, lr}
 23fbbee:	4804      	ldr	r0, [pc, #16]	; (23fbc00 <hal_usart_read+0x14>)
 23fbbf0:	6800      	ldr	r0, [r0, #0]
 23fbbf2:	4b04      	ldr	r3, [pc, #16]	; (23fbc04 <hal_usart_read+0x18>)
 23fbbf4:	4403      	add	r3, r0
 23fbbf6:	681b      	ldr	r3, [r3, #0]
 23fbbf8:	695b      	ldr	r3, [r3, #20]
 23fbbfa:	9302      	str	r3, [sp, #8]
 23fbbfc:	bd09      	pop	{r0, r3, pc}
 23fbbfe:	0000      	.short	0x0000
 23fbc00:	1007a5e0 	.word	0x1007a5e0
 23fbc04:	00000024 	.word	0x00000024

023fbc08 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fbc08:	b509      	push	{r0, r3, lr}
 23fbc0a:	4804      	ldr	r0, [pc, #16]	; (23fbc1c <hal_usart_peek+0x14>)
 23fbc0c:	6800      	ldr	r0, [r0, #0]
 23fbc0e:	4b04      	ldr	r3, [pc, #16]	; (23fbc20 <hal_usart_peek+0x18>)
 23fbc10:	4403      	add	r3, r0
 23fbc12:	681b      	ldr	r3, [r3, #0]
 23fbc14:	699b      	ldr	r3, [r3, #24]
 23fbc16:	9302      	str	r3, [sp, #8]
 23fbc18:	bd09      	pop	{r0, r3, pc}
 23fbc1a:	0000      	.short	0x0000
 23fbc1c:	1007a5e0 	.word	0x1007a5e0
 23fbc20:	00000024 	.word	0x00000024

023fbc24 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fbc24:	b509      	push	{r0, r3, lr}
 23fbc26:	4804      	ldr	r0, [pc, #16]	; (23fbc38 <hal_usart_flush+0x14>)
 23fbc28:	6800      	ldr	r0, [r0, #0]
 23fbc2a:	4b04      	ldr	r3, [pc, #16]	; (23fbc3c <hal_usart_flush+0x18>)
 23fbc2c:	4403      	add	r3, r0
 23fbc2e:	681b      	ldr	r3, [r3, #0]
 23fbc30:	69db      	ldr	r3, [r3, #28]
 23fbc32:	9302      	str	r3, [sp, #8]
 23fbc34:	bd09      	pop	{r0, r3, pc}
 23fbc36:	0000      	.short	0x0000
 23fbc38:	1007a5e0 	.word	0x1007a5e0
 23fbc3c:	00000024 	.word	0x00000024

023fbc40 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fbc40:	b509      	push	{r0, r3, lr}
 23fbc42:	4804      	ldr	r0, [pc, #16]	; (23fbc54 <hal_usart_is_enabled+0x14>)
 23fbc44:	6800      	ldr	r0, [r0, #0]
 23fbc46:	4b04      	ldr	r3, [pc, #16]	; (23fbc58 <hal_usart_is_enabled+0x18>)
 23fbc48:	4403      	add	r3, r0
 23fbc4a:	681b      	ldr	r3, [r3, #0]
 23fbc4c:	6a1b      	ldr	r3, [r3, #32]
 23fbc4e:	9302      	str	r3, [sp, #8]
 23fbc50:	bd09      	pop	{r0, r3, pc}
 23fbc52:	0000      	.short	0x0000
 23fbc54:	1007a5e0 	.word	0x1007a5e0
 23fbc58:	00000024 	.word	0x00000024

023fbc5c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fbc5c:	b509      	push	{r0, r3, lr}
 23fbc5e:	4804      	ldr	r0, [pc, #16]	; (23fbc70 <hal_usart_available_data_for_write+0x14>)
 23fbc60:	6800      	ldr	r0, [r0, #0]
 23fbc62:	4b04      	ldr	r3, [pc, #16]	; (23fbc74 <hal_usart_available_data_for_write+0x18>)
 23fbc64:	4403      	add	r3, r0
 23fbc66:	681b      	ldr	r3, [r3, #0]
 23fbc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbc6a:	9302      	str	r3, [sp, #8]
 23fbc6c:	bd09      	pop	{r0, r3, pc}
 23fbc6e:	0000      	.short	0x0000
 23fbc70:	1007a5e0 	.word	0x1007a5e0
 23fbc74:	00000024 	.word	0x00000024

023fbc78 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fbc78:	b509      	push	{r0, r3, lr}
 23fbc7a:	4804      	ldr	r0, [pc, #16]	; (23fbc8c <hal_usart_begin_config+0x14>)
 23fbc7c:	6800      	ldr	r0, [r0, #0]
 23fbc7e:	4b04      	ldr	r3, [pc, #16]	; (23fbc90 <hal_usart_begin_config+0x18>)
 23fbc80:	4403      	add	r3, r0
 23fbc82:	681b      	ldr	r3, [r3, #0]
 23fbc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbc86:	9302      	str	r3, [sp, #8]
 23fbc88:	bd09      	pop	{r0, r3, pc}
 23fbc8a:	0000      	.short	0x0000
 23fbc8c:	1007a5e0 	.word	0x1007a5e0
 23fbc90:	00000024 	.word	0x00000024

023fbc94 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fbc94:	b509      	push	{r0, r3, lr}
 23fbc96:	4804      	ldr	r0, [pc, #16]	; (23fbca8 <hal_usart_init_ex+0x14>)
 23fbc98:	6800      	ldr	r0, [r0, #0]
 23fbc9a:	4b04      	ldr	r3, [pc, #16]	; (23fbcac <hal_usart_init_ex+0x18>)
 23fbc9c:	4403      	add	r3, r0
 23fbc9e:	681b      	ldr	r3, [r3, #0]
 23fbca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbca2:	9302      	str	r3, [sp, #8]
 23fbca4:	bd09      	pop	{r0, r3, pc}
 23fbca6:	0000      	.short	0x0000
 23fbca8:	1007a5e0 	.word	0x1007a5e0
 23fbcac:	00000024 	.word	0x00000024

023fbcb0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fbcb0:	b509      	push	{r0, r3, lr}
 23fbcb2:	4804      	ldr	r0, [pc, #16]	; (23fbcc4 <HAL_USB_USART_Init+0x14>)
 23fbcb4:	6800      	ldr	r0, [r0, #0]
 23fbcb6:	4b04      	ldr	r3, [pc, #16]	; (23fbcc8 <HAL_USB_USART_Init+0x18>)
 23fbcb8:	4403      	add	r3, r0
 23fbcba:	681b      	ldr	r3, [r3, #0]
 23fbcbc:	681b      	ldr	r3, [r3, #0]
 23fbcbe:	9302      	str	r3, [sp, #8]
 23fbcc0:	bd09      	pop	{r0, r3, pc}
 23fbcc2:	0000      	.short	0x0000
 23fbcc4:	1007a5e0 	.word	0x1007a5e0
 23fbcc8:	00000034 	.word	0x00000034

023fbccc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fbccc:	b509      	push	{r0, r3, lr}
 23fbcce:	4804      	ldr	r0, [pc, #16]	; (23fbce0 <HAL_USB_USART_Begin+0x14>)
 23fbcd0:	6800      	ldr	r0, [r0, #0]
 23fbcd2:	4b04      	ldr	r3, [pc, #16]	; (23fbce4 <HAL_USB_USART_Begin+0x18>)
 23fbcd4:	4403      	add	r3, r0
 23fbcd6:	681b      	ldr	r3, [r3, #0]
 23fbcd8:	685b      	ldr	r3, [r3, #4]
 23fbcda:	9302      	str	r3, [sp, #8]
 23fbcdc:	bd09      	pop	{r0, r3, pc}
 23fbcde:	0000      	.short	0x0000
 23fbce0:	1007a5e0 	.word	0x1007a5e0
 23fbce4:	00000034 	.word	0x00000034

023fbce8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fbce8:	b509      	push	{r0, r3, lr}
 23fbcea:	4804      	ldr	r0, [pc, #16]	; (23fbcfc <HAL_USB_USART_End+0x14>)
 23fbcec:	6800      	ldr	r0, [r0, #0]
 23fbcee:	4b04      	ldr	r3, [pc, #16]	; (23fbd00 <HAL_USB_USART_End+0x18>)
 23fbcf0:	4403      	add	r3, r0
 23fbcf2:	681b      	ldr	r3, [r3, #0]
 23fbcf4:	689b      	ldr	r3, [r3, #8]
 23fbcf6:	9302      	str	r3, [sp, #8]
 23fbcf8:	bd09      	pop	{r0, r3, pc}
 23fbcfa:	0000      	.short	0x0000
 23fbcfc:	1007a5e0 	.word	0x1007a5e0
 23fbd00:	00000034 	.word	0x00000034

023fbd04 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fbd04:	b509      	push	{r0, r3, lr}
 23fbd06:	4804      	ldr	r0, [pc, #16]	; (23fbd18 <HAL_USB_USART_Available_Data+0x14>)
 23fbd08:	6800      	ldr	r0, [r0, #0]
 23fbd0a:	4b04      	ldr	r3, [pc, #16]	; (23fbd1c <HAL_USB_USART_Available_Data+0x18>)
 23fbd0c:	4403      	add	r3, r0
 23fbd0e:	681b      	ldr	r3, [r3, #0]
 23fbd10:	691b      	ldr	r3, [r3, #16]
 23fbd12:	9302      	str	r3, [sp, #8]
 23fbd14:	bd09      	pop	{r0, r3, pc}
 23fbd16:	0000      	.short	0x0000
 23fbd18:	1007a5e0 	.word	0x1007a5e0
 23fbd1c:	00000034 	.word	0x00000034

023fbd20 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fbd20:	b509      	push	{r0, r3, lr}
 23fbd22:	4804      	ldr	r0, [pc, #16]	; (23fbd34 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fbd24:	6800      	ldr	r0, [r0, #0]
 23fbd26:	4b04      	ldr	r3, [pc, #16]	; (23fbd38 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fbd28:	4403      	add	r3, r0
 23fbd2a:	681b      	ldr	r3, [r3, #0]
 23fbd2c:	695b      	ldr	r3, [r3, #20]
 23fbd2e:	9302      	str	r3, [sp, #8]
 23fbd30:	bd09      	pop	{r0, r3, pc}
 23fbd32:	0000      	.short	0x0000
 23fbd34:	1007a5e0 	.word	0x1007a5e0
 23fbd38:	00000034 	.word	0x00000034

023fbd3c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbd3c:	b509      	push	{r0, r3, lr}
 23fbd3e:	4804      	ldr	r0, [pc, #16]	; (23fbd50 <HAL_USB_USART_Receive_Data+0x14>)
 23fbd40:	6800      	ldr	r0, [r0, #0]
 23fbd42:	4b04      	ldr	r3, [pc, #16]	; (23fbd54 <HAL_USB_USART_Receive_Data+0x18>)
 23fbd44:	4403      	add	r3, r0
 23fbd46:	681b      	ldr	r3, [r3, #0]
 23fbd48:	699b      	ldr	r3, [r3, #24]
 23fbd4a:	9302      	str	r3, [sp, #8]
 23fbd4c:	bd09      	pop	{r0, r3, pc}
 23fbd4e:	0000      	.short	0x0000
 23fbd50:	1007a5e0 	.word	0x1007a5e0
 23fbd54:	00000034 	.word	0x00000034

023fbd58 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbd58:	b509      	push	{r0, r3, lr}
 23fbd5a:	4804      	ldr	r0, [pc, #16]	; (23fbd6c <HAL_USB_USART_Send_Data+0x14>)
 23fbd5c:	6800      	ldr	r0, [r0, #0]
 23fbd5e:	4b04      	ldr	r3, [pc, #16]	; (23fbd70 <HAL_USB_USART_Send_Data+0x18>)
 23fbd60:	4403      	add	r3, r0
 23fbd62:	681b      	ldr	r3, [r3, #0]
 23fbd64:	69db      	ldr	r3, [r3, #28]
 23fbd66:	9302      	str	r3, [sp, #8]
 23fbd68:	bd09      	pop	{r0, r3, pc}
 23fbd6a:	0000      	.short	0x0000
 23fbd6c:	1007a5e0 	.word	0x1007a5e0
 23fbd70:	00000034 	.word	0x00000034

023fbd74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fbd74:	b509      	push	{r0, r3, lr}
 23fbd76:	4804      	ldr	r0, [pc, #16]	; (23fbd88 <HAL_USB_USART_Flush_Data+0x14>)
 23fbd78:	6800      	ldr	r0, [r0, #0]
 23fbd7a:	4b04      	ldr	r3, [pc, #16]	; (23fbd8c <HAL_USB_USART_Flush_Data+0x18>)
 23fbd7c:	4403      	add	r3, r0
 23fbd7e:	681b      	ldr	r3, [r3, #0]
 23fbd80:	6a1b      	ldr	r3, [r3, #32]
 23fbd82:	9302      	str	r3, [sp, #8]
 23fbd84:	bd09      	pop	{r0, r3, pc}
 23fbd86:	0000      	.short	0x0000
 23fbd88:	1007a5e0 	.word	0x1007a5e0
 23fbd8c:	00000034 	.word	0x00000034

023fbd90 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fbd90:	b509      	push	{r0, r3, lr}
 23fbd92:	4804      	ldr	r0, [pc, #16]	; (23fbda4 <panic_+0x14>)
 23fbd94:	6800      	ldr	r0, [r0, #0]
 23fbd96:	4b04      	ldr	r3, [pc, #16]	; (23fbda8 <panic_+0x18>)
 23fbd98:	4403      	add	r3, r0
 23fbd9a:	681b      	ldr	r3, [r3, #0]
 23fbd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbd9e:	9302      	str	r3, [sp, #8]
 23fbda0:	bd09      	pop	{r0, r3, pc}
 23fbda2:	0000      	.short	0x0000
 23fbda4:	1007a5e0 	.word	0x1007a5e0
 23fbda8:	00000048 	.word	0x00000048

023fbdac <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fbdac:	b509      	push	{r0, r3, lr}
 23fbdae:	4804      	ldr	r0, [pc, #16]	; (23fbdc0 <log_message_v+0x14>)
 23fbdb0:	6800      	ldr	r0, [r0, #0]
 23fbdb2:	4b04      	ldr	r3, [pc, #16]	; (23fbdc4 <log_message_v+0x18>)
 23fbdb4:	4403      	add	r3, r0
 23fbdb6:	681b      	ldr	r3, [r3, #0]
 23fbdb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fbdba:	9302      	str	r3, [sp, #8]
 23fbdbc:	bd09      	pop	{r0, r3, pc}
 23fbdbe:	0000      	.short	0x0000
 23fbdc0:	1007a5e0 	.word	0x1007a5e0
 23fbdc4:	00000048 	.word	0x00000048

023fbdc8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fbdc8:	b509      	push	{r0, r3, lr}
 23fbdca:	4804      	ldr	r0, [pc, #16]	; (23fbddc <log_level_name+0x14>)
 23fbdcc:	6800      	ldr	r0, [r0, #0]
 23fbdce:	4b04      	ldr	r3, [pc, #16]	; (23fbde0 <log_level_name+0x18>)
 23fbdd0:	4403      	add	r3, r0
 23fbdd2:	681b      	ldr	r3, [r3, #0]
 23fbdd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fbdd6:	9302      	str	r3, [sp, #8]
 23fbdd8:	bd09      	pop	{r0, r3, pc}
 23fbdda:	0000      	.short	0x0000
 23fbddc:	1007a5e0 	.word	0x1007a5e0
 23fbde0:	00000048 	.word	0x00000048

023fbde4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fbde4:	b509      	push	{r0, r3, lr}
 23fbde6:	4804      	ldr	r0, [pc, #16]	; (23fbdf8 <log_set_callbacks+0x14>)
 23fbde8:	6800      	ldr	r0, [r0, #0]
 23fbdea:	4b04      	ldr	r3, [pc, #16]	; (23fbdfc <log_set_callbacks+0x18>)
 23fbdec:	4403      	add	r3, r0
 23fbdee:	681b      	ldr	r3, [r3, #0]
 23fbdf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fbdf2:	9302      	str	r3, [sp, #8]
 23fbdf4:	bd09      	pop	{r0, r3, pc}
 23fbdf6:	0000      	.short	0x0000
 23fbdf8:	1007a5e0 	.word	0x1007a5e0
 23fbdfc:	00000048 	.word	0x00000048

023fbe00 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fbe00:	b509      	push	{r0, r3, lr}
 23fbe02:	4804      	ldr	r0, [pc, #16]	; (23fbe14 <set_system_mode+0x14>)
 23fbe04:	6800      	ldr	r0, [r0, #0]
 23fbe06:	4b04      	ldr	r3, [pc, #16]	; (23fbe18 <set_system_mode+0x18>)
 23fbe08:	4403      	add	r3, r0
 23fbe0a:	681b      	ldr	r3, [r3, #0]
 23fbe0c:	685b      	ldr	r3, [r3, #4]
 23fbe0e:	9302      	str	r3, [sp, #8]
 23fbe10:	bd09      	pop	{r0, r3, pc}
 23fbe12:	0000      	.short	0x0000
 23fbe14:	1007a5e0 	.word	0x1007a5e0
 23fbe18:	00000008 	.word	0x00000008

023fbe1c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fbe1c:	b509      	push	{r0, r3, lr}
 23fbe1e:	4804      	ldr	r0, [pc, #16]	; (23fbe30 <system_delay_ms+0x14>)
 23fbe20:	6800      	ldr	r0, [r0, #0]
 23fbe22:	4b04      	ldr	r3, [pc, #16]	; (23fbe34 <system_delay_ms+0x18>)
 23fbe24:	4403      	add	r3, r0
 23fbe26:	681b      	ldr	r3, [r3, #0]
 23fbe28:	695b      	ldr	r3, [r3, #20]
 23fbe2a:	9302      	str	r3, [sp, #8]
 23fbe2c:	bd09      	pop	{r0, r3, pc}
 23fbe2e:	0000      	.short	0x0000
 23fbe30:	1007a5e0 	.word	0x1007a5e0
 23fbe34:	00000008 	.word	0x00000008

023fbe38 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fbe38:	b509      	push	{r0, r3, lr}
 23fbe3a:	4804      	ldr	r0, [pc, #16]	; (23fbe4c <system_thread_set_state+0x14>)
 23fbe3c:	6800      	ldr	r0, [r0, #0]
 23fbe3e:	4b04      	ldr	r3, [pc, #16]	; (23fbe50 <system_thread_set_state+0x18>)
 23fbe40:	4403      	add	r3, r0
 23fbe42:	681b      	ldr	r3, [r3, #0]
 23fbe44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbe46:	9302      	str	r3, [sp, #8]
 23fbe48:	bd09      	pop	{r0, r3, pc}
 23fbe4a:	0000      	.short	0x0000
 23fbe4c:	1007a5e0 	.word	0x1007a5e0
 23fbe50:	00000008 	.word	0x00000008

023fbe54 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fbe54:	b509      	push	{r0, r3, lr}
 23fbe56:	4804      	ldr	r0, [pc, #16]	; (23fbe68 <application_thread_current+0x14>)
 23fbe58:	6800      	ldr	r0, [r0, #0]
 23fbe5a:	4b04      	ldr	r3, [pc, #16]	; (23fbe6c <application_thread_current+0x18>)
 23fbe5c:	4403      	add	r3, r0
 23fbe5e:	681b      	ldr	r3, [r3, #0]
 23fbe60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fbe62:	9302      	str	r3, [sp, #8]
 23fbe64:	bd09      	pop	{r0, r3, pc}
 23fbe66:	0000      	.short	0x0000
 23fbe68:	1007a5e0 	.word	0x1007a5e0
 23fbe6c:	00000008 	.word	0x00000008

023fbe70 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fbe70:	b509      	push	{r0, r3, lr}
 23fbe72:	4804      	ldr	r0, [pc, #16]	; (23fbe84 <application_thread_invoke+0x14>)
 23fbe74:	6800      	ldr	r0, [r0, #0]
 23fbe76:	4b04      	ldr	r3, [pc, #16]	; (23fbe88 <application_thread_invoke+0x18>)
 23fbe78:	4403      	add	r3, r0
 23fbe7a:	681b      	ldr	r3, [r3, #0]
 23fbe7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fbe7e:	9302      	str	r3, [sp, #8]
 23fbe80:	bd09      	pop	{r0, r3, pc}
 23fbe82:	0000      	.short	0x0000
 23fbe84:	1007a5e0 	.word	0x1007a5e0
 23fbe88:	00000008 	.word	0x00000008

023fbe8c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fbe8c:	b509      	push	{r0, r3, lr}
 23fbe8e:	4804      	ldr	r0, [pc, #16]	; (23fbea0 <system_ctrl_set_app_request_handler+0x14>)
 23fbe90:	6800      	ldr	r0, [r0, #0]
 23fbe92:	4b04      	ldr	r3, [pc, #16]	; (23fbea4 <system_ctrl_set_app_request_handler+0x18>)
 23fbe94:	4403      	add	r3, r0
 23fbe96:	681b      	ldr	r3, [r3, #0]
 23fbe98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fbe9c:	9302      	str	r3, [sp, #8]
 23fbe9e:	bd09      	pop	{r0, r3, pc}
 23fbea0:	1007a5e0 	.word	0x1007a5e0
 23fbea4:	00000008 	.word	0x00000008

023fbea8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fbea8:	b509      	push	{r0, r3, lr}
 23fbeaa:	4804      	ldr	r0, [pc, #16]	; (23fbebc <system_ctrl_set_result+0x14>)
 23fbeac:	6800      	ldr	r0, [r0, #0]
 23fbeae:	4b04      	ldr	r3, [pc, #16]	; (23fbec0 <system_ctrl_set_result+0x18>)
 23fbeb0:	4403      	add	r3, r0
 23fbeb2:	681b      	ldr	r3, [r3, #0]
 23fbeb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fbeb8:	9302      	str	r3, [sp, #8]
 23fbeba:	bd09      	pop	{r0, r3, pc}
 23fbebc:	1007a5e0 	.word	0x1007a5e0
 23fbec0:	00000008 	.word	0x00000008

023fbec4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fbec4:	b509      	push	{r0, r3, lr}
 23fbec6:	4804      	ldr	r0, [pc, #16]	; (23fbed8 <spark_process+0x14>)
 23fbec8:	6800      	ldr	r0, [r0, #0]
 23fbeca:	4b04      	ldr	r3, [pc, #16]	; (23fbedc <spark_process+0x18>)
 23fbecc:	4403      	add	r3, r0
 23fbece:	681b      	ldr	r3, [r3, #0]
 23fbed0:	689b      	ldr	r3, [r3, #8]
 23fbed2:	9302      	str	r3, [sp, #8]
 23fbed4:	bd09      	pop	{r0, r3, pc}
 23fbed6:	0000      	.short	0x0000
 23fbed8:	1007a5e0 	.word	0x1007a5e0
 23fbedc:	0000002c 	.word	0x0000002c

023fbee0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23fbee0:	b509      	push	{r0, r3, lr}
 23fbee2:	4804      	ldr	r0, [pc, #16]	; (23fbef4 <spark_cloud_flag_connect+0x14>)
 23fbee4:	6800      	ldr	r0, [r0, #0]
 23fbee6:	4b04      	ldr	r3, [pc, #16]	; (23fbef8 <spark_cloud_flag_connect+0x18>)
 23fbee8:	4403      	add	r3, r0
 23fbeea:	681b      	ldr	r3, [r3, #0]
 23fbeec:	68db      	ldr	r3, [r3, #12]
 23fbeee:	9302      	str	r3, [sp, #8]
 23fbef0:	bd09      	pop	{r0, r3, pc}
 23fbef2:	0000      	.short	0x0000
 23fbef4:	1007a5e0 	.word	0x1007a5e0
 23fbef8:	0000002c 	.word	0x0000002c

023fbefc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fbefc:	b509      	push	{r0, r3, lr}
 23fbefe:	4804      	ldr	r0, [pc, #16]	; (23fbf10 <spark_cloud_flag_connected+0x14>)
 23fbf00:	6800      	ldr	r0, [r0, #0]
 23fbf02:	4b04      	ldr	r3, [pc, #16]	; (23fbf14 <spark_cloud_flag_connected+0x18>)
 23fbf04:	4403      	add	r3, r0
 23fbf06:	681b      	ldr	r3, [r3, #0]
 23fbf08:	695b      	ldr	r3, [r3, #20]
 23fbf0a:	9302      	str	r3, [sp, #8]
 23fbf0c:	bd09      	pop	{r0, r3, pc}
 23fbf0e:	0000      	.short	0x0000
 23fbf10:	1007a5e0 	.word	0x1007a5e0
 23fbf14:	0000002c 	.word	0x0000002c

023fbf18 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fbf18:	b509      	push	{r0, r3, lr}
 23fbf1a:	4804      	ldr	r0, [pc, #16]	; (23fbf2c <spark_send_event+0x14>)
 23fbf1c:	6800      	ldr	r0, [r0, #0]
 23fbf1e:	4b04      	ldr	r3, [pc, #16]	; (23fbf30 <spark_send_event+0x18>)
 23fbf20:	4403      	add	r3, r0
 23fbf22:	681b      	ldr	r3, [r3, #0]
 23fbf24:	6a1b      	ldr	r3, [r3, #32]
 23fbf26:	9302      	str	r3, [sp, #8]
 23fbf28:	bd09      	pop	{r0, r3, pc}
 23fbf2a:	0000      	.short	0x0000
 23fbf2c:	1007a5e0 	.word	0x1007a5e0
 23fbf30:	0000002c 	.word	0x0000002c

023fbf34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fbf34:	b509      	push	{r0, r3, lr}
 23fbf36:	4804      	ldr	r0, [pc, #16]	; (23fbf48 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fbf38:	6800      	ldr	r0, [r0, #0]
 23fbf3a:	4b04      	ldr	r3, [pc, #16]	; (23fbf4c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fbf3c:	4403      	add	r3, r0
 23fbf3e:	681b      	ldr	r3, [r3, #0]
 23fbf40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbf42:	9302      	str	r3, [sp, #8]
 23fbf44:	bd09      	pop	{r0, r3, pc}
 23fbf46:	0000      	.short	0x0000
 23fbf48:	1007a5e0 	.word	0x1007a5e0
 23fbf4c:	0000002c 	.word	0x0000002c

023fbf50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbf50:	b509      	push	{r0, r3, lr}
 23fbf52:	4804      	ldr	r0, [pc, #16]	; (23fbf64 <network_connect+0x14>)
 23fbf54:	6800      	ldr	r0, [r0, #0]
 23fbf56:	4b04      	ldr	r3, [pc, #16]	; (23fbf68 <network_connect+0x18>)
 23fbf58:	4403      	add	r3, r0
 23fbf5a:	681b      	ldr	r3, [r3, #0]
 23fbf5c:	685b      	ldr	r3, [r3, #4]
 23fbf5e:	9302      	str	r3, [sp, #8]
 23fbf60:	bd09      	pop	{r0, r3, pc}
 23fbf62:	0000      	.short	0x0000
 23fbf64:	1007a5e0 	.word	0x1007a5e0
 23fbf68:	00000028 	.word	0x00000028

023fbf6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fbf6c:	b509      	push	{r0, r3, lr}
 23fbf6e:	4804      	ldr	r0, [pc, #16]	; (23fbf80 <network_connecting+0x14>)
 23fbf70:	6800      	ldr	r0, [r0, #0]
 23fbf72:	4b04      	ldr	r3, [pc, #16]	; (23fbf84 <network_connecting+0x18>)
 23fbf74:	4403      	add	r3, r0
 23fbf76:	681b      	ldr	r3, [r3, #0]
 23fbf78:	689b      	ldr	r3, [r3, #8]
 23fbf7a:	9302      	str	r3, [sp, #8]
 23fbf7c:	bd09      	pop	{r0, r3, pc}
 23fbf7e:	0000      	.short	0x0000
 23fbf80:	1007a5e0 	.word	0x1007a5e0
 23fbf84:	00000028 	.word	0x00000028

023fbf88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fbf88:	b509      	push	{r0, r3, lr}
 23fbf8a:	4804      	ldr	r0, [pc, #16]	; (23fbf9c <network_disconnect+0x14>)
 23fbf8c:	6800      	ldr	r0, [r0, #0]
 23fbf8e:	4b04      	ldr	r3, [pc, #16]	; (23fbfa0 <network_disconnect+0x18>)
 23fbf90:	4403      	add	r3, r0
 23fbf92:	681b      	ldr	r3, [r3, #0]
 23fbf94:	68db      	ldr	r3, [r3, #12]
 23fbf96:	9302      	str	r3, [sp, #8]
 23fbf98:	bd09      	pop	{r0, r3, pc}
 23fbf9a:	0000      	.short	0x0000
 23fbf9c:	1007a5e0 	.word	0x1007a5e0
 23fbfa0:	00000028 	.word	0x00000028

023fbfa4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fbfa4:	b509      	push	{r0, r3, lr}
 23fbfa6:	4804      	ldr	r0, [pc, #16]	; (23fbfb8 <network_ready+0x14>)
 23fbfa8:	6800      	ldr	r0, [r0, #0]
 23fbfaa:	4b04      	ldr	r3, [pc, #16]	; (23fbfbc <network_ready+0x18>)
 23fbfac:	4403      	add	r3, r0
 23fbfae:	681b      	ldr	r3, [r3, #0]
 23fbfb0:	691b      	ldr	r3, [r3, #16]
 23fbfb2:	9302      	str	r3, [sp, #8]
 23fbfb4:	bd09      	pop	{r0, r3, pc}
 23fbfb6:	0000      	.short	0x0000
 23fbfb8:	1007a5e0 	.word	0x1007a5e0
 23fbfbc:	00000028 	.word	0x00000028

023fbfc0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbfc0:	b509      	push	{r0, r3, lr}
 23fbfc2:	4804      	ldr	r0, [pc, #16]	; (23fbfd4 <network_on+0x14>)
 23fbfc4:	6800      	ldr	r0, [r0, #0]
 23fbfc6:	4b04      	ldr	r3, [pc, #16]	; (23fbfd8 <network_on+0x18>)
 23fbfc8:	4403      	add	r3, r0
 23fbfca:	681b      	ldr	r3, [r3, #0]
 23fbfcc:	695b      	ldr	r3, [r3, #20]
 23fbfce:	9302      	str	r3, [sp, #8]
 23fbfd0:	bd09      	pop	{r0, r3, pc}
 23fbfd2:	0000      	.short	0x0000
 23fbfd4:	1007a5e0 	.word	0x1007a5e0
 23fbfd8:	00000028 	.word	0x00000028

023fbfdc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbfdc:	b509      	push	{r0, r3, lr}
 23fbfde:	4804      	ldr	r0, [pc, #16]	; (23fbff0 <network_off+0x14>)
 23fbfe0:	6800      	ldr	r0, [r0, #0]
 23fbfe2:	4b04      	ldr	r3, [pc, #16]	; (23fbff4 <network_off+0x18>)
 23fbfe4:	4403      	add	r3, r0
 23fbfe6:	681b      	ldr	r3, [r3, #0]
 23fbfe8:	699b      	ldr	r3, [r3, #24]
 23fbfea:	9302      	str	r3, [sp, #8]
 23fbfec:	bd09      	pop	{r0, r3, pc}
 23fbfee:	0000      	.short	0x0000
 23fbff0:	1007a5e0 	.word	0x1007a5e0
 23fbff4:	00000028 	.word	0x00000028

023fbff8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fbff8:	b509      	push	{r0, r3, lr}
 23fbffa:	4804      	ldr	r0, [pc, #16]	; (23fc00c <network_listen+0x14>)
 23fbffc:	6800      	ldr	r0, [r0, #0]
 23fbffe:	4b04      	ldr	r3, [pc, #16]	; (23fc010 <network_listen+0x18>)
 23fc000:	4403      	add	r3, r0
 23fc002:	681b      	ldr	r3, [r3, #0]
 23fc004:	69db      	ldr	r3, [r3, #28]
 23fc006:	9302      	str	r3, [sp, #8]
 23fc008:	bd09      	pop	{r0, r3, pc}
 23fc00a:	0000      	.short	0x0000
 23fc00c:	1007a5e0 	.word	0x1007a5e0
 23fc010:	00000028 	.word	0x00000028

023fc014 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc014:	b509      	push	{r0, r3, lr}
 23fc016:	4804      	ldr	r0, [pc, #16]	; (23fc028 <network_listening+0x14>)
 23fc018:	6800      	ldr	r0, [r0, #0]
 23fc01a:	4b04      	ldr	r3, [pc, #16]	; (23fc02c <network_listening+0x18>)
 23fc01c:	4403      	add	r3, r0
 23fc01e:	681b      	ldr	r3, [r3, #0]
 23fc020:	6a1b      	ldr	r3, [r3, #32]
 23fc022:	9302      	str	r3, [sp, #8]
 23fc024:	bd09      	pop	{r0, r3, pc}
 23fc026:	0000      	.short	0x0000
 23fc028:	1007a5e0 	.word	0x1007a5e0
 23fc02c:	00000028 	.word	0x00000028

023fc030 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc030:	b509      	push	{r0, r3, lr}
 23fc032:	4804      	ldr	r0, [pc, #16]	; (23fc044 <network_set_listen_timeout+0x14>)
 23fc034:	6800      	ldr	r0, [r0, #0]
 23fc036:	4b04      	ldr	r3, [pc, #16]	; (23fc048 <network_set_listen_timeout+0x18>)
 23fc038:	4403      	add	r3, r0
 23fc03a:	681b      	ldr	r3, [r3, #0]
 23fc03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc03e:	9302      	str	r3, [sp, #8]
 23fc040:	bd09      	pop	{r0, r3, pc}
 23fc042:	0000      	.short	0x0000
 23fc044:	1007a5e0 	.word	0x1007a5e0
 23fc048:	00000028 	.word	0x00000028

023fc04c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc04c:	b509      	push	{r0, r3, lr}
 23fc04e:	4804      	ldr	r0, [pc, #16]	; (23fc060 <network_get_listen_timeout+0x14>)
 23fc050:	6800      	ldr	r0, [r0, #0]
 23fc052:	4b04      	ldr	r3, [pc, #16]	; (23fc064 <network_get_listen_timeout+0x18>)
 23fc054:	4403      	add	r3, r0
 23fc056:	681b      	ldr	r3, [r3, #0]
 23fc058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc05a:	9302      	str	r3, [sp, #8]
 23fc05c:	bd09      	pop	{r0, r3, pc}
 23fc05e:	0000      	.short	0x0000
 23fc060:	1007a5e0 	.word	0x1007a5e0
 23fc064:	00000028 	.word	0x00000028

023fc068 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc068:	b509      	push	{r0, r3, lr}
 23fc06a:	4804      	ldr	r0, [pc, #16]	; (23fc07c <network_is_on+0x14>)
 23fc06c:	6800      	ldr	r0, [r0, #0]
 23fc06e:	4b04      	ldr	r3, [pc, #16]	; (23fc080 <network_is_on+0x18>)
 23fc070:	4403      	add	r3, r0
 23fc072:	681b      	ldr	r3, [r3, #0]
 23fc074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc076:	9302      	str	r3, [sp, #8]
 23fc078:	bd09      	pop	{r0, r3, pc}
 23fc07a:	0000      	.short	0x0000
 23fc07c:	1007a5e0 	.word	0x1007a5e0
 23fc080:	00000028 	.word	0x00000028

023fc084 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc084:	b509      	push	{r0, r3, lr}
 23fc086:	4804      	ldr	r0, [pc, #16]	; (23fc098 <network_is_off+0x14>)
 23fc088:	6800      	ldr	r0, [r0, #0]
 23fc08a:	4b04      	ldr	r3, [pc, #16]	; (23fc09c <network_is_off+0x18>)
 23fc08c:	4403      	add	r3, r0
 23fc08e:	681b      	ldr	r3, [r3, #0]
 23fc090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc092:	9302      	str	r3, [sp, #8]
 23fc094:	bd09      	pop	{r0, r3, pc}
 23fc096:	0000      	.short	0x0000
 23fc098:	1007a5e0 	.word	0x1007a5e0
 23fc09c:	00000028 	.word	0x00000028

023fc0a0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc0a0:	b509      	push	{r0, r3, lr}
 23fc0a2:	4804      	ldr	r0, [pc, #16]	; (23fc0b4 <malloc+0x14>)
 23fc0a4:	6800      	ldr	r0, [r0, #0]
 23fc0a6:	4b04      	ldr	r3, [pc, #16]	; (23fc0b8 <malloc+0x18>)
 23fc0a8:	4403      	add	r3, r0
 23fc0aa:	681b      	ldr	r3, [r3, #0]
 23fc0ac:	681b      	ldr	r3, [r3, #0]
 23fc0ae:	9302      	str	r3, [sp, #8]
 23fc0b0:	bd09      	pop	{r0, r3, pc}
 23fc0b2:	0000      	.short	0x0000
 23fc0b4:	1007a5e0 	.word	0x1007a5e0
 23fc0b8:	00000004 	.word	0x00000004

023fc0bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc0bc:	b509      	push	{r0, r3, lr}
 23fc0be:	4804      	ldr	r0, [pc, #16]	; (23fc0d0 <free+0x14>)
 23fc0c0:	6800      	ldr	r0, [r0, #0]
 23fc0c2:	4b04      	ldr	r3, [pc, #16]	; (23fc0d4 <free+0x18>)
 23fc0c4:	4403      	add	r3, r0
 23fc0c6:	681b      	ldr	r3, [r3, #0]
 23fc0c8:	685b      	ldr	r3, [r3, #4]
 23fc0ca:	9302      	str	r3, [sp, #8]
 23fc0cc:	bd09      	pop	{r0, r3, pc}
 23fc0ce:	0000      	.short	0x0000
 23fc0d0:	1007a5e0 	.word	0x1007a5e0
 23fc0d4:	00000004 	.word	0x00000004

023fc0d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fc0d8:	b509      	push	{r0, r3, lr}
 23fc0da:	4804      	ldr	r0, [pc, #16]	; (23fc0ec <realloc+0x14>)
 23fc0dc:	6800      	ldr	r0, [r0, #0]
 23fc0de:	4b04      	ldr	r3, [pc, #16]	; (23fc0f0 <realloc+0x18>)
 23fc0e0:	4403      	add	r3, r0
 23fc0e2:	681b      	ldr	r3, [r3, #0]
 23fc0e4:	689b      	ldr	r3, [r3, #8]
 23fc0e6:	9302      	str	r3, [sp, #8]
 23fc0e8:	bd09      	pop	{r0, r3, pc}
 23fc0ea:	0000      	.short	0x0000
 23fc0ec:	1007a5e0 	.word	0x1007a5e0
 23fc0f0:	00000004 	.word	0x00000004

023fc0f4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fc0f4:	b509      	push	{r0, r3, lr}
 23fc0f6:	4804      	ldr	r0, [pc, #16]	; (23fc108 <vsnprintf+0x14>)
 23fc0f8:	6800      	ldr	r0, [r0, #0]
 23fc0fa:	4b04      	ldr	r3, [pc, #16]	; (23fc10c <vsnprintf+0x18>)
 23fc0fc:	4403      	add	r3, r0
 23fc0fe:	681b      	ldr	r3, [r3, #0]
 23fc100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc102:	9302      	str	r3, [sp, #8]
 23fc104:	bd09      	pop	{r0, r3, pc}
 23fc106:	0000      	.short	0x0000
 23fc108:	1007a5e0 	.word	0x1007a5e0
 23fc10c:	00000004 	.word	0x00000004

023fc110 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fc110:	b509      	push	{r0, r3, lr}
 23fc112:	4804      	ldr	r0, [pc, #16]	; (23fc124 <abort+0x14>)
 23fc114:	6800      	ldr	r0, [r0, #0]
 23fc116:	4b04      	ldr	r3, [pc, #16]	; (23fc128 <abort+0x18>)
 23fc118:	4403      	add	r3, r0
 23fc11a:	681b      	ldr	r3, [r3, #0]
 23fc11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc11e:	9302      	str	r3, [sp, #8]
 23fc120:	bd09      	pop	{r0, r3, pc}
 23fc122:	0000      	.short	0x0000
 23fc124:	1007a5e0 	.word	0x1007a5e0
 23fc128:	00000004 	.word	0x00000004

023fc12c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fc12c:	b509      	push	{r0, r3, lr}
 23fc12e:	4804      	ldr	r0, [pc, #16]	; (23fc140 <_malloc_r+0x14>)
 23fc130:	6800      	ldr	r0, [r0, #0]
 23fc132:	4b04      	ldr	r3, [pc, #16]	; (23fc144 <_malloc_r+0x18>)
 23fc134:	4403      	add	r3, r0
 23fc136:	681b      	ldr	r3, [r3, #0]
 23fc138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc13a:	9302      	str	r3, [sp, #8]
 23fc13c:	bd09      	pop	{r0, r3, pc}
 23fc13e:	0000      	.short	0x0000
 23fc140:	1007a5e0 	.word	0x1007a5e0
 23fc144:	00000004 	.word	0x00000004

023fc148 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fc148:	b509      	push	{r0, r3, lr}
 23fc14a:	4804      	ldr	r0, [pc, #16]	; (23fc15c <__errno+0x14>)
 23fc14c:	6800      	ldr	r0, [r0, #0]
 23fc14e:	4b04      	ldr	r3, [pc, #16]	; (23fc160 <__errno+0x18>)
 23fc150:	4403      	add	r3, r0
 23fc152:	681b      	ldr	r3, [r3, #0]
 23fc154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc156:	9302      	str	r3, [sp, #8]
 23fc158:	bd09      	pop	{r0, r3, pc}
 23fc15a:	0000      	.short	0x0000
 23fc15c:	1007a5e0 	.word	0x1007a5e0
 23fc160:	00000004 	.word	0x00000004

023fc164 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fc164:	b509      	push	{r0, r3, lr}
 23fc166:	4804      	ldr	r0, [pc, #16]	; (23fc178 <__assert_func+0x14>)
 23fc168:	6800      	ldr	r0, [r0, #0]
 23fc16a:	4b04      	ldr	r3, [pc, #16]	; (23fc17c <__assert_func+0x18>)
 23fc16c:	4403      	add	r3, r0
 23fc16e:	681b      	ldr	r3, [r3, #0]
 23fc170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc172:	9302      	str	r3, [sp, #8]
 23fc174:	bd09      	pop	{r0, r3, pc}
 23fc176:	0000      	.short	0x0000
 23fc178:	1007a5e0 	.word	0x1007a5e0
 23fc17c:	00000004 	.word	0x00000004

023fc180 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fc180:	b509      	push	{r0, r3, lr}
 23fc182:	4804      	ldr	r0, [pc, #16]	; (23fc194 <newlib_impure_ptr_callback+0x14>)
 23fc184:	6800      	ldr	r0, [r0, #0]
 23fc186:	4b04      	ldr	r3, [pc, #16]	; (23fc198 <newlib_impure_ptr_callback+0x18>)
 23fc188:	4403      	add	r3, r0
 23fc18a:	681b      	ldr	r3, [r3, #0]
 23fc18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc18e:	9302      	str	r3, [sp, #8]
 23fc190:	bd09      	pop	{r0, r3, pc}
 23fc192:	0000      	.short	0x0000
 23fc194:	1007a5e0 	.word	0x1007a5e0
 23fc198:	00000004 	.word	0x00000004

023fc19c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fc19c:	2100      	movs	r1, #0
 23fc19e:	f7ff be3d 	b.w	23fbe1c <system_delay_ms>

023fc1a2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fc1a2:	b510      	push	{r4, lr}
      if (_M_empty())
 23fc1a4:	6883      	ldr	r3, [r0, #8]
 23fc1a6:	4604      	mov	r4, r0
 23fc1a8:	b90b      	cbnz	r3, 23fc1ae <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fc1aa:	f002 fbef 	bl	23fe98c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc1ae:	68c3      	ldr	r3, [r0, #12]
 23fc1b0:	4798      	blx	r3
      if (_M_manager)
 23fc1b2:	68a3      	ldr	r3, [r4, #8]
 23fc1b4:	b11b      	cbz	r3, 23fc1be <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fc1b6:	2203      	movs	r2, #3
 23fc1b8:	4621      	mov	r1, r4
 23fc1ba:	4620      	mov	r0, r4
 23fc1bc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fc1be:	4620      	mov	r0, r4
}
 23fc1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fc1c4:	2110      	movs	r1, #16
 23fc1c6:	f7fd bb0a 	b.w	23f97de <_ZdlPvj>

023fc1ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fc1ca:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fc1cc:	6843      	ldr	r3, [r0, #4]
    {
 23fc1ce:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fc1d0:	3b01      	subs	r3, #1
 23fc1d2:	6043      	str	r3, [r0, #4]
 23fc1d4:	b963      	cbnz	r3, 23fc1f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fc1d6:	6803      	ldr	r3, [r0, #0]
 23fc1d8:	689b      	ldr	r3, [r3, #8]
 23fc1da:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc1dc:	68a3      	ldr	r3, [r4, #8]
 23fc1de:	3b01      	subs	r3, #1
 23fc1e0:	60a3      	str	r3, [r4, #8]
 23fc1e2:	b92b      	cbnz	r3, 23fc1f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fc1e4:	6823      	ldr	r3, [r4, #0]
 23fc1e6:	4620      	mov	r0, r4
    }
 23fc1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fc1ec:	68db      	ldr	r3, [r3, #12]
 23fc1ee:	4718      	bx	r3
    }
 23fc1f0:	bd10      	pop	{r4, pc}

023fc1f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc1f2:	b570      	push	{r4, r5, r6, lr}
 23fc1f4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc1f6:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fc1fa:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fc1fe:	42ae      	cmp	r6, r5
 23fc200:	d004      	beq.n	23fc20c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fc202:	4628      	mov	r0, r5
 23fc204:	f001 ffb9 	bl	23fe17a <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fc208:	3510      	adds	r5, #16
 23fc20a:	e7f8      	b.n	23fc1fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fc20c:	6820      	ldr	r0, [r4, #0]
 23fc20e:	f7ff ff55 	bl	23fc0bc <free>
    AllocatorT::free(data_);
}
 23fc212:	4620      	mov	r0, r4
 23fc214:	bd70      	pop	{r4, r5, r6, pc}

023fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fc216:	b510      	push	{r4, lr}
 23fc218:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fc21a:	6800      	ldr	r0, [r0, #0]
 23fc21c:	b108      	cbz	r0, 23fc222 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fc21e:	f7ff ffd4 	bl	23fc1ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fc222:	4620      	mov	r0, r4
 23fc224:	bd10      	pop	{r4, pc}

023fc226 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 23fc226:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc228:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fc22a:	460b      	mov	r3, r1
 23fc22c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc22e:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fc232:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fc236:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fc23a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fc23e:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fc242:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fc246:	b002      	add	sp, #8
 23fc248:	bd10      	pop	{r4, pc}
	...

023fc24c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fc24c:	2300      	movs	r3, #0
 23fc24e:	4802      	ldr	r0, [pc, #8]	; (23fc258 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fc250:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fc252:	f7ff ba9b 	b.w	23fb78c <os_mutex_recursive_create>
 23fc256:	bf00      	nop
 23fc258:	1007ae58 	.word	0x1007ae58

023fc25c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fc25c:	4770      	bx	lr

023fc25e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fc25e:	2000      	movs	r0, #0
 23fc260:	4770      	bx	lr

023fc262 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fc262:	b510      	push	{r4, lr}
 23fc264:	4604      	mov	r4, r0
 23fc266:	2110      	movs	r1, #16
 23fc268:	f7fd fab9 	bl	23f97de <_ZdlPvj>
 23fc26c:	4620      	mov	r0, r4
 23fc26e:	bd10      	pop	{r4, pc}

023fc270 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fc270:	b508      	push	{r3, lr}
      { delete this; }
 23fc272:	f7ff fff6 	bl	23fc262 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fc276:	bd08      	pop	{r3, pc}

023fc278 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fc278:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fc27a:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fc27c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fc280:	6002      	str	r2, [r0, #0]
 23fc282:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc284:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc286:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc288:	680c      	ldr	r4, [r1, #0]
 23fc28a:	8085      	strh	r5, [r0, #4]
 23fc28c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc28e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fc290:	bd30      	pop	{r4, r5, pc}

023fc292 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fc292:	b510      	push	{r4, lr}
 23fc294:	4604      	mov	r4, r0
    free((void*)msg_);
 23fc296:	6800      	ldr	r0, [r0, #0]
 23fc298:	f7ff ff10 	bl	23fc0bc <free>
}
 23fc29c:	4620      	mov	r0, r4
 23fc29e:	bd10      	pop	{r4, pc}

023fc2a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fc2a0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fc2a2:	68c4      	ldr	r4, [r0, #12]
 23fc2a4:	b314      	cbz	r4, 23fc2ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
 23fc2a6:	7823      	ldrb	r3, [r4, #0]
 23fc2a8:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fc2aa:	2b02      	cmp	r3, #2
 23fc2ac:	d103      	bne.n	23fc2b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fc2ae:	f104 000c 	add.w	r0, r4, #12
 23fc2b2:	f7ff ffee 	bl	23fc292 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fc2b6:	1d23      	adds	r3, r4, #4
 23fc2b8:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fc2ba:	b135      	cbz	r5, 23fc2ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fc2bc:	4628      	mov	r0, r5
 23fc2be:	f7fd fb3f 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
 23fc2c2:	2110      	movs	r1, #16
 23fc2c4:	4628      	mov	r0, r5
 23fc2c6:	f7fd fa8a 	bl	23f97de <_ZdlPvj>
 23fc2ca:	f104 0308 	add.w	r3, r4, #8
 23fc2ce:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fc2d0:	b135      	cbz	r5, 23fc2e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fc2d2:	4628      	mov	r0, r5
 23fc2d4:	f7fd fb34 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
 23fc2d8:	2110      	movs	r1, #16
 23fc2da:	4628      	mov	r0, r5
 23fc2dc:	f7fd fa7f 	bl	23f97de <_ZdlPvj>
 23fc2e0:	4620      	mov	r0, r4
 23fc2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fc2e6:	2114      	movs	r1, #20
 23fc2e8:	f7fd ba79 	b.w	23f97de <_ZdlPvj>
 23fc2ec:	bd38      	pop	{r3, r4, r5, pc}

023fc2ee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc2ee:	680b      	ldr	r3, [r1, #0]
 23fc2f0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fc2f2:	684b      	ldr	r3, [r1, #4]
 23fc2f4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fc2f6:	b113      	cbz	r3, 23fc2fe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fc2f8:	685a      	ldr	r2, [r3, #4]
 23fc2fa:	3201      	adds	r2, #1
 23fc2fc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc2fe:	4770      	bx	lr

023fc300 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fc300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc302:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fc304:	4668      	mov	r0, sp
 23fc306:	460d      	mov	r5, r1
 23fc308:	f7ff fff1 	bl	23fc2ee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fc30c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fc30e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fc310:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fc312:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fc314:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fc316:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fc318:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 23fc31a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fc31c:	f7ff ff7b 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fc320:	b135      	cbz	r5, 23fc330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fc322:	1d28      	adds	r0, r5, #4
 23fc324:	f7ff ff77 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc328:	2108      	movs	r1, #8
 23fc32a:	4628      	mov	r0, r5
 23fc32c:	f7fd fa57 	bl	23f97de <_ZdlPvj>
        return p;
    }
 23fc330:	4620      	mov	r0, r4
 23fc332:	b003      	add	sp, #12
 23fc334:	bd30      	pop	{r4, r5, pc}

023fc336 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fc336:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fc338:	b510      	push	{r4, lr}
      if (_M_empty())
 23fc33a:	b90a      	cbnz	r2, 23fc340 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fc33c:	f002 fb26 	bl	23fe98c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc340:	68c3      	ldr	r3, [r0, #12]
    }
 23fc342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc346:	4718      	bx	r3

023fc348 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fc348:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fc34a:	6800      	ldr	r0, [r0, #0]
 23fc34c:	f100 0110 	add.w	r1, r0, #16
 23fc350:	f7ff fff1 	bl	23fc336 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fc354:	bd08      	pop	{r3, pc}

023fc356 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fc356:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fc358:	b510      	push	{r4, lr}
      if (_M_empty())
 23fc35a:	b90a      	cbnz	r2, 23fc360 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fc35c:	f002 fb16 	bl	23fe98c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc360:	68c3      	ldr	r3, [r0, #12]
    }
 23fc362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc366:	4718      	bx	r3

023fc368 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fc368:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fc36a:	6800      	ldr	r0, [r0, #0]
 23fc36c:	f100 0110 	add.w	r1, r0, #16
 23fc370:	f7ff fff1 	bl	23fc356 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fc374:	bd08      	pop	{r3, pc}
	...

023fc378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fc378:	b538      	push	{r3, r4, r5, lr}
 23fc37a:	2300      	movs	r3, #0
 23fc37c:	4604      	mov	r4, r0
 23fc37e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fc380:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fc382:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fc384:	f7fd fa27 	bl	23f97d6 <_Znwj>
 23fc388:	b128      	cbz	r0, 23fc396 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fc38a:	2301      	movs	r3, #1
 23fc38c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fc390:	4b02      	ldr	r3, [pc, #8]	; (23fc39c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fc392:	60c5      	str	r5, [r0, #12]
 23fc394:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fc396:	6020      	str	r0, [r4, #0]
	}
 23fc398:	4620      	mov	r0, r4
 23fc39a:	bd38      	pop	{r3, r4, r5, pc}
 23fc39c:	023ffbc0 	.word	0x023ffbc0

023fc3a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fc3a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fc3a2:	2300      	movs	r3, #0
 23fc3a4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fc3a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fc3a8:	4604      	mov	r4, r0
 23fc3aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fc3ac:	b12b      	cbz	r3, 23fc3ba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc3ae:	2202      	movs	r2, #2
 23fc3b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fc3b2:	68eb      	ldr	r3, [r5, #12]
 23fc3b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fc3b6:	68ab      	ldr	r3, [r5, #8]
 23fc3b8:	60a3      	str	r3, [r4, #8]
    }
 23fc3ba:	4620      	mov	r0, r4
 23fc3bc:	bd38      	pop	{r3, r4, r5, pc}
	...

023fc3c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fc3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc3c2:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
 23fc3c4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fc3c6:	4668      	mov	r0, sp
 23fc3c8:	f7ff ff56 	bl	23fc278 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fc3cc:	f04f 0302 	mov.w	r3, #2
 23fc3d0:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fc3d4:	2a00      	cmp	r2, #0
 23fc3d6:	d103      	bne.n	23fc3e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fc3d8:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fc3dc:	2900      	cmp	r1, #0
 23fc3de:	d1f7      	bne.n	23fc3d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fc3e0:	d121      	bne.n	23fc426 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fc3e2:	f104 050c 	add.w	r5, r4, #12
 23fc3e6:	4669      	mov	r1, sp
 23fc3e8:	4628      	mov	r0, r5
 23fc3ea:	f7ff ff45 	bl	23fc278 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fc3ee:	2201      	movs	r2, #1
 23fc3f0:	1c63      	adds	r3, r4, #1
 23fc3f2:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fc3f6:	2000      	movs	r0, #0
 23fc3f8:	f104 0308 	add.w	r3, r4, #8
 23fc3fc:	e8d3 6fef 	ldaex	r6, [r3]
 23fc400:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fc404:	2a00      	cmp	r2, #0
 23fc406:	d1f9      	bne.n	23fc3fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fc408:	b16e      	cbz	r6, 23fc426 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fc40a:	f7ff fd23 	bl	23fbe54 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fc40e:	b178      	cbz	r0, 23fc430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fc410:	4629      	mov	r1, r5
 23fc412:	4630      	mov	r0, r6
 23fc414:	f7ff ff8f 	bl	23fc336 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fc418:	4630      	mov	r0, r6
 23fc41a:	f7fd fa91 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fc41e:	2110      	movs	r1, #16
 23fc420:	4630      	mov	r0, r6
 23fc422:	f7fd f9dc 	bl	23f97de <_ZdlPvj>
        p_->setError(std::move(error));
 23fc426:	4668      	mov	r0, sp
 23fc428:	f7ff ff33 	bl	23fc292 <_ZN8particle5ErrorD1Ev>
    }
 23fc42c:	b009      	add	sp, #36	; 0x24
 23fc42e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fc430:	4631      	mov	r1, r6
 23fc432:	a802      	add	r0, sp, #8
 23fc434:	f7ff ffb4 	bl	23fc3a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fc438:	68e0      	ldr	r0, [r4, #12]
 23fc43a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fc43e:	b108      	cbz	r0, 23fc444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fc440:	f002 fb34 	bl	23feaac <strdup>
        type_(type) {
 23fc444:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fc446:	2010      	movs	r0, #16
 23fc448:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fc44c:	f7fd f9c3 	bl	23f97d6 <_Znwj>
 23fc450:	4605      	mov	r5, r0
 23fc452:	b1e8      	cbz	r0, 23fc490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fc454:	2700      	movs	r7, #0
 23fc456:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fc458:	2018      	movs	r0, #24
 23fc45a:	f7fd f9bc 	bl	23f97d6 <_Znwj>
 23fc45e:	4604      	mov	r4, r0
 23fc460:	b188      	cbz	r0, 23fc486 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fc462:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fc464:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fc466:	a802      	add	r0, sp, #8
 23fc468:	f7ff fedd 	bl	23fc226 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc46c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc46e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc470:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc472:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fc474:	9204      	str	r2, [sp, #16]
 23fc476:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fc478:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fc47a:	60e3      	str	r3, [r4, #12]
 23fc47c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fc480:	9205      	str	r2, [sp, #20]
 23fc482:	f7ff fef9 	bl	23fc278 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fc486:	4b08      	ldr	r3, [pc, #32]	; (23fc4a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fc488:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fc48a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fc48c:	4b07      	ldr	r3, [pc, #28]	; (23fc4ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fc48e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fc490:	a806      	add	r0, sp, #24
 23fc492:	f7ff fefe 	bl	23fc292 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fc496:	a802      	add	r0, sp, #8
 23fc498:	f7fd fa52 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fc49c:	2200      	movs	r2, #0
 23fc49e:	4629      	mov	r1, r5
 23fc4a0:	4803      	ldr	r0, [pc, #12]	; (23fc4b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fc4a2:	f7ff fce5 	bl	23fbe70 <application_thread_invoke>
 23fc4a6:	e7b7      	b.n	23fc418 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fc4a8:	023fc349 	.word	0x023fc349
 23fc4ac:	023fc5c5 	.word	0x023fc5c5
 23fc4b0:	023fc1a3 	.word	0x023fc1a3

023fc4b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fc4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc4b8:	b08b      	sub	sp, #44	; 0x2c
 23fc4ba:	4605      	mov	r5, r0
 23fc4bc:	460f      	mov	r7, r1
 23fc4be:	4690      	mov	r8, r2
 23fc4c0:	4699      	mov	r9, r3
 23fc4c2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fc4c6:	f7ff fd19 	bl	23fbefc <spark_cloud_flag_connected>
 23fc4ca:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fc4cc:	4683      	mov	fp, r0
 23fc4ce:	bb38      	cbnz	r0, 23fc520 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fc4d0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fc4d4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fc4d6:	a905      	add	r1, sp, #20
 23fc4d8:	4630      	mov	r0, r6
 23fc4da:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fc4de:	f7ff fecb 	bl	23fc278 <_ZN8particle5ErrorC1EOS0_>
 23fc4e2:	2014      	movs	r0, #20
 23fc4e4:	f7fd f977 	bl	23f97d6 <_Znwj>
 23fc4e8:	4604      	mov	r4, r0
 23fc4ea:	b148      	cbz	r0, 23fc500 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fc4ec:	2302      	movs	r3, #2
 23fc4ee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fc4f0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fc4f2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fc4f6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fc4f8:	4631      	mov	r1, r6
 23fc4fa:	300c      	adds	r0, #12
 23fc4fc:	f7ff febc 	bl	23fc278 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fc500:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fc502:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fc504:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fc508:	f7ff ff36 	bl	23fc378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fc50c:	4630      	mov	r0, r6
 23fc50e:	f7ff fec0 	bl	23fc292 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fc512:	a805      	add	r0, sp, #20
 23fc514:	f7ff febd 	bl	23fc292 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fc518:	4628      	mov	r0, r5
 23fc51a:	b00b      	add	sp, #44	; 0x2c
 23fc51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fc520:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fc522:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fc524:	2014      	movs	r0, #20
 23fc526:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fc52a:	9307      	str	r3, [sp, #28]
 23fc52c:	f7fd f953 	bl	23f97d6 <_Znwj>
 23fc530:	4601      	mov	r1, r0
 23fc532:	b118      	cbz	r0, 23fc53c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fc534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fc538:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fc53a:	7044      	strb	r4, [r0, #1]
 23fc53c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fc53e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fc540:	f7ff ff1a 	bl	23fc378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fc544:	4b1e      	ldr	r3, [pc, #120]	; (23fc5c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fc546:	2008      	movs	r0, #8
 23fc548:	9308      	str	r3, [sp, #32]
 23fc54a:	f7fd f944 	bl	23f97d6 <_Znwj>
 23fc54e:	4604      	mov	r4, r0
 23fc550:	b110      	cbz	r0, 23fc558 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fc552:	a903      	add	r1, sp, #12
 23fc554:	f7ff fecb 	bl	23fc2ee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fc558:	464a      	mov	r2, r9
 23fc55a:	4641      	mov	r1, r8
 23fc55c:	4638      	mov	r0, r7
 23fc55e:	9600      	str	r6, [sp, #0]
 23fc560:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fc564:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fc566:	f7ff fcd7 	bl	23fbf18 <spark_send_event>
 23fc56a:	b9b8      	cbnz	r0, 23fc59c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fc56c:	9b03      	ldr	r3, [sp, #12]
 23fc56e:	3301      	adds	r3, #1
 23fc570:	781b      	ldrb	r3, [r3, #0]
 23fc572:	b2db      	uxtb	r3, r3
 23fc574:	b993      	cbnz	r3, 23fc59c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fc576:	9305      	str	r3, [sp, #20]
 23fc578:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fc57c:	a905      	add	r1, sp, #20
 23fc57e:	a803      	add	r0, sp, #12
 23fc580:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fc584:	f7ff ff1c 	bl	23fc3c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fc588:	a805      	add	r0, sp, #20
 23fc58a:	f7ff fe82 	bl	23fc292 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fc58e:	a805      	add	r0, sp, #20
 23fc590:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fc592:	f7ff feb5 	bl	23fc300 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fc596:	a806      	add	r0, sp, #24
 23fc598:	f7ff fe3d 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc59c:	a903      	add	r1, sp, #12
 23fc59e:	a805      	add	r0, sp, #20
 23fc5a0:	f7ff fea5 	bl	23fc2ee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fc5a4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fc5a6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fc5a8:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fc5aa:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fc5ac:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fc5ae:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fc5b0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fc5b2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fc5b4:	f7ff fe2f 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc5b8:	a804      	add	r0, sp, #16
 23fc5ba:	f7ff fe2c 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fc5be:	e7ab      	b.n	23fc518 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fc5c0:	023fc641 	.word	0x023fc641

023fc5c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fc5c4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fc5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc5c8:	4605      	mov	r5, r0
	switch (__op)
 23fc5ca:	d103      	bne.n	23fc5d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fc5cc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fc5ce:	6003      	str	r3, [r0, #0]
      }
 23fc5d0:	2000      	movs	r0, #0
 23fc5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fc5d4:	2a02      	cmp	r2, #2
 23fc5d6:	d010      	beq.n	23fc5fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fc5d8:	2a03      	cmp	r2, #3
 23fc5da:	d1f9      	bne.n	23fc5d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fc5dc:	6804      	ldr	r4, [r0, #0]
 23fc5de:	2c00      	cmp	r4, #0
 23fc5e0:	d0f6      	beq.n	23fc5d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fc5e2:	f104 0010 	add.w	r0, r4, #16
 23fc5e6:	f7ff fe54 	bl	23fc292 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fc5ea:	4620      	mov	r0, r4
 23fc5ec:	f7fd f9a8 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fc5f0:	2118      	movs	r1, #24
 23fc5f2:	4620      	mov	r0, r4
 23fc5f4:	f7fd f8f3 	bl	23f97de <_ZdlPvj>
 23fc5f8:	e7ea      	b.n	23fc5d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fc5fa:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fc5fc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fc5fe:	f7fd f8ea 	bl	23f97d6 <_Znwj>
 23fc602:	4604      	mov	r4, r0
 23fc604:	b150      	cbz	r0, 23fc61c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fc606:	4631      	mov	r1, r6
 23fc608:	f7ff feca 	bl	23fc3a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fc60c:	6930      	ldr	r0, [r6, #16]
 23fc60e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fc612:	b108      	cbz	r0, 23fc618 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fc614:	f002 fa4a 	bl	23feaac <strdup>
        type_(type) {
 23fc618:	6120      	str	r0, [r4, #16]
 23fc61a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fc61c:	602c      	str	r4, [r5, #0]
	}
 23fc61e:	e7d7      	b.n	23fc5d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fc620 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fc620:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fc622:	2300      	movs	r3, #0
 23fc624:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fc626:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fc628:	4604      	mov	r4, r0
 23fc62a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fc62c:	b12b      	cbz	r3, 23fc63a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fc62e:	2202      	movs	r2, #2
 23fc630:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fc632:	68eb      	ldr	r3, [r5, #12]
 23fc634:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fc636:	68ab      	ldr	r3, [r5, #8]
 23fc638:	60a3      	str	r3, [r4, #8]
    }
 23fc63a:	4620      	mov	r0, r4
 23fc63c:	bd38      	pop	{r3, r4, r5, pc}
	...

023fc640 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fc640:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc642:	4604      	mov	r4, r0
 23fc644:	b089      	sub	sp, #36	; 0x24
 23fc646:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fc648:	a801      	add	r0, sp, #4
 23fc64a:	4611      	mov	r1, r2
 23fc64c:	f7ff fe58 	bl	23fc300 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fc650:	b1a4      	cbz	r4, 23fc67c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fc652:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fc654:	b11d      	cbz	r5, 23fc65e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fc656:	4628      	mov	r0, r5
 23fc658:	f002 fa28 	bl	23feaac <strdup>
 23fc65c:	4605      	mov	r5, r0
 23fc65e:	a801      	add	r0, sp, #4
 23fc660:	a903      	add	r1, sp, #12
        type_(type) {
 23fc662:	9503      	str	r5, [sp, #12]
 23fc664:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fc668:	f7ff feaa 	bl	23fc3c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fc66c:	a803      	add	r0, sp, #12
 23fc66e:	f7ff fe10 	bl	23fc292 <_ZN8particle5ErrorD1Ev>
 23fc672:	a802      	add	r0, sp, #8
 23fc674:	f7ff fdcf 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc678:	b009      	add	sp, #36	; 0x24
 23fc67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fc67c:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fc67e:	9d01      	ldr	r5, [sp, #4]
 23fc680:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fc684:	2a00      	cmp	r2, #0
 23fc686:	d103      	bne.n	23fc690 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fc688:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fc68c:	2900      	cmp	r1, #0
 23fc68e:	d1f7      	bne.n	23fc680 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fc690:	d1ef      	bne.n	23fc672 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fc692:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fc694:	2201      	movs	r2, #1
 23fc696:	18eb      	adds	r3, r5, r3
 23fc698:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fc69c:	1d2b      	adds	r3, r5, #4
 23fc69e:	e8d3 6fef 	ldaex	r6, [r3]
 23fc6a2:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fc6a6:	2a00      	cmp	r2, #0
 23fc6a8:	d1f9      	bne.n	23fc69e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fc6aa:	2e00      	cmp	r6, #0
 23fc6ac:	d0e1      	beq.n	23fc672 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fc6ae:	4620      	mov	r0, r4
 23fc6b0:	f7ff fbd0 	bl	23fbe54 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fc6b4:	4607      	mov	r7, r0
 23fc6b6:	b160      	cbz	r0, 23fc6d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fc6b8:	4630      	mov	r0, r6
 23fc6ba:	f105 010c 	add.w	r1, r5, #12
 23fc6be:	f7ff fe4a 	bl	23fc356 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fc6c2:	4630      	mov	r0, r6
 23fc6c4:	f7fd f93c 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fc6c8:	2110      	movs	r1, #16
 23fc6ca:	4630      	mov	r0, r6
 23fc6cc:	f7fd f887 	bl	23f97de <_ZdlPvj>
 23fc6d0:	e7cf      	b.n	23fc672 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fc6d2:	4631      	mov	r1, r6
 23fc6d4:	a803      	add	r0, sp, #12
 23fc6d6:	f7ff ffa3 	bl	23fc620 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fc6da:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fc6dc:	2010      	movs	r0, #16
 23fc6de:	f88d 301c 	strb.w	r3, [sp, #28]
 23fc6e2:	f7fd f878 	bl	23f97d6 <_Znwj>
 23fc6e6:	4605      	mov	r5, r0
 23fc6e8:	b1d0      	cbz	r0, 23fc720 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fc6ea:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fc6ec:	2014      	movs	r0, #20
 23fc6ee:	f7fd f872 	bl	23f97d6 <_Znwj>
 23fc6f2:	4604      	mov	r4, r0
 23fc6f4:	b178      	cbz	r0, 23fc716 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fc6f6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fc6f8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fc6fa:	a803      	add	r0, sp, #12
 23fc6fc:	f7ff fd93 	bl	23fc226 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc700:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fc702:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc704:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc706:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fc708:	9205      	str	r2, [sp, #20]
 23fc70a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc70c:	60e3      	str	r3, [r4, #12]
 23fc70e:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fc712:	9206      	str	r2, [sp, #24]
 23fc714:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fc716:	4b07      	ldr	r3, [pc, #28]	; (23fc734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fc718:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fc71a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fc71c:	4b06      	ldr	r3, [pc, #24]	; (23fc738 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fc71e:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fc720:	a803      	add	r0, sp, #12
 23fc722:	f7fd f90d 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fc726:	2200      	movs	r2, #0
 23fc728:	4629      	mov	r1, r5
 23fc72a:	4804      	ldr	r0, [pc, #16]	; (23fc73c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fc72c:	f7ff fba0 	bl	23fbe70 <application_thread_invoke>
 23fc730:	e7c7      	b.n	23fc6c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fc732:	bf00      	nop
 23fc734:	023fc369 	.word	0x023fc369
 23fc738:	023fc741 	.word	0x023fc741
 23fc73c:	023fc1a3 	.word	0x023fc1a3

023fc740 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fc740:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fc742:	b570      	push	{r4, r5, r6, lr}
 23fc744:	4604      	mov	r4, r0
	switch (__op)
 23fc746:	d103      	bne.n	23fc750 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fc748:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fc74a:	6003      	str	r3, [r0, #0]
      }
 23fc74c:	2000      	movs	r0, #0
 23fc74e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fc750:	2a02      	cmp	r2, #2
 23fc752:	d00c      	beq.n	23fc76e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fc754:	2a03      	cmp	r2, #3
 23fc756:	d1f9      	bne.n	23fc74c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fc758:	6804      	ldr	r4, [r0, #0]
 23fc75a:	2c00      	cmp	r4, #0
 23fc75c:	d0f6      	beq.n	23fc74c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fc75e:	4620      	mov	r0, r4
 23fc760:	f7fd f8ee 	bl	23f9940 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fc764:	2114      	movs	r1, #20
 23fc766:	4620      	mov	r0, r4
 23fc768:	f7fd f839 	bl	23f97de <_ZdlPvj>
 23fc76c:	e7ee      	b.n	23fc74c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fc76e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fc770:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fc772:	f7fd f830 	bl	23f97d6 <_Znwj>
 23fc776:	4605      	mov	r5, r0
 23fc778:	b120      	cbz	r0, 23fc784 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fc77a:	4631      	mov	r1, r6
 23fc77c:	f7ff ff50 	bl	23fc620 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fc780:	7c33      	ldrb	r3, [r6, #16]
 23fc782:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fc784:	6025      	str	r5, [r4, #0]
	}
 23fc786:	e7e1      	b.n	23fc74c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fc788 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc788:	2200      	movs	r2, #0
 23fc78a:	6840      	ldr	r0, [r0, #4]
 23fc78c:	4611      	mov	r1, r2
 23fc78e:	f7ff bc41 	b.w	23fc014 <network_listening>

023fc792 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc792:	2200      	movs	r2, #0
 23fc794:	6840      	ldr	r0, [r0, #4]
 23fc796:	4611      	mov	r1, r2
 23fc798:	f7ff bc58 	b.w	23fc04c <network_get_listen_timeout>

023fc79c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc79c:	2200      	movs	r2, #0
 23fc79e:	6840      	ldr	r0, [r0, #4]
 23fc7a0:	f7ff bc46 	b.w	23fc030 <network_set_listen_timeout>

023fc7a4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc7a4:	2200      	movs	r2, #0
 23fc7a6:	6840      	ldr	r0, [r0, #4]
 23fc7a8:	f081 0101 	eor.w	r1, r1, #1
 23fc7ac:	f7ff bc24 	b.w	23fbff8 <network_listen>

023fc7b0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc7b0:	2300      	movs	r3, #0
 23fc7b2:	6840      	ldr	r0, [r0, #4]
 23fc7b4:	461a      	mov	r2, r3
 23fc7b6:	4619      	mov	r1, r3
 23fc7b8:	f7ff bc10 	b.w	23fbfdc <network_off>

023fc7bc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc7bc:	2300      	movs	r3, #0
 23fc7be:	6840      	ldr	r0, [r0, #4]
 23fc7c0:	461a      	mov	r2, r3
 23fc7c2:	4619      	mov	r1, r3
 23fc7c4:	f7ff bbfc 	b.w	23fbfc0 <network_on>

023fc7c8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fc7c8:	2200      	movs	r2, #0
 23fc7ca:	6840      	ldr	r0, [r0, #4]
 23fc7cc:	4611      	mov	r1, r2
 23fc7ce:	f7ff bbe9 	b.w	23fbfa4 <network_ready>

023fc7d2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc7d2:	2200      	movs	r2, #0
 23fc7d4:	6840      	ldr	r0, [r0, #4]
 23fc7d6:	4611      	mov	r1, r2
 23fc7d8:	f7ff bbc8 	b.w	23fbf6c <network_connecting>

023fc7dc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc7dc:	2200      	movs	r2, #0
 23fc7de:	2102      	movs	r1, #2
 23fc7e0:	6840      	ldr	r0, [r0, #4]
 23fc7e2:	f7ff bbd1 	b.w	23fbf88 <network_disconnect>

023fc7e6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc7e6:	2300      	movs	r3, #0
 23fc7e8:	6840      	ldr	r0, [r0, #4]
 23fc7ea:	461a      	mov	r2, r3
 23fc7ec:	f7ff bbb0 	b.w	23fbf50 <network_connect>

023fc7f0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fc7f0:	2203      	movs	r2, #3
 23fc7f2:	4b02      	ldr	r3, [pc, #8]	; (23fc7fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fc7f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fc7f6:	4a02      	ldr	r2, [pc, #8]	; (23fc800 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fc7f8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fc7fa:	4770      	bx	lr
 23fc7fc:	1007ae5c 	.word	0x1007ae5c
 23fc800:	023ffbdc 	.word	0x023ffbdc

023fc804 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fc804:	4770      	bx	lr

023fc806 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fc806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc808:	4606      	mov	r6, r0
 23fc80a:	4615      	mov	r5, r2
 23fc80c:	460c      	mov	r4, r1
 23fc80e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fc810:	42bc      	cmp	r4, r7
 23fc812:	d006      	beq.n	23fc822 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fc814:	6833      	ldr	r3, [r6, #0]
 23fc816:	4630      	mov	r0, r6
 23fc818:	689b      	ldr	r3, [r3, #8]
 23fc81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fc81e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fc820:	e7f6      	b.n	23fc810 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fc822:	4628      	mov	r0, r5
 23fc824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc826 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fc826:	2200      	movs	r2, #0
 23fc828:	7c00      	ldrb	r0, [r0, #16]
 23fc82a:	f7ff b89d 	b.w	23fb968 <hal_i2c_write>

023fc82e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fc82e:	2100      	movs	r1, #0
 23fc830:	7c00      	ldrb	r0, [r0, #16]
 23fc832:	f7ff b8a7 	b.w	23fb984 <hal_i2c_available>

023fc836 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fc836:	2100      	movs	r1, #0
 23fc838:	7c00      	ldrb	r0, [r0, #16]
 23fc83a:	f7ff b8b1 	b.w	23fb9a0 <hal_i2c_read>

023fc83e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fc83e:	2100      	movs	r1, #0
 23fc840:	7c00      	ldrb	r0, [r0, #16]
 23fc842:	f7ff b8bb 	b.w	23fb9bc <hal_i2c_peek>

023fc846 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fc846:	2100      	movs	r1, #0
 23fc848:	7c00      	ldrb	r0, [r0, #16]
 23fc84a:	f7ff b8c5 	b.w	23fb9d8 <hal_i2c_flush>

023fc84e <_ZN7TwoWireD0Ev>:
 23fc84e:	b510      	push	{r4, lr}
 23fc850:	4604      	mov	r4, r0
 23fc852:	2114      	movs	r1, #20
 23fc854:	f7fc ffc3 	bl	23f97de <_ZdlPvj>
 23fc858:	4620      	mov	r0, r4
 23fc85a:	bd10      	pop	{r4, pc}

023fc85c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fc85c:	b538      	push	{r3, r4, r5, lr}
 23fc85e:	4604      	mov	r4, r0
 23fc860:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fc862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc866:	2200      	movs	r2, #0
 23fc868:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fc86c:	4b09      	ldr	r3, [pc, #36]	; (23fc894 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fc86e:	4608      	mov	r0, r1
  _i2c = i2c;
 23fc870:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fc872:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fc874:	4629      	mov	r1, r5
 23fc876:	f7ff f8cb 	bl	23fba10 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fc87a:	30bf      	adds	r0, #191	; 0xbf
 23fc87c:	d108      	bne.n	23fc890 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fc87e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fc880:	07db      	lsls	r3, r3, #31
 23fc882:	d505      	bpl.n	23fc890 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fc884:	6868      	ldr	r0, [r5, #4]
 23fc886:	f7ff fc19 	bl	23fc0bc <free>
    free(conf.tx_buffer);
 23fc88a:	68e8      	ldr	r0, [r5, #12]
 23fc88c:	f7ff fc16 	bl	23fc0bc <free>
}
 23fc890:	4620      	mov	r0, r4
 23fc892:	bd38      	pop	{r3, r4, r5, pc}
 23fc894:	023ffc18 	.word	0x023ffc18

023fc898 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fc898:	2200      	movs	r2, #0
 23fc89a:	7c00      	ldrb	r0, [r0, #16]
 23fc89c:	f7ff b82c 	b.w	23fb8f8 <hal_i2c_set_speed>

023fc8a0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fc8a0:	2300      	movs	r3, #0
 23fc8a2:	7c00      	ldrb	r0, [r0, #16]
 23fc8a4:	461a      	mov	r2, r3
 23fc8a6:	4619      	mov	r1, r3
 23fc8a8:	f7ff b834 	b.w	23fb914 <hal_i2c_begin>

023fc8ac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fc8ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fc8ae:	2200      	movs	r2, #0
 23fc8b0:	2314      	movs	r3, #20
 23fc8b2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fc8b6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fc8ba:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fc8bc:	7c00      	ldrb	r0, [r0, #16]
 23fc8be:	f88d 3008 	strb.w	r3, [sp, #8]
 23fc8c2:	684b      	ldr	r3, [r1, #4]
 23fc8c4:	9303      	str	r3, [sp, #12]
 23fc8c6:	68cb      	ldr	r3, [r1, #12]
 23fc8c8:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fc8ca:	7a0b      	ldrb	r3, [r1, #8]
 23fc8cc:	a901      	add	r1, sp, #4
 23fc8ce:	9305      	str	r3, [sp, #20]
 23fc8d0:	f7ff f8ac 	bl	23fba2c <hal_i2c_request_ex>
}
 23fc8d4:	b007      	add	sp, #28
 23fc8d6:	f85d fb04 	ldr.w	pc, [sp], #4

023fc8da <_ZN7TwoWire11requestFromEhjh>:
{
 23fc8da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fc8dc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fc8de:	f88d 1000 	strb.w	r1, [sp]
 23fc8e2:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fc8e6:	bf18      	it	ne
 23fc8e8:	2301      	movne	r3, #1
 23fc8ea:	9103      	str	r1, [sp, #12]
 23fc8ec:	4669      	mov	r1, sp
    size_ = size;
 23fc8ee:	9201      	str	r2, [sp, #4]
 23fc8f0:	f88d 3008 	strb.w	r3, [sp, #8]
 23fc8f4:	f7ff ffda 	bl	23fc8ac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fc8f8:	b005      	add	sp, #20
 23fc8fa:	f85d fb04 	ldr.w	pc, [sp], #4

023fc8fe <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fc8fe:	2301      	movs	r3, #1
 23fc900:	f7ff bfeb 	b.w	23fc8da <_ZN7TwoWire11requestFromEhjh>

023fc904 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fc904:	2200      	movs	r2, #0
 23fc906:	7c00      	ldrb	r0, [r0, #16]
 23fc908:	f7ff b812 	b.w	23fb930 <hal_i2c_begin_transmission>

023fc90c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23fc90c:	b2c9      	uxtb	r1, r1
 23fc90e:	f7ff bff9 	b.w	23fc904 <_ZN7TwoWire17beginTransmissionEh>

023fc912 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fc912:	2200      	movs	r2, #0
 23fc914:	7c00      	ldrb	r0, [r0, #16]
 23fc916:	f7ff b819 	b.w	23fb94c <hal_i2c_end_transmission>

023fc91a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fc91a:	2101      	movs	r1, #1
 23fc91c:	f7ff bff9 	b.w	23fc912 <_ZN7TwoWire15endTransmissionEh>

023fc920 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fc920:	4770      	bx	lr

023fc922 <_ZN9IPAddressD0Ev>:
 23fc922:	b510      	push	{r4, lr}
 23fc924:	4604      	mov	r4, r0
 23fc926:	2118      	movs	r1, #24
 23fc928:	f7fc ff59 	bl	23f97de <_ZdlPvj>
 23fc92c:	4620      	mov	r0, r4
 23fc92e:	bd10      	pop	{r4, pc}

023fc930 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fc930:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fc932:	7d03      	ldrb	r3, [r0, #20]
{
 23fc934:	460e      	mov	r6, r1
	if (address.v==6) {
 23fc936:	2b06      	cmp	r3, #6
 23fc938:	f04f 0400 	mov.w	r4, #0
{
 23fc93c:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc93e:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fc942:	d012      	beq.n	23fc96a <_ZNK9IPAddress7printToER5Print+0x3a>
 23fc944:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fc948:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fc94c:	220a      	movs	r2, #10
 23fc94e:	4630      	mov	r0, r6
 23fc950:	f001 fb2f 	bl	23fdfb2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fc954:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fc956:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fc958:	d019      	beq.n	23fc98e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fc95a:	2c00      	cmp	r4, #0
 23fc95c:	d0f4      	beq.n	23fc948 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fc95e:	212e      	movs	r1, #46	; 0x2e
 23fc960:	4630      	mov	r0, r6
 23fc962:	f001 fb0d 	bl	23fdf80 <_ZN5Print5printEc>
 23fc966:	4404      	add	r4, r0
 23fc968:	e7ee      	b.n	23fc948 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc96a:	232f      	movs	r3, #47	; 0x2f
 23fc96c:	466a      	mov	r2, sp
 23fc96e:	4639      	mov	r1, r7
 23fc970:	200a      	movs	r0, #10
		buf[0] = 0;
 23fc972:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc976:	f7ff f867 	bl	23fba48 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fc97a:	4668      	mov	r0, sp
 23fc97c:	f7fc ff06 	bl	23f978c <strlen>
 23fc980:	6833      	ldr	r3, [r6, #0]
 23fc982:	4602      	mov	r2, r0
 23fc984:	4669      	mov	r1, sp
 23fc986:	4630      	mov	r0, r6
 23fc988:	68db      	ldr	r3, [r3, #12]
 23fc98a:	4798      	blx	r3
 23fc98c:	4604      	mov	r4, r0
    }
    return n;
}
 23fc98e:	4620      	mov	r0, r4
 23fc990:	b00d      	add	sp, #52	; 0x34
 23fc992:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc994 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fc994:	b510      	push	{r4, lr}
 23fc996:	4604      	mov	r4, r0
 23fc998:	4b04      	ldr	r3, [pc, #16]	; (23fc9ac <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fc99a:	2211      	movs	r2, #17
 23fc99c:	2100      	movs	r1, #0
 23fc99e:	f840 3b04 	str.w	r3, [r0], #4
 23fc9a2:	f002 f82c 	bl	23fe9fe <memset>
}
 23fc9a6:	4620      	mov	r0, r4
 23fc9a8:	bd10      	pop	{r4, pc}
 23fc9aa:	bf00      	nop
 23fc9ac:	023ffc40 	.word	0x023ffc40

023fc9b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fc9b0:	4603      	mov	r3, r0
 23fc9b2:	4a07      	ldr	r2, [pc, #28]	; (23fc9d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fc9b4:	b510      	push	{r4, lr}
 23fc9b6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fc9ba:	f101 0210 	add.w	r2, r1, #16
 23fc9be:	f851 4b04 	ldr.w	r4, [r1], #4
 23fc9c2:	4291      	cmp	r1, r2
 23fc9c4:	f843 4b04 	str.w	r4, [r3], #4
 23fc9c8:	d1f9      	bne.n	23fc9be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fc9ca:	780a      	ldrb	r2, [r1, #0]
 23fc9cc:	701a      	strb	r2, [r3, #0]
}
 23fc9ce:	bd10      	pop	{r4, pc}
 23fc9d0:	023ffc40 	.word	0x023ffc40

023fc9d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fc9d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fc9d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fc9da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fc9de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fc9e2:	2304      	movs	r3, #4
 23fc9e4:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fc9e8:	6041      	str	r1, [r0, #4]
 23fc9ea:	7503      	strb	r3, [r0, #20]
}
 23fc9ec:	bd10      	pop	{r4, pc}
	...

023fc9f0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fc9f0:	b507      	push	{r0, r1, r2, lr}
 23fc9f2:	4b06      	ldr	r3, [pc, #24]	; (23fca0c <_ZN9IPAddressC1EPKh+0x1c>)
 23fc9f4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fc9f6:	78cb      	ldrb	r3, [r1, #3]
 23fc9f8:	9300      	str	r3, [sp, #0]
 23fc9fa:	788b      	ldrb	r3, [r1, #2]
 23fc9fc:	784a      	ldrb	r2, [r1, #1]
 23fc9fe:	7809      	ldrb	r1, [r1, #0]
 23fca00:	f7ff ffe8 	bl	23fc9d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fca04:	b003      	add	sp, #12
 23fca06:	f85d fb04 	ldr.w	pc, [sp], #4
 23fca0a:	bf00      	nop
 23fca0c:	023ffc40 	.word	0x023ffc40

023fca10 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fca10:	2201      	movs	r2, #1
 23fca12:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fca16:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fca1a:	4618      	mov	r0, r3
 23fca1c:	2901      	cmp	r1, #1
 23fca1e:	d108      	bne.n	23fca32 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fca20:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fca24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fca28:	3a01      	subs	r2, #1
 23fca2a:	f103 0310 	add.w	r3, r3, #16
 23fca2e:	d1f2      	bne.n	23fca16 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fca30:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fca32:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fca34:	bf04      	itt	eq
 23fca36:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fca3a:	1852      	addeq	r2, r2, r1
 23fca3c:	e7f4      	b.n	23fca28 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fca3e <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 23fca3e:	4770      	bx	lr

023fca40 <_ZN5spark16JSONBufferWriterD0Ev>:
 23fca40:	b510      	push	{r4, lr}
 23fca42:	4604      	mov	r4, r0
 23fca44:	2114      	movs	r1, #20
 23fca46:	f7fc feca 	bl	23f97de <_ZdlPvj>
 23fca4a:	4620      	mov	r0, r4
 23fca4c:	bd10      	pop	{r4, pc}

023fca4e <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23fca4e:	b538      	push	{r3, r4, r5, lr}
 23fca50:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 23fca52:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 23fca56:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23fca58:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 23fca5a:	d207      	bcs.n	23fca6c <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 23fca5c:	1ad2      	subs	r2, r2, r3
 23fca5e:	6880      	ldr	r0, [r0, #8]
 23fca60:	42aa      	cmp	r2, r5
 23fca62:	bf28      	it	cs
 23fca64:	462a      	movcs	r2, r5
 23fca66:	4418      	add	r0, r3
 23fca68:	f001 ffa2 	bl	23fe9b0 <memcpy>
    }
    n_ += size;
 23fca6c:	6922      	ldr	r2, [r4, #16]
 23fca6e:	442a      	add	r2, r5
 23fca70:	6122      	str	r2, [r4, #16]
}
 23fca72:	bd38      	pop	{r3, r4, r5, pc}

023fca74 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 23fca74:	b40e      	push	{r1, r2, r3}
 23fca76:	b517      	push	{r0, r1, r2, r4, lr}
 23fca78:	4604      	mov	r4, r0
 23fca7a:	ab05      	add	r3, sp, #20
 23fca7c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23fca80:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 23fca82:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23fca84:	6903      	ldr	r3, [r0, #16]
 23fca86:	6880      	ldr	r0, [r0, #8]
 23fca88:	428b      	cmp	r3, r1
 23fca8a:	bf34      	ite	cc
 23fca8c:	1ac9      	subcc	r1, r1, r3
 23fca8e:	2100      	movcs	r1, #0
 23fca90:	4418      	add	r0, r3
 23fca92:	9b01      	ldr	r3, [sp, #4]
 23fca94:	f7ff fb2e 	bl	23fc0f4 <vsnprintf>
    va_end(args);
    n_ += n;
 23fca98:	6923      	ldr	r3, [r4, #16]
 23fca9a:	4418      	add	r0, r3
 23fca9c:	6120      	str	r0, [r4, #16]
}
 23fca9e:	b003      	add	sp, #12
 23fcaa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fcaa4:	b003      	add	sp, #12
 23fcaa6:	4770      	bx	lr

023fcaa8 <_ZN5spark10JSONWriter6printfEPKcz>:
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fcaa8:	b40e      	push	{r1, r2, r3}
 23fcaaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcaac:	b088      	sub	sp, #32
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcaae:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fcab0:	af00      	add	r7, sp, #0
 23fcab2:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fcab6:	f855 2b04 	ldr.w	r2, [r5], #4
 23fcaba:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcabc:	462b      	mov	r3, r5
 23fcabe:	1878      	adds	r0, r7, r1
 23fcac0:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fcac2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcac4:	f7ff fb16 	bl	23fc0f4 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fcac8:	280f      	cmp	r0, #15
 23fcaca:	687a      	ldr	r2, [r7, #4]
 23fcacc:	d91a      	bls.n	23fcb04 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fcace:	f100 0308 	add.w	r3, r0, #8
 23fcad2:	f023 0307 	bic.w	r3, r3, #7
        }
 23fcad6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fcad8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcadc:	1c41      	adds	r1, r0, #1
 23fcade:	462b      	mov	r3, r5
 23fcae0:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fcae2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcae4:	f7ff fb06 	bl	23fc0f4 <vsnprintf>
        if (n > 0) {
 23fcae8:	1e02      	subs	r2, r0, #0
 23fcaea:	dd04      	ble.n	23fcaf6 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fcaec:	6823      	ldr	r3, [r4, #0]
 23fcaee:	4669      	mov	r1, sp
 23fcaf0:	4620      	mov	r0, r4
 23fcaf2:	689b      	ldr	r3, [r3, #8]
 23fcaf4:	4798      	blx	r3
 23fcaf6:	46b5      	mov	sp, r6
}
 23fcaf8:	3720      	adds	r7, #32
 23fcafa:	46bd      	mov	sp, r7
 23fcafc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fcb00:	b003      	add	sp, #12
 23fcb02:	4770      	bx	lr
    } else if (n > 0) {
 23fcb04:	2800      	cmp	r0, #0
 23fcb06:	d0f7      	beq.n	23fcaf8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fcb08:	6823      	ldr	r3, [r4, #0]
 23fcb0a:	4602      	mov	r2, r0
 23fcb0c:	689b      	ldr	r3, [r3, #8]
 23fcb0e:	4620      	mov	r0, r4
 23fcb10:	f107 0110 	add.w	r1, r7, #16
 23fcb14:	4798      	blx	r3
}
 23fcb16:	e7ef      	b.n	23fcaf8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fcb18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fcb18:	b538      	push	{r3, r4, r5, lr}
 23fcb1a:	680b      	ldr	r3, [r1, #0]
 23fcb1c:	4604      	mov	r4, r0
 23fcb1e:	6003      	str	r3, [r0, #0]
 23fcb20:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fcb22:	6843      	ldr	r3, [r0, #4]
 23fcb24:	429d      	cmp	r5, r3
 23fcb26:	d008      	beq.n	23fcb3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fcb28:	b115      	cbz	r5, 23fcb30 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fcb2a:	686b      	ldr	r3, [r5, #4]
 23fcb2c:	3301      	adds	r3, #1
 23fcb2e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fcb30:	6860      	ldr	r0, [r4, #4]
 23fcb32:	b108      	cbz	r0, 23fcb38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fcb34:	f7ff fb49 	bl	23fc1ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fcb38:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fcb3a:	bd38      	pop	{r3, r4, r5, pc}

023fcb3c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fcb3c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fcb3e:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fcb40:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fcb44:	2201      	movs	r2, #1
 23fcb46:	689b      	ldr	r3, [r3, #8]
 23fcb48:	f10d 0107 	add.w	r1, sp, #7
 23fcb4c:	4798      	blx	r3
}
 23fcb4e:	b003      	add	sp, #12
 23fcb50:	f85d fb04 	ldr.w	pc, [sp], #4

023fcb54 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fcb54:	460b      	mov	r3, r1
 23fcb56:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fcb58:	2200      	movs	r2, #0
 23fcb5a:	b510      	push	{r4, lr}
 23fcb5c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcb5e:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fcb62:	6083      	str	r3, [r0, #8]
    if (t) {
 23fcb64:	b90b      	cbnz	r3, 23fcb6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fcb66:	4620      	mov	r0, r4
 23fcb68:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fcb6a:	f7ff ffd5 	bl	23fcb18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fcb6e:	e7fa      	b.n	23fcb66 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fcb70 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fcb70:	6883      	ldr	r3, [r0, #8]
 23fcb72:	b1eb      	cbz	r3, 23fcbb0 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fcb74:	781a      	ldrb	r2, [r3, #0]
 23fcb76:	2a03      	cmp	r2, #3
 23fcb78:	d81a      	bhi.n	23fcbb0 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fcb7a:	e8df f002 	tbb	[pc, r2]
 23fcb7e:	1704      	.short	0x1704
 23fcb80:	1b02      	.short	0x1b02
 23fcb82:	2005      	movs	r0, #5
 23fcb84:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fcb86:	6802      	ldr	r2, [r0, #0]
 23fcb88:	685b      	ldr	r3, [r3, #4]
 23fcb8a:	6852      	ldr	r2, [r2, #4]
 23fcb8c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fcb8e:	282d      	cmp	r0, #45	; 0x2d
 23fcb90:	d012      	beq.n	23fcbb8 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fcb92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fcb96:	2b09      	cmp	r3, #9
 23fcb98:	d90e      	bls.n	23fcbb8 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fcb9a:	2874      	cmp	r0, #116	; 0x74
 23fcb9c:	d00e      	beq.n	23fcbbc <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fcb9e:	2866      	cmp	r0, #102	; 0x66
 23fcba0:	d00c      	beq.n	23fcbbc <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fcba2:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fcba6:	4258      	negs	r0, r3
 23fcba8:	4158      	adcs	r0, r3
 23fcbaa:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fcbac:	2006      	movs	r0, #6
 23fcbae:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fcbb0:	2000      	movs	r0, #0
 23fcbb2:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fcbb4:	2004      	movs	r0, #4
 23fcbb6:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fcbb8:	2003      	movs	r0, #3
 23fcbba:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fcbbc:	2002      	movs	r0, #2
}
 23fcbbe:	4770      	bx	lr

023fcbc0 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fcbc0:	b510      	push	{r4, lr}
 23fcbc2:	4604      	mov	r4, r0
    switch (type()) {
 23fcbc4:	f7ff ffd4 	bl	23fcb70 <_ZNK5spark9JSONValue4typeEv>
 23fcbc8:	2802      	cmp	r0, #2
 23fcbca:	d00e      	beq.n	23fcbea <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fcbcc:	1ec3      	subs	r3, r0, #3
 23fcbce:	b2db      	uxtb	r3, r3
 23fcbd0:	2b01      	cmp	r3, #1
 23fcbd2:	d814      	bhi.n	23fcbfe <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fcbd4:	6822      	ldr	r2, [r4, #0]
 23fcbd6:	68a3      	ldr	r3, [r4, #8]
 23fcbd8:	6850      	ldr	r0, [r2, #4]
 23fcbda:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fcbdc:	220a      	movs	r2, #10
}
 23fcbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fcbe2:	2100      	movs	r1, #0
 23fcbe4:	4418      	add	r0, r3
 23fcbe6:	f002 b829 	b.w	23fec3c <strtol>
        const char* const s = d_->json + t_->start;
 23fcbea:	6822      	ldr	r2, [r4, #0]
 23fcbec:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fcbee:	6852      	ldr	r2, [r2, #4]
 23fcbf0:	685b      	ldr	r3, [r3, #4]
 23fcbf2:	5cd0      	ldrb	r0, [r2, r3]
 23fcbf4:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fcbf8:	4258      	negs	r0, r3
 23fcbfa:	4158      	adcs	r0, r3
}
 23fcbfc:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fcbfe:	2000      	movs	r0, #0
 23fcc00:	e7fc      	b.n	23fcbfc <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

023fcc04 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fcc04:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fcc06:	2300      	movs	r3, #0
 23fcc08:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcc0a:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fcc0e:	480e      	ldr	r0, [pc, #56]	; (23fcc48 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fcc10:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fcc14:	b1a9      	cbz	r1, 23fcc42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fcc16:	780b      	ldrb	r3, [r1, #0]
 23fcc18:	2b03      	cmp	r3, #3
 23fcc1a:	d006      	beq.n	23fcc2a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fcc1c:	b98b      	cbnz	r3, 23fcc42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fcc1e:	6813      	ldr	r3, [r2, #0]
 23fcc20:	6858      	ldr	r0, [r3, #4]
 23fcc22:	684b      	ldr	r3, [r1, #4]
 23fcc24:	5cc3      	ldrb	r3, [r0, r3]
 23fcc26:	2b6e      	cmp	r3, #110	; 0x6e
 23fcc28:	d007      	beq.n	23fcc3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fcc2a:	6813      	ldr	r3, [r2, #0]
 23fcc2c:	684d      	ldr	r5, [r1, #4]
 23fcc2e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fcc30:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fcc32:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fcc34:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fcc36:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fcc38:	60e3      	str	r3, [r4, #12]
 23fcc3a:	4611      	mov	r1, r2
 23fcc3c:	4620      	mov	r0, r4
 23fcc3e:	f7ff ff6b 	bl	23fcb18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fcc42:	4620      	mov	r0, r4
 23fcc44:	bd38      	pop	{r3, r4, r5, pc}
 23fcc46:	bf00      	nop
 23fcc48:	023ffcca 	.word	0x023ffcca

023fcc4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fcc4c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fcc4e:	2500      	movs	r5, #0
 23fcc50:	460b      	mov	r3, r1
 23fcc52:	4604      	mov	r4, r0
 23fcc54:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcc56:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fcc5a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fcc5e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fcc62:	b14b      	cbz	r3, 23fcc78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fcc64:	781a      	ldrb	r2, [r3, #0]
 23fcc66:	2a01      	cmp	r2, #1
 23fcc68:	d106      	bne.n	23fcc78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fcc6a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fcc6e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fcc70:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fcc72:	6143      	str	r3, [r0, #20]
 23fcc74:	f7ff ff50 	bl	23fcb18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fcc78:	4620      	mov	r0, r4
 23fcc7a:	bd38      	pop	{r3, r4, r5, pc}

023fcc7c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fcc7c:	b510      	push	{r4, lr}
    if (!n_) {
 23fcc7e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fcc80:	4604      	mov	r4, r0
    if (!n_) {
 23fcc82:	b163      	cbz	r3, 23fcc9e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fcc84:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fcc86:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fcc88:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fcc8a:	3010      	adds	r0, #16
 23fcc8c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fcc8e:	6120      	str	r0, [r4, #16]
    --n_;
 23fcc90:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fcc92:	b113      	cbz	r3, 23fcc9a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fcc94:	f7ff febc 	bl	23fca10 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fcc98:	60a0      	str	r0, [r4, #8]
    return true;
 23fcc9a:	2001      	movs	r0, #1
 23fcc9c:	e000      	b.n	23fcca0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fcc9e:	4618      	mov	r0, r3
}
 23fcca0:	bd10      	pop	{r4, pc}

023fcca2 <_ZN5spark10JSONWriter8endArrayEv>:
spark::JSONWriter& spark::JSONWriter::endArray() {
 23fcca2:	b510      	push	{r4, lr}
    write(']');
 23fcca4:	215d      	movs	r1, #93	; 0x5d
spark::JSONWriter& spark::JSONWriter::endArray() {
 23fcca6:	4604      	mov	r4, r0
    write(']');
 23fcca8:	f7ff ff48 	bl	23fcb3c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fccac:	2301      	movs	r3, #1
}
 23fccae:	4620      	mov	r0, r4
    state_ = NEXT;
 23fccb0:	7123      	strb	r3, [r4, #4]
}
 23fccb2:	bd10      	pop	{r4, pc}

023fccb4 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fccb4:	b510      	push	{r4, lr}
    write('}');
 23fccb6:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fccb8:	4604      	mov	r4, r0
    write('}');
 23fccba:	f7ff ff3f 	bl	23fcb3c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fccbe:	2301      	movs	r3, #1
}
 23fccc0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fccc2:	7123      	strb	r3, [r4, #4]
}
 23fccc4:	bd10      	pop	{r4, pc}

023fccc6 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 23fccc6:	b508      	push	{r3, lr}
    switch (state_) {
 23fccc8:	7903      	ldrb	r3, [r0, #4]
 23fccca:	2b01      	cmp	r3, #1
 23fcccc:	d002      	beq.n	23fccd4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fccce:	2b02      	cmp	r3, #2
 23fccd0:	d004      	beq.n	23fccdc <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 23fccd2:	bd08      	pop	{r3, pc}
        write(',');
 23fccd4:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fccd6:	f7ff ff31 	bl	23fcb3c <_ZN5spark10JSONWriter5writeEc>
}
 23fccda:	e7fa      	b.n	23fccd2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fccdc:	213a      	movs	r1, #58	; 0x3a
 23fccde:	e7fa      	b.n	23fccd6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fcce0 <_ZN5spark10JSONWriter10beginArrayEv>:
spark::JSONWriter& spark::JSONWriter::beginArray() {
 23fcce0:	b510      	push	{r4, lr}
 23fcce2:	4604      	mov	r4, r0
    writeSeparator();
 23fcce4:	f7ff ffef 	bl	23fccc6 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('[');
 23fcce8:	4620      	mov	r0, r4
 23fccea:	215b      	movs	r1, #91	; 0x5b
 23fccec:	f7ff ff26 	bl	23fcb3c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fccf0:	2300      	movs	r3, #0
}
 23fccf2:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fccf4:	7123      	strb	r3, [r4, #4]
}
 23fccf6:	bd10      	pop	{r4, pc}

023fccf8 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fccf8:	b510      	push	{r4, lr}
 23fccfa:	4604      	mov	r4, r0
    writeSeparator();
 23fccfc:	f7ff ffe3 	bl	23fccc6 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fcd00:	4620      	mov	r0, r4
 23fcd02:	217b      	movs	r1, #123	; 0x7b
 23fcd04:	f7ff ff1a 	bl	23fcb3c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fcd08:	2300      	movs	r3, #0
}
 23fcd0a:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fcd0c:	7123      	strb	r3, [r4, #4]
}
 23fcd0e:	bd10      	pop	{r4, pc}

023fcd10 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fcd10:	b513      	push	{r0, r1, r4, lr}
 23fcd12:	4604      	mov	r4, r0
 23fcd14:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fcd16:	f7ff ffd6 	bl	23fccc6 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fcd1a:	6823      	ldr	r3, [r4, #0]
 23fcd1c:	4620      	mov	r0, r4
 23fcd1e:	68db      	ldr	r3, [r3, #12]
 23fcd20:	9a01      	ldr	r2, [sp, #4]
 23fcd22:	4903      	ldr	r1, [pc, #12]	; (23fcd30 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fcd24:	4798      	blx	r3
    state_ = NEXT;
 23fcd26:	2301      	movs	r3, #1
}
 23fcd28:	4620      	mov	r0, r4
    state_ = NEXT;
 23fcd2a:	7123      	strb	r3, [r4, #4]
}
 23fcd2c:	b002      	add	sp, #8
 23fcd2e:	bd10      	pop	{r4, pc}
 23fcd30:	023fed5b 	.word	0x023fed5b

023fcd34 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fcd34:	b513      	push	{r0, r1, r4, lr}
 23fcd36:	4604      	mov	r4, r0
 23fcd38:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fcd3a:	f7ff ffc4 	bl	23fccc6 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fcd3e:	6823      	ldr	r3, [r4, #0]
 23fcd40:	4620      	mov	r0, r4
 23fcd42:	68db      	ldr	r3, [r3, #12]
 23fcd44:	9a01      	ldr	r2, [sp, #4]
 23fcd46:	4903      	ldr	r1, [pc, #12]	; (23fcd54 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fcd48:	4798      	blx	r3
    state_ = NEXT;
 23fcd4a:	2301      	movs	r3, #1
}
 23fcd4c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fcd4e:	7123      	strb	r3, [r4, #4]
}
 23fcd50:	b002      	add	sp, #8
 23fcd52:	bd10      	pop	{r4, pc}
 23fcd54:	023ffc4c 	.word	0x023ffc4c

023fcd58 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fcd58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fcd5c:	460d      	mov	r5, r1
 23fcd5e:	4690      	mov	r8, r2
    write('"');
 23fcd60:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fcd62:	4604      	mov	r4, r0
 23fcd64:	462f      	mov	r7, r5
    write('"');
 23fcd66:	f7ff fee9 	bl	23fcb3c <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
 23fcd6a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fce10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fcd6e:	44a8      	add	r8, r5
    while (s != end) {
 23fcd70:	4547      	cmp	r7, r8
 23fcd72:	46ba      	mov	sl, r7
 23fcd74:	d03d      	beq.n	23fcdf2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fcd76:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fcd7a:	2e22      	cmp	r6, #34	; 0x22
 23fcd7c:	d006      	beq.n	23fcd8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fcd7e:	2e5c      	cmp	r6, #92	; 0x5c
 23fcd80:	d004      	beq.n	23fcd8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fcd82:	4630      	mov	r0, r6
 23fcd84:	f001 fe0c 	bl	23fe9a0 <isprint>
 23fcd88:	2800      	cmp	r0, #0
 23fcd8a:	d1f1      	bne.n	23fcd70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fcd8c:	6823      	ldr	r3, [r4, #0]
 23fcd8e:	4629      	mov	r1, r5
 23fcd90:	4620      	mov	r0, r4
 23fcd92:	689b      	ldr	r3, [r3, #8]
 23fcd94:	ebaa 0205 	sub.w	r2, sl, r5
 23fcd98:	4798      	blx	r3
            write('\\');
 23fcd9a:	215c      	movs	r1, #92	; 0x5c
 23fcd9c:	4620      	mov	r0, r4
 23fcd9e:	f7ff fecd 	bl	23fcb3c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fcda2:	2e0d      	cmp	r6, #13
 23fcda4:	d80a      	bhi.n	23fcdbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fcda6:	2e07      	cmp	r6, #7
 23fcda8:	d91c      	bls.n	23fcde4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fcdaa:	f1a6 0308 	sub.w	r3, r6, #8
 23fcdae:	2b05      	cmp	r3, #5
 23fcdb0:	d818      	bhi.n	23fcde4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fcdb2:	e8df f003 	tbb	[pc, r3]
 23fcdb6:	0f0d      	.short	0x0f0d
 23fcdb8:	15131711 	.word	0x15131711
 23fcdbc:	2e22      	cmp	r6, #34	; 0x22
 23fcdbe:	d001      	beq.n	23fcdc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fcdc0:	2e5c      	cmp	r6, #92	; 0x5c
 23fcdc2:	d10f      	bne.n	23fcde4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fcdc4:	4631      	mov	r1, r6
                write('b');
 23fcdc6:	4620      	mov	r0, r4
 23fcdc8:	f7ff feb8 	bl	23fcb3c <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 23fcdcc:	463d      	mov	r5, r7
    while (s != end) {
 23fcdce:	e7cf      	b.n	23fcd70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fcdd0:	2162      	movs	r1, #98	; 0x62
 23fcdd2:	e7f8      	b.n	23fcdc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fcdd4:	2174      	movs	r1, #116	; 0x74
 23fcdd6:	e7f6      	b.n	23fcdc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fcdd8:	216e      	movs	r1, #110	; 0x6e
 23fcdda:	e7f4      	b.n	23fcdc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fcddc:	2166      	movs	r1, #102	; 0x66
 23fcdde:	e7f2      	b.n	23fcdc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fcde0:	2172      	movs	r1, #114	; 0x72
 23fcde2:	e7f0      	b.n	23fcdc6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fcde4:	6823      	ldr	r3, [r4, #0]
 23fcde6:	4632      	mov	r2, r6
 23fcde8:	4649      	mov	r1, r9
 23fcdea:	4620      	mov	r0, r4
 23fcdec:	68db      	ldr	r3, [r3, #12]
 23fcdee:	4798      	blx	r3
                break;
 23fcdf0:	e7ec      	b.n	23fcdcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
 23fcdf2:	42bd      	cmp	r5, r7
 23fcdf4:	d005      	beq.n	23fce02 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fcdf6:	6823      	ldr	r3, [r4, #0]
 23fcdf8:	4629      	mov	r1, r5
 23fcdfa:	4620      	mov	r0, r4
 23fcdfc:	689b      	ldr	r3, [r3, #8]
 23fcdfe:	1b7a      	subs	r2, r7, r5
 23fce00:	4798      	blx	r3
    write('"');
 23fce02:	2122      	movs	r1, #34	; 0x22
 23fce04:	4620      	mov	r0, r4
 23fce06:	f7ff fe99 	bl	23fcb3c <_ZN5spark10JSONWriter5writeEc>
}
 23fce0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fce0e:	bf00      	nop
 23fce10:	023ffc4f 	.word	0x023ffc4f

023fce14 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fce14:	b513      	push	{r0, r1, r4, lr}
 23fce16:	4604      	mov	r4, r0
 23fce18:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fce1c:	f7ff ff53 	bl	23fccc6 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fce20:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fce24:	4620      	mov	r0, r4
 23fce26:	f7ff ff97 	bl	23fcd58 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fce2a:	2302      	movs	r3, #2
}
 23fce2c:	4620      	mov	r0, r4
    state_ = VALUE;
 23fce2e:	7123      	strb	r3, [r4, #4]
}
 23fce30:	b002      	add	sp, #8
 23fce32:	bd10      	pop	{r4, pc}

023fce34 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fce34:	b513      	push	{r0, r1, r4, lr}
 23fce36:	4604      	mov	r4, r0
 23fce38:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fce3c:	f7ff ff43 	bl	23fccc6 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fce40:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fce44:	4620      	mov	r0, r4
 23fce46:	f7ff ff87 	bl	23fcd58 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fce4a:	2301      	movs	r3, #1
}
 23fce4c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fce4e:	7123      	strb	r3, [r4, #4]
}
 23fce50:	b002      	add	sp, #8
 23fce52:	bd10      	pop	{r4, pc}

023fce54 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fce54:	6880      	ldr	r0, [r0, #8]
 23fce56:	6803      	ldr	r3, [r0, #0]
 23fce58:	68db      	ldr	r3, [r3, #12]
 23fce5a:	4718      	bx	r3

023fce5c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fce5c:	4770      	bx	lr

023fce5e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fce5e:	4608      	mov	r0, r1
 23fce60:	b111      	cbz	r1, 23fce68 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fce62:	680b      	ldr	r3, [r1, #0]
 23fce64:	685b      	ldr	r3, [r3, #4]
 23fce66:	4718      	bx	r3
}
 23fce68:	4770      	bx	lr

023fce6a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fce6a:	4770      	bx	lr

023fce6c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fce6c:	4770      	bx	lr

023fce6e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fce6e:	4770      	bx	lr

023fce70 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fce70:	4770      	bx	lr

023fce72 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fce72:	b538      	push	{r3, r4, r5, lr}
 23fce74:	4604      	mov	r4, r0
 23fce76:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fce78:	6800      	ldr	r0, [r0, #0]
 23fce7a:	212e      	movs	r1, #46	; 0x2e
 23fce7c:	f001 fe03 	bl	23fea86 <strchrnul>
    size = s - category;
 23fce80:	6823      	ldr	r3, [r4, #0]
 23fce82:	1ac3      	subs	r3, r0, r3
 23fce84:	602b      	str	r3, [r5, #0]
    if (size) {
 23fce86:	b123      	cbz	r3, 23fce92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fce88:	7803      	ldrb	r3, [r0, #0]
 23fce8a:	b103      	cbz	r3, 23fce8e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fce8c:	3001      	adds	r0, #1
 23fce8e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fce90:	6020      	str	r0, [r4, #0]
}
 23fce92:	4618      	mov	r0, r3
 23fce94:	bd38      	pop	{r3, r4, r5, pc}

023fce96 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fce96:	b510      	push	{r4, lr}
 23fce98:	4604      	mov	r4, r0
 23fce9a:	210c      	movs	r1, #12
 23fce9c:	f7fc fc9f 	bl	23f97de <_ZdlPvj>
 23fcea0:	4620      	mov	r0, r4
 23fcea2:	bd10      	pop	{r4, pc}

023fcea4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fcea4:	b510      	push	{r4, lr}
 23fcea6:	4604      	mov	r4, r0
 23fcea8:	2104      	movs	r1, #4
 23fceaa:	f7fc fc98 	bl	23f97de <_ZdlPvj>
 23fceae:	4620      	mov	r0, r4
 23fceb0:	bd10      	pop	{r4, pc}

023fceb2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fceb2:	b510      	push	{r4, lr}
 23fceb4:	4604      	mov	r4, r0
 23fceb6:	2104      	movs	r1, #4
 23fceb8:	f7fc fc91 	bl	23f97de <_ZdlPvj>
 23fcebc:	4620      	mov	r0, r4
 23fcebe:	bd10      	pop	{r4, pc}

023fcec0 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fcec0:	f7fe bc80 	b.w	23fb7c4 <os_mutex_recursive_lock>

023fcec4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fcec4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fcec6:	f7fc fc57 	bl	23f9778 <strcmp>
}
 23fceca:	fab0 f080 	clz	r0, r0
 23fcece:	0940      	lsrs	r0, r0, #5
 23fced0:	bd08      	pop	{r3, pc}

023fced2 <__tcf_1>:
 23fced2:	4770      	bx	lr

023fced4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fced4:	b510      	push	{r4, lr}
 23fced6:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fced8:	f001 fad0 	bl	23fe47c <_Z16_fetch_usbserialv>
 23fcedc:	4284      	cmp	r4, r0
 23fcede:	d105      	bne.n	23fceec <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fcee0:	f001 facc 	bl	23fe47c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fcee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fcee8:	f001 babc 	b.w	23fe464 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fceec:	f001 fcba 	bl	23fe864 <_Z22__fetch_global_Serial1v>
 23fcef0:	4284      	cmp	r4, r0
 23fcef2:	d105      	bne.n	23fcf00 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fcef4:	f001 fcb6 	bl	23fe864 <_Z22__fetch_global_Serial1v>
}
 23fcef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fcefc:	f001 ba55 	b.w	23fe3aa <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fcf00:	b12c      	cbz	r4, 23fcf0e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fcf02:	6823      	ldr	r3, [r4, #0]
 23fcf04:	4620      	mov	r0, r4
}
 23fcf06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fcf0a:	685b      	ldr	r3, [r3, #4]
 23fcf0c:	4718      	bx	r3
 23fcf0e:	bd10      	pop	{r4, pc}

023fcf10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcf10:	680b      	ldr	r3, [r1, #0]
 23fcf12:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fcf14:	684b      	ldr	r3, [r1, #4]
 23fcf16:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fcf18:	b113      	cbz	r3, 23fcf20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fcf1a:	685a      	ldr	r2, [r3, #4]
 23fcf1c:	3201      	adds	r2, #1
 23fcf1e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcf20:	4770      	bx	lr

023fcf22 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fcf22:	b513      	push	{r0, r1, r4, lr}
 23fcf24:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fcf26:	4608      	mov	r0, r1
 23fcf28:	9101      	str	r1, [sp, #4]
 23fcf2a:	f7fc fc2f 	bl	23f978c <strlen>
 23fcf2e:	4602      	mov	r2, r0
 23fcf30:	4620      	mov	r0, r4
 23fcf32:	9901      	ldr	r1, [sp, #4]
}
 23fcf34:	b002      	add	sp, #8
 23fcf36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fcf3a:	f7ff bf7b 	b.w	23fce34 <_ZN5spark10JSONWriter5valueEPKcj>

023fcf3e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fcf3e:	b513      	push	{r0, r1, r4, lr}
 23fcf40:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fcf42:	4608      	mov	r0, r1
 23fcf44:	9101      	str	r1, [sp, #4]
 23fcf46:	f7fc fc21 	bl	23f978c <strlen>
 23fcf4a:	4602      	mov	r2, r0
 23fcf4c:	4620      	mov	r0, r4
 23fcf4e:	6823      	ldr	r3, [r4, #0]
 23fcf50:	9901      	ldr	r1, [sp, #4]
 23fcf52:	68db      	ldr	r3, [r3, #12]
}
 23fcf54:	b002      	add	sp, #8
 23fcf56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fcf5a:	4718      	bx	r3

023fcf5c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fcf5c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fcf5e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fcf60:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fcf64:	2201      	movs	r2, #1
 23fcf66:	68db      	ldr	r3, [r3, #12]
 23fcf68:	f10d 0107 	add.w	r1, sp, #7
 23fcf6c:	4798      	blx	r3
}
 23fcf6e:	b003      	add	sp, #12
 23fcf70:	f85d fb04 	ldr.w	pc, [sp], #4

023fcf74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fcf74:	680a      	ldr	r2, [r1, #0]
 23fcf76:	b510      	push	{r4, lr}
 23fcf78:	6002      	str	r2, [r0, #0]
 23fcf7a:	684a      	ldr	r2, [r1, #4]
 23fcf7c:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fcf7e:	2200      	movs	r2, #0
 23fcf80:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fcf84:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcf86:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf88:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fcf8a:	6084      	str	r4, [r0, #8]
 23fcf8c:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf8e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fcf90:	60c4      	str	r4, [r0, #12]
 23fcf92:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf94:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcf96:	6104      	str	r4, [r0, #16]
 23fcf98:	bd10      	pop	{r4, pc}
	...

023fcf9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fcf9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fcfa0:	f04f 0a14 	mov.w	sl, #20
 23fcfa4:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fcfa8:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fcfaa:	4645      	mov	r5, r8
 23fcfac:	fb0a f404 	mul.w	r4, sl, r4
 23fcfb0:	9300      	str	r3, [sp, #0]
 23fcfb2:	4b17      	ldr	r3, [pc, #92]	; (23fd010 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fcfb4:	10a4      	asrs	r4, r4, #2
 23fcfb6:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fcfb8:	2c00      	cmp	r4, #0
 23fcfba:	dd21      	ble.n	23fd000 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fcfbc:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fcfbe:	fb0a f006 	mul.w	r0, sl, r6
 23fcfc2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fcfc6:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fcfca:	463a      	mov	r2, r7
 23fcfcc:	455f      	cmp	r7, fp
 23fcfce:	bf28      	it	cs
 23fcfd0:	465a      	movcs	r2, fp
 23fcfd2:	5828      	ldr	r0, [r5, r0]
 23fcfd4:	9101      	str	r1, [sp, #4]
 23fcfd6:	f001 fd86 	bl	23feae6 <strncmp>
                if (cmp == 0) {
 23fcfda:	2800      	cmp	r0, #0
 23fcfdc:	f04f 0301 	mov.w	r3, #1
 23fcfe0:	9901      	ldr	r1, [sp, #4]
 23fcfe2:	d10b      	bne.n	23fcffc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fcfe4:	455f      	cmp	r7, fp
 23fcfe6:	d103      	bne.n	23fcff0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fcfe8:	9a00      	ldr	r2, [sp, #0]
 23fcfea:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fcfec:	4634      	mov	r4, r6
 23fcfee:	e7e3      	b.n	23fcfb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fcff0:	d9fc      	bls.n	23fcfec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fcff2:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fcff4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fcff8:	3e01      	subs	r6, #1
 23fcffa:	e7f7      	b.n	23fcfec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fcffc:	dbf9      	blt.n	23fcff2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fcffe:	e7f5      	b.n	23fcfec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd000:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd004:	4802      	ldr	r0, [pc, #8]	; (23fd010 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd006:	10ad      	asrs	r5, r5, #2
 23fd008:	4368      	muls	r0, r5
 23fd00a:	b003      	add	sp, #12
 23fd00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd010:	cccccccd 	.word	0xcccccccd

023fd014 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd016:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd018:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd01a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd01c:	b303      	cbz	r3, 23fd060 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd01e:	b1f9      	cbz	r1, 23fd060 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd020:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd022:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd026:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd028:	a903      	add	r1, sp, #12
 23fd02a:	a801      	add	r0, sp, #4
 23fd02c:	f7ff ff21 	bl	23fce72 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd030:	4601      	mov	r1, r0
 23fd032:	b1a8      	cbz	r0, 23fd060 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd034:	f10d 030b 	add.w	r3, sp, #11
 23fd038:	4620      	mov	r0, r4
 23fd03a:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd03c:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd040:	f7ff ffac 	bl	23fcf9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd044:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd048:	b153      	cbz	r3, 23fd060 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd04a:	6823      	ldr	r3, [r4, #0]
 23fd04c:	2414      	movs	r4, #20
 23fd04e:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd052:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd056:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd058:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd05a:	bfa8      	it	ge
 23fd05c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd05e:	e7e3      	b.n	23fd028 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd060:	4628      	mov	r0, r5
 23fd062:	b004      	add	sp, #16
 23fd064:	bd70      	pop	{r4, r5, r6, pc}

023fd066 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd066:	b40e      	push	{r1, r2, r3}
 23fd068:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd06a:	b08c      	sub	sp, #48	; 0x30
 23fd06c:	af00      	add	r7, sp, #0
 23fd06e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd072:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd076:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd078:	462b      	mov	r3, r5
 23fd07a:	2120      	movs	r1, #32
 23fd07c:	f107 0010 	add.w	r0, r7, #16
 23fd080:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd082:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd084:	f7ff f836 	bl	23fc0f4 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd088:	281f      	cmp	r0, #31
 23fd08a:	687a      	ldr	r2, [r7, #4]
 23fd08c:	d91a      	bls.n	23fd0c4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd08e:	f100 0308 	add.w	r3, r0, #8
 23fd092:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd096:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd098:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd09c:	1c41      	adds	r1, r0, #1
 23fd09e:	462b      	mov	r3, r5
 23fd0a0:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd0a2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd0a4:	f7ff f826 	bl	23fc0f4 <vsnprintf>
        if (n > 0) {
 23fd0a8:	1e02      	subs	r2, r0, #0
 23fd0aa:	dd04      	ble.n	23fd0b6 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd0ac:	6823      	ldr	r3, [r4, #0]
 23fd0ae:	4669      	mov	r1, sp
 23fd0b0:	4620      	mov	r0, r4
 23fd0b2:	68db      	ldr	r3, [r3, #12]
 23fd0b4:	4798      	blx	r3
 23fd0b6:	46b5      	mov	sp, r6
}
 23fd0b8:	3730      	adds	r7, #48	; 0x30
 23fd0ba:	46bd      	mov	sp, r7
 23fd0bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd0c0:	b003      	add	sp, #12
 23fd0c2:	4770      	bx	lr
    } else if (n > 0) {
 23fd0c4:	2800      	cmp	r0, #0
 23fd0c6:	d0f7      	beq.n	23fd0b8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd0c8:	6823      	ldr	r3, [r4, #0]
 23fd0ca:	4602      	mov	r2, r0
 23fd0cc:	68db      	ldr	r3, [r3, #12]
 23fd0ce:	4620      	mov	r0, r4
 23fd0d0:	f107 0110 	add.w	r1, r7, #16
 23fd0d4:	4798      	blx	r3
}
 23fd0d6:	e7ef      	b.n	23fd0b8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd0d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd0d8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd0da:	4c08      	ldr	r4, [pc, #32]	; (23fd0fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd0dc:	e8d4 3f8f 	ldab	r3, [r4]
 23fd0e0:	07db      	lsls	r3, r3, #31
 23fd0e2:	d409      	bmi.n	23fd0f8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd0e4:	4620      	mov	r0, r4
 23fd0e6:	f7fc fb89 	bl	23f97fc <__cxa_guard_acquire>
 23fd0ea:	b128      	cbz	r0, 23fd0f8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd0ec:	4620      	mov	r0, r4
 23fd0ee:	f7fc fb8a 	bl	23f9806 <__cxa_guard_release>
 23fd0f2:	4803      	ldr	r0, [pc, #12]	; (23fd100 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd0f4:	f001 fc4d 	bl	23fe992 <atexit>
}
 23fd0f8:	4802      	ldr	r0, [pc, #8]	; (23fd104 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd0fa:	bd10      	pop	{r4, pc}
 23fd0fc:	1007ae68 	.word	0x1007ae68
 23fd100:	023fce6b 	.word	0x023fce6b
 23fd104:	1007a5f4 	.word	0x1007a5f4

023fd108 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd108:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd10a:	4c08      	ldr	r4, [pc, #32]	; (23fd12c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd10c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd110:	07db      	lsls	r3, r3, #31
 23fd112:	d409      	bmi.n	23fd128 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd114:	4620      	mov	r0, r4
 23fd116:	f7fc fb71 	bl	23f97fc <__cxa_guard_acquire>
 23fd11a:	b128      	cbz	r0, 23fd128 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd11c:	4620      	mov	r0, r4
 23fd11e:	f7fc fb72 	bl	23f9806 <__cxa_guard_release>
 23fd122:	4803      	ldr	r0, [pc, #12]	; (23fd130 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd124:	f001 fc35 	bl	23fe992 <atexit>
    return &factory;
}
 23fd128:	4802      	ldr	r0, [pc, #8]	; (23fd134 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd12a:	bd10      	pop	{r4, pc}
 23fd12c:	1007ae6c 	.word	0x1007ae6c
 23fd130:	023fced3 	.word	0x023fced3
 23fd134:	1007a5f8 	.word	0x1007a5f8

023fd138 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd138:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd13a:	2500      	movs	r5, #0
 23fd13c:	4604      	mov	r4, r0
 23fd13e:	e9c0 5500 	strd	r5, r5, [r0]
 23fd142:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd146:	6085      	str	r5, [r0, #8]
 23fd148:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd14a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd14e:	f7fe fb1d 	bl	23fb78c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd152:	f7ff ffc1 	bl	23fd0d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd156:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd158:	f7ff ffd6 	bl	23fd108 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd15c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd15e:	6220      	str	r0, [r4, #32]
}
 23fd160:	4620      	mov	r0, r4
 23fd162:	bd38      	pop	{r3, r4, r5, pc}

023fd164 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd164:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd166:	4c0a      	ldr	r4, [pc, #40]	; (23fd190 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd168:	e8d4 3f8f 	ldab	r3, [r4]
 23fd16c:	07db      	lsls	r3, r3, #31
 23fd16e:	d40c      	bmi.n	23fd18a <_ZN5spark10LogManager8instanceEv+0x26>
 23fd170:	4620      	mov	r0, r4
 23fd172:	f7fc fb43 	bl	23f97fc <__cxa_guard_acquire>
 23fd176:	b140      	cbz	r0, 23fd18a <_ZN5spark10LogManager8instanceEv+0x26>
 23fd178:	4806      	ldr	r0, [pc, #24]	; (23fd194 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd17a:	f7ff ffdd 	bl	23fd138 <_ZN5spark10LogManagerC1Ev>
 23fd17e:	4620      	mov	r0, r4
 23fd180:	f7fc fb41 	bl	23f9806 <__cxa_guard_release>
 23fd184:	4804      	ldr	r0, [pc, #16]	; (23fd198 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd186:	f001 fc04 	bl	23fe992 <atexit>
    return &mgr;
}
 23fd18a:	4802      	ldr	r0, [pc, #8]	; (23fd194 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd18c:	bd10      	pop	{r4, pc}
 23fd18e:	bf00      	nop
 23fd190:	1007ae64 	.word	0x1007ae64
 23fd194:	1007ae74 	.word	0x1007ae74
 23fd198:	023fd6b5 	.word	0x023fd6b5

023fd19c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd19c:	2300      	movs	r3, #0
 23fd19e:	4a02      	ldr	r2, [pc, #8]	; (23fd1a8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd1a0:	4902      	ldr	r1, [pc, #8]	; (23fd1ac <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd1a2:	4803      	ldr	r0, [pc, #12]	; (23fd1b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd1a4:	f7fe be1e 	b.w	23fbde4 <log_set_callbacks>
 23fd1a8:	023fd49d 	.word	0x023fd49d
 23fd1ac:	023fd429 	.word	0x023fd429
 23fd1b0:	023fd3a9 	.word	0x023fd3a9

023fd1b4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd1b4:	2300      	movs	r3, #0
 23fd1b6:	461a      	mov	r2, r3
 23fd1b8:	4619      	mov	r1, r3
 23fd1ba:	4618      	mov	r0, r3
 23fd1bc:	f7fe be12 	b.w	23fbde4 <log_set_callbacks>

023fd1c0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd1c2:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd1c4:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd1c6:	4668      	mov	r0, sp
 23fd1c8:	f7ff fea2 	bl	23fcf10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd1cc:	466a      	mov	r2, sp
 23fd1ce:	4629      	mov	r1, r5
 23fd1d0:	4620      	mov	r0, r4
 23fd1d2:	f7ff fd3b 	bl	23fcc4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fd1d6:	a801      	add	r0, sp, #4
 23fd1d8:	f7ff f81d 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd1dc:	4620      	mov	r0, r4
 23fd1de:	b003      	add	sp, #12
 23fd1e0:	bd30      	pop	{r4, r5, pc}

023fd1e2 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd1e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd1e4:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd1e6:	68cd      	ldr	r5, [r1, #12]
 23fd1e8:	4668      	mov	r0, sp
 23fd1ea:	f7ff fe91 	bl	23fcf10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd1ee:	466a      	mov	r2, sp
 23fd1f0:	4629      	mov	r1, r5
 23fd1f2:	4620      	mov	r0, r4
 23fd1f4:	f7ff fd06 	bl	23fcc04 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd1f8:	a801      	add	r0, sp, #4
 23fd1fa:	f7ff f80c 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd1fe:	4620      	mov	r0, r4
 23fd200:	b003      	add	sp, #12
 23fd202:	bd30      	pop	{r4, r5, pc}

023fd204 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd206:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd208:	690d      	ldr	r5, [r1, #16]
 23fd20a:	4668      	mov	r0, sp
 23fd20c:	f7ff fe80 	bl	23fcf10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd210:	466a      	mov	r2, sp
 23fd212:	4629      	mov	r1, r5
 23fd214:	4620      	mov	r0, r4
 23fd216:	f7ff fc9d 	bl	23fcb54 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd21a:	a801      	add	r0, sp, #4
 23fd21c:	f7fe fffb 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd220:	4620      	mov	r0, r4
 23fd222:	b003      	add	sp, #12
 23fd224:	bd30      	pop	{r4, r5, pc}
	...

023fd228 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd228:	b570      	push	{r4, r5, r6, lr}
 23fd22a:	b08a      	sub	sp, #40	; 0x28
 23fd22c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd22e:	4601      	mov	r1, r0
 23fd230:	a804      	add	r0, sp, #16
 23fd232:	f7ff ffc5 	bl	23fd1c0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd236:	4e14      	ldr	r6, [pc, #80]	; (23fd288 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd238:	a804      	add	r0, sp, #16
 23fd23a:	f7ff fd1f 	bl	23fcc7c <_ZN5spark18JSONObjectIterator4nextEv>
 23fd23e:	b1e8      	cbz	r0, 23fd27c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd240:	4668      	mov	r0, sp
 23fd242:	a904      	add	r1, sp, #16
 23fd244:	f7ff ffcd 	bl	23fd1e2 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd248:	4631      	mov	r1, r6
 23fd24a:	9802      	ldr	r0, [sp, #8]
 23fd24c:	f7ff fe3a 	bl	23fcec4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd250:	4604      	mov	r4, r0
 23fd252:	b110      	cbz	r0, 23fd25a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd254:	1e2c      	subs	r4, r5, #0
 23fd256:	bf18      	it	ne
 23fd258:	2401      	movne	r4, #1
 23fd25a:	a801      	add	r0, sp, #4
 23fd25c:	f7fe ffdb 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd260:	2c00      	cmp	r4, #0
 23fd262:	d0e9      	beq.n	23fd238 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd264:	4668      	mov	r0, sp
 23fd266:	a904      	add	r1, sp, #16
 23fd268:	f7ff ffcc 	bl	23fd204 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd26c:	4668      	mov	r0, sp
 23fd26e:	f7ff fca7 	bl	23fcbc0 <_ZNK5spark9JSONValue5toIntEv>
 23fd272:	6028      	str	r0, [r5, #0]
 23fd274:	a801      	add	r0, sp, #4
 23fd276:	f7fe ffce 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd27a:	e7dd      	b.n	23fd238 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd27c:	a805      	add	r0, sp, #20
 23fd27e:	f7fe ffca 	bl	23fc216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd282:	b00a      	add	sp, #40	; 0x28
 23fd284:	bd70      	pop	{r4, r5, r6, pc}
 23fd286:	bf00      	nop
 23fd288:	023ffc70 	.word	0x023ffc70

023fd28c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd28c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd28e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd290:	4913      	ldr	r1, [pc, #76]	; (23fd2e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd292:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd294:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd296:	f7fc fa6f 	bl	23f9778 <strcmp>
 23fd29a:	b950      	cbnz	r0, 23fd2b2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd29c:	f001 f8ee 	bl	23fe47c <_Z16_fetch_usbserialv>
 23fd2a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd2a4:	f001 f8da 	bl	23fe45c <_ZN9USBSerial5beginEl>
}
 23fd2a8:	b003      	add	sp, #12
 23fd2aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd2ae:	f001 b8e5 	b.w	23fe47c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd2b2:	4620      	mov	r0, r4
 23fd2b4:	490b      	ldr	r1, [pc, #44]	; (23fd2e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd2b6:	f7fc fa5f 	bl	23f9778 <strcmp>
 23fd2ba:	b978      	cbnz	r0, 23fd2dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd2bc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd2c0:	a901      	add	r1, sp, #4
 23fd2c2:	4628      	mov	r0, r5
        int baud = 9600;
 23fd2c4:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd2c6:	f7ff ffaf 	bl	23fd228 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd2ca:	f001 facb 	bl	23fe864 <_Z22__fetch_global_Serial1v>
 23fd2ce:	9901      	ldr	r1, [sp, #4]
 23fd2d0:	f001 f868 	bl	23fe3a4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fd2d4:	f001 fac6 	bl	23fe864 <_Z22__fetch_global_Serial1v>
}
 23fd2d8:	b003      	add	sp, #12
 23fd2da:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fd2dc:	2000      	movs	r0, #0
 23fd2de:	e7fb      	b.n	23fd2d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fd2e0:	023ffc75 	.word	0x023ffc75
 23fd2e4:	023ffc7c 	.word	0x023ffc7c

023fd2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd2e8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd2ea:	2614      	movs	r6, #20
 23fd2ec:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd2f0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd2f2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd2f6:	42ae      	cmp	r6, r5
 23fd2f8:	d005      	beq.n	23fd306 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fd2fa:	f105 0008 	add.w	r0, r5, #8
 23fd2fe:	f7ff fff3 	bl	23fd2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd302:	3514      	adds	r5, #20
 23fd304:	e7f7      	b.n	23fd2f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd306:	6820      	ldr	r0, [r4, #0]
 23fd308:	f7fe fed8 	bl	23fc0bc <free>
}
 23fd30c:	4620      	mov	r0, r4
 23fd30e:	bd70      	pop	{r4, r5, r6, pc}

023fd310 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fd310:	b510      	push	{r4, lr}
 23fd312:	4604      	mov	r4, r0
 23fd314:	300c      	adds	r0, #12
 23fd316:	f7ff ffe7 	bl	23fd2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd31a:	4620      	mov	r0, r4
 23fd31c:	f7fe ff69 	bl	23fc1f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd320:	4620      	mov	r0, r4
 23fd322:	bd10      	pop	{r4, pc}

023fd324 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fd324:	b510      	push	{r4, lr}
 23fd326:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fd328:	4b03      	ldr	r3, [pc, #12]	; (23fd338 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fd32a:	f840 3b04 	str.w	r3, [r0], #4
 23fd32e:	f7ff ffef 	bl	23fd310 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fd332:	4620      	mov	r0, r4
 23fd334:	bd10      	pop	{r4, pc}
 23fd336:	bf00      	nop
 23fd338:	023fedc0 	.word	0x023fedc0

023fd33c <_ZN5spark16StreamLogHandlerD0Ev>:
 23fd33c:	b510      	push	{r4, lr}
 23fd33e:	4604      	mov	r4, r0
 23fd340:	f7ff fff0 	bl	23fd324 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd344:	4620      	mov	r0, r4
 23fd346:	2124      	movs	r1, #36	; 0x24
 23fd348:	f7fc fa49 	bl	23f97de <_ZdlPvj>
 23fd34c:	4620      	mov	r0, r4
 23fd34e:	bd10      	pop	{r4, pc}

023fd350 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fd350:	b510      	push	{r4, lr}
 23fd352:	4604      	mov	r4, r0
 23fd354:	4b02      	ldr	r3, [pc, #8]	; (23fd360 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fd356:	6003      	str	r3, [r0, #0]
 23fd358:	f7ff ffe4 	bl	23fd324 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd35c:	4620      	mov	r0, r4
 23fd35e:	bd10      	pop	{r4, pc}
 23fd360:	023ffd1c 	.word	0x023ffd1c

023fd364 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fd364:	b510      	push	{r4, lr}
 23fd366:	4604      	mov	r4, r0
 23fd368:	f7ff fff2 	bl	23fd350 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fd36c:	4620      	mov	r0, r4
 23fd36e:	2124      	movs	r1, #36	; 0x24
 23fd370:	f7fc fa35 	bl	23f97de <_ZdlPvj>
 23fd374:	4620      	mov	r0, r4
 23fd376:	bd10      	pop	{r4, pc}

023fd378 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fd378:	2200      	movs	r2, #0
 23fd37a:	e9c0 2200 	strd	r2, r2, [r0]
 23fd37e:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fd380:	b510      	push	{r4, lr}
 23fd382:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd384:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd386:	6004      	str	r4, [r0, #0]
 23fd388:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd38a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd38c:	6044      	str	r4, [r0, #4]
 23fd38e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd390:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd392:	6084      	str	r4, [r0, #8]
}
 23fd394:	bd10      	pop	{r4, pc}

023fd396 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fd396:	b510      	push	{r4, lr}
 23fd398:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fd39a:	6803      	ldr	r3, [r0, #0]
 23fd39c:	6818      	ldr	r0, [r3, #0]
 23fd39e:	f7fe fa1f 	bl	23fb7e0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fd3a2:	4620      	mov	r0, r4
 23fd3a4:	bd10      	pop	{r4, pc}
	...

023fd3a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fd3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd3ac:	b087      	sub	sp, #28
 23fd3ae:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fd3b0:	4b1c      	ldr	r3, [pc, #112]	; (23fd424 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fd3b2:	4680      	mov	r8, r0
 23fd3b4:	685b      	ldr	r3, [r3, #4]
 23fd3b6:	4689      	mov	r9, r1
 23fd3b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd3bc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fd3be:	b96b      	cbnz	r3, 23fd3dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fd3c0:	f7ff fed0 	bl	23fd164 <_ZN5spark10LogManager8instanceEv>
 23fd3c4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd3c6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fd3ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd3cc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fd3ce:	f7ff fd77 	bl	23fcec0 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fd3d2:	7b23      	ldrb	r3, [r4, #12]
 23fd3d4:	b12b      	cbz	r3, 23fd3e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fd3d6:	a805      	add	r0, sp, #20
 23fd3d8:	f7ff ffdd 	bl	23fd396 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fd3dc:	b007      	add	sp, #28
 23fd3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fd3e2:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fd3e4:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fd3e8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fd3ea:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd3ee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd3f2:	45aa      	cmp	sl, r5
 23fd3f4:	d012      	beq.n	23fd41c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fd3f6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fd3fa:	4631      	mov	r1, r6
 23fd3fc:	1d38      	adds	r0, r7, #4
 23fd3fe:	f7ff fe09 	bl	23fd014 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd402:	4581      	cmp	r9, r0
 23fd404:	d3f5      	bcc.n	23fd3f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fd406:	9a03      	ldr	r2, [sp, #12]
 23fd408:	683b      	ldr	r3, [r7, #0]
 23fd40a:	9200      	str	r2, [sp, #0]
 23fd40c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fd410:	464a      	mov	r2, r9
 23fd412:	4633      	mov	r3, r6
 23fd414:	4641      	mov	r1, r8
 23fd416:	4638      	mov	r0, r7
 23fd418:	47d8      	blx	fp
 23fd41a:	e7ea      	b.n	23fd3f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fd41c:	2300      	movs	r3, #0
 23fd41e:	7323      	strb	r3, [r4, #12]
 23fd420:	e7d9      	b.n	23fd3d6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fd422:	bf00      	nop
 23fd424:	e000ed00 	.word	0xe000ed00

023fd428 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fd428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd42c:	469b      	mov	fp, r3
 23fd42e:	4b1a      	ldr	r3, [pc, #104]	; (23fd498 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fd430:	4680      	mov	r8, r0
 23fd432:	685b      	ldr	r3, [r3, #4]
 23fd434:	4689      	mov	r9, r1
 23fd436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd43a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fd43c:	b96b      	cbnz	r3, 23fd45a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fd43e:	f7ff fe91 	bl	23fd164 <_ZN5spark10LogManager8instanceEv>
 23fd442:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd444:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd448:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd44a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd44c:	f7ff fd38 	bl	23fcec0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fd450:	7b23      	ldrb	r3, [r4, #12]
 23fd452:	b12b      	cbz	r3, 23fd460 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fd454:	a801      	add	r0, sp, #4
 23fd456:	f7ff ff9e 	bl	23fd396 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd45a:	b003      	add	sp, #12
 23fd45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fd460:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fd462:	b2f6      	uxtb	r6, r6
 23fd464:	7323      	strb	r3, [r4, #12]
 23fd466:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd46a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd46e:	4555      	cmp	r5, sl
 23fd470:	d00e      	beq.n	23fd490 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fd472:	f855 7b04 	ldr.w	r7, [r5], #4
 23fd476:	4659      	mov	r1, fp
 23fd478:	1d38      	adds	r0, r7, #4
 23fd47a:	f7ff fdcb 	bl	23fd014 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd47e:	4286      	cmp	r6, r0
 23fd480:	d3f5      	bcc.n	23fd46e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fd482:	683b      	ldr	r3, [r7, #0]
 23fd484:	464a      	mov	r2, r9
 23fd486:	4641      	mov	r1, r8
 23fd488:	4638      	mov	r0, r7
 23fd48a:	68db      	ldr	r3, [r3, #12]
 23fd48c:	4798      	blx	r3
 23fd48e:	e7ee      	b.n	23fd46e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fd490:	2300      	movs	r3, #0
 23fd492:	7323      	strb	r3, [r4, #12]
 23fd494:	e7de      	b.n	23fd454 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fd496:	bf00      	nop
 23fd498:	e000ed00 	.word	0xe000ed00

023fd49c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fd49c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fd4a0:	4b16      	ldr	r3, [pc, #88]	; (23fd4fc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fd4a2:	4605      	mov	r5, r0
 23fd4a4:	685b      	ldr	r3, [r3, #4]
 23fd4a6:	460f      	mov	r7, r1
 23fd4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fd4ac:	bb1b      	cbnz	r3, 23fd4f6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fd4ae:	f7ff fe59 	bl	23fd164 <_ZN5spark10LogManager8instanceEv>
 23fd4b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd4b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd4b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd4ba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd4bc:	f7ff fd00 	bl	23fcec0 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fd4c0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fd4c4:	2446      	movs	r4, #70	; 0x46
 23fd4c6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd4ca:	45b0      	cmp	r8, r6
 23fd4cc:	d109      	bne.n	23fd4e2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fd4ce:	a801      	add	r0, sp, #4
 23fd4d0:	f7ff ff61 	bl	23fd396 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fd4d4:	42a5      	cmp	r5, r4
 23fd4d6:	bfb4      	ite	lt
 23fd4d8:	2000      	movlt	r0, #0
 23fd4da:	2001      	movge	r0, #1
}
 23fd4dc:	b002      	add	sp, #8
 23fd4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fd4e2:	f856 0b04 	ldr.w	r0, [r6], #4
 23fd4e6:	4639      	mov	r1, r7
 23fd4e8:	3004      	adds	r0, #4
 23fd4ea:	f7ff fd93 	bl	23fd014 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fd4ee:	4284      	cmp	r4, r0
 23fd4f0:	bfa8      	it	ge
 23fd4f2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fd4f4:	e7e9      	b.n	23fd4ca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fd4f6:	2000      	movs	r0, #0
 23fd4f8:	e7f0      	b.n	23fd4dc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fd4fa:	bf00      	nop
 23fd4fc:	e000ed00 	.word	0xe000ed00

023fd500 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd502:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fd506:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd508:	4604      	mov	r4, r0
 23fd50a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd50c:	db0d      	blt.n	23fd52a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fd50e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fd510:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fd512:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fd514:	dd04      	ble.n	23fd520 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fd516:	00b9      	lsls	r1, r7, #2
 23fd518:	f7fe fdde 	bl	23fc0d8 <realloc>
            if (!d) {
 23fd51c:	b918      	cbnz	r0, 23fd526 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fd51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fd520:	f7fe fdcc 	bl	23fc0bc <free>
        T* d = nullptr;
 23fd524:	2000      	movs	r0, #0
        data_ = d;
 23fd526:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd528:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fd52a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fd52c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd52e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fd532:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd534:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fd538:	1d08      	adds	r0, r1, #4
 23fd53a:	f001 fa46 	bl	23fe9ca <memmove>
    new(p) T(std::move(value));
 23fd53e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fd542:	6863      	ldr	r3, [r4, #4]
    return true;
 23fd544:	2001      	movs	r0, #1
    ++size_;
 23fd546:	3301      	adds	r3, #1
 23fd548:	6063      	str	r3, [r4, #4]
    return true;
 23fd54a:	e7e8      	b.n	23fd51e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fd54c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd54e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd550:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd554:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd556:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd558:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fd55a:	f7ff fcb1 	bl	23fcec0 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fd55e:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fd562:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fd566:	4293      	cmp	r3, r2
 23fd568:	4619      	mov	r1, r3
 23fd56a:	d00a      	beq.n	23fd582 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fd56c:	6809      	ldr	r1, [r1, #0]
 23fd56e:	3304      	adds	r3, #4
 23fd570:	42a9      	cmp	r1, r5
 23fd572:	d1f8      	bne.n	23fd566 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fd574:	a801      	add	r0, sp, #4
 23fd576:	f7ff ff0e 	bl	23fd396 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd57a:	2500      	movs	r5, #0
}
 23fd57c:	4628      	mov	r0, r5
 23fd57e:	b003      	add	sp, #12
 23fd580:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fd582:	4629      	mov	r1, r5
 23fd584:	4620      	mov	r0, r4
 23fd586:	f7ff ffbb 	bl	23fd500 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fd58a:	4605      	mov	r5, r0
 23fd58c:	2800      	cmp	r0, #0
 23fd58e:	d0f1      	beq.n	23fd574 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fd590:	6863      	ldr	r3, [r4, #4]
 23fd592:	2b01      	cmp	r3, #1
 23fd594:	d101      	bne.n	23fd59a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fd596:	f7ff fe01 	bl	23fd19c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd59a:	a801      	add	r0, sp, #4
 23fd59c:	f7ff fefb 	bl	23fd396 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd5a0:	e7ec      	b.n	23fd57c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fd5a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fd5a2:	460b      	mov	r3, r1
 23fd5a4:	b570      	push	{r4, r5, r6, lr}
 23fd5a6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fd5a8:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fd5ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fd5b0:	4282      	cmp	r2, r0
 23fd5b2:	d00f      	beq.n	23fd5d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fd5b4:	4601      	mov	r1, r0
            if (*p == value) {
 23fd5b6:	681d      	ldr	r5, [r3, #0]
 23fd5b8:	f851 6b04 	ldr.w	r6, [r1], #4
 23fd5bc:	42ae      	cmp	r6, r5
 23fd5be:	d107      	bne.n	23fd5d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd5c0:	1a52      	subs	r2, r2, r1
 23fd5c2:	f001 fa02 	bl	23fe9ca <memmove>
    return true;
 23fd5c6:	2001      	movs	r0, #1
    --size_;
 23fd5c8:	6863      	ldr	r3, [r4, #4]
 23fd5ca:	3b01      	subs	r3, #1
 23fd5cc:	6063      	str	r3, [r4, #4]
}
 23fd5ce:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fd5d0:	4608      	mov	r0, r1
 23fd5d2:	e7ed      	b.n	23fd5b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fd5d4:	2000      	movs	r0, #0
 23fd5d6:	e7fa      	b.n	23fd5ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fd5d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd5d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd5da:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd5dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd5e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd5e2:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd5e4:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fd5e6:	f7ff fc6b 	bl	23fcec0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fd5ea:	4620      	mov	r0, r4
 23fd5ec:	a901      	add	r1, sp, #4
 23fd5ee:	f7ff ffd8 	bl	23fd5a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fd5f2:	b118      	cbz	r0, 23fd5fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fd5f4:	6863      	ldr	r3, [r4, #4]
 23fd5f6:	b90b      	cbnz	r3, 23fd5fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fd5f8:	f7ff fddc 	bl	23fd1b4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd5fc:	a803      	add	r0, sp, #12
 23fd5fe:	f7ff feca 	bl	23fd396 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd602:	b004      	add	sp, #16
 23fd604:	bd10      	pop	{r4, pc}

023fd606 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fd606:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fd608:	b570      	push	{r4, r5, r6, lr}
 23fd60a:	4604      	mov	r4, r0
 23fd60c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fd610:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd614:	42ae      	cmp	r6, r5
 23fd616:	d015      	beq.n	23fd644 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fd618:	4620      	mov	r0, r4
 23fd61a:	f105 0110 	add.w	r1, r5, #16
 23fd61e:	f7ff ffc0 	bl	23fd5a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fd622:	6863      	ldr	r3, [r4, #4]
 23fd624:	b90b      	cbnz	r3, 23fd62a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fd626:	f7ff fdc5 	bl	23fd1b4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fd62a:	69e0      	ldr	r0, [r4, #28]
 23fd62c:	6929      	ldr	r1, [r5, #16]
 23fd62e:	6803      	ldr	r3, [r0, #0]
 23fd630:	68db      	ldr	r3, [r3, #12]
 23fd632:	4798      	blx	r3
        if (h.stream) {
 23fd634:	6969      	ldr	r1, [r5, #20]
 23fd636:	b119      	cbz	r1, 23fd640 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fd638:	6a20      	ldr	r0, [r4, #32]
 23fd63a:	6803      	ldr	r3, [r0, #0]
 23fd63c:	68db      	ldr	r3, [r3, #12]
 23fd63e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd640:	3518      	adds	r5, #24
 23fd642:	e7e7      	b.n	23fd614 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fd644:	2618      	movs	r6, #24
 23fd646:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd64a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd64e:	42ae      	cmp	r6, r5
 23fd650:	d004      	beq.n	23fd65c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fd652:	4628      	mov	r0, r5
 23fd654:	f000 fd91 	bl	23fe17a <_ZN6StringD1Ev>
 23fd658:	3518      	adds	r5, #24
 23fd65a:	e7f8      	b.n	23fd64e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fd65c:	2300      	movs	r3, #0
 23fd65e:	6163      	str	r3, [r4, #20]
}
 23fd660:	bd70      	pop	{r4, r5, r6, pc}

023fd662 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fd662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd664:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fd666:	f7ff fda5 	bl	23fd1b4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd66a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fd66e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd670:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd672:	f7ff fc25 	bl	23fcec0 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fd676:	4620      	mov	r0, r4
 23fd678:	f7ff ffc5 	bl	23fd606 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fd67c:	a801      	add	r0, sp, #4
 23fd67e:	f7ff fe8a 	bl	23fd396 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fd682:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fd684:	b108      	cbz	r0, 23fd68a <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fd686:	f7fe f88f 	bl	23fb7a8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fd68a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd68e:	2618      	movs	r6, #24
 23fd690:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd694:	42ae      	cmp	r6, r5
 23fd696:	d004      	beq.n	23fd6a2 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fd698:	4628      	mov	r0, r5
 23fd69a:	f000 fd6e 	bl	23fe17a <_ZN6StringD1Ev>
 23fd69e:	3518      	adds	r5, #24
 23fd6a0:	e7f8      	b.n	23fd694 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fd6a2:	6920      	ldr	r0, [r4, #16]
 23fd6a4:	f7fe fd0a 	bl	23fc0bc <free>
 23fd6a8:	6820      	ldr	r0, [r4, #0]
 23fd6aa:	f7fe fd07 	bl	23fc0bc <free>
}
 23fd6ae:	4620      	mov	r0, r4
 23fd6b0:	b002      	add	sp, #8
 23fd6b2:	bd70      	pop	{r4, r5, r6, pc}

023fd6b4 <__tcf_2>:
    static LogManager mgr;
 23fd6b4:	4801      	ldr	r0, [pc, #4]	; (23fd6bc <__tcf_2+0x8>)
 23fd6b6:	f7ff bfd4 	b.w	23fd662 <_ZN5spark10LogManagerD1Ev>
 23fd6ba:	bf00      	nop
 23fd6bc:	1007ae74 	.word	0x1007ae74

023fd6c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fd6c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd6c4:	4604      	mov	r4, r0
 23fd6c6:	460d      	mov	r5, r1
 23fd6c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd6ca:	d915      	bls.n	23fd6f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fd6cc:	4290      	cmp	r0, r2
 23fd6ce:	d214      	bcs.n	23fd6fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fd6d0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd6d4:	1a75      	subs	r5, r6, r1
 23fd6d6:	f1a1 0714 	sub.w	r7, r1, #20
 23fd6da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd6dc:	42b7      	cmp	r7, r6
 23fd6de:	d01a      	beq.n	23fd716 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fd6e0:	b11c      	cbz	r4, 23fd6ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fd6e2:	4631      	mov	r1, r6
 23fd6e4:	4620      	mov	r0, r4
 23fd6e6:	f7ff fc45 	bl	23fcf74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fd6ea:	f106 0008 	add.w	r0, r6, #8
 23fd6ee:	f7ff fdfb 	bl	23fd2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fd6f2:	3e14      	subs	r6, #20
 23fd6f4:	3c14      	subs	r4, #20
 23fd6f6:	e7f1      	b.n	23fd6dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fd6f8:	d00d      	beq.n	23fd716 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fd6fa:	42b5      	cmp	r5, r6
 23fd6fc:	d00b      	beq.n	23fd716 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fd6fe:	b11c      	cbz	r4, 23fd708 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fd700:	4629      	mov	r1, r5
 23fd702:	4620      	mov	r0, r4
 23fd704:	f7ff fc36 	bl	23fcf74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fd708:	f105 0008 	add.w	r0, r5, #8
 23fd70c:	f7ff fdec 	bl	23fd2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fd710:	3514      	adds	r5, #20
 23fd712:	3414      	adds	r4, #20
 23fd714:	e7f1      	b.n	23fd6fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fd716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd718 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd718:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd71c:	4604      	mov	r4, r0
 23fd71e:	460d      	mov	r5, r1
 23fd720:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd722:	d914      	bls.n	23fd74e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fd724:	4290      	cmp	r0, r2
 23fd726:	d213      	bcs.n	23fd750 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fd728:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fd72c:	1a75      	subs	r5, r6, r1
 23fd72e:	f1a1 0710 	sub.w	r7, r1, #16
 23fd732:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd734:	42b7      	cmp	r7, r6
 23fd736:	d018      	beq.n	23fd76a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fd738:	b11c      	cbz	r4, 23fd742 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fd73a:	4631      	mov	r1, r6
 23fd73c:	4620      	mov	r0, r4
 23fd73e:	f000 fd99 	bl	23fe274 <_ZN6StringC1EOS_>
                end->~T();
 23fd742:	4630      	mov	r0, r6
 23fd744:	f000 fd19 	bl	23fe17a <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd748:	3e10      	subs	r6, #16
 23fd74a:	3c10      	subs	r4, #16
 23fd74c:	e7f2      	b.n	23fd734 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd74e:	d00c      	beq.n	23fd76a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd750:	42b5      	cmp	r5, r6
 23fd752:	d00a      	beq.n	23fd76a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd754:	b11c      	cbz	r4, 23fd75e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd756:	4629      	mov	r1, r5
 23fd758:	4620      	mov	r0, r4
 23fd75a:	f000 fd8b 	bl	23fe274 <_ZN6StringC1EOS_>
                p->~T();
 23fd75e:	4628      	mov	r0, r5
 23fd760:	f000 fd0b 	bl	23fe17a <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd764:	3510      	adds	r5, #16
 23fd766:	3410      	adds	r4, #16
 23fd768:	e7f2      	b.n	23fd750 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd76c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd76c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd76e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd770:	4605      	mov	r5, r0
        if (n > 0) {
 23fd772:	dd11      	ble.n	23fd798 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd774:	0130      	lsls	r0, r6, #4
 23fd776:	f7fe fc93 	bl	23fc0a0 <malloc>
            if (!d) {
 23fd77a:	4604      	mov	r4, r0
 23fd77c:	b158      	cbz	r0, 23fd796 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd77e:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd782:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd786:	f7ff ffc7 	bl	23fd718 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd78a:	6828      	ldr	r0, [r5, #0]
 23fd78c:	f7fe fc96 	bl	23fc0bc <free>
        return true;
 23fd790:	2001      	movs	r0, #1
        data_ = d;
 23fd792:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd794:	60ae      	str	r6, [r5, #8]
    }
 23fd796:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd798:	2400      	movs	r4, #0
 23fd79a:	e7f6      	b.n	23fd78a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd79c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd7a0:	4690      	mov	r8, r2
        capacity_(0) {
 23fd7a2:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd7a4:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd7a6:	b095      	sub	sp, #84	; 0x54
 23fd7a8:	9103      	str	r1, [sp, #12]
    return size_;
 23fd7aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd7ae:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd7b0:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd7b2:	e9c0 3300 	strd	r3, r3, [r0]
 23fd7b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd7ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd7be:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd7c2:	7602      	strb	r2, [r0, #24]
 23fd7c4:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd7c6:	dc23      	bgt.n	23fd810 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd7c8:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd7cc:	2314      	movs	r3, #20
 23fd7ce:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd7d2:	42af      	cmp	r7, r5
 23fd7d4:	d03b      	beq.n	23fd84e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd7d6:	4629      	mov	r1, r5
 23fd7d8:	a80b      	add	r0, sp, #44	; 0x2c
 23fd7da:	f000 fd4b 	bl	23fe274 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd7de:	a90b      	add	r1, sp, #44	; 0x2c
 23fd7e0:	a80f      	add	r0, sp, #60	; 0x3c
 23fd7e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd7e4:	f000 fd46 	bl	23fe274 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd7e8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd7ec:	4299      	cmp	r1, r3
 23fd7ee:	da1b      	bge.n	23fd828 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd7f0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd7f4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd7f8:	4631      	mov	r1, r6
 23fd7fa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd7fe:	f106 0010 	add.w	r0, r6, #16
 23fd802:	f7ff ff89 	bl	23fd718 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd806:	b9ee      	cbnz	r6, 23fd844 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd80a:	3301      	adds	r3, #1
 23fd80c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd80e:	e011      	b.n	23fd834 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd810:	a808      	add	r0, sp, #32
 23fd812:	f7ff ffab 	bl	23fd76c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd816:	2800      	cmp	r0, #0
 23fd818:	d1d6      	bne.n	23fd7c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd81a:	a808      	add	r0, sp, #32
 23fd81c:	f7fe fce9 	bl	23fc1f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd820:	4620      	mov	r0, r4
 23fd822:	b015      	add	sp, #84	; 0x54
 23fd824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd828:	3101      	adds	r1, #1
 23fd82a:	a808      	add	r0, sp, #32
 23fd82c:	f7ff ff9e 	bl	23fd76c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd830:	2800      	cmp	r0, #0
 23fd832:	d1dd      	bne.n	23fd7f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd834:	a80f      	add	r0, sp, #60	; 0x3c
 23fd836:	f000 fca0 	bl	23fe17a <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd83a:	a80b      	add	r0, sp, #44	; 0x2c
 23fd83c:	f000 fc9d 	bl	23fe17a <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd840:	3514      	adds	r5, #20
 23fd842:	e7c6      	b.n	23fd7d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd844:	4630      	mov	r0, r6
 23fd846:	a90f      	add	r1, sp, #60	; 0x3c
 23fd848:	f000 fd14 	bl	23fe274 <_ZN6StringC1EOS_>
 23fd84c:	e7dc      	b.n	23fd808 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd84e:	2600      	movs	r6, #0
 23fd850:	f04f 0914 	mov.w	r9, #20
 23fd854:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd858:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd85a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd85e:	429e      	cmp	r6, r3
 23fd860:	da7c      	bge.n	23fd95c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fd862:	0133      	lsls	r3, r6, #4
 23fd864:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd866:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd868:	b90b      	cbnz	r3, 23fd86e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd86a:	3601      	adds	r6, #1
 23fd86c:	e7f5      	b.n	23fd85a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd86e:	2300      	movs	r3, #0
 23fd870:	9307      	str	r3, [sp, #28]
 23fd872:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd876:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd878:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd87a:	a907      	add	r1, sp, #28
 23fd87c:	a806      	add	r0, sp, #24
 23fd87e:	f7ff faf8 	bl	23fce72 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd882:	4682      	mov	sl, r0
 23fd884:	2800      	cmp	r0, #0
 23fd886:	d0f0      	beq.n	23fd86a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd888:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd88c:	4601      	mov	r1, r0
            bool found = false;
 23fd88e:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd892:	4628      	mov	r0, r5
 23fd894:	9a07      	ldr	r2, [sp, #28]
 23fd896:	f10d 0317 	add.w	r3, sp, #23
 23fd89a:	f7ff fb7f 	bl	23fcf9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd89e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd8a2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd8a4:	2f00      	cmp	r7, #0
 23fd8a6:	d14a      	bne.n	23fd93e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fd8a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fd8ac:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fd8b0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fd8b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd8b8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fd8bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fd8c0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd8c2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fd8c6:	4293      	cmp	r3, r2
 23fd8c8:	db17      	blt.n	23fd8fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fd8ca:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fd8ce:	f1ba 0f00 	cmp.w	sl, #0
 23fd8d2:	dd30      	ble.n	23fd936 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fd8d4:	fb09 f00a 	mul.w	r0, r9, sl
 23fd8d8:	f7fe fbe2 	bl	23fc0a0 <malloc>
            if (!d) {
 23fd8dc:	4683      	mov	fp, r0
 23fd8de:	b360      	cbz	r0, 23fd93a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fd8e0:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd8e4:	fb09 1202 	mla	r2, r9, r2, r1
 23fd8e8:	f7ff feea 	bl	23fd6c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fd8ec:	6828      	ldr	r0, [r5, #0]
 23fd8ee:	f7fe fbe5 	bl	23fc0bc <free>
        data_ = d;
 23fd8f2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fd8f6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fd8fa:	682b      	ldr	r3, [r5, #0]
 23fd8fc:	9a01      	ldr	r2, [sp, #4]
 23fd8fe:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fd902:	686a      	ldr	r2, [r5, #4]
 23fd904:	4651      	mov	r1, sl
 23fd906:	fb09 3202 	mla	r2, r9, r2, r3
 23fd90a:	f10a 0014 	add.w	r0, sl, #20
 23fd90e:	f7ff fed7 	bl	23fd6c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fd912:	f1ba 0f00 	cmp.w	sl, #0
 23fd916:	d003      	beq.n	23fd920 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fd918:	4650      	mov	r0, sl
 23fd91a:	a90f      	add	r1, sp, #60	; 0x3c
 23fd91c:	f7ff fb2a 	bl	23fcf74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fd920:	686b      	ldr	r3, [r5, #4]
 23fd922:	3301      	adds	r3, #1
 23fd924:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fd926:	a811      	add	r0, sp, #68	; 0x44
 23fd928:	f7ff fcde 	bl	23fd2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd92c:	b13f      	cbz	r7, 23fd93e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fd92e:	a80b      	add	r0, sp, #44	; 0x2c
 23fd930:	f7ff fcda 	bl	23fd2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd934:	e771      	b.n	23fd81a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fd936:	46bb      	mov	fp, r7
 23fd938:	e7d8      	b.n	23fd8ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd93a:	2701      	movs	r7, #1
 23fd93c:	e7f3      	b.n	23fd926 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fd93e:	9b01      	ldr	r3, [sp, #4]
 23fd940:	682d      	ldr	r5, [r5, #0]
 23fd942:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fd946:	9b06      	ldr	r3, [sp, #24]
 23fd948:	781b      	ldrb	r3, [r3, #0]
 23fd94a:	b92b      	cbnz	r3, 23fd958 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fd94c:	f8d8 3000 	ldr.w	r3, [r8]
 23fd950:	9a02      	ldr	r2, [sp, #8]
 23fd952:	4413      	add	r3, r2
 23fd954:	7c1b      	ldrb	r3, [r3, #16]
 23fd956:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fd958:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fd95a:	e78e      	b.n	23fd87a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd95c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd95e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd960:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd962:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd964:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd966:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fd968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fd96a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd96c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd96e:	60a2      	str	r2, [r4, #8]
 23fd970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fd972:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd974:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd976:	60e2      	str	r2, [r4, #12]
 23fd978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fd97a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd97c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd97e:	6122      	str	r2, [r4, #16]
 23fd980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fd982:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fd984:	9b03      	ldr	r3, [sp, #12]
 23fd986:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fd988:	6162      	str	r2, [r4, #20]
 23fd98a:	7623      	strb	r3, [r4, #24]
 23fd98c:	e7cf      	b.n	23fd92e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fd990 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd990:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd992:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fd994:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd996:	4617      	mov	r7, r2
 23fd998:	b087      	sub	sp, #28
 23fd99a:	460d      	mov	r5, r1
        stream_(&stream) {
 23fd99c:	4668      	mov	r0, sp
 23fd99e:	4619      	mov	r1, r3
 23fd9a0:	f7fc f99f 	bl	23f9ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fd9a4:	4b0b      	ldr	r3, [pc, #44]	; (23fd9d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fd9a6:	4669      	mov	r1, sp
 23fd9a8:	f846 3b04 	str.w	r3, [r6], #4
 23fd9ac:	a803      	add	r0, sp, #12
 23fd9ae:	f7fc f998 	bl	23f9ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fd9b2:	4639      	mov	r1, r7
 23fd9b4:	aa03      	add	r2, sp, #12
 23fd9b6:	4630      	mov	r0, r6
 23fd9b8:	f7ff fef0 	bl	23fd79c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd9bc:	a803      	add	r0, sp, #12
 23fd9be:	f7fc f94f 	bl	23f9c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd9c2:	4668      	mov	r0, sp
 23fd9c4:	f7fc f94c 	bl	23f9c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd9c8:	4620      	mov	r0, r4
        stream_(&stream) {
 23fd9ca:	4b03      	ldr	r3, [pc, #12]	; (23fd9d8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fd9cc:	6225      	str	r5, [r4, #32]
 23fd9ce:	6023      	str	r3, [r4, #0]
}
 23fd9d0:	b007      	add	sp, #28
 23fd9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd9d4:	023fedc0 	.word	0x023fedc0
 23fd9d8:	023ffd04 	.word	0x023ffd04

023fd9dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fd9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd9de:	460f      	mov	r7, r1
 23fd9e0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd9e2:	4638      	mov	r0, r7
 23fd9e4:	491c      	ldr	r1, [pc, #112]	; (23fda58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fd9e6:	4616      	mov	r6, r2
 23fd9e8:	461d      	mov	r5, r3
 23fd9ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd9ec:	f7fb fec4 	bl	23f9778 <strcmp>
 23fd9f0:	b9c0      	cbnz	r0, 23fda24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fd9f2:	b1a4      	cbz	r4, 23fda1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fd9f4:	4629      	mov	r1, r5
 23fd9f6:	a801      	add	r0, sp, #4
 23fd9f8:	f7ff fcbe 	bl	23fd378 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd9fc:	2024      	movs	r0, #36	; 0x24
 23fd9fe:	4917      	ldr	r1, [pc, #92]	; (23fda5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fda00:	f000 ffc0 	bl	23fe984 <_ZnwjRKSt9nothrow_t>
 23fda04:	4605      	mov	r5, r0
 23fda06:	b130      	cbz	r0, 23fda16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fda08:	ab01      	add	r3, sp, #4
 23fda0a:	4632      	mov	r2, r6
 23fda0c:	4621      	mov	r1, r4
 23fda0e:	f7ff ffbf 	bl	23fd990 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fda12:	4b13      	ldr	r3, [pc, #76]	; (23fda60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fda14:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fda16:	a801      	add	r0, sp, #4
 23fda18:	f7fc f922 	bl	23f9c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fda1c:	462c      	mov	r4, r5
}
 23fda1e:	4620      	mov	r0, r4
 23fda20:	b005      	add	sp, #20
 23fda22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fda24:	4638      	mov	r0, r7
 23fda26:	490f      	ldr	r1, [pc, #60]	; (23fda64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fda28:	f7fb fea6 	bl	23f9778 <strcmp>
 23fda2c:	b990      	cbnz	r0, 23fda54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fda2e:	2c00      	cmp	r4, #0
 23fda30:	d0f5      	beq.n	23fda1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fda32:	4629      	mov	r1, r5
 23fda34:	a801      	add	r0, sp, #4
 23fda36:	f7ff fc9f 	bl	23fd378 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fda3a:	2024      	movs	r0, #36	; 0x24
 23fda3c:	4907      	ldr	r1, [pc, #28]	; (23fda5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fda3e:	f000 ffa1 	bl	23fe984 <_ZnwjRKSt9nothrow_t>
 23fda42:	4605      	mov	r5, r0
 23fda44:	2800      	cmp	r0, #0
 23fda46:	d0e6      	beq.n	23fda16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fda48:	4632      	mov	r2, r6
 23fda4a:	4621      	mov	r1, r4
 23fda4c:	ab01      	add	r3, sp, #4
 23fda4e:	f7ff ff9f 	bl	23fd990 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fda52:	e7e0      	b.n	23fda16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fda54:	2400      	movs	r4, #0
 23fda56:	e7e2      	b.n	23fda1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fda58:	023ffc84 	.word	0x023ffc84
 23fda5c:	023ffe58 	.word	0x023ffe58
 23fda60:	023ffd1c 	.word	0x023ffd1c
 23fda64:	023ffc88 	.word	0x023ffc88

023fda68 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fda68:	4b01      	ldr	r3, [pc, #4]	; (23fda70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fda6a:	4a02      	ldr	r2, [pc, #8]	; (23fda74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fda6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fda6e:	4770      	bx	lr
 23fda70:	1007ae70 	.word	0x1007ae70
 23fda74:	023ffc99 	.word	0x023ffc99

023fda78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fda78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fda7c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fda7e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fda82:	4604      	mov	r4, r0
 23fda84:	460e      	mov	r6, r1
 23fda86:	4617      	mov	r7, r2
 23fda88:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fda8a:	f000 fcf7 	bl	23fe47c <_Z16_fetch_usbserialv>
 23fda8e:	4581      	cmp	r9, r0
 23fda90:	d04d      	beq.n	23fdb2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fda92:	792b      	ldrb	r3, [r5, #4]
 23fda94:	0719      	lsls	r1, r3, #28
 23fda96:	d504      	bpl.n	23fdaa2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fda98:	4620      	mov	r0, r4
 23fda9a:	696a      	ldr	r2, [r5, #20]
 23fda9c:	4954      	ldr	r1, [pc, #336]	; (23fdbf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fda9e:	f7ff fae2 	bl	23fd066 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fdaa2:	f1b8 0f00 	cmp.w	r8, #0
 23fdaa6:	d00d      	beq.n	23fdac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fdaa8:	215b      	movs	r1, #91	; 0x5b
 23fdaaa:	4620      	mov	r0, r4
 23fdaac:	f7ff fa56 	bl	23fcf5c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fdab0:	4641      	mov	r1, r8
 23fdab2:	4620      	mov	r0, r4
 23fdab4:	f7ff fa43 	bl	23fcf3e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fdab8:	6823      	ldr	r3, [r4, #0]
 23fdaba:	2202      	movs	r2, #2
 23fdabc:	4620      	mov	r0, r4
 23fdabe:	68db      	ldr	r3, [r3, #12]
 23fdac0:	494c      	ldr	r1, [pc, #304]	; (23fdbf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fdac2:	4798      	blx	r3
    if (attr.has_file) {
 23fdac4:	792b      	ldrb	r3, [r5, #4]
 23fdac6:	07da      	lsls	r2, r3, #31
 23fdac8:	d524      	bpl.n	23fdb14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fdaca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fdace:	212f      	movs	r1, #47	; 0x2f
 23fdad0:	4640      	mov	r0, r8
 23fdad2:	f001 f81c 	bl	23feb0e <strrchr>
    if (s1) {
 23fdad6:	b108      	cbz	r0, 23fdadc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fdad8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fdadc:	4641      	mov	r1, r8
 23fdade:	4620      	mov	r0, r4
 23fdae0:	f7ff fa2d 	bl	23fcf3e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fdae4:	792b      	ldrb	r3, [r5, #4]
 23fdae6:	079b      	lsls	r3, r3, #30
 23fdae8:	d508      	bpl.n	23fdafc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fdaea:	213a      	movs	r1, #58	; 0x3a
 23fdaec:	4620      	mov	r0, r4
 23fdaee:	f7ff fa35 	bl	23fcf5c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fdaf2:	4620      	mov	r0, r4
 23fdaf4:	68ea      	ldr	r2, [r5, #12]
 23fdaf6:	4940      	ldr	r1, [pc, #256]	; (23fdbf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fdaf8:	f7ff fab5 	bl	23fd066 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fdafc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fdafe:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fdb00:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fdb04:	4620      	mov	r0, r4
            write(", ", 2);
 23fdb06:	f04f 0202 	mov.w	r2, #2
 23fdb0a:	68db      	ldr	r3, [r3, #12]
 23fdb0c:	bf14      	ite	ne
 23fdb0e:	493b      	ldrne	r1, [pc, #236]	; (23fdbfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fdb10:	493b      	ldreq	r1, [pc, #236]	; (23fdc00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdb12:	4798      	blx	r3
    if (attr.has_function) {
 23fdb14:	792b      	ldrb	r3, [r5, #4]
 23fdb16:	0758      	lsls	r0, r3, #29
 23fdb18:	d51d      	bpl.n	23fdb56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fdb1a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fdb1c:	460b      	mov	r3, r1
 23fdb1e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fdb20:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fdb24:	b160      	cbz	r0, 23fdb40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fdb26:	2820      	cmp	r0, #32
 23fdb28:	d108      	bne.n	23fdb3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fdb2a:	4619      	mov	r1, r3
 23fdb2c:	e7f7      	b.n	23fdb1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fdb2e:	4835      	ldr	r0, [pc, #212]	; (23fdc04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fdb30:	f000 f983 	bl	23fde3a <_ZN5spark12NetworkClass9listeningEv>
 23fdb34:	2800      	cmp	r0, #0
 23fdb36:	d0ac      	beq.n	23fda92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fdb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fdb3c:	2828      	cmp	r0, #40	; 0x28
 23fdb3e:	d1ee      	bne.n	23fdb1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fdb40:	6823      	ldr	r3, [r4, #0]
 23fdb42:	1a52      	subs	r2, r2, r1
 23fdb44:	4620      	mov	r0, r4
 23fdb46:	68db      	ldr	r3, [r3, #12]
 23fdb48:	4798      	blx	r3
        write("(): ", 4);
 23fdb4a:	6823      	ldr	r3, [r4, #0]
 23fdb4c:	2204      	movs	r2, #4
 23fdb4e:	4620      	mov	r0, r4
 23fdb50:	68db      	ldr	r3, [r3, #12]
 23fdb52:	492d      	ldr	r1, [pc, #180]	; (23fdc08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fdb54:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fdb56:	2100      	movs	r1, #0
 23fdb58:	4638      	mov	r0, r7
 23fdb5a:	f7fe f935 	bl	23fbdc8 <log_level_name>
 23fdb5e:	4601      	mov	r1, r0
    write(s);
 23fdb60:	4620      	mov	r0, r4
 23fdb62:	f7ff f9ec 	bl	23fcf3e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fdb66:	6823      	ldr	r3, [r4, #0]
 23fdb68:	2202      	movs	r2, #2
 23fdb6a:	4620      	mov	r0, r4
 23fdb6c:	68db      	ldr	r3, [r3, #12]
 23fdb6e:	4924      	ldr	r1, [pc, #144]	; (23fdc00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdb70:	4798      	blx	r3
    if (msg) {
 23fdb72:	b11e      	cbz	r6, 23fdb7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fdb74:	4631      	mov	r1, r6
 23fdb76:	4620      	mov	r0, r4
 23fdb78:	f7ff f9e1 	bl	23fcf3e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fdb7c:	792b      	ldrb	r3, [r5, #4]
 23fdb7e:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fdb82:	d02c      	beq.n	23fdbde <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fdb84:	6823      	ldr	r3, [r4, #0]
 23fdb86:	4921      	ldr	r1, [pc, #132]	; (23fdc0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fdb88:	68db      	ldr	r3, [r3, #12]
 23fdb8a:	2202      	movs	r2, #2
 23fdb8c:	4620      	mov	r0, r4
 23fdb8e:	4798      	blx	r3
        if (attr.has_code) {
 23fdb90:	792b      	ldrb	r3, [r5, #4]
 23fdb92:	06d9      	lsls	r1, r3, #27
 23fdb94:	d50a      	bpl.n	23fdbac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fdb96:	6823      	ldr	r3, [r4, #0]
 23fdb98:	2207      	movs	r2, #7
 23fdb9a:	4620      	mov	r0, r4
 23fdb9c:	491c      	ldr	r1, [pc, #112]	; (23fdc10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fdb9e:	68db      	ldr	r3, [r3, #12]
 23fdba0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fdba2:	4620      	mov	r0, r4
 23fdba4:	69aa      	ldr	r2, [r5, #24]
 23fdba6:	491b      	ldr	r1, [pc, #108]	; (23fdc14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fdba8:	f7ff fa5d 	bl	23fd066 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fdbac:	792b      	ldrb	r3, [r5, #4]
 23fdbae:	069a      	lsls	r2, r3, #26
 23fdbb0:	d511      	bpl.n	23fdbd6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fdbb2:	06db      	lsls	r3, r3, #27
 23fdbb4:	d505      	bpl.n	23fdbc2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fdbb6:	6823      	ldr	r3, [r4, #0]
 23fdbb8:	2202      	movs	r2, #2
 23fdbba:	4620      	mov	r0, r4
 23fdbbc:	68db      	ldr	r3, [r3, #12]
 23fdbbe:	490f      	ldr	r1, [pc, #60]	; (23fdbfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fdbc0:	4798      	blx	r3
            write("details = ", 10);
 23fdbc2:	6823      	ldr	r3, [r4, #0]
 23fdbc4:	4620      	mov	r0, r4
 23fdbc6:	4914      	ldr	r1, [pc, #80]	; (23fdc18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fdbc8:	220a      	movs	r2, #10
 23fdbca:	68db      	ldr	r3, [r3, #12]
 23fdbcc:	4798      	blx	r3
            write(attr.details);
 23fdbce:	4620      	mov	r0, r4
 23fdbd0:	69e9      	ldr	r1, [r5, #28]
 23fdbd2:	f7ff f9b4 	bl	23fcf3e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fdbd6:	215d      	movs	r1, #93	; 0x5d
 23fdbd8:	4620      	mov	r0, r4
 23fdbda:	f7ff f9bf 	bl	23fcf5c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fdbde:	6823      	ldr	r3, [r4, #0]
 23fdbe0:	4620      	mov	r0, r4
}
 23fdbe2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fdbe6:	2202      	movs	r2, #2
 23fdbe8:	68db      	ldr	r3, [r3, #12]
 23fdbea:	490c      	ldr	r1, [pc, #48]	; (23fdc1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fdbec:	4718      	bx	r3
 23fdbee:	bf00      	nop
 23fdbf0:	023ffc9d 	.word	0x023ffc9d
 23fdbf4:	023ffca4 	.word	0x023ffca4
 23fdbf8:	023fed5b 	.word	0x023fed5b
 23fdbfc:	023ffca7 	.word	0x023ffca7
 23fdc00:	023ffcac 	.word	0x023ffcac
 23fdc04:	1007ae9c 	.word	0x1007ae9c
 23fdc08:	023ffcaa 	.word	0x023ffcaa
 23fdc0c:	023ffcaf 	.word	0x023ffcaf
 23fdc10:	023ffcb2 	.word	0x023ffcb2
 23fdc14:	023ffcba 	.word	0x023ffcba
 23fdc18:	023ffcbd 	.word	0x023ffcbd
 23fdc1c:	023ffcc8 	.word	0x023ffcc8

023fdc20 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fdc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdc24:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fdc26:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fdc28:	460d      	mov	r5, r1
 23fdc2a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fdc2c:	f000 fc26 	bl	23fe47c <_Z16_fetch_usbserialv>
 23fdc30:	4287      	cmp	r7, r0
 23fdc32:	d007      	beq.n	23fdc44 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fdc34:	6a20      	ldr	r0, [r4, #32]
 23fdc36:	4632      	mov	r2, r6
 23fdc38:	6803      	ldr	r3, [r0, #0]
 23fdc3a:	4629      	mov	r1, r5
}
 23fdc3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fdc40:	68db      	ldr	r3, [r3, #12]
 23fdc42:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fdc44:	4803      	ldr	r0, [pc, #12]	; (23fdc54 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fdc46:	f000 f8f8 	bl	23fde3a <_ZN5spark12NetworkClass9listeningEv>
 23fdc4a:	2800      	cmp	r0, #0
 23fdc4c:	d0f2      	beq.n	23fdc34 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fdc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fdc52:	bf00      	nop
 23fdc54:	1007ae9c 	.word	0x1007ae9c

023fdc58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdc58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdc5c:	b085      	sub	sp, #20
    return stream_;
 23fdc5e:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fdc62:	4605      	mov	r5, r0
 23fdc64:	460f      	mov	r7, r1
 23fdc66:	4690      	mov	r8, r2
 23fdc68:	461e      	mov	r6, r3
 23fdc6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fdc6c:	f000 fc06 	bl	23fe47c <_Z16_fetch_usbserialv>
 23fdc70:	4581      	cmp	r9, r0
 23fdc72:	d105      	bne.n	23fdc80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fdc74:	4849      	ldr	r0, [pc, #292]	; (23fdd9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fdc76:	f000 f8e0 	bl	23fde3a <_ZN5spark12NetworkClass9listeningEv>
 23fdc7a:	2800      	cmp	r0, #0
 23fdc7c:	f040 808a 	bne.w	23fdd94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fdc80:	f04f 0900 	mov.w	r9, #0
 23fdc84:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fdc86:	4a46      	ldr	r2, [pc, #280]	; (23fdda0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fdc88:	a801      	add	r0, sp, #4
 23fdc8a:	9201      	str	r2, [sp, #4]
 23fdc8c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fdc8e:	f88d 9008 	strb.w	r9, [sp, #8]
 23fdc92:	f7ff f831 	bl	23fccf8 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fdc96:	4649      	mov	r1, r9
 23fdc98:	4640      	mov	r0, r8
 23fdc9a:	f7fe f895 	bl	23fbdc8 <log_level_name>
 23fdc9e:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fdca0:	4940      	ldr	r1, [pc, #256]	; (23fdda4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fdca2:	2201      	movs	r2, #1
 23fdca4:	a801      	add	r0, sp, #4
 23fdca6:	f7ff f8b5 	bl	23fce14 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdcaa:	4641      	mov	r1, r8
 23fdcac:	f7ff f939 	bl	23fcf22 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fdcb0:	b13f      	cbz	r7, 23fdcc2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fdcb2:	493d      	ldr	r1, [pc, #244]	; (23fdda8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fdcb4:	2201      	movs	r2, #1
 23fdcb6:	a801      	add	r0, sp, #4
 23fdcb8:	f7ff f8ac 	bl	23fce14 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdcbc:	4639      	mov	r1, r7
 23fdcbe:	f7ff f930 	bl	23fcf22 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fdcc2:	b13e      	cbz	r6, 23fdcd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fdcc4:	4939      	ldr	r1, [pc, #228]	; (23fddac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fdcc6:	2201      	movs	r2, #1
 23fdcc8:	a801      	add	r0, sp, #4
 23fdcca:	f7ff f8a3 	bl	23fce14 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdcce:	4631      	mov	r1, r6
 23fdcd0:	f7ff f927 	bl	23fcf22 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fdcd4:	7923      	ldrb	r3, [r4, #4]
 23fdcd6:	07df      	lsls	r7, r3, #31
 23fdcd8:	d50e      	bpl.n	23fdcf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fdcda:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fdcdc:	212f      	movs	r1, #47	; 0x2f
 23fdcde:	4630      	mov	r0, r6
 23fdce0:	f000 ff15 	bl	23feb0e <strrchr>
    if (s1) {
 23fdce4:	b100      	cbz	r0, 23fdce8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fdce6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fdce8:	4931      	ldr	r1, [pc, #196]	; (23fddb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fdcea:	2201      	movs	r2, #1
 23fdcec:	a801      	add	r0, sp, #4
 23fdcee:	f7ff f891 	bl	23fce14 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdcf2:	4631      	mov	r1, r6
 23fdcf4:	f7ff f915 	bl	23fcf22 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fdcf8:	7923      	ldrb	r3, [r4, #4]
 23fdcfa:	079e      	lsls	r6, r3, #30
 23fdcfc:	d507      	bpl.n	23fdd0e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fdcfe:	492d      	ldr	r1, [pc, #180]	; (23fddb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fdd00:	2202      	movs	r2, #2
 23fdd02:	a801      	add	r0, sp, #4
 23fdd04:	f7ff f886 	bl	23fce14 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdd08:	68e1      	ldr	r1, [r4, #12]
 23fdd0a:	f7ff f801 	bl	23fcd10 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fdd0e:	7923      	ldrb	r3, [r4, #4]
 23fdd10:	0758      	lsls	r0, r3, #29
 23fdd12:	d514      	bpl.n	23fdd3e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fdd14:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fdd16:	4633      	mov	r3, r6
 23fdd18:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fdd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fdd1e:	b12a      	cbz	r2, 23fdd2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fdd20:	2a20      	cmp	r2, #32
 23fdd22:	d101      	bne.n	23fdd28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fdd24:	461e      	mov	r6, r3
 23fdd26:	e7f7      	b.n	23fdd18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fdd28:	2a28      	cmp	r2, #40	; 0x28
 23fdd2a:	d1f5      	bne.n	23fdd18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fdd2c:	2202      	movs	r2, #2
 23fdd2e:	4922      	ldr	r1, [pc, #136]	; (23fddb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fdd30:	a801      	add	r0, sp, #4
 23fdd32:	f7ff f86f 	bl	23fce14 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdd36:	4631      	mov	r1, r6
 23fdd38:	1bba      	subs	r2, r7, r6
 23fdd3a:	f7ff f87b 	bl	23fce34 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fdd3e:	7923      	ldrb	r3, [r4, #4]
 23fdd40:	0719      	lsls	r1, r3, #28
 23fdd42:	d507      	bpl.n	23fdd54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fdd44:	491d      	ldr	r1, [pc, #116]	; (23fddbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fdd46:	2201      	movs	r2, #1
 23fdd48:	a801      	add	r0, sp, #4
 23fdd4a:	f7ff f863 	bl	23fce14 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdd4e:	6961      	ldr	r1, [r4, #20]
 23fdd50:	f7fe fff0 	bl	23fcd34 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fdd54:	7923      	ldrb	r3, [r4, #4]
 23fdd56:	06da      	lsls	r2, r3, #27
 23fdd58:	d508      	bpl.n	23fdd6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fdd5a:	2204      	movs	r2, #4
 23fdd5c:	4918      	ldr	r1, [pc, #96]	; (23fddc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fdd5e:	eb0d 0002 	add.w	r0, sp, r2
 23fdd62:	f7ff f857 	bl	23fce14 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdd66:	69a1      	ldr	r1, [r4, #24]
 23fdd68:	f7fe ffd2 	bl	23fcd10 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fdd6c:	7923      	ldrb	r3, [r4, #4]
 23fdd6e:	069b      	lsls	r3, r3, #26
 23fdd70:	d507      	bpl.n	23fdd82 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fdd72:	4914      	ldr	r1, [pc, #80]	; (23fddc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fdd74:	2206      	movs	r2, #6
 23fdd76:	a801      	add	r0, sp, #4
 23fdd78:	f7ff f84c 	bl	23fce14 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdd7c:	69e1      	ldr	r1, [r4, #28]
 23fdd7e:	f7ff f8d0 	bl	23fcf22 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fdd82:	a801      	add	r0, sp, #4
 23fdd84:	f7fe ff96 	bl	23fccb4 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fdd88:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fdd8a:	2202      	movs	r2, #2
 23fdd8c:	6803      	ldr	r3, [r0, #0]
 23fdd8e:	490e      	ldr	r1, [pc, #56]	; (23fddc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fdd90:	68db      	ldr	r3, [r3, #12]
 23fdd92:	4798      	blx	r3
}
 23fdd94:	b005      	add	sp, #20
 23fdd96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fdd9a:	bf00      	nop
 23fdd9c:	1007ae9c 	.word	0x1007ae9c
 23fdda0:	023ffcec 	.word	0x023ffcec
 23fdda4:	023ffc7a 	.word	0x023ffc7a
 23fdda8:	023ffccb 	.word	0x023ffccb
 23fddac:	023ffec7 	.word	0x023ffec7
 23fddb0:	023ffccd 	.word	0x023ffccd
 23fddb4:	023ffccf 	.word	0x023ffccf
 23fddb8:	023ffcd2 	.word	0x023ffcd2
 23fddbc:	023fed85 	.word	0x023fed85
 23fddc0:	023ffcd5 	.word	0x023ffcd5
 23fddc4:	023ffcda 	.word	0x023ffcda
 23fddc8:	023ffcc8 	.word	0x023ffcc8

023fddcc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fddcc:	2300      	movs	r3, #0
 23fddce:	6840      	ldr	r0, [r0, #4]
 23fddd0:	461a      	mov	r2, r3
 23fddd2:	f7fe b8bd 	b.w	23fbf50 <network_connect>

023fddd6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fddd6:	2200      	movs	r2, #0
 23fddd8:	2102      	movs	r1, #2
 23fddda:	6840      	ldr	r0, [r0, #4]
 23fdddc:	f7fe b8d4 	b.w	23fbf88 <network_disconnect>

023fdde0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fdde0:	2200      	movs	r2, #0
 23fdde2:	6840      	ldr	r0, [r0, #4]
 23fdde4:	4611      	mov	r1, r2
 23fdde6:	f7fe b8c1 	b.w	23fbf6c <network_connecting>

023fddea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fddea:	2200      	movs	r2, #0
 23fddec:	6840      	ldr	r0, [r0, #4]
 23fddee:	4611      	mov	r1, r2
 23fddf0:	f7fe b8d8 	b.w	23fbfa4 <network_ready>

023fddf4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fddf4:	2300      	movs	r3, #0
 23fddf6:	6840      	ldr	r0, [r0, #4]
 23fddf8:	461a      	mov	r2, r3
 23fddfa:	4619      	mov	r1, r3
 23fddfc:	f7fe b8e0 	b.w	23fbfc0 <network_on>

023fde00 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fde00:	2300      	movs	r3, #0
 23fde02:	6840      	ldr	r0, [r0, #4]
 23fde04:	461a      	mov	r2, r3
 23fde06:	4619      	mov	r1, r3
 23fde08:	f7fe b8e8 	b.w	23fbfdc <network_off>

023fde0c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fde0c:	2100      	movs	r1, #0
 23fde0e:	6840      	ldr	r0, [r0, #4]
 23fde10:	f7fe b92a 	b.w	23fc068 <network_is_on>

023fde14 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fde14:	2100      	movs	r1, #0
 23fde16:	6840      	ldr	r0, [r0, #4]
 23fde18:	f7fe b934 	b.w	23fc084 <network_is_off>

023fde1c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fde1c:	2200      	movs	r2, #0
 23fde1e:	6840      	ldr	r0, [r0, #4]
 23fde20:	f081 0101 	eor.w	r1, r1, #1
 23fde24:	f7fe b8e8 	b.w	23fbff8 <network_listen>

023fde28 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fde28:	2200      	movs	r2, #0
 23fde2a:	6840      	ldr	r0, [r0, #4]
 23fde2c:	f7fe b900 	b.w	23fc030 <network_set_listen_timeout>

023fde30 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fde30:	2200      	movs	r2, #0
 23fde32:	6840      	ldr	r0, [r0, #4]
 23fde34:	4611      	mov	r1, r2
 23fde36:	f7fe b909 	b.w	23fc04c <network_get_listen_timeout>

023fde3a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fde3a:	2200      	movs	r2, #0
 23fde3c:	6840      	ldr	r0, [r0, #4]
 23fde3e:	4611      	mov	r1, r2
 23fde40:	f7fe b8e8 	b.w	23fc014 <network_listening>

023fde44 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fde44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fde48:	b095      	sub	sp, #84	; 0x54
 23fde4a:	4614      	mov	r4, r2
 23fde4c:	460d      	mov	r5, r1
 23fde4e:	4607      	mov	r7, r0
    IPAddress addr;
 23fde50:	f7fe fda0 	bl	23fc994 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fde54:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fde56:	221c      	movs	r2, #28
 23fde58:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fde5a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fde5c:	f000 fdcf 	bl	23fe9fe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fde60:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fde62:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fde64:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fde66:	2100      	movs	r1, #0
 23fde68:	466b      	mov	r3, sp
 23fde6a:	aa0c      	add	r2, sp, #48	; 0x30
 23fde6c:	f7fd fe08 	bl	23fba80 <netdb_getaddrinfo>
    if (!r) {
 23fde70:	4604      	mov	r4, r0
 23fde72:	2800      	cmp	r0, #0
 23fde74:	d14b      	bne.n	23fdf0e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fde76:	4602      	mov	r2, r0
 23fde78:	2101      	movs	r1, #1
 23fde7a:	6868      	ldr	r0, [r5, #4]
 23fde7c:	f7fe f892 	bl	23fbfa4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fde80:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fde82:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fde84:	4622      	mov	r2, r4
 23fde86:	6868      	ldr	r0, [r5, #4]
 23fde88:	f7fe f88c 	bl	23fbfa4 <network_ready>
        bool ok = false;
 23fde8c:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fde8e:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fde90:	9e00      	ldr	r6, [sp, #0]
 23fde92:	2e00      	cmp	r6, #0
 23fde94:	d03b      	beq.n	23fdf0e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fde96:	2900      	cmp	r1, #0
 23fde98:	d139      	bne.n	23fdf0e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fde9a:	6873      	ldr	r3, [r6, #4]
 23fde9c:	2b02      	cmp	r3, #2
 23fde9e:	d003      	beq.n	23fdea8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fdea0:	2b0a      	cmp	r3, #10
 23fdea2:	d011      	beq.n	23fdec8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fdea4:	69f6      	ldr	r6, [r6, #28]
 23fdea6:	e7f4      	b.n	23fde92 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fdea8:	f1b8 0f00 	cmp.w	r8, #0
 23fdeac:	d0fa      	beq.n	23fdea4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fdeae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fdeb0:	a806      	add	r0, sp, #24
 23fdeb2:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fdeb4:	1d3c      	adds	r4, r7, #4
 23fdeb6:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fdeb8:	f7fe fd9a 	bl	23fc9f0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fdebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fdebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fdec0:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fdec2:	4641      	mov	r1, r8
 23fdec4:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fdec6:	e7ed      	b.n	23fdea4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fdec8:	f1b9 0f00 	cmp.w	r9, #0
 23fdecc:	d0ea      	beq.n	23fdea4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fdece:	2210      	movs	r2, #16
 23fded0:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fded2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fded4:	f000 fd93 	bl	23fe9fe <memset>
                    a.v = 6;
 23fded8:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdeda:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fdedc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdee0:	f104 0308 	add.w	r3, r4, #8
 23fdee4:	3418      	adds	r4, #24
 23fdee6:	462a      	mov	r2, r5
 23fdee8:	6818      	ldr	r0, [r3, #0]
 23fdeea:	6859      	ldr	r1, [r3, #4]
 23fdeec:	3308      	adds	r3, #8
 23fdeee:	c203      	stmia	r2!, {r0, r1}
 23fdef0:	42a3      	cmp	r3, r4
 23fdef2:	4615      	mov	r5, r2
 23fdef4:	d1f7      	bne.n	23fdee6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fdef6:	a901      	add	r1, sp, #4
 23fdef8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fdefa:	1d3c      	adds	r4, r7, #4
 23fdefc:	ad07      	add	r5, sp, #28
 23fdefe:	f7fe fd57 	bl	23fc9b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fdf02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fdf04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fdf06:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fdf08:	4649      	mov	r1, r9
 23fdf0a:	7023      	strb	r3, [r4, #0]
                    break;
 23fdf0c:	e7ca      	b.n	23fdea4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fdf0e:	9800      	ldr	r0, [sp, #0]
 23fdf10:	f7fd fda8 	bl	23fba64 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fdf14:	4638      	mov	r0, r7
 23fdf16:	b015      	add	sp, #84	; 0x54
 23fdf18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fdf1c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fdf1c:	4b02      	ldr	r3, [pc, #8]	; (23fdf28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fdf1e:	4a03      	ldr	r2, [pc, #12]	; (23fdf2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fdf20:	601a      	str	r2, [r3, #0]
 23fdf22:	2200      	movs	r2, #0
 23fdf24:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fdf26:	4770      	bx	lr
 23fdf28:	1007ae9c 	.word	0x1007ae9c
 23fdf2c:	023ffd64 	.word	0x023ffd64

023fdf30 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fdf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdf32:	4606      	mov	r6, r0
 23fdf34:	460d      	mov	r5, r1
  size_t n = 0;
 23fdf36:	2400      	movs	r4, #0
 23fdf38:	188f      	adds	r7, r1, r2
  while (size--) {
 23fdf3a:	42bd      	cmp	r5, r7
 23fdf3c:	d00c      	beq.n	23fdf58 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fdf3e:	6833      	ldr	r3, [r6, #0]
 23fdf40:	4630      	mov	r0, r6
 23fdf42:	689b      	ldr	r3, [r3, #8]
 23fdf44:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fdf48:	4798      	blx	r3
     if (chunk>=0)
 23fdf4a:	1e03      	subs	r3, r0, #0
 23fdf4c:	db01      	blt.n	23fdf52 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fdf4e:	441c      	add	r4, r3
  while (size--) {
 23fdf50:	e7f3      	b.n	23fdf3a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fdf52:	2c00      	cmp	r4, #0
 23fdf54:	bf08      	it	eq
 23fdf56:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fdf58:	4620      	mov	r0, r4
 23fdf5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdf5c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fdf5c:	b513      	push	{r0, r1, r4, lr}
 23fdf5e:	4604      	mov	r4, r0
    }
 23fdf60:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fdf62:	b159      	cbz	r1, 23fdf7c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fdf64:	9101      	str	r1, [sp, #4]
 23fdf66:	f7fb fc11 	bl	23f978c <strlen>
 23fdf6a:	4602      	mov	r2, r0
 23fdf6c:	4620      	mov	r0, r4
 23fdf6e:	6823      	ldr	r3, [r4, #0]
 23fdf70:	9901      	ldr	r1, [sp, #4]
 23fdf72:	68db      	ldr	r3, [r3, #12]
    }
 23fdf74:	b002      	add	sp, #8
 23fdf76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fdf7a:	4718      	bx	r3
    }
 23fdf7c:	b002      	add	sp, #8
 23fdf7e:	bd10      	pop	{r4, pc}

023fdf80 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fdf80:	6803      	ldr	r3, [r0, #0]
 23fdf82:	689b      	ldr	r3, [r3, #8]
 23fdf84:	4718      	bx	r3

023fdf86 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fdf86:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fdf88:	210d      	movs	r1, #13
{
 23fdf8a:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fdf8c:	f7ff fff8 	bl	23fdf80 <_ZN5Print5printEc>
  n += print('\n');
 23fdf90:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fdf92:	4604      	mov	r4, r0
  n += print('\n');
 23fdf94:	4628      	mov	r0, r5
 23fdf96:	f7ff fff3 	bl	23fdf80 <_ZN5Print5printEc>
  return n;
}
 23fdf9a:	4420      	add	r0, r4
 23fdf9c:	bd38      	pop	{r3, r4, r5, pc}

023fdf9e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fdf9e:	b538      	push	{r3, r4, r5, lr}
 23fdfa0:	4605      	mov	r5, r0
  return write(str);
 23fdfa2:	f7ff ffdb 	bl	23fdf5c <_ZN5Print5writeEPKc>
 23fdfa6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fdfa8:	4628      	mov	r0, r5
 23fdfaa:	f7ff ffec 	bl	23fdf86 <_ZN5Print7printlnEv>
  return n;
}
 23fdfae:	4420      	add	r0, r4
 23fdfb0:	bd38      	pop	{r3, r4, r5, pc}

023fdfb2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fdfb2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fdfb4:	2a01      	cmp	r2, #1
 23fdfb6:	bf98      	it	ls
 23fdfb8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fdfba:	b530      	push	{r4, r5, lr}
 23fdfbc:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fdfbe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fdfc2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fdfc4:	460d      	mov	r5, r1
 23fdfc6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fdfca:	fb01 5312 	mls	r3, r1, r2, r5
 23fdfce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fdfd2:	2b09      	cmp	r3, #9
 23fdfd4:	bf94      	ite	ls
 23fdfd6:	3330      	addls	r3, #48	; 0x30
 23fdfd8:	3337      	addhi	r3, #55	; 0x37
 23fdfda:	b2db      	uxtb	r3, r3
  } while(n);
 23fdfdc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fdfde:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fdfe2:	d9ef      	bls.n	23fdfc4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fdfe4:	4621      	mov	r1, r4
 23fdfe6:	f7ff ffb9 	bl	23fdf5c <_ZN5Print5writeEPKc>
}
 23fdfea:	b00b      	add	sp, #44	; 0x2c
 23fdfec:	bd30      	pop	{r4, r5, pc}
	...

023fdff0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fdff0:	2200      	movs	r2, #0
 23fdff2:	4b01      	ldr	r3, [pc, #4]	; (23fdff8 <_GLOBAL__sub_I_RGB+0x8>)
 23fdff4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fdff6:	4770      	bx	lr
 23fdff8:	1007aea4 	.word	0x1007aea4

023fdffc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fdffc:	2100      	movs	r1, #0
 23fdffe:	f7fd bdbd 	b.w	23fbb7c <hal_spi_release>

023fe002 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fe002:	2100      	movs	r1, #0
 23fe004:	f7fd bdac 	b.w	23fbb60 <hal_spi_acquire>

023fe008 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe008:	b510      	push	{r4, lr}
 23fe00a:	4604      	mov	r4, r0
 23fe00c:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe00e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe010:	f7fd fd52 	bl	23fbab8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe014:	2300      	movs	r3, #0
}
 23fe016:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe018:	6063      	str	r3, [r4, #4]
}
 23fe01a:	bd10      	pop	{r4, pc}

023fe01c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fe01c:	b513      	push	{r0, r1, r4, lr}
 23fe01e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fe020:	7800      	ldrb	r0, [r0, #0]
 23fe022:	f7ff ffee 	bl	23fe002 <_ZN8SPIClass4lockEv.isra.0>
 23fe026:	b958      	cbnz	r0, 23fe040 <_ZN8SPIClass5beginEv+0x24>
 23fe028:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fe02a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fe02e:	9001      	str	r0, [sp, #4]
 23fe030:	f7fd fd34 	bl	23fba9c <hal_spi_begin>
        unlock();
 23fe034:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe036:	b002      	add	sp, #8
 23fe038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe03c:	f7ff bfde 	b.w	23fdffc <_ZN8SPIClass6unlockEv.isra.0>
 23fe040:	b002      	add	sp, #8
 23fe042:	bd10      	pop	{r4, pc}

023fe044 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fe044:	7800      	ldrb	r0, [r0, #0]
 23fe046:	f7ff bfd9 	b.w	23fdffc <_ZN8SPIClass6unlockEv.isra.0>
	...

023fe04c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fe04c:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fe04e:	2400      	movs	r4, #0
 23fe050:	0840      	lsrs	r0, r0, #1
 23fe052:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe054:	6818      	ldr	r0, [r3, #0]
 23fe056:	b2e5      	uxtb	r5, r4
 23fe058:	4288      	cmp	r0, r1
 23fe05a:	d906      	bls.n	23fe06a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fe05c:	3401      	adds	r4, #1
 23fe05e:	2c08      	cmp	r4, #8
 23fe060:	d002      	beq.n	23fe068 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fe062:	0840      	lsrs	r0, r0, #1
 23fe064:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe066:	e7f5      	b.n	23fe054 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fe068:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fe06a:	4b02      	ldr	r3, [pc, #8]	; (23fe074 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fe06c:	5d5b      	ldrb	r3, [r3, r5]
 23fe06e:	7013      	strb	r3, [r2, #0]
}
 23fe070:	bd30      	pop	{r4, r5, pc}
 23fe072:	bf00      	nop
 23fe074:	023ffd98 	.word	0x023ffd98

023fe078 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fe078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe07c:	4606      	mov	r6, r0
 23fe07e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fe080:	7800      	ldrb	r0, [r0, #0]
{
 23fe082:	460c      	mov	r4, r1
    CHECK(lock());
 23fe084:	f7ff ffbd 	bl	23fe002 <_ZN8SPIClass4lockEv.isra.0>
 23fe088:	2800      	cmp	r0, #0
 23fe08a:	db1b      	blt.n	23fe0c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe08c:	2214      	movs	r2, #20
 23fe08e:	2100      	movs	r1, #0
 23fe090:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fe092:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe094:	f000 fcb3 	bl	23fe9fe <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe098:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fe09a:	2200      	movs	r2, #0
 23fe09c:	4628      	mov	r0, r5
 23fe09e:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe0a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fe0a4:	f7fd fd24 	bl	23fbaf0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fe0a8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fe0ac:	b113      	cbz	r3, 23fe0b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fe0ae:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fe0b2:	b155      	cbz	r5, 23fe0ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fe0b4:	2700      	movs	r7, #0
 23fe0b6:	2501      	movs	r5, #1
 23fe0b8:	46b9      	mov	r9, r7
 23fe0ba:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fe0bc:	7923      	ldrb	r3, [r4, #4]
 23fe0be:	b15d      	cbz	r5, 23fe0d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fe0c0:	b1c3      	cbz	r3, 23fe0f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fe0c2:	2000      	movs	r0, #0
}
 23fe0c4:	b00f      	add	sp, #60	; 0x3c
 23fe0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fe0ca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fe0ce:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fe0d2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fe0d6:	e7f1      	b.n	23fe0bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fe0d8:	2b00      	cmp	r3, #0
 23fe0da:	d135      	bne.n	23fe148 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fe0dc:	68a3      	ldr	r3, [r4, #8]
 23fe0de:	4543      	cmp	r3, r8
 23fe0e0:	d108      	bne.n	23fe0f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fe0e2:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe0e6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe0ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe0ee:	89a3      	ldrh	r3, [r4, #12]
 23fe0f0:	429a      	cmp	r2, r3
 23fe0f2:	d0e6      	beq.n	23fe0c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fe0f4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe0f6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fe0f8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe0fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fe0fe:	ab04      	add	r3, sp, #16
 23fe100:	f10d 020f 	add.w	r2, sp, #15
 23fe104:	f7ff ffa2 	bl	23fe04c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fe108:	7921      	ldrb	r1, [r4, #4]
 23fe10a:	b985      	cbnz	r5, 23fe12e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fe10c:	b989      	cbnz	r1, 23fe132 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe10e:	68a3      	ldr	r3, [r4, #8]
 23fe110:	4543      	cmp	r3, r8
 23fe112:	d30e      	bcc.n	23fe132 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fe114:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe118:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe11c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe120:	89a3      	ldrh	r3, [r4, #12]
 23fe122:	429a      	cmp	r2, r3
 23fe124:	d105      	bne.n	23fe132 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fe126:	9b04      	ldr	r3, [sp, #16]
 23fe128:	4543      	cmp	r3, r8
 23fe12a:	d102      	bne.n	23fe132 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe12c:	e7c9      	b.n	23fe0c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fe12e:	2900      	cmp	r1, #0
 23fe130:	d1f9      	bne.n	23fe126 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fe132:	2300      	movs	r3, #0
 23fe134:	9301      	str	r3, [sp, #4]
 23fe136:	7b63      	ldrb	r3, [r4, #13]
 23fe138:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fe13c:	9300      	str	r3, [sp, #0]
 23fe13e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fe140:	7830      	ldrb	r0, [r6, #0]
 23fe142:	f7fd fcff 	bl	23fbb44 <hal_spi_set_settings>
 23fe146:	e7bc      	b.n	23fe0c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fe148:	462b      	mov	r3, r5
 23fe14a:	462a      	mov	r2, r5
 23fe14c:	2101      	movs	r1, #1
 23fe14e:	e9cd 5500 	strd	r5, r5, [sp]
 23fe152:	e7f5      	b.n	23fe140 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fe154 <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23fe154:	b530      	push	{r4, r5, lr}
 23fe156:	b087      	sub	sp, #28
 23fe158:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fe15a:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23fe15c:	9500      	str	r5, [sp, #0]
 23fe15e:	7800      	ldrb	r0, [r0, #0]
 23fe160:	f7fd fcd4 	bl	23fbb0c <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23fe164:	b93d      	cbnz	r5, 23fe176 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23fe166:	7820      	ldrb	r0, [r4, #0]
 23fe168:	a902      	add	r1, sp, #8
 23fe16a:	f7fd fcdd 	bl	23fbb28 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23fe16e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23fe172:	07db      	lsls	r3, r3, #31
 23fe174:	d4f7      	bmi.n	23fe166 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23fe176:	b007      	add	sp, #28
 23fe178:	bd30      	pop	{r4, r5, pc}

023fe17a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fe17a:	b510      	push	{r4, lr}
 23fe17c:	4604      	mov	r4, r0
{
	free(buffer);
 23fe17e:	6800      	ldr	r0, [r0, #0]
 23fe180:	f7fd ff9c 	bl	23fc0bc <free>
}
 23fe184:	4620      	mov	r0, r4
 23fe186:	bd10      	pop	{r4, pc}

023fe188 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fe188:	b510      	push	{r4, lr}
 23fe18a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fe18c:	6800      	ldr	r0, [r0, #0]
 23fe18e:	b108      	cbz	r0, 23fe194 <_ZN6String10invalidateEv+0xc>
 23fe190:	f7fd ff94 	bl	23fc0bc <free>
	buffer = NULL;
 23fe194:	2300      	movs	r3, #0
	capacity = len = 0;
 23fe196:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fe19a:	6023      	str	r3, [r4, #0]
}
 23fe19c:	bd10      	pop	{r4, pc}

023fe19e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe19e:	b538      	push	{r3, r4, r5, lr}
 23fe1a0:	4604      	mov	r4, r0
 23fe1a2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe1a4:	6800      	ldr	r0, [r0, #0]
 23fe1a6:	3101      	adds	r1, #1
 23fe1a8:	f7fd ff96 	bl	23fc0d8 <realloc>
	if (newbuffer) {
 23fe1ac:	b110      	cbz	r0, 23fe1b4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fe1ae:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fe1b2:	2001      	movs	r0, #1
	}
	return 0;
}
 23fe1b4:	bd38      	pop	{r3, r4, r5, pc}

023fe1b6 <_ZN6String7reserveEj>:
{
 23fe1b6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fe1b8:	6803      	ldr	r3, [r0, #0]
{
 23fe1ba:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fe1bc:	b123      	cbz	r3, 23fe1c8 <_ZN6String7reserveEj+0x12>
 23fe1be:	6843      	ldr	r3, [r0, #4]
 23fe1c0:	428b      	cmp	r3, r1
 23fe1c2:	d301      	bcc.n	23fe1c8 <_ZN6String7reserveEj+0x12>
 23fe1c4:	2001      	movs	r0, #1
}
 23fe1c6:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fe1c8:	4620      	mov	r0, r4
 23fe1ca:	f7ff ffe8 	bl	23fe19e <_ZN6String12changeBufferEj>
 23fe1ce:	2800      	cmp	r0, #0
 23fe1d0:	d0f9      	beq.n	23fe1c6 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fe1d2:	68a3      	ldr	r3, [r4, #8]
 23fe1d4:	2b00      	cmp	r3, #0
 23fe1d6:	d1f5      	bne.n	23fe1c4 <_ZN6String7reserveEj+0xe>
 23fe1d8:	6822      	ldr	r2, [r4, #0]
 23fe1da:	7013      	strb	r3, [r2, #0]
 23fe1dc:	e7f2      	b.n	23fe1c4 <_ZN6String7reserveEj+0xe>

023fe1de <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe1de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe1e0:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fe1e2:	4611      	mov	r1, r2
 23fe1e4:	9201      	str	r2, [sp, #4]
{
 23fe1e6:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fe1e8:	f7ff ffe5 	bl	23fe1b6 <_ZN6String7reserveEj>
 23fe1ec:	9a01      	ldr	r2, [sp, #4]
 23fe1ee:	b928      	cbnz	r0, 23fe1fc <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fe1f0:	4620      	mov	r0, r4
 23fe1f2:	f7ff ffc9 	bl	23fe188 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fe1f6:	4620      	mov	r0, r4
 23fe1f8:	b003      	add	sp, #12
 23fe1fa:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fe1fc:	4629      	mov	r1, r5
	len = length;
 23fe1fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fe200:	6820      	ldr	r0, [r4, #0]
 23fe202:	f000 fbd5 	bl	23fe9b0 <memcpy>
	buffer[len] = 0;
 23fe206:	2100      	movs	r1, #0
 23fe208:	6822      	ldr	r2, [r4, #0]
 23fe20a:	68a3      	ldr	r3, [r4, #8]
 23fe20c:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fe20e:	e7f2      	b.n	23fe1f6 <_ZN6String4copyEPKcj+0x18>

023fe210 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fe210:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fe212:	b513      	push	{r0, r1, r4, lr}
 23fe214:	4604      	mov	r4, r0
	capacity = 0;
 23fe216:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe21a:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe21c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fe21e:	b141      	cbz	r1, 23fe232 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fe220:	4608      	mov	r0, r1
 23fe222:	9101      	str	r1, [sp, #4]
 23fe224:	f7fb fab2 	bl	23f978c <strlen>
 23fe228:	9901      	ldr	r1, [sp, #4]
 23fe22a:	4602      	mov	r2, r0
 23fe22c:	4620      	mov	r0, r4
 23fe22e:	f7ff ffd6 	bl	23fe1de <_ZN6String4copyEPKcj>
}
 23fe232:	4620      	mov	r0, r4
 23fe234:	b002      	add	sp, #8
 23fe236:	bd10      	pop	{r4, pc}

023fe238 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fe238:	b538      	push	{r3, r4, r5, lr}
 23fe23a:	4605      	mov	r5, r0
	if (buffer) {
 23fe23c:	6800      	ldr	r0, [r0, #0]
{
 23fe23e:	460c      	mov	r4, r1
	if (buffer) {
 23fe240:	b170      	cbz	r0, 23fe260 <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fe242:	686a      	ldr	r2, [r5, #4]
 23fe244:	688b      	ldr	r3, [r1, #8]
 23fe246:	429a      	cmp	r2, r3
 23fe248:	d308      	bcc.n	23fe25c <_ZN6String4moveERS_+0x24>
 23fe24a:	6809      	ldr	r1, [r1, #0]
 23fe24c:	b131      	cbz	r1, 23fe25c <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fe24e:	f000 fc24 	bl	23fea9a <strcpy>
			len = rhs.len;
 23fe252:	68a3      	ldr	r3, [r4, #8]
 23fe254:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fe256:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fe258:	60a3      	str	r3, [r4, #8]
}
 23fe25a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fe25c:	f7fd ff2e 	bl	23fc0bc <free>
	buffer = rhs.buffer;
 23fe260:	6823      	ldr	r3, [r4, #0]
 23fe262:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fe264:	6863      	ldr	r3, [r4, #4]
 23fe266:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fe268:	68a3      	ldr	r3, [r4, #8]
 23fe26a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fe26c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fe26e:	e9c4 3300 	strd	r3, r3, [r4]
 23fe272:	e7f1      	b.n	23fe258 <_ZN6String4moveERS_+0x20>

023fe274 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fe274:	2300      	movs	r3, #0
String::String(String &&rval)
 23fe276:	b510      	push	{r4, lr}
 23fe278:	4604      	mov	r4, r0
	capacity = 0;
 23fe27a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe27e:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe280:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fe282:	f7ff ffd9 	bl	23fe238 <_ZN6String4moveERS_>
}
 23fe286:	4620      	mov	r0, r4
 23fe288:	bd10      	pop	{r4, pc}

023fe28a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fe28a:	4288      	cmp	r0, r1
{
 23fe28c:	b510      	push	{r4, lr}
 23fe28e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fe290:	d005      	beq.n	23fe29e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fe292:	680b      	ldr	r3, [r1, #0]
 23fe294:	b12b      	cbz	r3, 23fe2a2 <_ZN6StringaSERKS_+0x18>
 23fe296:	688a      	ldr	r2, [r1, #8]
 23fe298:	4619      	mov	r1, r3
 23fe29a:	f7ff ffa0 	bl	23fe1de <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fe29e:	4620      	mov	r0, r4
 23fe2a0:	bd10      	pop	{r4, pc}
	else invalidate();
 23fe2a2:	f7ff ff71 	bl	23fe188 <_ZN6String10invalidateEv>
 23fe2a6:	e7fa      	b.n	23fe29e <_ZN6StringaSERKS_+0x14>

023fe2a8 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fe2a8:	2300      	movs	r3, #0
String::String(const String &value)
 23fe2aa:	b510      	push	{r4, lr}
 23fe2ac:	4604      	mov	r4, r0
	capacity = 0;
 23fe2ae:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe2b2:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe2b4:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fe2b6:	f7ff ffe8 	bl	23fe28a <_ZN6StringaSERKS_>
}
 23fe2ba:	4620      	mov	r0, r4
 23fe2bc:	bd10      	pop	{r4, pc}
	...

023fe2c0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fe2c0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe2c2:	2000      	movs	r0, #0
 23fe2c4:	4b04      	ldr	r3, [pc, #16]	; (23fe2d8 <_GLOBAL__sub_I_System+0x18>)
 23fe2c6:	601a      	str	r2, [r3, #0]
 23fe2c8:	4b04      	ldr	r3, [pc, #16]	; (23fe2dc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fe2ca:	4a05      	ldr	r2, [pc, #20]	; (23fe2e0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fe2cc:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fe2d0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe2d2:	f7fd bd95 	b.w	23fbe00 <set_system_mode>
 23fe2d6:	bf00      	nop
 23fe2d8:	1007aec0 	.word	0x1007aec0
 23fe2dc:	1007aeb4 	.word	0x1007aeb4
 23fe2e0:	ffff0000 	.word	0xffff0000

023fe2e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fe2e4:	4b02      	ldr	r3, [pc, #8]	; (23fe2f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fe2e6:	681a      	ldr	r2, [r3, #0]
 23fe2e8:	4b02      	ldr	r3, [pc, #8]	; (23fe2f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fe2ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fe2ec:	4770      	bx	lr
 23fe2ee:	bf00      	nop
 23fe2f0:	1007a5fc 	.word	0x1007a5fc
 23fe2f4:	1007aec4 	.word	0x1007aec4

023fe2f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe2f8:	4770      	bx	lr

023fe2fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe2fa:	7441      	strb	r1, [r0, #17]
}
 23fe2fc:	4770      	bx	lr

023fe2fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe2fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe300:	7c00      	ldrb	r0, [r0, #16]
 23fe302:	f7fd fcab 	bl	23fbc5c <hal_usart_available_data_for_write>
}
 23fe306:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe30a:	bd08      	pop	{r3, pc}

023fe30c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe30c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe30e:	7c00      	ldrb	r0, [r0, #16]
 23fe310:	f7fd fc5e 	bl	23fbbd0 <hal_usart_available>
}
 23fe314:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe318:	bd08      	pop	{r3, pc}

023fe31a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe31a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe31c:	7c00      	ldrb	r0, [r0, #16]
 23fe31e:	f7fd fc73 	bl	23fbc08 <hal_usart_peek>
}
 23fe322:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe326:	bd08      	pop	{r3, pc}

023fe328 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe328:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe32a:	7c00      	ldrb	r0, [r0, #16]
 23fe32c:	f7fd fc5e 	bl	23fbbec <hal_usart_read>
}
 23fe330:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe334:	bd08      	pop	{r3, pc}

023fe336 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe336:	7c00      	ldrb	r0, [r0, #16]
 23fe338:	f7fd bc74 	b.w	23fbc24 <hal_usart_flush>

023fe33c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe33c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe33e:	7c45      	ldrb	r5, [r0, #17]
{
 23fe340:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe342:	b12d      	cbz	r5, 23fe350 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe344:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe346:	b003      	add	sp, #12
 23fe348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe34c:	f7fd bc32 	b.w	23fbbb4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe350:	7c00      	ldrb	r0, [r0, #16]
 23fe352:	9101      	str	r1, [sp, #4]
 23fe354:	f7fd fc82 	bl	23fbc5c <hal_usart_available_data_for_write>
 23fe358:	2800      	cmp	r0, #0
 23fe35a:	9901      	ldr	r1, [sp, #4]
 23fe35c:	dcf2      	bgt.n	23fe344 <_ZN11USARTSerial5writeEh+0x8>
}
 23fe35e:	4628      	mov	r0, r5
 23fe360:	b003      	add	sp, #12
 23fe362:	bd30      	pop	{r4, r5, pc}

023fe364 <_ZN11USARTSerialD0Ev>:
 23fe364:	b510      	push	{r4, lr}
 23fe366:	4604      	mov	r4, r0
 23fe368:	2114      	movs	r1, #20
 23fe36a:	f7fb fa38 	bl	23f97de <_ZdlPvj>
 23fe36e:	4620      	mov	r0, r4
 23fe370:	bd10      	pop	{r4, pc}
	...

023fe374 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe374:	b510      	push	{r4, lr}
 23fe376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe37a:	4604      	mov	r4, r0
 23fe37c:	4608      	mov	r0, r1
 23fe37e:	4611      	mov	r1, r2
 23fe380:	2200      	movs	r2, #0
 23fe382:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe386:	4b04      	ldr	r3, [pc, #16]	; (23fe398 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe388:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe38a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe38c:	2301      	movs	r3, #1
 23fe38e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe390:	f7fd fc80 	bl	23fbc94 <hal_usart_init_ex>
}
 23fe394:	4620      	mov	r0, r4
 23fe396:	bd10      	pop	{r4, pc}
 23fe398:	023ffdc4 	.word	0x023ffdc4

023fe39c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fe39c:	2300      	movs	r3, #0
 23fe39e:	7c00      	ldrb	r0, [r0, #16]
 23fe3a0:	f7fd bc6a 	b.w	23fbc78 <hal_usart_begin_config>

023fe3a4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fe3a4:	2200      	movs	r2, #0
 23fe3a6:	f7ff bff9 	b.w	23fe39c <_ZN11USARTSerial5beginEmm>

023fe3aa <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fe3aa:	7c00      	ldrb	r0, [r0, #16]
 23fe3ac:	f7fd bbf4 	b.w	23fbb98 <hal_usart_end>

023fe3b0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe3b0:	7c00      	ldrb	r0, [r0, #16]
 23fe3b2:	f7fd bc45 	b.w	23fbc40 <hal_usart_is_enabled>

023fe3b6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe3b6:	7441      	strb	r1, [r0, #17]
}
 23fe3b8:	4770      	bx	lr

023fe3ba <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe3ba:	4770      	bx	lr

023fe3bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fe3bc:	4770      	bx	lr

023fe3be <_ZN9USBSerial4readEv>:
{
 23fe3be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fe3c0:	2100      	movs	r1, #0
 23fe3c2:	7c00      	ldrb	r0, [r0, #16]
 23fe3c4:	f7fd fcba 	bl	23fbd3c <HAL_USB_USART_Receive_Data>
}
 23fe3c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe3cc:	bd08      	pop	{r3, pc}

023fe3ce <_ZN9USBSerial4peekEv>:
{
 23fe3ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fe3d0:	2101      	movs	r1, #1
 23fe3d2:	7c00      	ldrb	r0, [r0, #16]
 23fe3d4:	f7fd fcb2 	bl	23fbd3c <HAL_USB_USART_Receive_Data>
}
 23fe3d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe3dc:	bd08      	pop	{r3, pc}

023fe3de <_ZN9USBSerial17availableForWriteEv>:
{
 23fe3de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fe3e0:	7c00      	ldrb	r0, [r0, #16]
 23fe3e2:	f7fd fc9d 	bl	23fbd20 <HAL_USB_USART_Available_Data_For_Write>
}
 23fe3e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe3ea:	bd08      	pop	{r3, pc}

023fe3ec <_ZN9USBSerial9availableEv>:
{
 23fe3ec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fe3ee:	7c00      	ldrb	r0, [r0, #16]
 23fe3f0:	f7fd fc88 	bl	23fbd04 <HAL_USB_USART_Available_Data>
}
 23fe3f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe3f8:	bd08      	pop	{r3, pc}

023fe3fa <_ZN9USBSerial5writeEh>:
{
 23fe3fa:	b513      	push	{r0, r1, r4, lr}
 23fe3fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe3fe:	7c00      	ldrb	r0, [r0, #16]
{
 23fe400:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe402:	f7fd fc8d 	bl	23fbd20 <HAL_USB_USART_Available_Data_For_Write>
 23fe406:	2800      	cmp	r0, #0
 23fe408:	9901      	ldr	r1, [sp, #4]
 23fe40a:	dc01      	bgt.n	23fe410 <_ZN9USBSerial5writeEh+0x16>
 23fe40c:	7c60      	ldrb	r0, [r4, #17]
 23fe40e:	b120      	cbz	r0, 23fe41a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fe410:	7c20      	ldrb	r0, [r4, #16]
 23fe412:	f7fd fca1 	bl	23fbd58 <HAL_USB_USART_Send_Data>
 23fe416:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fe41a:	b002      	add	sp, #8
 23fe41c:	bd10      	pop	{r4, pc}

023fe41e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fe41e:	7c00      	ldrb	r0, [r0, #16]
 23fe420:	f7fd bca8 	b.w	23fbd74 <HAL_USB_USART_Flush_Data>

023fe424 <_ZN9USBSerialD0Ev>:
 23fe424:	b510      	push	{r4, lr}
 23fe426:	4604      	mov	r4, r0
 23fe428:	2114      	movs	r1, #20
 23fe42a:	f7fb f9d8 	bl	23f97de <_ZdlPvj>
 23fe42e:	4620      	mov	r0, r4
 23fe430:	bd10      	pop	{r4, pc}
	...

023fe434 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe434:	b510      	push	{r4, lr}
 23fe436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe43a:	4604      	mov	r4, r0
 23fe43c:	4608      	mov	r0, r1
 23fe43e:	2100      	movs	r1, #0
 23fe440:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fe444:	4b04      	ldr	r3, [pc, #16]	; (23fe458 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fe446:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe448:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe44a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fe44c:	4611      	mov	r1, r2
  _blocking = true;
 23fe44e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fe450:	f7fd fc2e 	bl	23fbcb0 <HAL_USB_USART_Init>
}
 23fe454:	4620      	mov	r0, r4
 23fe456:	bd10      	pop	{r4, pc}
 23fe458:	023ffdf4 	.word	0x023ffdf4

023fe45c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fe45c:	2200      	movs	r2, #0
 23fe45e:	7c00      	ldrb	r0, [r0, #16]
 23fe460:	f7fd bc34 	b.w	23fbccc <HAL_USB_USART_Begin>

023fe464 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fe464:	7c00      	ldrb	r0, [r0, #16]
 23fe466:	f7fd bc3f 	b.w	23fbce8 <HAL_USB_USART_End>

023fe46a <_Z19acquireSerialBufferv>:
{
 23fe46a:	b510      	push	{r4, lr}
 23fe46c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fe46e:	2214      	movs	r2, #20
 23fe470:	2100      	movs	r1, #0
 23fe472:	f000 fac4 	bl	23fe9fe <memset>
}
 23fe476:	4620      	mov	r0, r4
 23fe478:	bd10      	pop	{r4, pc}
	...

023fe47c <_Z16_fetch_usbserialv>:
{
 23fe47c:	b510      	push	{r4, lr}
 23fe47e:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fe480:	a803      	add	r0, sp, #12
 23fe482:	f7ff fff2 	bl	23fe46a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe486:	4c0c      	ldr	r4, [pc, #48]	; (23fe4b8 <_Z16_fetch_usbserialv+0x3c>)
 23fe488:	e8d4 1f8f 	ldab	r1, [r4]
 23fe48c:	f011 0101 	ands.w	r1, r1, #1
 23fe490:	d10f      	bne.n	23fe4b2 <_Z16_fetch_usbserialv+0x36>
 23fe492:	4620      	mov	r0, r4
 23fe494:	9101      	str	r1, [sp, #4]
 23fe496:	f7fb f9b1 	bl	23f97fc <__cxa_guard_acquire>
 23fe49a:	9901      	ldr	r1, [sp, #4]
 23fe49c:	b148      	cbz	r0, 23fe4b2 <_Z16_fetch_usbserialv+0x36>
 23fe49e:	aa03      	add	r2, sp, #12
 23fe4a0:	4806      	ldr	r0, [pc, #24]	; (23fe4bc <_Z16_fetch_usbserialv+0x40>)
 23fe4a2:	f7ff ffc7 	bl	23fe434 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fe4a6:	4620      	mov	r0, r4
 23fe4a8:	f7fb f9ad 	bl	23f9806 <__cxa_guard_release>
 23fe4ac:	4804      	ldr	r0, [pc, #16]	; (23fe4c0 <_Z16_fetch_usbserialv+0x44>)
 23fe4ae:	f000 fa70 	bl	23fe992 <atexit>
	return _usbserial;
}
 23fe4b2:	4802      	ldr	r0, [pc, #8]	; (23fe4bc <_Z16_fetch_usbserialv+0x40>)
 23fe4b4:	b008      	add	sp, #32
 23fe4b6:	bd10      	pop	{r4, pc}
 23fe4b8:	1007aec8 	.word	0x1007aec8
 23fe4bc:	1007aecc 	.word	0x1007aecc
 23fe4c0:	023fe3bb 	.word	0x023fe3bb

023fe4c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fe4c4:	2200      	movs	r2, #0
 23fe4c6:	6840      	ldr	r0, [r0, #4]
 23fe4c8:	4611      	mov	r1, r2
 23fe4ca:	f7fd bd6b 	b.w	23fbfa4 <network_ready>

023fe4ce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe4ce:	2200      	movs	r2, #0
 23fe4d0:	6840      	ldr	r0, [r0, #4]
 23fe4d2:	4611      	mov	r1, r2
 23fe4d4:	f7fd bd9e 	b.w	23fc014 <network_listening>

023fe4d8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe4d8:	2200      	movs	r2, #0
 23fe4da:	6840      	ldr	r0, [r0, #4]
 23fe4dc:	4611      	mov	r1, r2
 23fe4de:	f7fd bdb5 	b.w	23fc04c <network_get_listen_timeout>

023fe4e2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe4e2:	2200      	movs	r2, #0
 23fe4e4:	6840      	ldr	r0, [r0, #4]
 23fe4e6:	f7fd bda3 	b.w	23fc030 <network_set_listen_timeout>

023fe4ea <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe4ea:	2200      	movs	r2, #0
 23fe4ec:	6840      	ldr	r0, [r0, #4]
 23fe4ee:	f081 0101 	eor.w	r1, r1, #1
 23fe4f2:	f7fd bd81 	b.w	23fbff8 <network_listen>

023fe4f6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe4f6:	2300      	movs	r3, #0
 23fe4f8:	6840      	ldr	r0, [r0, #4]
 23fe4fa:	461a      	mov	r2, r3
 23fe4fc:	4619      	mov	r1, r3
 23fe4fe:	f7fd bd6d 	b.w	23fbfdc <network_off>

023fe502 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe502:	2300      	movs	r3, #0
 23fe504:	6840      	ldr	r0, [r0, #4]
 23fe506:	461a      	mov	r2, r3
 23fe508:	4619      	mov	r1, r3
 23fe50a:	f7fd bd59 	b.w	23fbfc0 <network_on>

023fe50e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe50e:	2200      	movs	r2, #0
 23fe510:	6840      	ldr	r0, [r0, #4]
 23fe512:	4611      	mov	r1, r2
 23fe514:	f7fd bd2a 	b.w	23fbf6c <network_connecting>

023fe518 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe518:	2200      	movs	r2, #0
 23fe51a:	2102      	movs	r1, #2
 23fe51c:	6840      	ldr	r0, [r0, #4]
 23fe51e:	f7fd bd33 	b.w	23fbf88 <network_disconnect>

023fe522 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe522:	2300      	movs	r3, #0
 23fe524:	6840      	ldr	r0, [r0, #4]
 23fe526:	461a      	mov	r2, r3
 23fe528:	f7fd bd12 	b.w	23fbf50 <network_connect>

023fe52c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fe52c:	2204      	movs	r2, #4
 23fe52e:	4b02      	ldr	r3, [pc, #8]	; (23fe538 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fe530:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fe532:	4a02      	ldr	r2, [pc, #8]	; (23fe53c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fe534:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fe536:	4770      	bx	lr
 23fe538:	1007aee0 	.word	0x1007aee0
 23fe53c:	023ffe24 	.word	0x023ffe24

023fe540 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fe540:	4b01      	ldr	r3, [pc, #4]	; (23fe548 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fe542:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fe544:	4770      	bx	lr
 23fe546:	bf00      	nop
 23fe548:	1007a600 	.word	0x1007a600

023fe54c <serialEventRun>:
{
 23fe54c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fe54e:	4b0f      	ldr	r3, [pc, #60]	; (23fe58c <serialEventRun+0x40>)
 23fe550:	b143      	cbz	r3, 23fe564 <serialEventRun+0x18>
 23fe552:	f7ff ff93 	bl	23fe47c <_Z16_fetch_usbserialv>
 23fe556:	6803      	ldr	r3, [r0, #0]
 23fe558:	691b      	ldr	r3, [r3, #16]
 23fe55a:	4798      	blx	r3
 23fe55c:	2800      	cmp	r0, #0
 23fe55e:	dd01      	ble.n	23fe564 <serialEventRun+0x18>
        serialEvent();
 23fe560:	e000      	b.n	23fe564 <serialEventRun+0x18>
 23fe562:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fe564:	4b0a      	ldr	r3, [pc, #40]	; (23fe590 <serialEventRun+0x44>)
 23fe566:	b143      	cbz	r3, 23fe57a <serialEventRun+0x2e>
 23fe568:	f000 f97c 	bl	23fe864 <_Z22__fetch_global_Serial1v>
 23fe56c:	6803      	ldr	r3, [r0, #0]
 23fe56e:	691b      	ldr	r3, [r3, #16]
 23fe570:	4798      	blx	r3
 23fe572:	2800      	cmp	r0, #0
 23fe574:	dd01      	ble.n	23fe57a <serialEventRun+0x2e>
        serialEvent1();
 23fe576:	e000      	b.n	23fe57a <serialEventRun+0x2e>
 23fe578:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fe57a:	4b06      	ldr	r3, [pc, #24]	; (23fe594 <serialEventRun+0x48>)
 23fe57c:	b10b      	cbz	r3, 23fe582 <serialEventRun+0x36>
 23fe57e:	f000 f9b7 	bl	23fe8f0 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fe582:	4b05      	ldr	r3, [pc, #20]	; (23fe598 <serialEventRun+0x4c>)
 23fe584:	b10b      	cbz	r3, 23fe58a <serialEventRun+0x3e>
 23fe586:	f000 f9e9 	bl	23fe95c <_Z15serialEventRun3v>
}
 23fe58a:	bd08      	pop	{r3, pc}
	...

023fe59c <_post_loop>:
{
 23fe59c:	b508      	push	{r3, lr}
	serialEventRun();
 23fe59e:	f7ff ffd5 	bl	23fe54c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fe5a2:	f7fd f955 	bl	23fb850 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fe5a6:	4b01      	ldr	r3, [pc, #4]	; (23fe5ac <_post_loop+0x10>)
 23fe5a8:	6018      	str	r0, [r3, #0]
}
 23fe5aa:	bd08      	pop	{r3, pc}
 23fe5ac:	1007aef0 	.word	0x1007aef0

023fe5b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe5b0:	4805      	ldr	r0, [pc, #20]	; (23fe5c8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fe5b2:	4a06      	ldr	r2, [pc, #24]	; (23fe5cc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fe5b4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe5b6:	1a12      	subs	r2, r2, r0
 23fe5b8:	4905      	ldr	r1, [pc, #20]	; (23fe5d0 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fe5ba:	f000 f9f9 	bl	23fe9b0 <memcpy>
    __backup_sram_signature = signature;
 23fe5be:	4b05      	ldr	r3, [pc, #20]	; (23fe5d4 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fe5c0:	4a05      	ldr	r2, [pc, #20]	; (23fe5d8 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fe5c2:	601a      	str	r2, [r3, #0]
}
 23fe5c4:	bd08      	pop	{r3, pc}
 23fe5c6:	bf00      	nop
 23fe5c8:	1007b400 	.word	0x1007b400
 23fe5cc:	1007b404 	.word	0x1007b404
 23fe5d0:	085ff9b0 	.word	0x085ff9b0
 23fe5d4:	1007b400 	.word	0x1007b400
 23fe5d8:	9a271c1e 	.word	0x9a271c1e

023fe5dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe5dc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fe5de:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe5e0:	461a      	mov	r2, r3
 23fe5e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe5e6:	9300      	str	r3, [sp, #0]
 23fe5e8:	f7fd fc5e 	bl	23fbea8 <system_ctrl_set_result>
}
 23fe5ec:	b003      	add	sp, #12
 23fe5ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fe5f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fe5f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fe5f6:	8843      	ldrh	r3, [r0, #2]
 23fe5f8:	2b0a      	cmp	r3, #10
 23fe5fa:	d008      	beq.n	23fe60e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fe5fc:	2b50      	cmp	r3, #80	; 0x50
 23fe5fe:	d10b      	bne.n	23fe618 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fe600:	4b09      	ldr	r3, [pc, #36]	; (23fe628 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fe602:	681b      	ldr	r3, [r3, #0]
 23fe604:	b14b      	cbz	r3, 23fe61a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fe606:	b003      	add	sp, #12
 23fe608:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fe60c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fe60e:	f7ff ffe5 	bl	23fe5dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fe612:	b003      	add	sp, #12
 23fe614:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe618:	2300      	movs	r3, #0
 23fe61a:	461a      	mov	r2, r3
 23fe61c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe620:	9300      	str	r3, [sp, #0]
 23fe622:	f7fd fc41 	bl	23fbea8 <system_ctrl_set_result>
}
 23fe626:	e7f4      	b.n	23fe612 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fe628:	1007aeec 	.word	0x1007aeec

023fe62c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe62c:	2100      	movs	r1, #0
{
 23fe62e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe630:	4811      	ldr	r0, [pc, #68]	; (23fe678 <module_user_init_hook+0x4c>)
 23fe632:	f7fd fda5 	bl	23fc180 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fe636:	4b11      	ldr	r3, [pc, #68]	; (23fe67c <module_user_init_hook+0x50>)
 23fe638:	681a      	ldr	r2, [r3, #0]
 23fe63a:	4b11      	ldr	r3, [pc, #68]	; (23fe680 <module_user_init_hook+0x54>)
 23fe63c:	429a      	cmp	r2, r3
 23fe63e:	bf0c      	ite	eq
 23fe640:	2201      	moveq	r2, #1
 23fe642:	2200      	movne	r2, #0
 23fe644:	4b0f      	ldr	r3, [pc, #60]	; (23fe684 <module_user_init_hook+0x58>)
 23fe646:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fe648:	d001      	beq.n	23fe64e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fe64a:	f7ff ffb1 	bl	23fe5b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fe64e:	f7fd f8e3 	bl	23fb818 <HAL_RNG_GetRandomNumber>
 23fe652:	4604      	mov	r4, r0
    srand(seed);
 23fe654:	f000 f9dc 	bl	23fea10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fe658:	4b0b      	ldr	r3, [pc, #44]	; (23fe688 <module_user_init_hook+0x5c>)
 23fe65a:	b113      	cbz	r3, 23fe662 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fe65c:	4620      	mov	r0, r4
 23fe65e:	e000      	b.n	23fe662 <module_user_init_hook+0x36>
 23fe660:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fe662:	2100      	movs	r1, #0
 23fe664:	4808      	ldr	r0, [pc, #32]	; (23fe688 <module_user_init_hook+0x5c>)
 23fe666:	f7fd fc65 	bl	23fbf34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fe66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fe66e:	2100      	movs	r1, #0
 23fe670:	4806      	ldr	r0, [pc, #24]	; (23fe68c <module_user_init_hook+0x60>)
 23fe672:	f7fd bc0b 	b.w	23fbe8c <system_ctrl_set_app_request_handler>
 23fe676:	bf00      	nop
 23fe678:	023fe541 	.word	0x023fe541
 23fe67c:	1007b400 	.word	0x1007b400
 23fe680:	9a271c1e 	.word	0x9a271c1e
 23fe684:	1007aee8 	.word	0x1007aee8
 23fe688:	00000000 	.word	0x00000000
 23fe68c:	023fe5f5 	.word	0x023fe5f5

023fe690 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fe690:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fe692:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe694:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fe696:	d902      	bls.n	23fe69e <pinAvailable+0xe>
    return false;
 23fe698:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fe69a:	b003      	add	sp, #12
 23fe69c:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe69e:	f1a0 030f 	sub.w	r3, r0, #15
 23fe6a2:	2b02      	cmp	r3, #2
 23fe6a4:	d90b      	bls.n	23fe6be <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fe6a6:	2801      	cmp	r0, #1
 23fe6a8:	d821      	bhi.n	23fe6ee <pinAvailable+0x5e>
 23fe6aa:	f000 f887 	bl	23fe7bc <_Z19__fetch_global_Wirev>
 23fe6ae:	2100      	movs	r1, #0
 23fe6b0:	7c00      	ldrb	r0, [r0, #16]
 23fe6b2:	f7fd f99f 	bl	23fb9f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe6b6:	f080 0001 	eor.w	r0, r0, #1
 23fe6ba:	b2c0      	uxtb	r0, r0
 23fe6bc:	e7ed      	b.n	23fe69a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fe6be:	4d11      	ldr	r5, [pc, #68]	; (23fe704 <pinAvailable+0x74>)
 23fe6c0:	e8d5 1f8f 	ldab	r1, [r5]
 23fe6c4:	f011 0101 	ands.w	r1, r1, #1
 23fe6c8:	d10b      	bne.n	23fe6e2 <pinAvailable+0x52>
 23fe6ca:	4628      	mov	r0, r5
 23fe6cc:	9101      	str	r1, [sp, #4]
 23fe6ce:	f7fb f895 	bl	23f97fc <__cxa_guard_acquire>
 23fe6d2:	9901      	ldr	r1, [sp, #4]
 23fe6d4:	b128      	cbz	r0, 23fe6e2 <pinAvailable+0x52>
 23fe6d6:	480c      	ldr	r0, [pc, #48]	; (23fe708 <pinAvailable+0x78>)
 23fe6d8:	f7ff fc96 	bl	23fe008 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe6dc:	4628      	mov	r0, r5
 23fe6de:	f7fb f892 	bl	23f9806 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe6e2:	4b09      	ldr	r3, [pc, #36]	; (23fe708 <pinAvailable+0x78>)
 23fe6e4:	7818      	ldrb	r0, [r3, #0]
 23fe6e6:	f7fd f9f5 	bl	23fbad4 <hal_spi_is_enabled>
 23fe6ea:	2800      	cmp	r0, #0
 23fe6ec:	d1d4      	bne.n	23fe698 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe6ee:	3c08      	subs	r4, #8
 23fe6f0:	2c01      	cmp	r4, #1
 23fe6f2:	d805      	bhi.n	23fe700 <pinAvailable+0x70>
 23fe6f4:	f000 f8b6 	bl	23fe864 <_Z22__fetch_global_Serial1v>
 23fe6f8:	7c00      	ldrb	r0, [r0, #16]
 23fe6fa:	f7fd faa1 	bl	23fbc40 <hal_usart_is_enabled>
 23fe6fe:	e7da      	b.n	23fe6b6 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fe700:	2001      	movs	r0, #1
 23fe702:	e7ca      	b.n	23fe69a <pinAvailable+0xa>
 23fe704:	1007ae4c 	.word	0x1007ae4c
 23fe708:	1007ae50 	.word	0x1007ae50

023fe70c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe70c:	281b      	cmp	r0, #27
{
 23fe70e:	b538      	push	{r3, r4, r5, lr}
 23fe710:	4604      	mov	r4, r0
 23fe712:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe714:	d80a      	bhi.n	23fe72c <pinMode+0x20>
 23fe716:	29ff      	cmp	r1, #255	; 0xff
 23fe718:	d008      	beq.n	23fe72c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fe71a:	f7ff ffb9 	bl	23fe690 <pinAvailable>
 23fe71e:	b128      	cbz	r0, 23fe72c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fe720:	4629      	mov	r1, r5
 23fe722:	4620      	mov	r0, r4
}
 23fe724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fe728:	f7fd b8ae 	b.w	23fb888 <hal_gpio_mode>
}
 23fe72c:	bd38      	pop	{r3, r4, r5, pc}

023fe72e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fe72e:	b538      	push	{r3, r4, r5, lr}
 23fe730:	4604      	mov	r4, r0
 23fe732:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fe734:	f7fd f8b6 	bl	23fb8a4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fe738:	28ff      	cmp	r0, #255	; 0xff
 23fe73a:	d010      	beq.n	23fe75e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fe73c:	2806      	cmp	r0, #6
 23fe73e:	d804      	bhi.n	23fe74a <digitalWrite+0x1c>
 23fe740:	234d      	movs	r3, #77	; 0x4d
 23fe742:	fa23 f000 	lsr.w	r0, r3, r0
 23fe746:	07c3      	lsls	r3, r0, #31
 23fe748:	d409      	bmi.n	23fe75e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fe74a:	4620      	mov	r0, r4
 23fe74c:	f7ff ffa0 	bl	23fe690 <pinAvailable>
 23fe750:	b128      	cbz	r0, 23fe75e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fe752:	4629      	mov	r1, r5
 23fe754:	4620      	mov	r0, r4
}
 23fe756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fe75a:	f7fd b8b1 	b.w	23fb8c0 <hal_gpio_write>
}
 23fe75e:	bd38      	pop	{r3, r4, r5, pc}

023fe760 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23fe760:	b510      	push	{r4, lr}
 23fe762:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23fe764:	f7ff ff94 	bl	23fe690 <pinAvailable>
 23fe768:	b150      	cbz	r0, 23fe780 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23fe76a:	2103      	movs	r1, #3
 23fe76c:	4620      	mov	r0, r4
 23fe76e:	f7fd f87d 	bl	23fb86c <hal_pin_validate_function>
 23fe772:	2803      	cmp	r0, #3
 23fe774:	d104      	bne.n	23fe780 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23fe776:	4620      	mov	r0, r4
}
 23fe778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23fe77c:	f7fd b8ae 	b.w	23fb8dc <hal_adc_read>
}
 23fe780:	2000      	movs	r0, #0
 23fe782:	bd10      	pop	{r4, pc}

023fe784 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe784:	4770      	bx	lr
	...

023fe788 <_Z17acquireWireBufferv>:
{
 23fe788:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fe78a:	4b0a      	ldr	r3, [pc, #40]	; (23fe7b4 <_Z17acquireWireBufferv+0x2c>)
{
 23fe78c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fe78e:	6003      	str	r3, [r0, #0]
 23fe790:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe792:	4909      	ldr	r1, [pc, #36]	; (23fe7b8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fe794:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe796:	2020      	movs	r0, #32
 23fe798:	f000 f8f6 	bl	23fe988 <_ZnajRKSt9nothrow_t>
	};
 23fe79c:	2520      	movs	r5, #32
 23fe79e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe7a0:	4905      	ldr	r1, [pc, #20]	; (23fe7b8 <_Z17acquireWireBufferv+0x30>)
 23fe7a2:	4628      	mov	r0, r5
	};
 23fe7a4:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe7a6:	f000 f8ef 	bl	23fe988 <_ZnajRKSt9nothrow_t>
	};
 23fe7aa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fe7ae:	4620      	mov	r0, r4
 23fe7b0:	bd38      	pop	{r3, r4, r5, pc}
 23fe7b2:	bf00      	nop
 23fe7b4:	00010018 	.word	0x00010018
 23fe7b8:	023ffe58 	.word	0x023ffe58

023fe7bc <_Z19__fetch_global_Wirev>:
{
 23fe7bc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe7be:	4d0e      	ldr	r5, [pc, #56]	; (23fe7f8 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fe7c0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe7c2:	e8d5 1f8f 	ldab	r1, [r5]
 23fe7c6:	f011 0401 	ands.w	r4, r1, #1
 23fe7ca:	d111      	bne.n	23fe7f0 <_Z19__fetch_global_Wirev+0x34>
 23fe7cc:	4628      	mov	r0, r5
 23fe7ce:	f7fb f815 	bl	23f97fc <__cxa_guard_acquire>
 23fe7d2:	b168      	cbz	r0, 23fe7f0 <_Z19__fetch_global_Wirev+0x34>
 23fe7d4:	4668      	mov	r0, sp
 23fe7d6:	f7ff ffd7 	bl	23fe788 <_Z17acquireWireBufferv>
 23fe7da:	466a      	mov	r2, sp
 23fe7dc:	4621      	mov	r1, r4
 23fe7de:	4807      	ldr	r0, [pc, #28]	; (23fe7fc <_Z19__fetch_global_Wirev+0x40>)
 23fe7e0:	f7fe f83c 	bl	23fc85c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fe7e4:	4628      	mov	r0, r5
 23fe7e6:	f7fb f80e 	bl	23f9806 <__cxa_guard_release>
 23fe7ea:	4805      	ldr	r0, [pc, #20]	; (23fe800 <_Z19__fetch_global_Wirev+0x44>)
 23fe7ec:	f000 f8d1 	bl	23fe992 <atexit>
	return wire;
}
 23fe7f0:	4802      	ldr	r0, [pc, #8]	; (23fe7fc <_Z19__fetch_global_Wirev+0x40>)
 23fe7f2:	b007      	add	sp, #28
 23fe7f4:	bd30      	pop	{r4, r5, pc}
 23fe7f6:	bf00      	nop
 23fe7f8:	1007aef4 	.word	0x1007aef4
 23fe7fc:	1007aef8 	.word	0x1007aef8
 23fe800:	023fe785 	.word	0x023fe785

023fe804 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe804:	4770      	bx	lr
	...

023fe808 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe808:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fe80a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe80c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fe80e:	462a      	mov	r2, r5
 23fe810:	2100      	movs	r1, #0
 23fe812:	f000 f8f4 	bl	23fe9fe <memset>
 23fe816:	8025      	strh	r5, [r4, #0]
 23fe818:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe81a:	4907      	ldr	r1, [pc, #28]	; (23fe838 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fe81c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fe81e:	8125      	strh	r5, [r4, #8]
 23fe820:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe822:	f000 f8b1 	bl	23fe988 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe826:	4904      	ldr	r1, [pc, #16]	; (23fe838 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fe828:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe82a:	4628      	mov	r0, r5
 23fe82c:	f000 f8ac 	bl	23fe988 <_ZnajRKSt9nothrow_t>
    };
 23fe830:	60e0      	str	r0, [r4, #12]
}
 23fe832:	4620      	mov	r0, r4
 23fe834:	bd38      	pop	{r3, r4, r5, pc}
 23fe836:	bf00      	nop
 23fe838:	023ffe58 	.word	0x023ffe58

023fe83c <__tcf_2>:
 23fe83c:	4770      	bx	lr

023fe83e <__tcf_1>:
 23fe83e:	4770      	bx	lr

023fe840 <_Z20acquireSerial1Bufferv>:
{
 23fe840:	b510      	push	{r4, lr}
 23fe842:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fe844:	f7ff ffe0 	bl	23fe808 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fe848:	4620      	mov	r0, r4
 23fe84a:	bd10      	pop	{r4, pc}

023fe84c <_Z20acquireSerial2Bufferv>:
 23fe84c:	b510      	push	{r4, lr}
 23fe84e:	4604      	mov	r4, r0
 23fe850:	f7ff ffda 	bl	23fe808 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe854:	4620      	mov	r0, r4
 23fe856:	bd10      	pop	{r4, pc}

023fe858 <_Z20acquireSerial3Bufferv>:
 23fe858:	b510      	push	{r4, lr}
 23fe85a:	4604      	mov	r4, r0
 23fe85c:	f7ff ffd4 	bl	23fe808 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe860:	4620      	mov	r0, r4
 23fe862:	bd10      	pop	{r4, pc}

023fe864 <_Z22__fetch_global_Serial1v>:
{
 23fe864:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe866:	4d0e      	ldr	r5, [pc, #56]	; (23fe8a0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe868:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe86a:	e8d5 1f8f 	ldab	r1, [r5]
 23fe86e:	f011 0401 	ands.w	r4, r1, #1
 23fe872:	d111      	bne.n	23fe898 <_Z22__fetch_global_Serial1v+0x34>
 23fe874:	4628      	mov	r0, r5
 23fe876:	f7fa ffc1 	bl	23f97fc <__cxa_guard_acquire>
 23fe87a:	b168      	cbz	r0, 23fe898 <_Z22__fetch_global_Serial1v+0x34>
 23fe87c:	a801      	add	r0, sp, #4
 23fe87e:	f7ff ffdf 	bl	23fe840 <_Z20acquireSerial1Bufferv>
 23fe882:	4621      	mov	r1, r4
 23fe884:	aa01      	add	r2, sp, #4
 23fe886:	4807      	ldr	r0, [pc, #28]	; (23fe8a4 <_Z22__fetch_global_Serial1v+0x40>)
 23fe888:	f7ff fd74 	bl	23fe374 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe88c:	4628      	mov	r0, r5
 23fe88e:	f7fa ffba 	bl	23f9806 <__cxa_guard_release>
 23fe892:	4805      	ldr	r0, [pc, #20]	; (23fe8a8 <_Z22__fetch_global_Serial1v+0x44>)
 23fe894:	f000 f87d 	bl	23fe992 <atexit>
    return serial1;
}
 23fe898:	4802      	ldr	r0, [pc, #8]	; (23fe8a4 <_Z22__fetch_global_Serial1v+0x40>)
 23fe89a:	b007      	add	sp, #28
 23fe89c:	bd30      	pop	{r4, r5, pc}
 23fe89e:	bf00      	nop
 23fe8a0:	1007af0c 	.word	0x1007af0c
 23fe8a4:	1007af18 	.word	0x1007af18
 23fe8a8:	023fe805 	.word	0x023fe805

023fe8ac <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe8ac:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe8ae:	4c0d      	ldr	r4, [pc, #52]	; (23fe8e4 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe8b0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe8b2:	e8d4 3f8f 	ldab	r3, [r4]
 23fe8b6:	07db      	lsls	r3, r3, #31
 23fe8b8:	d411      	bmi.n	23fe8de <_Z22__fetch_global_Serial2v+0x32>
 23fe8ba:	4620      	mov	r0, r4
 23fe8bc:	f7fa ff9e 	bl	23f97fc <__cxa_guard_acquire>
 23fe8c0:	b168      	cbz	r0, 23fe8de <_Z22__fetch_global_Serial2v+0x32>
 23fe8c2:	a801      	add	r0, sp, #4
 23fe8c4:	f7ff ffc2 	bl	23fe84c <_Z20acquireSerial2Bufferv>
 23fe8c8:	2101      	movs	r1, #1
 23fe8ca:	aa01      	add	r2, sp, #4
 23fe8cc:	4806      	ldr	r0, [pc, #24]	; (23fe8e8 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe8ce:	f7ff fd51 	bl	23fe374 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe8d2:	4620      	mov	r0, r4
 23fe8d4:	f7fa ff97 	bl	23f9806 <__cxa_guard_release>
 23fe8d8:	4804      	ldr	r0, [pc, #16]	; (23fe8ec <_Z22__fetch_global_Serial2v+0x40>)
 23fe8da:	f000 f85a 	bl	23fe992 <atexit>
	return serial2;
}
 23fe8de:	4802      	ldr	r0, [pc, #8]	; (23fe8e8 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe8e0:	b006      	add	sp, #24
 23fe8e2:	bd10      	pop	{r4, pc}
 23fe8e4:	1007af10 	.word	0x1007af10
 23fe8e8:	1007af2c 	.word	0x1007af2c
 23fe8ec:	023fe83f 	.word	0x023fe83f

023fe8f0 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe8f0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe8f2:	f7ff ffdb 	bl	23fe8ac <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe8f6:	4b07      	ldr	r3, [pc, #28]	; (23fe914 <_Z15serialEventRun2v+0x24>)
 23fe8f8:	4604      	mov	r4, r0
 23fe8fa:	b153      	cbz	r3, 23fe912 <_Z15serialEventRun2v+0x22>
 23fe8fc:	f7ff fd58 	bl	23fe3b0 <_ZN11USARTSerial9isEnabledEv>
 23fe900:	b138      	cbz	r0, 23fe912 <_Z15serialEventRun2v+0x22>
 23fe902:	6823      	ldr	r3, [r4, #0]
 23fe904:	4620      	mov	r0, r4
 23fe906:	691b      	ldr	r3, [r3, #16]
 23fe908:	4798      	blx	r3
 23fe90a:	2800      	cmp	r0, #0
 23fe90c:	dd01      	ble.n	23fe912 <_Z15serialEventRun2v+0x22>
        handler();
 23fe90e:	e000      	b.n	23fe912 <_Z15serialEventRun2v+0x22>
 23fe910:	bf00      	nop
}
 23fe912:	bd10      	pop	{r4, pc}
 23fe914:	00000000 	.word	0x00000000

023fe918 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe918:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe91a:	4c0d      	ldr	r4, [pc, #52]	; (23fe950 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe91c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe91e:	e8d4 3f8f 	ldab	r3, [r4]
 23fe922:	07db      	lsls	r3, r3, #31
 23fe924:	d411      	bmi.n	23fe94a <_Z22__fetch_global_Serial3v+0x32>
 23fe926:	4620      	mov	r0, r4
 23fe928:	f7fa ff68 	bl	23f97fc <__cxa_guard_acquire>
 23fe92c:	b168      	cbz	r0, 23fe94a <_Z22__fetch_global_Serial3v+0x32>
 23fe92e:	a801      	add	r0, sp, #4
 23fe930:	f7ff ff92 	bl	23fe858 <_Z20acquireSerial3Bufferv>
 23fe934:	2102      	movs	r1, #2
 23fe936:	aa01      	add	r2, sp, #4
 23fe938:	4806      	ldr	r0, [pc, #24]	; (23fe954 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe93a:	f7ff fd1b 	bl	23fe374 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe93e:	4620      	mov	r0, r4
 23fe940:	f7fa ff61 	bl	23f9806 <__cxa_guard_release>
 23fe944:	4804      	ldr	r0, [pc, #16]	; (23fe958 <_Z22__fetch_global_Serial3v+0x40>)
 23fe946:	f000 f824 	bl	23fe992 <atexit>
	return serial3;
}
 23fe94a:	4802      	ldr	r0, [pc, #8]	; (23fe954 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe94c:	b006      	add	sp, #24
 23fe94e:	bd10      	pop	{r4, pc}
 23fe950:	1007af14 	.word	0x1007af14
 23fe954:	1007af40 	.word	0x1007af40
 23fe958:	023fe83d 	.word	0x023fe83d

023fe95c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe95c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe95e:	f7ff ffdb 	bl	23fe918 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe962:	4b07      	ldr	r3, [pc, #28]	; (23fe980 <_Z15serialEventRun3v+0x24>)
 23fe964:	4604      	mov	r4, r0
 23fe966:	b153      	cbz	r3, 23fe97e <_Z15serialEventRun3v+0x22>
 23fe968:	f7ff fd22 	bl	23fe3b0 <_ZN11USARTSerial9isEnabledEv>
 23fe96c:	b138      	cbz	r0, 23fe97e <_Z15serialEventRun3v+0x22>
 23fe96e:	6823      	ldr	r3, [r4, #0]
 23fe970:	4620      	mov	r0, r4
 23fe972:	691b      	ldr	r3, [r3, #16]
 23fe974:	4798      	blx	r3
 23fe976:	2800      	cmp	r0, #0
 23fe978:	dd01      	ble.n	23fe97e <_Z15serialEventRun3v+0x22>
        handler();
 23fe97a:	e000      	b.n	23fe97e <_Z15serialEventRun3v+0x22>
 23fe97c:	bf00      	nop
}
 23fe97e:	bd10      	pop	{r4, pc}
 23fe980:	00000000 	.word	0x00000000

023fe984 <_ZnwjRKSt9nothrow_t>:
 23fe984:	f7fa bf27 	b.w	23f97d6 <_Znwj>

023fe988 <_ZnajRKSt9nothrow_t>:
 23fe988:	f7fa bf27 	b.w	23f97da <_Znaj>

023fe98c <_ZSt25__throw_bad_function_callv>:
 23fe98c:	b508      	push	{r3, lr}
 23fe98e:	f7fd fbbf 	bl	23fc110 <abort>

023fe992 <atexit>:
 23fe992:	2300      	movs	r3, #0
 23fe994:	4601      	mov	r1, r0
 23fe996:	461a      	mov	r2, r3
 23fe998:	4618      	mov	r0, r3
 23fe99a:	f000 b959 	b.w	23fec50 <__register_exitproc>
	...

023fe9a0 <isprint>:
 23fe9a0:	4b02      	ldr	r3, [pc, #8]	; (23fe9ac <isprint+0xc>)
 23fe9a2:	4418      	add	r0, r3
 23fe9a4:	7840      	ldrb	r0, [r0, #1]
 23fe9a6:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fe9aa:	4770      	bx	lr
 23fe9ac:	023ffec9 	.word	0x023ffec9

023fe9b0 <memcpy>:
 23fe9b0:	440a      	add	r2, r1
 23fe9b2:	1e43      	subs	r3, r0, #1
 23fe9b4:	4291      	cmp	r1, r2
 23fe9b6:	d100      	bne.n	23fe9ba <memcpy+0xa>
 23fe9b8:	4770      	bx	lr
 23fe9ba:	b510      	push	{r4, lr}
 23fe9bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe9c0:	4291      	cmp	r1, r2
 23fe9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fe9c6:	d1f9      	bne.n	23fe9bc <memcpy+0xc>
 23fe9c8:	bd10      	pop	{r4, pc}

023fe9ca <memmove>:
 23fe9ca:	4288      	cmp	r0, r1
 23fe9cc:	b510      	push	{r4, lr}
 23fe9ce:	eb01 0402 	add.w	r4, r1, r2
 23fe9d2:	d902      	bls.n	23fe9da <memmove+0x10>
 23fe9d4:	4284      	cmp	r4, r0
 23fe9d6:	4623      	mov	r3, r4
 23fe9d8:	d807      	bhi.n	23fe9ea <memmove+0x20>
 23fe9da:	1e43      	subs	r3, r0, #1
 23fe9dc:	42a1      	cmp	r1, r4
 23fe9de:	d008      	beq.n	23fe9f2 <memmove+0x28>
 23fe9e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fe9e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fe9e8:	e7f8      	b.n	23fe9dc <memmove+0x12>
 23fe9ea:	4402      	add	r2, r0
 23fe9ec:	4601      	mov	r1, r0
 23fe9ee:	428a      	cmp	r2, r1
 23fe9f0:	d100      	bne.n	23fe9f4 <memmove+0x2a>
 23fe9f2:	bd10      	pop	{r4, pc}
 23fe9f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fe9f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fe9fc:	e7f7      	b.n	23fe9ee <memmove+0x24>

023fe9fe <memset>:
 23fe9fe:	4402      	add	r2, r0
 23fea00:	4603      	mov	r3, r0
 23fea02:	4293      	cmp	r3, r2
 23fea04:	d100      	bne.n	23fea08 <memset+0xa>
 23fea06:	4770      	bx	lr
 23fea08:	f803 1b01 	strb.w	r1, [r3], #1
 23fea0c:	e7f9      	b.n	23fea02 <memset+0x4>
	...

023fea10 <srand>:
 23fea10:	b538      	push	{r3, r4, r5, lr}
 23fea12:	4b10      	ldr	r3, [pc, #64]	; (23fea54 <srand+0x44>)
 23fea14:	4604      	mov	r4, r0
 23fea16:	681d      	ldr	r5, [r3, #0]
 23fea18:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fea1a:	b9b3      	cbnz	r3, 23fea4a <srand+0x3a>
 23fea1c:	2018      	movs	r0, #24
 23fea1e:	f7fd fb3f 	bl	23fc0a0 <malloc>
 23fea22:	4602      	mov	r2, r0
 23fea24:	63a8      	str	r0, [r5, #56]	; 0x38
 23fea26:	b920      	cbnz	r0, 23fea32 <srand+0x22>
 23fea28:	4b0b      	ldr	r3, [pc, #44]	; (23fea58 <srand+0x48>)
 23fea2a:	2142      	movs	r1, #66	; 0x42
 23fea2c:	480b      	ldr	r0, [pc, #44]	; (23fea5c <srand+0x4c>)
 23fea2e:	f7fd fb99 	bl	23fc164 <__assert_func>
 23fea32:	490b      	ldr	r1, [pc, #44]	; (23fea60 <srand+0x50>)
 23fea34:	4b0b      	ldr	r3, [pc, #44]	; (23fea64 <srand+0x54>)
 23fea36:	e9c0 1300 	strd	r1, r3, [r0]
 23fea3a:	4b0b      	ldr	r3, [pc, #44]	; (23fea68 <srand+0x58>)
 23fea3c:	2100      	movs	r1, #0
 23fea3e:	6083      	str	r3, [r0, #8]
 23fea40:	230b      	movs	r3, #11
 23fea42:	8183      	strh	r3, [r0, #12]
 23fea44:	2001      	movs	r0, #1
 23fea46:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fea4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fea4c:	2200      	movs	r2, #0
 23fea4e:	611c      	str	r4, [r3, #16]
 23fea50:	615a      	str	r2, [r3, #20]
 23fea52:	bd38      	pop	{r3, r4, r5, pc}
 23fea54:	1007a600 	.word	0x1007a600
 23fea58:	023ffe59 	.word	0x023ffe59
 23fea5c:	023ffe70 	.word	0x023ffe70
 23fea60:	abcd330e 	.word	0xabcd330e
 23fea64:	e66d1234 	.word	0xe66d1234
 23fea68:	0005deec 	.word	0x0005deec

023fea6c <strchr>:
 23fea6c:	b2c9      	uxtb	r1, r1
 23fea6e:	4603      	mov	r3, r0
 23fea70:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fea74:	b11a      	cbz	r2, 23fea7e <strchr+0x12>
 23fea76:	428a      	cmp	r2, r1
 23fea78:	d1f9      	bne.n	23fea6e <strchr+0x2>
 23fea7a:	4618      	mov	r0, r3
 23fea7c:	4770      	bx	lr
 23fea7e:	2900      	cmp	r1, #0
 23fea80:	bf18      	it	ne
 23fea82:	2300      	movne	r3, #0
 23fea84:	e7f9      	b.n	23fea7a <strchr+0xe>

023fea86 <strchrnul>:
 23fea86:	b510      	push	{r4, lr}
 23fea88:	4604      	mov	r4, r0
 23fea8a:	f7ff ffef 	bl	23fea6c <strchr>
 23fea8e:	b918      	cbnz	r0, 23fea98 <strchrnul+0x12>
 23fea90:	4620      	mov	r0, r4
 23fea92:	f7fa fe7b 	bl	23f978c <strlen>
 23fea96:	4420      	add	r0, r4
 23fea98:	bd10      	pop	{r4, pc}

023fea9a <strcpy>:
 23fea9a:	4603      	mov	r3, r0
 23fea9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23feaa0:	f803 2b01 	strb.w	r2, [r3], #1
 23feaa4:	2a00      	cmp	r2, #0
 23feaa6:	d1f9      	bne.n	23fea9c <strcpy+0x2>
 23feaa8:	4770      	bx	lr
	...

023feaac <strdup>:
 23feaac:	4b02      	ldr	r3, [pc, #8]	; (23feab8 <strdup+0xc>)
 23feaae:	4601      	mov	r1, r0
 23feab0:	6818      	ldr	r0, [r3, #0]
 23feab2:	f000 b803 	b.w	23feabc <_strdup_r>
 23feab6:	bf00      	nop
 23feab8:	1007a600 	.word	0x1007a600

023feabc <_strdup_r>:
 23feabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23feabe:	4604      	mov	r4, r0
 23feac0:	4608      	mov	r0, r1
 23feac2:	460d      	mov	r5, r1
 23feac4:	f7fa fe62 	bl	23f978c <strlen>
 23feac8:	1c42      	adds	r2, r0, #1
 23feaca:	4620      	mov	r0, r4
 23feacc:	4611      	mov	r1, r2
 23feace:	9201      	str	r2, [sp, #4]
 23fead0:	f7fd fb2c 	bl	23fc12c <_malloc_r>
 23fead4:	4604      	mov	r4, r0
 23fead6:	b118      	cbz	r0, 23feae0 <_strdup_r+0x24>
 23fead8:	9a01      	ldr	r2, [sp, #4]
 23feada:	4629      	mov	r1, r5
 23feadc:	f7ff ff68 	bl	23fe9b0 <memcpy>
 23feae0:	4620      	mov	r0, r4
 23feae2:	b003      	add	sp, #12
 23feae4:	bd30      	pop	{r4, r5, pc}

023feae6 <strncmp>:
 23feae6:	b510      	push	{r4, lr}
 23feae8:	b17a      	cbz	r2, 23feb0a <strncmp+0x24>
 23feaea:	4603      	mov	r3, r0
 23feaec:	3901      	subs	r1, #1
 23feaee:	1884      	adds	r4, r0, r2
 23feaf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 23feaf4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23feaf8:	4290      	cmp	r0, r2
 23feafa:	d101      	bne.n	23feb00 <strncmp+0x1a>
 23feafc:	42a3      	cmp	r3, r4
 23feafe:	d101      	bne.n	23feb04 <strncmp+0x1e>
 23feb00:	1a80      	subs	r0, r0, r2
 23feb02:	bd10      	pop	{r4, pc}
 23feb04:	2800      	cmp	r0, #0
 23feb06:	d1f3      	bne.n	23feaf0 <strncmp+0xa>
 23feb08:	e7fa      	b.n	23feb00 <strncmp+0x1a>
 23feb0a:	4610      	mov	r0, r2
 23feb0c:	e7f9      	b.n	23feb02 <strncmp+0x1c>

023feb0e <strrchr>:
 23feb0e:	b538      	push	{r3, r4, r5, lr}
 23feb10:	4603      	mov	r3, r0
 23feb12:	460c      	mov	r4, r1
 23feb14:	b969      	cbnz	r1, 23feb32 <strrchr+0x24>
 23feb16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23feb1a:	f7ff bfa7 	b.w	23fea6c <strchr>
 23feb1e:	1c43      	adds	r3, r0, #1
 23feb20:	4605      	mov	r5, r0
 23feb22:	4621      	mov	r1, r4
 23feb24:	4618      	mov	r0, r3
 23feb26:	f7ff ffa1 	bl	23fea6c <strchr>
 23feb2a:	2800      	cmp	r0, #0
 23feb2c:	d1f7      	bne.n	23feb1e <strrchr+0x10>
 23feb2e:	4628      	mov	r0, r5
 23feb30:	bd38      	pop	{r3, r4, r5, pc}
 23feb32:	2500      	movs	r5, #0
 23feb34:	e7f5      	b.n	23feb22 <strrchr+0x14>
	...

023feb38 <_strtol_l.constprop.0>:
 23feb38:	2b01      	cmp	r3, #1
 23feb3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23feb3e:	d001      	beq.n	23feb44 <_strtol_l.constprop.0+0xc>
 23feb40:	2b24      	cmp	r3, #36	; 0x24
 23feb42:	d906      	bls.n	23feb52 <_strtol_l.constprop.0+0x1a>
 23feb44:	f7fd fb00 	bl	23fc148 <__errno>
 23feb48:	2316      	movs	r3, #22
 23feb4a:	6003      	str	r3, [r0, #0]
 23feb4c:	2000      	movs	r0, #0
 23feb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23feb52:	460d      	mov	r5, r1
 23feb54:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fec38 <_strtol_l.constprop.0+0x100>
 23feb58:	462e      	mov	r6, r5
 23feb5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23feb5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23feb62:	f017 0708 	ands.w	r7, r7, #8
 23feb66:	d1f7      	bne.n	23feb58 <_strtol_l.constprop.0+0x20>
 23feb68:	2c2d      	cmp	r4, #45	; 0x2d
 23feb6a:	d132      	bne.n	23febd2 <_strtol_l.constprop.0+0x9a>
 23feb6c:	782c      	ldrb	r4, [r5, #0]
 23feb6e:	2701      	movs	r7, #1
 23feb70:	1cb5      	adds	r5, r6, #2
 23feb72:	2b00      	cmp	r3, #0
 23feb74:	d05b      	beq.n	23fec2e <_strtol_l.constprop.0+0xf6>
 23feb76:	2b10      	cmp	r3, #16
 23feb78:	d109      	bne.n	23feb8e <_strtol_l.constprop.0+0x56>
 23feb7a:	2c30      	cmp	r4, #48	; 0x30
 23feb7c:	d107      	bne.n	23feb8e <_strtol_l.constprop.0+0x56>
 23feb7e:	782c      	ldrb	r4, [r5, #0]
 23feb80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23feb84:	2c58      	cmp	r4, #88	; 0x58
 23feb86:	d14d      	bne.n	23fec24 <_strtol_l.constprop.0+0xec>
 23feb88:	786c      	ldrb	r4, [r5, #1]
 23feb8a:	2310      	movs	r3, #16
 23feb8c:	3502      	adds	r5, #2
 23feb8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23feb92:	f04f 0c00 	mov.w	ip, #0
 23feb96:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23feb9a:	4666      	mov	r6, ip
 23feb9c:	fbb8 f9f3 	udiv	r9, r8, r3
 23feba0:	fb03 8a19 	mls	sl, r3, r9, r8
 23feba4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23feba8:	f1be 0f09 	cmp.w	lr, #9
 23febac:	d816      	bhi.n	23febdc <_strtol_l.constprop.0+0xa4>
 23febae:	4674      	mov	r4, lr
 23febb0:	42a3      	cmp	r3, r4
 23febb2:	dd24      	ble.n	23febfe <_strtol_l.constprop.0+0xc6>
 23febb4:	f1bc 0f00 	cmp.w	ip, #0
 23febb8:	db1e      	blt.n	23febf8 <_strtol_l.constprop.0+0xc0>
 23febba:	45b1      	cmp	r9, r6
 23febbc:	d31c      	bcc.n	23febf8 <_strtol_l.constprop.0+0xc0>
 23febbe:	d101      	bne.n	23febc4 <_strtol_l.constprop.0+0x8c>
 23febc0:	45a2      	cmp	sl, r4
 23febc2:	db19      	blt.n	23febf8 <_strtol_l.constprop.0+0xc0>
 23febc4:	fb06 4603 	mla	r6, r6, r3, r4
 23febc8:	f04f 0c01 	mov.w	ip, #1
 23febcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 23febd0:	e7e8      	b.n	23feba4 <_strtol_l.constprop.0+0x6c>
 23febd2:	2c2b      	cmp	r4, #43	; 0x2b
 23febd4:	bf04      	itt	eq
 23febd6:	782c      	ldrbeq	r4, [r5, #0]
 23febd8:	1cb5      	addeq	r5, r6, #2
 23febda:	e7ca      	b.n	23feb72 <_strtol_l.constprop.0+0x3a>
 23febdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23febe0:	f1be 0f19 	cmp.w	lr, #25
 23febe4:	d801      	bhi.n	23febea <_strtol_l.constprop.0+0xb2>
 23febe6:	3c37      	subs	r4, #55	; 0x37
 23febe8:	e7e2      	b.n	23febb0 <_strtol_l.constprop.0+0x78>
 23febea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23febee:	f1be 0f19 	cmp.w	lr, #25
 23febf2:	d804      	bhi.n	23febfe <_strtol_l.constprop.0+0xc6>
 23febf4:	3c57      	subs	r4, #87	; 0x57
 23febf6:	e7db      	b.n	23febb0 <_strtol_l.constprop.0+0x78>
 23febf8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23febfc:	e7e6      	b.n	23febcc <_strtol_l.constprop.0+0x94>
 23febfe:	f1bc 0f00 	cmp.w	ip, #0
 23fec02:	da05      	bge.n	23fec10 <_strtol_l.constprop.0+0xd8>
 23fec04:	2322      	movs	r3, #34	; 0x22
 23fec06:	4646      	mov	r6, r8
 23fec08:	6003      	str	r3, [r0, #0]
 23fec0a:	b942      	cbnz	r2, 23fec1e <_strtol_l.constprop.0+0xe6>
 23fec0c:	4630      	mov	r0, r6
 23fec0e:	e79e      	b.n	23feb4e <_strtol_l.constprop.0+0x16>
 23fec10:	b107      	cbz	r7, 23fec14 <_strtol_l.constprop.0+0xdc>
 23fec12:	4276      	negs	r6, r6
 23fec14:	2a00      	cmp	r2, #0
 23fec16:	d0f9      	beq.n	23fec0c <_strtol_l.constprop.0+0xd4>
 23fec18:	f1bc 0f00 	cmp.w	ip, #0
 23fec1c:	d000      	beq.n	23fec20 <_strtol_l.constprop.0+0xe8>
 23fec1e:	1e69      	subs	r1, r5, #1
 23fec20:	6011      	str	r1, [r2, #0]
 23fec22:	e7f3      	b.n	23fec0c <_strtol_l.constprop.0+0xd4>
 23fec24:	2430      	movs	r4, #48	; 0x30
 23fec26:	2b00      	cmp	r3, #0
 23fec28:	d1b1      	bne.n	23feb8e <_strtol_l.constprop.0+0x56>
 23fec2a:	2308      	movs	r3, #8
 23fec2c:	e7af      	b.n	23feb8e <_strtol_l.constprop.0+0x56>
 23fec2e:	2c30      	cmp	r4, #48	; 0x30
 23fec30:	d0a5      	beq.n	23feb7e <_strtol_l.constprop.0+0x46>
 23fec32:	230a      	movs	r3, #10
 23fec34:	e7ab      	b.n	23feb8e <_strtol_l.constprop.0+0x56>
 23fec36:	bf00      	nop
 23fec38:	023ffeca 	.word	0x023ffeca

023fec3c <strtol>:
 23fec3c:	4613      	mov	r3, r2
 23fec3e:	460a      	mov	r2, r1
 23fec40:	4601      	mov	r1, r0
 23fec42:	4802      	ldr	r0, [pc, #8]	; (23fec4c <strtol+0x10>)
 23fec44:	6800      	ldr	r0, [r0, #0]
 23fec46:	f7ff bf77 	b.w	23feb38 <_strtol_l.constprop.0>
 23fec4a:	bf00      	nop
 23fec4c:	1007a600 	.word	0x1007a600

023fec50 <__register_exitproc>:
 23fec50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fec54:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fed14 <__register_exitproc+0xc4>
 23fec58:	4606      	mov	r6, r0
 23fec5a:	461f      	mov	r7, r3
 23fec5c:	460d      	mov	r5, r1
 23fec5e:	f8d8 0000 	ldr.w	r0, [r8]
 23fec62:	4691      	mov	r9, r2
 23fec64:	f000 f858 	bl	23fed18 <__retarget_lock_acquire_recursive>
 23fec68:	4b26      	ldr	r3, [pc, #152]	; (23fed04 <__register_exitproc+0xb4>)
 23fec6a:	681c      	ldr	r4, [r3, #0]
 23fec6c:	b934      	cbnz	r4, 23fec7c <__register_exitproc+0x2c>
 23fec6e:	4c26      	ldr	r4, [pc, #152]	; (23fed08 <__register_exitproc+0xb8>)
 23fec70:	601c      	str	r4, [r3, #0]
 23fec72:	4b26      	ldr	r3, [pc, #152]	; (23fed0c <__register_exitproc+0xbc>)
 23fec74:	b113      	cbz	r3, 23fec7c <__register_exitproc+0x2c>
 23fec76:	681b      	ldr	r3, [r3, #0]
 23fec78:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fec7c:	6863      	ldr	r3, [r4, #4]
 23fec7e:	2b1f      	cmp	r3, #31
 23fec80:	dd07      	ble.n	23fec92 <__register_exitproc+0x42>
 23fec82:	f8d8 0000 	ldr.w	r0, [r8]
 23fec86:	f000 f849 	bl	23fed1c <__retarget_lock_release_recursive>
 23fec8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fec8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fec92:	b35e      	cbz	r6, 23fecec <__register_exitproc+0x9c>
 23fec94:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fec98:	b988      	cbnz	r0, 23fecbe <__register_exitproc+0x6e>
 23fec9a:	4b1d      	ldr	r3, [pc, #116]	; (23fed10 <__register_exitproc+0xc0>)
 23fec9c:	b923      	cbnz	r3, 23feca8 <__register_exitproc+0x58>
 23fec9e:	f8d8 0000 	ldr.w	r0, [r8]
 23feca2:	f000 f83a 	bl	23fed1a <__retarget_lock_release>
 23feca6:	e7f0      	b.n	23fec8a <__register_exitproc+0x3a>
 23feca8:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fecac:	f7fd f9f8 	bl	23fc0a0 <malloc>
 23fecb0:	2800      	cmp	r0, #0
 23fecb2:	d0f4      	beq.n	23fec9e <__register_exitproc+0x4e>
 23fecb4:	2300      	movs	r3, #0
 23fecb6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fecba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fecbe:	6863      	ldr	r3, [r4, #4]
 23fecc0:	2201      	movs	r2, #1
 23fecc2:	2e02      	cmp	r6, #2
 23fecc4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fecc8:	fa02 f203 	lsl.w	r2, r2, r3
 23feccc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fecd0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fecd4:	ea43 0302 	orr.w	r3, r3, r2
 23fecd8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fecdc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fece0:	bf02      	ittt	eq
 23fece2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fece6:	4313      	orreq	r3, r2
 23fece8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fecec:	6863      	ldr	r3, [r4, #4]
 23fecee:	f8d8 0000 	ldr.w	r0, [r8]
 23fecf2:	1c5a      	adds	r2, r3, #1
 23fecf4:	3302      	adds	r3, #2
 23fecf6:	6062      	str	r2, [r4, #4]
 23fecf8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fecfc:	f000 f80e 	bl	23fed1c <__retarget_lock_release_recursive>
 23fed00:	2000      	movs	r0, #0
 23fed02:	e7c4      	b.n	23fec8e <__register_exitproc+0x3e>
 23fed04:	1007afe0 	.word	0x1007afe0
 23fed08:	1007af54 	.word	0x1007af54
 23fed0c:	00000000 	.word	0x00000000
 23fed10:	023fc0a1 	.word	0x023fc0a1
 23fed14:	1007a664 	.word	0x1007a664

023fed18 <__retarget_lock_acquire_recursive>:
 23fed18:	4770      	bx	lr

023fed1a <__retarget_lock_release>:
 23fed1a:	4770      	bx	lr

023fed1c <__retarget_lock_release_recursive>:
 23fed1c:	4770      	bx	lr
	...

023fed20 <dynalib_user>:
 23fed20:	979d 023f 97c5 023f 97c9 023f 0000 0000     ..?...?...?.....
 23fed30:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23fed40:	7574 6c61 5300 4355 4543 5353 5320 5445     tual.SUCCESS SET
 23fed50:	4954 474e 4720 4941 3a4e 2520 0064 4146     TING GAIN: %d.FA
 23fed60:	4c49 4445 5420 204f 4553 2054 4147 4e49     ILED TO SET GAIN
 23fed70:	4f00 454c 2044 6546 7461 6568 5772 6e69     .OLED FeatherWin
 23fed80:	2067 6574 7473 6500 6764 2f65 6e69 6567     g test.edge/inge
 23fed90:	7473 6c2f 6d61 0070 6572 7573 746c 203a     st/lamp.result: 
 23feda0:	6425 0000                                   %d..

023feda4 <_ZTV5Timer>:
	...
 23fedac:	9955 023f 9999 023f 980f 023f               U.?...?...?.

023fedb8 <_ZTVN5spark10LogHandlerE>:
	...
 23fedc8:	97e5 023f 980d 023f                         ..?...?.

023fedd0 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fedd8:	98f9 023f 992d 023f da79 023f dc21 023f     ..?.-.?.y.?.!.?.
 23fede8:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
 23fedf8:	696c 657a 4f20 454c 2144 4f00 454c 2044     lize OLED!.OLED 
 23fee08:	6562 7567 006e                              begun.

023fee0e <_ZN7Bitmaps3fanE>:
 23fee0e:	0000 0000 0000 7e00 0100 80ff 8103 06c0     .......~........
 23fee1e:	6000 700c 1830 18f0 f818 3018 0c78 2030     .`.p0......0x.0 
 23fee2e:	300c cc1b 5b30 30cc cce7 e331 198c 18e0     .0..0[.0..1.....
 23fee3e:	e018 0c18 3000 0006 0360 c081 ff01 0080     .....0..`.......
 23fee4e:	007e 0000 0000 0000                         ~.......

023fee56 <_ZN7Bitmaps6fridgeE>:
 23fee56:	0000 0000 0000 ff07 0fe0 f0ff 000c 0c30     ..............0.
 23fee66:	3000 c00c 0c30 30c0 000c 0c30 3000 ff0f     .0..0..0..0..0..
 23fee76:	0ff0 f0ff 000c 0c30 3000 c00c 0c30 30c0     ......0..0..0..0
 23fee86:	c00c 0c30 30c0 000c 0c30 3000 ff0f 07f0     ..0..0..0..0....
 23fee96:	e0ff 0000 0000 0000                         ........

023fee9e <_ZN7Bitmaps7blenderE>:
 23fee9e:	0000 0000 0000 ff1f 1ff8 fcff ff1f 0fcc     ................
 23feeae:	ccff f90f 07cc ccf9 f907 07cc ccf9 f907     ................
 23feebe:	07cc c0f9 ff07 03c0 c0ff ff03 03c0 c0ff     ................
 23feece:	0000 0000 0000 ff07 0fe0 f0e7 e70f 0ff0     ................
 23feede:	f0ff 0000 0000 0000                         ........

023feee6 <_ZN7Bitmaps7toasterE>:
	...
 23feeee:	0300 80ff ff07 06e0 6000 3007 03e0 c034     .........`.0..4.
 23feefe:	0003 0fc0 f0ff ff1f 3ff8 fcff ff3f 3ffc     .........?..?..?
 23fef0e:	fcff ff3f 3fff ffff ff3f 3ffc ccff ff3f     ..?..?..?..?..?.
 23fef1e:	3fcc fcff ff3f 00fc 0000 0000 0000 0000     .?..?...........
 23fef2e:	4e4f 4f00 4646 0000                         ON.OFF..

023fef36 <_ZL12Org_01Glyphs>:
 23fef36:	0000 0000 0006 0001 0000 0501 0002 00fc     ................
 23fef46:	0001 0103 0004 00fc 0002 0505 0006 00fc     ................
 23fef56:	0006 0505 0006 00fc 000a 0505 0006 00fc     ................
 23fef66:	000e 0505 0006 00fc 0012 0101 0002 00fc     ................
 23fef76:	0013 0502 0003 00fc 0015 0502 0003 00fc     ................
 23fef86:	0017 0303 0004 00fd 0019 0303 0004 00fd     ................
 23fef96:	001b 0201 0002 0000 001c 0104 0005 00fe     ................
 23fefa6:	001d 0101 0002 0000 001e 0505 0006 00fc     ................
 23fefb6:	0022 0505 0006 00fc 0026 0501 0002 00fc     ".......&.......
 23fefc6:	0027 0505 0006 00fc 002b 0505 0006 00fc     '.......+.......
 23fefd6:	002f 0505 0006 00fc 0033 0505 0006 00fc     /.......3.......
 23fefe6:	0037 0505 0006 00fc 003b 0505 0006 00fc     7.......;.......
 23feff6:	003f 0505 0006 00fc 0043 0505 0006 00fc     ?.......C.......
 23ff006:	0047 0401 0002 00fd 0048 0401 0002 00fd     G.......H.......
 23ff016:	0049 0503 0004 00fc 004b 0304 0005 00fd     I.......K.......
 23ff026:	004d 0503 0004 00fc 004f 0505 0006 00fc     M.......O.......
 23ff036:	0053 0505 0006 00fc 0057 0505 0006 00fc     S.......W.......
 23ff046:	005b 0505 0006 00fc 005f 0505 0006 00fc     [......._.......
 23ff056:	0063 0505 0006 00fc 0067 0505 0006 00fc     c.......g.......
 23ff066:	006b 0505 0006 00fc 006f 0505 0006 00fc     k.......o.......
 23ff076:	0073 0505 0006 00fc 0077 0505 0006 00fc     s.......w.......
 23ff086:	007b 0505 0006 00fc 007f 0505 0006 00fc     {...............
 23ff096:	0083 0505 0006 00fc 0087 0505 0006 00fc     ................
 23ff0a6:	008b 0505 0006 00fc 008f 0505 0006 00fc     ................
 23ff0b6:	0093 0505 0006 00fc 0097 0505 0006 00fc     ................
 23ff0c6:	009b 0505 0006 00fc 009f 0505 0006 00fc     ................
 23ff0d6:	00a3 0505 0006 00fc 00a7 0505 0006 00fc     ................
 23ff0e6:	00ab 0505 0006 00fc 00af 0505 0006 00fc     ................
 23ff0f6:	00b3 0505 0006 00fc 00b7 0505 0006 00fc     ................
 23ff106:	00bb 0505 0006 00fc 00bf 0502 0003 00fc     ................
 23ff116:	00c1 0505 0006 00fc 00c5 0502 0003 00fc     ................
 23ff126:	00c7 0203 0004 00fc 00c8 0105 0006 0001     ................
 23ff136:	00c9 0101 0002 00fc 00ca 0404 0005 00fd     ................
 23ff146:	00cc 0504 0005 00fc 00cf 0404 0005 00fd     ................
 23ff156:	00d1 0504 0005 00fc 00d4 0404 0005 00fd     ................
 23ff166:	00d6 0503 0004 00fc 00d8 0504 0005 00fd     ................
 23ff176:	00db 0504 0005 00fc 00de 0401 0002 00fd     ................
 23ff186:	00df 0502 0003 00fd 00e1 0504 0005 00fc     ................
 23ff196:	00e4 0501 0002 00fc 00e5 0405 0006 00fd     ................
 23ff1a6:	00e8 0404 0005 00fd 00ea 0404 0005 00fd     ................
 23ff1b6:	00ec 0504 0005 00fd 00ef 0504 0005 00fd     ................
 23ff1c6:	00f2 0404 0005 00fd 00f4 0404 0005 00fd     ................
 23ff1d6:	00f6 0505 0006 00fc 00fa 0404 0005 00fd     ................
 23ff1e6:	00fc 0404 0005 00fd 00fe 0405 0006 00fd     ................
 23ff1f6:	0101 0404 0005 00fd 0103 0504 0005 00fd     ................
 23ff206:	0106 0404 0005 00fd 0108 0503 0004 00fc     ................
 23ff216:	010a 0501 0002 00fc 010b 0503 0004 00fc     ................
 23ff226:	010d 0305 0006 00fd                         ........

023ff22e <_ZL13Org_01Bitmaps>:
 23ff22e:	a0e8 d557 00f5 3efd 805f 8888 8088 bff4     ..W....>_.......
 23ff23e:	802e 6a80 9540 aa80 5d80 c000 80f0 8808     ...j@....]......
 23ff24e:	0088 63fc 801f f8f8 0f7f f880 1f7e 8c80     ...c........~...
 23ff25e:	107e fc80 1f3e fc80 1f3f f880 1042 fc80     ~...>...?...B...
 23ff26e:	1f7f fc80 1f7e 9080 2ab0 f022 88f0 f8a8     ....~....*".....
 23ff27e:	024e fd00 0f6f fc80 187f f480 1f7d fc00     N...o.......}...
 23ff28e:	0f21 f480 1f63 fc00 0f3f fc80 083f fc00     !...c...?...?...
 23ff29e:	1f2f 8c80 187f f980 4f08 7880 2f85 8d80     /........O.x./..
 23ff2ae:	68b1 8480 0f21 fd80 5a6b fc80 1863 fc80     .h..!...kZ..c...
 23ff2be:	1f63 fc80 087f fc00 3f63 fc80 297f fc00     c.......c?...)..
 23ff2ce:	1f3e f980 4208 8c00 1f63 8c80 a262 ad00     >....B..c...b...
 23ff2de:	5f6b 8a80 a888 8c80 4254 f800 0f7f ea80     k_......TB......
 23ff2ee:	82c0 2008 d580 54c0 80f8 fff1 998f f8f0     ... ...T........
 23ff2fe:	1f8f f099 8fff a46b 9ff9 8f10 9099 55f0     ......k........U
 23ff30e:	8ac0 90f9 fdf8 1063 99f9 9ff9 9ff9 f980     ......c.........
 23ff31e:	209f 88f8 1f47 c827 0042 9f99 9799 6b8c     . ..G.'.B......k
 23ff32e:	96f0 9969 109f 8f2e 222b 89f8 0fa8 00e0     ..i.....+"......
	...

023ff340 <_ZL6Org_01>:
 23ff340:	f22e 023f ef36 023f 0020 007e 0007 0000     ..?.6.?. .~.....

023ff350 <_ZL4font>:
 23ff350:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff360:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff370:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff380:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff390:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff3a0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff3b0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff3c0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff3d0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff3e0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff3f0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff400:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff410:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff420:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff430:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff440:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff450:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff460:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff470:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff480:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff490:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff4a0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff4b0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff4c0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff4d0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff4e0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff4f0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff500:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff510:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff520:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff530:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff540:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff550:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff560:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff570:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff580:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff590:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff5a0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff5b0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff5c0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff5d0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff5e0:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff5f0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff600:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ff610:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ff620:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ff630:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ff640:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ff650:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ff660:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ff670:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ff680:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ff690:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ff6a0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ff6b0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ff6c0:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ff6d0:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ff6e0:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ff6f0:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ff700:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ff710:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ff720:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ff730:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ff740:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ff750:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ff760:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ff770:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ff780:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ff790:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ff7a0:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ff7b0:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ff7c0:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ff7d0:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ff7e0:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ff7f0:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ff800:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ff810:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ff820:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ff830:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ff840:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

023ff850 <_ZTV12Adafruit_GFX>:
	...
 23ff860:	af7d 023f df31 023f 97e5 023f a4df 023f     }.?.1.?...?...?.
 23ff870:	a4e1 023f a513 023f a4ef 023f a501 023f     ..?...?...?...?.
 23ff880:	a421 023f a4df 023f a709 023f a707 023f     !.?...?...?...?.
 23ff890:	a52b 023f a569 023f a5a3 023f a5e9 023f     +.?.i.?...?...?.
 23ff8a0:	a605 023f a687 023f                         ..?...?.

023ff8a8 <_ZTV17Adafruit_GrayOLED>:
	...
 23ff8b8:	af7d 023f df31 023f b0a5 023f a4df 023f     }.?.1.?...?...?.
 23ff8c8:	a4e1 023f a513 023f a4ef 023f a501 023f     ..?...?...?...?.
 23ff8d8:	a421 023f a4df 023f a709 023f b2a3 023f     !.?...?...?...?.
 23ff8e8:	a52b 023f a569 023f a5a3 023f a5e9 023f     +.?.i.?...?...?.
 23ff8f8:	a605 023f a687 023f 97e5 023f               ..?...?...?.

023ff904 <_ZL12splash2_data>:
 23ff904:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
 23ff914:	e000 0000 0000 0000 0000 0000 0000 0100     ................
 23ff924:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
 23ff940:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
 23ff950:	f007 0000 0000 0000 0000 0000 0000 0700     ................
 23ff960:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
 23ff970:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
 23ff980:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
 23ff990:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
 23ff9a0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
 23ff9b0:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
 23ff9c0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
 23ff9d0:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
 23ff9e0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
 23ff9f0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
 23ffa00:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
 23ffa10:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
 23ffa20:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
 23ffa30:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
 23ffa40:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
 23ffa50:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
 23ffa60:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
 23ffa70:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
 23ffa80:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
 23ffa98:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
 23ffaa8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
 23ffab8:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
 23ffac8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
 23ffad8:	7f00 ffff feff adb5 b5ed e07e               ..........~.

023ffae4 <_ZTV15Adafruit_SH1107>:
	...
 23ffaec:	b415 023f b429 023f af7d 023f df31 023f     ..?.).?.}.?.1.?.
 23ffafc:	b0a5 023f a4df 023f a4e1 023f a513 023f     ..?...?...?...?.
 23ffb0c:	a4ef 023f a501 023f a421 023f a4df 023f     ..?...?.!.?...?.
 23ffb1c:	a709 023f b2a3 023f a52b 023f a569 023f     ..?...?.+.?.i.?.
 23ffb2c:	a5a3 023f a5e9 023f a605 023f a687 023f     ..?...?...?...?.
 23ffb3c:	b549 023f                                   I.?.

023ffb40 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
 23ffb40:	00d3 7fa8                                   ....

023ffb44 <_ZZN15Adafruit_SH11075beginEhbE4init>:
 23ffb44:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
 23ffb54:	35db 3fa8 a6a4 0000                         .5.?....

023ffb5c <_ZTV15Adafruit_SH110X>:
	...
 23ffb64:	97e5 023f 97e5 023f af7d 023f df31 023f     ..?...?.}.?.1.?.
 23ffb74:	b0a5 023f a4df 023f a4e1 023f a513 023f     ..?...?...?...?.
 23ffb84:	a4ef 023f a501 023f a421 023f a4df 023f     ..?...?.!.?...?.
 23ffb94:	a709 023f b2a3 023f a52b 023f a569 023f     ..?...?.+.?.i.?.
 23ffba4:	a5a3 023f a5e9 023f a605 023f a687 023f     ..?...?...?...?.
 23ffbb4:	b549 023f                                   I.?.

023ffbb8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffbc0:	c25d 023f c263 023f c2a1 023f c271 023f     ].?.c.?...?.q.?.
 23ffbd0:	c25f 023f                                   _.?.

023ffbd4 <_ZTVN5spark13EthernetClassE>:
	...
 23ffbdc:	c7e7 023f c7dd 023f c7d3 023f c7c9 023f     ..?...?...?...?.
 23ffbec:	c7bd 023f c7b1 023f de0d 023f de15 023f     ..?...?...?...?.
 23ffbfc:	c7a5 023f c79d 023f c793 023f c789 023f     ..?...?...?...?.
 23ffc0c:	de45 023f                                   E.?.

023ffc10 <_ZTV7TwoWire>:
	...
 23ffc18:	c805 023f c84f 023f c827 023f c807 023f     ..?.O.?.'.?...?.
 23ffc28:	c82f 023f c837 023f c83f 023f c847 023f     /.?.7.?.?.?.G.?.

023ffc38 <_ZTV9IPAddress>:
	...
 23ffc40:	c931 023f c921 023f c923 023f 7525 7500     1.?.!.?.#.?.%u.u
 23ffc50:	3025 7834 0000 0000                         %04x....

023ffc58 <_ZTVN5spark16JSONBufferWriterE>:
	...
 23ffc60:	ca3f 023f ca41 023f ca4f 023f ca75 023f     ?.?.A.?.O.?.u.?.
 23ffc70:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
 23ffc80:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
 23ffc90:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
 23ffca0:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
 23ffcb0:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
 23ffcc0:	6961 736c 3d20 0020 0a0d 6d00 6600 6c00     ails = ....m.f.l
 23ffcd0:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
 23ffce0:	0000 0000                                   ....

023ffce4 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffcec:	ce71 023f ce97 023f ce55 023f caa9 023f     q.?...?.U.?...?.

023ffcfc <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffd04:	d325 023f d33d 023f da79 023f dc21 023f     %.?.=.?.y.?.!.?.

023ffd14 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffd1c:	d351 023f d365 023f dc59 023f ce5d 023f     Q.?.e.?.Y.?.].?.

023ffd2c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffd34:	ce6f 023f cea5 023f d9dd 023f ce5f 023f     o.?...?...?._.?.

023ffd44 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffd4c:	ce6d 023f ceb3 023f d28d 023f ced5 023f     m.?...?...?...?.

023ffd5c <_ZTVN5spark12NetworkClassE>:
	...
 23ffd64:	ddcd 023f ddd7 023f dde1 023f ddeb 023f     ..?...?...?...?.
 23ffd74:	ddf5 023f de01 023f de0d 023f de15 023f     ..?...?...?...?.
 23ffd84:	de1d 023f de29 023f de31 023f de3b 023f     ..?.).?.1.?.;.?.
 23ffd94:	de45 023f                                   E.?.

023ffd98 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffd98:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffda8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffdb8:	6d69 0065                                   ime.

023ffdbc <_ZTV11USARTSerial>:
	...
 23ffdc4:	e2f9 023f e365 023f e33d 023f df31 023f     ..?.e.?.=.?.1.?.
 23ffdd4:	e30d 023f e329 023f e31b 023f e337 023f     ..?.).?...?.7.?.
 23ffde4:	e2fb 023f e2ff 023f                         ..?...?.

023ffdec <_ZTV9USBSerial>:
	...
 23ffdf4:	e3bd 023f e425 023f e3fb 023f df31 023f     ..?.%.?...?.1.?.
 23ffe04:	e3ed 023f e3bf 023f e3cf 023f e41f 023f     ..?...?...?...?.
 23ffe14:	e3df 023f e3b7 023f                         ..?...?.

023ffe1c <_ZTVN5spark9WiFiClassE>:
	...
 23ffe24:	e523 023f e519 023f e50f 023f e4c5 023f     #.?...?...?...?.
 23ffe34:	e503 023f e4f7 023f de0d 023f de15 023f     ..?...?...?...?.
 23ffe44:	e4eb 023f e4e3 023f e4d9 023f e4cf 023f     ..?...?...?...?.
 23ffe54:	de45 023f                                   E.?.

023ffe58 <_ZSt7nothrow>:
 23ffe58:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffe68:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23ffe78:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23ffe88:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23ffe98:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23ffea8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23ffeb8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023ffec9 <_ctype_>:
 23ffec9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffed9:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffee9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffef9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff09:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff19:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff29:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff39:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff49:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffca <link_const_data_end>:
	...

023fffcc <link_constructors_location>:
 23fffcc:	023f9d49 	.word	0x023f9d49
 23fffd0:	023fc24d 	.word	0x023fc24d
 23fffd4:	023fc7f1 	.word	0x023fc7f1
 23fffd8:	023fda69 	.word	0x023fda69
 23fffdc:	023fdf1d 	.word	0x023fdf1d
 23fffe0:	023fdff1 	.word	0x023fdff1
 23fffe4:	023fe2c1 	.word	0x023fe2c1
 23fffe8:	023fe2e5 	.word	0x023fe2e5
 23fffec:	023fe52d 	.word	0x023fe52d
