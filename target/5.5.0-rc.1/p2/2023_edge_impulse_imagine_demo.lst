
/Users/dankouba/Documents/Particle/solutions/2023_edge_impulse_imagine_demo/target/5.5.0-rc.1/p2/2023_edge_impulse_imagine_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa410  085fa0a8  0000a410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005bdc  023fa418  085fa0b0  0000a418  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007acb0  085ffc8c  0001acb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c0  1007ad28  1007ad28  0002ad28  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffd04  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000002b0  085ffd08  085ffd08  0001fd08  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fd08  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001a9f42  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001bb9e  00000000  00000000  001c9f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0004eecc  00000000  00000000  001e5ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000036c0  00000000  00000000  002349ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000cc68  00000000  00000000  0023806c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00031316  00000000  00000000  00244cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005b567  00000000  00000000  00275fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d6aed  00000000  00000000  002d1551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a290  00000000  00000000  003a8040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	4813      	ldr	r0, [pc, #76]	; (85fa068 <module_user_pre_init+0x50>)
 85fa01a:	4914      	ldr	r1, [pc, #80]	; (85fa06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a13      	ldr	r2, [pc, #76]	; (85fa070 <module_user_pre_init+0x58>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b12      	ldr	r3, [pc, #72]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	4812      	ldr	r0, [pc, #72]	; (85fa078 <module_user_pre_init+0x60>)
 85fa030:	4a12      	ldr	r2, [pc, #72]	; (85fa07c <module_user_pre_init+0x64>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b12      	ldr	r3, [pc, #72]	; (85fa080 <module_user_pre_init+0x68>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fa03a:	4812      	ldr	r0, [pc, #72]	; (85fa084 <module_user_pre_init+0x6c>)
 85fa03c:	4912      	ldr	r1, [pc, #72]	; (85fa088 <module_user_pre_init+0x70>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a12      	ldr	r2, [pc, #72]	; (85fa08c <module_user_pre_init+0x74>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fa048:	4b0a      	ldr	r3, [pc, #40]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa04e:	4810      	ldr	r0, [pc, #64]	; (85fa090 <module_user_pre_init+0x78>)
 85fa050:	4910      	ldr	r1, [pc, #64]	; (85fa094 <module_user_pre_init+0x7c>)
 85fa052:	4288      	cmp	r0, r1
 85fa054:	d005      	beq.n	85fa062 <module_user_pre_init+0x4a>
 85fa056:	4a10      	ldr	r2, [pc, #64]	; (85fa098 <module_user_pre_init+0x80>)
 85fa058:	4282      	cmp	r2, r0
 85fa05a:	d002      	beq.n	85fa062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa05c:	4b05      	ldr	r3, [pc, #20]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa05e:	1a12      	subs	r2, r2, r0
 85fa060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa062:	4801      	ldr	r0, [pc, #4]	; (85fa068 <module_user_pre_init+0x50>)
 85fa064:	bd08      	pop	{r3, pc}
 85fa066:	bf00      	nop
 85fa068:	1007acb0 	.word	0x1007acb0
 85fa06c:	085ffc8c 	.word	0x085ffc8c
 85fa070:	1007ad28 	.word	0x1007ad28
 85fa074:	10110d2d 	.word	0x10110d2d
 85fa078:	1007ad28 	.word	0x1007ad28
 85fa07c:	1007afe8 	.word	0x1007afe8
 85fa080:	10110ea1 	.word	0x10110ea1
 85fa084:	023fa410 	.word	0x023fa410
 85fa088:	085fa0a8 	.word	0x085fa0a8
 85fa08c:	023fa418 	.word	0x023fa418
 85fa090:	023fa418 	.word	0x023fa418
 85fa094:	085fa0b0 	.word	0x085fa0b0
 85fa098:	023ffff4 	.word	0x023ffff4

085fa09c <dynalib_preinit>:
 85fa09c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa418 <strcmp>:
 23fa418:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fa41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fa420:	2a01      	cmp	r2, #1
 23fa422:	bf28      	it	cs
 23fa424:	429a      	cmpcs	r2, r3
 23fa426:	d0f7      	beq.n	23fa418 <strcmp>
 23fa428:	1ad0      	subs	r0, r2, r3
 23fa42a:	4770      	bx	lr

023fa42c <strlen>:
 23fa42c:	4603      	mov	r3, r0
 23fa42e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fa432:	2a00      	cmp	r2, #0
 23fa434:	d1fb      	bne.n	23fa42e <strlen+0x2>
 23fa436:	1a18      	subs	r0, r3, r0
 23fa438:	3801      	subs	r0, #1
 23fa43a:	4770      	bx	lr

023fa43c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fa43c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fa43e:	f004 f967 	bl	23fe710 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa442:	2500      	movs	r5, #0
 23fa444:	4e05      	ldr	r6, [pc, #20]	; (23fa45c <module_user_init+0x20>)
 23fa446:	4c06      	ldr	r4, [pc, #24]	; (23fa460 <module_user_init+0x24>)
 23fa448:	1ba4      	subs	r4, r4, r6
 23fa44a:	08a4      	lsrs	r4, r4, #2
 23fa44c:	42ac      	cmp	r4, r5
 23fa44e:	d100      	bne.n	23fa452 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fa450:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fa452:	f856 3b04 	ldr.w	r3, [r6], #4
 23fa456:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa458:	3501      	adds	r5, #1
 23fa45a:	e7f7      	b.n	23fa44c <module_user_init+0x10>
 23fa45c:	023fffd0 	.word	0x023fffd0
 23fa460:	023ffff4 	.word	0x023ffff4

023fa464 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fa464:	f000 b860 	b.w	23fa528 <setup>

023fa468 <module_user_loop>:
}

void module_user_loop() {
 23fa468:	b508      	push	{r3, lr}
    loop();
 23fa46a:	f000 f873 	bl	23fa554 <loop>
    _post_loop();
}
 23fa46e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fa472:	f004 b905 	b.w	23fe680 <_post_loop>

023fa476 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fa476:	f002 b9db 	b.w	23fc830 <malloc>

023fa47a <_Znaj>:
 23fa47a:	f002 b9d9 	b.w	23fc830 <malloc>

023fa47e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fa47e:	f002 b9e5 	b.w	23fc84c <free>
	...

023fa484 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa484:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fa486:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa488:	4a02      	ldr	r2, [pc, #8]	; (23fa494 <__cxa_pure_virtual+0x10>)
 23fa48a:	4903      	ldr	r1, [pc, #12]	; (23fa498 <__cxa_pure_virtual+0x14>)
 23fa48c:	f002 f88e 	bl	23fc5ac <panic_>
  while (1);
 23fa490:	e7fe      	b.n	23fa490 <__cxa_pure_virtual+0xc>
 23fa492:	bf00      	nop
 23fa494:	023fc0a5 	.word	0x023fc0a5
 23fa498:	023fedac 	.word	0x023fedac

023fa49c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fa49c:	7800      	ldrb	r0, [r0, #0]
 23fa49e:	fab0 f080 	clz	r0, r0
 23fa4a2:	0940      	lsrs	r0, r0, #5
 23fa4a4:	4770      	bx	lr

023fa4a6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fa4a6:	2301      	movs	r3, #1
 23fa4a8:	7003      	strb	r3, [r0, #0]
 23fa4aa:	4770      	bx	lr

023fa4ac <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fa4ac:	4770      	bx	lr
	...

023fa4b0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fa4b0:	b510      	push	{r4, lr}
 23fa4b2:	4604      	mov	r4, r0
 23fa4b4:	4b09      	ldr	r3, [pc, #36]	; (23fa4dc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fa4b6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fa4b8:	f002 feda 	bl	23fd270 <_ZN5spark10LogManager8instanceEv>
 23fa4bc:	4621      	mov	r1, r4
 23fa4be:	f003 f911 	bl	23fd6e4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fa4c2:	f004 f84d 	bl	23fe560 <_Z16_fetch_usbserialv>
 23fa4c6:	f004 f83f 	bl	23fe548 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fa4ca:	4620      	mov	r0, r4
 23fa4cc:	4b04      	ldr	r3, [pc, #16]	; (23fa4e0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fa4ce:	f840 3b04 	str.w	r3, [r0], #4
 23fa4d2:	f002 ffa3 	bl	23fd41c <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fa4d6:	4620      	mov	r0, r4
 23fa4d8:	bd10      	pop	{r4, pc}
 23fa4da:	bf00      	nop
 23fa4dc:	023fee18 	.word	0x023fee18
 23fa4e0:	023fee00 	.word	0x023fee00

023fa4e4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fa4e4:	b510      	push	{r4, lr}
 23fa4e6:	4604      	mov	r4, r0
    }
 23fa4e8:	f7ff ffe2 	bl	23fa4b0 <_ZN5spark16SerialLogHandlerD1Ev>
 23fa4ec:	4620      	mov	r0, r4
 23fa4ee:	2124      	movs	r1, #36	; 0x24
 23fa4f0:	f7ff ffc5 	bl	23fa47e <_ZdlPvj>
 23fa4f4:	4620      	mov	r0, r4
 23fa4f6:	bd10      	pop	{r4, pc}

023fa4f8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fa4f8:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fa4fa:	f04f 0c20 	mov.w	ip, #32
 23fa4fe:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fa500:	b500      	push	{lr}
 23fa502:	b08c      	sub	sp, #48	; 0x30
 23fa504:	aa0d      	add	r2, sp, #52	; 0x34
 23fa506:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fa50a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fa50e:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fa512:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fa514:	6801      	ldr	r1, [r0, #0]
 23fa516:	aa04      	add	r2, sp, #16
 23fa518:	201e      	movs	r0, #30
 23fa51a:	f002 f855 	bl	23fc5c8 <log_message_v>
}
 23fa51e:	b00c      	add	sp, #48	; 0x30
 23fa520:	f85d eb04 	ldr.w	lr, [sp], #4
 23fa524:	b003      	add	sp, #12
 23fa526:	4770      	bx	lr

023fa528 <setup>:
#define BUTTON_B D3
#define BUTTON_C D2

UIDisplay ui;

void setup() {
 23fa528:	b508      	push	{r3, lr}
    Serial.begin(9600);
 23fa52a:	f004 f819 	bl	23fe560 <_Z16_fetch_usbserialv>
 23fa52e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fa532:	f004 f805 	bl	23fe540 <_ZN9USBSerial5beginEl>
    Log.info("OLED FeatherWing test");
 23fa536:	4804      	ldr	r0, [pc, #16]	; (23fa548 <setup+0x20>)
 23fa538:	4904      	ldr	r1, [pc, #16]	; (23fa54c <setup+0x24>)
 23fa53a:	f7ff ffdd 	bl	23fa4f8 <_ZNK5spark6Logger4infoEPKcz>
    
    ui.begin();
}
 23fa53e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ui.begin();
 23fa542:	4803      	ldr	r0, [pc, #12]	; (23fa550 <setup+0x28>)
 23fa544:	f001 bc9a 	b.w	23fbe7c <_ZN9UIDisplay5beginEv>
 23fa548:	1007ae70 	.word	0x1007ae70
 23fa54c:	023fedc1 	.word	0x023fedc1
 23fa550:	1007ad64 	.word	0x1007ad64

023fa554 <loop>:

void loop() {
 23fa554:	b538      	push	{r3, r4, r5, lr}
    static unsigned long now = millis();
 23fa556:	4d17      	ldr	r5, [pc, #92]	; (23fa5b4 <loop+0x60>)
 23fa558:	e8d5 3f8f 	ldab	r3, [r5]
 23fa55c:	f013 0f01 	tst.w	r3, #1
 23fa560:	4c15      	ldr	r4, [pc, #84]	; (23fa5b8 <loop+0x64>)
 23fa562:	d109      	bne.n	23fa578 <loop+0x24>
 23fa564:	4628      	mov	r0, r5
 23fa566:	f7ff ff99 	bl	23fa49c <__cxa_guard_acquire>
 23fa56a:	b128      	cbz	r0, 23fa578 <loop+0x24>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fa56c:	f001 fda8 	bl	23fc0c0 <HAL_Timer_Get_Milli_Seconds>
 23fa570:	6020      	str	r0, [r4, #0]
 23fa572:	4628      	mov	r0, r5
 23fa574:	f7ff ff97 	bl	23fa4a6 <__cxa_guard_release>
 23fa578:	f001 fda2 	bl	23fc0c0 <HAL_Timer_Get_Milli_Seconds>
    static bool state = false;
    if (millis() - now > 5000) {
 23fa57c:	6823      	ldr	r3, [r4, #0]
 23fa57e:	1ac0      	subs	r0, r0, r3
 23fa580:	f241 3388 	movw	r3, #5000	; 0x1388
 23fa584:	4298      	cmp	r0, r3
 23fa586:	d914      	bls.n	23fa5b2 <loop+0x5e>
        state = !state;
 23fa588:	4d0c      	ldr	r5, [pc, #48]	; (23fa5bc <loop+0x68>)
        ui.setBlenderState(state ? ElementState::ON : ElementState::OFF);
 23fa58a:	480d      	ldr	r0, [pc, #52]	; (23fa5c0 <loop+0x6c>)
        state = !state;
 23fa58c:	7829      	ldrb	r1, [r5, #0]
 23fa58e:	f081 0301 	eor.w	r3, r1, #1
 23fa592:	702b      	strb	r3, [r5, #0]
        ui.setBlenderState(state ? ElementState::ON : ElementState::OFF);
 23fa594:	f001 fc4a 	bl	23fbe2c <_ZN9UIDisplay15setBlenderStateE12ElementState>
        Log.info("Change Blender state: %s", state ? "ON" : "OFF");
 23fa598:	7829      	ldrb	r1, [r5, #0]
 23fa59a:	4b0a      	ldr	r3, [pc, #40]	; (23fa5c4 <loop+0x70>)
 23fa59c:	4a0a      	ldr	r2, [pc, #40]	; (23fa5c8 <loop+0x74>)
 23fa59e:	480b      	ldr	r0, [pc, #44]	; (23fa5cc <loop+0x78>)
 23fa5a0:	2900      	cmp	r1, #0
 23fa5a2:	bf08      	it	eq
 23fa5a4:	461a      	moveq	r2, r3
 23fa5a6:	490a      	ldr	r1, [pc, #40]	; (23fa5d0 <loop+0x7c>)
 23fa5a8:	f7ff ffa6 	bl	23fa4f8 <_ZNK5spark6Logger4infoEPKcz>
 23fa5ac:	f001 fd88 	bl	23fc0c0 <HAL_Timer_Get_Milli_Seconds>
        now = millis();
 23fa5b0:	6020      	str	r0, [r4, #0]
    }
}
 23fa5b2:	bd38      	pop	{r3, r4, r5, pc}
 23fa5b4:	1007ad34 	.word	0x1007ad34
 23fa5b8:	1007ad38 	.word	0x1007ad38
 23fa5bc:	1007ad3c 	.word	0x1007ad3c
 23fa5c0:	1007ad64 	.word	0x1007ad64
 23fa5c4:	023fedda 	.word	0x023fedda
 23fa5c8:	023fedd7 	.word	0x023fedd7
 23fa5cc:	1007ae70 	.word	0x1007ae70
 23fa5d0:	023fedde 	.word	0x023fedde

023fa5d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa5d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fa5d6:	2614      	movs	r6, #20
 23fa5d8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa5dc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa5de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa5e2:	42ae      	cmp	r6, r5
 23fa5e4:	d004      	beq.n	23fa5f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fa5e6:	4628      	mov	r0, r5
 23fa5e8:	f003 fe4d 	bl	23fe286 <_ZN6StringD1Ev>
 23fa5ec:	3514      	adds	r5, #20
 23fa5ee:	e7f8      	b.n	23fa5e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fa5f0:	6820      	ldr	r0, [r4, #0]
 23fa5f2:	f002 f92b 	bl	23fc84c <free>
    AllocatorT::free(data_);
}
 23fa5f6:	4620      	mov	r0, r4
 23fa5f8:	bd70      	pop	{r4, r5, r6, pc}

023fa5fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fa5fa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fa5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa5fe:	4604      	mov	r4, r0
 23fa600:	460d      	mov	r5, r1
 23fa602:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fa604:	d916      	bls.n	23fa634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fa606:	4290      	cmp	r0, r2
 23fa608:	d215      	bcs.n	23fa636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fa60a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fa60e:	1a75      	subs	r5, r6, r1
 23fa610:	f1a1 0714 	sub.w	r7, r1, #20
 23fa614:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fa616:	42b7      	cmp	r7, r6
 23fa618:	d01c      	beq.n	23fa654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fa61a:	b12c      	cbz	r4, 23fa628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fa61c:	4631      	mov	r1, r6
 23fa61e:	4620      	mov	r0, r4
 23fa620:	f003 fe9a 	bl	23fe358 <_ZN6StringC1EOS_>
 23fa624:	7c33      	ldrb	r3, [r6, #16]
 23fa626:	7423      	strb	r3, [r4, #16]
 23fa628:	4630      	mov	r0, r6
 23fa62a:	f003 fe2c 	bl	23fe286 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fa62e:	3e14      	subs	r6, #20
 23fa630:	3c14      	subs	r4, #20
 23fa632:	e7f0      	b.n	23fa616 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fa634:	d00e      	beq.n	23fa654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fa636:	42b5      	cmp	r5, r6
 23fa638:	d00c      	beq.n	23fa654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fa63a:	b12c      	cbz	r4, 23fa648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fa63c:	4629      	mov	r1, r5
 23fa63e:	4620      	mov	r0, r4
 23fa640:	f003 fe8a 	bl	23fe358 <_ZN6StringC1EOS_>
 23fa644:	7c2b      	ldrb	r3, [r5, #16]
 23fa646:	7423      	strb	r3, [r4, #16]
 23fa648:	4628      	mov	r0, r5
 23fa64a:	f003 fe1c 	bl	23fe286 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fa64e:	3514      	adds	r5, #20
 23fa650:	3414      	adds	r4, #20
 23fa652:	e7f0      	b.n	23fa636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fa654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fa656:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fa65c:	e9c0 3300 	strd	r3, r3, [r0]
 23fa660:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa662:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa664:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa666:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa668:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa66a:	dd24      	ble.n	23fa6b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fa66c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fa670:	fb08 f007 	mul.w	r0, r8, r7
 23fa674:	f002 f8dc 	bl	23fc830 <malloc>
            if (!d) {
 23fa678:	4605      	mov	r5, r0
 23fa67a:	b1e0      	cbz	r0, 23fa6b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fa67c:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fa680:	fb08 1202 	mla	r2, r8, r2, r1
 23fa684:	f7ff ffb9 	bl	23fa5fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fa688:	6820      	ldr	r0, [r4, #0]
 23fa68a:	f002 f8df 	bl	23fc84c <free>
        data_ = d;
 23fa68e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fa690:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fa692:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fa696:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fa69a:	45b8      	cmp	r8, r7
 23fa69c:	d009      	beq.n	23fa6b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fa69e:	4639      	mov	r1, r7
 23fa6a0:	4628      	mov	r0, r5
 23fa6a2:	f003 fe73 	bl	23fe38c <_ZN6StringC1ERKS_>
 23fa6a6:	7c3b      	ldrb	r3, [r7, #16]
 23fa6a8:	3514      	adds	r5, #20
 23fa6aa:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fa6ae:	3714      	adds	r7, #20
 23fa6b0:	e7f3      	b.n	23fa69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fa6b2:	6873      	ldr	r3, [r6, #4]
 23fa6b4:	6063      	str	r3, [r4, #4]
}
 23fa6b6:	4620      	mov	r0, r4
 23fa6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fa6bc <_GLOBAL__sub_I_SystemMode>:
 23fa6bc:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fa6be:	2400      	movs	r4, #0
 23fa6c0:	4b25      	ldr	r3, [pc, #148]	; (23fa758 <_GLOBAL__sub_I_SystemMode+0x9c>)
    SleepResult() {}
 23fa6c2:	4a26      	ldr	r2, [pc, #152]	; (23fa75c <_GLOBAL__sub_I_SystemMode+0xa0>)
 23fa6c4:	b08c      	sub	sp, #48	; 0x30
 23fa6c6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23fa6c8:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fa6cc:	2002      	movs	r0, #2
 23fa6ce:	f001 ffa5 	bl	23fc61c <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fa6d2:	4621      	mov	r1, r4
 23fa6d4:	2001      	movs	r0, #1
 23fa6d6:	f001 ffbd 	bl	23fc654 <system_thread_set_state>
        capacity_(0) {
 23fa6da:	e9cd 4400 	strd	r4, r4, [sp]
 23fa6de:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fa6e0:	f003 ff3e 	bl	23fe560 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fa6e4:	4c1e      	ldr	r4, [pc, #120]	; (23fa760 <_GLOBAL__sub_I_SystemMode+0xa4>)
 23fa6e6:	4605      	mov	r5, r0
 23fa6e8:	4626      	mov	r6, r4
 23fa6ea:	4669      	mov	r1, sp
 23fa6ec:	a803      	add	r0, sp, #12
 23fa6ee:	f7ff ffb2 	bl	23fa656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fa6f2:	a903      	add	r1, sp, #12
 23fa6f4:	a806      	add	r0, sp, #24
 23fa6f6:	f7ff ffae 	bl	23fa656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fa6fa:	4b1a      	ldr	r3, [pc, #104]	; (23fa764 <_GLOBAL__sub_I_SystemMode+0xa8>)
 23fa6fc:	a906      	add	r1, sp, #24
 23fa6fe:	f846 3b04 	str.w	r3, [r6], #4
 23fa702:	a809      	add	r0, sp, #36	; 0x24
 23fa704:	f7ff ffa7 	bl	23fa656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fa708:	aa09      	add	r2, sp, #36	; 0x24
 23fa70a:	211e      	movs	r1, #30
 23fa70c:	4630      	mov	r0, r6
 23fa70e:	f003 f8cb 	bl	23fd8a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa712:	a809      	add	r0, sp, #36	; 0x24
 23fa714:	f7ff ff5e 	bl	23fa5d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fa718:	a806      	add	r0, sp, #24
 23fa71a:	f7ff ff5b 	bl	23fa5d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa71e:	4b12      	ldr	r3, [pc, #72]	; (23fa768 <_GLOBAL__sub_I_SystemMode+0xac>)
 23fa720:	6225      	str	r5, [r4, #32]
 23fa722:	6023      	str	r3, [r4, #0]
 23fa724:	a803      	add	r0, sp, #12
 23fa726:	f7ff ff55 	bl	23fa5d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa72a:	4b10      	ldr	r3, [pc, #64]	; (23fa76c <_GLOBAL__sub_I_SystemMode+0xb0>)
 23fa72c:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fa72e:	f003 ff17 	bl	23fe560 <_Z16_fetch_usbserialv>
 23fa732:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fa736:	f003 ff03 	bl	23fe540 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fa73a:	f002 fd99 	bl	23fd270 <_ZN5spark10LogManager8instanceEv>
 23fa73e:	4621      	mov	r1, r4
 23fa740:	f002 ff8a 	bl	23fd658 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23fa744:	4668      	mov	r0, sp
 23fa746:	f7ff ff45 	bl	23fa5d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
UIDisplay ui;
 23fa74a:	4809      	ldr	r0, [pc, #36]	; (23fa770 <_GLOBAL__sub_I_SystemMode+0xb4>)
}
 23fa74c:	b00c      	add	sp, #48	; 0x30
 23fa74e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
UIDisplay ui;
 23fa752:	f001 bb2f 	b.w	23fbdb4 <_ZN9UIDisplayC1Ev>
 23fa756:	bf00      	nop
 23fa758:	1007ad28 	.word	0x1007ad28
 23fa75c:	ffff0000 	.word	0xffff0000
 23fa760:	1007ad40 	.word	0x1007ad40
 23fa764:	023fee00 	.word	0x023fee00
 23fa768:	023ffd08 	.word	0x023ffd08
 23fa76c:	023fee18 	.word	0x023fee18
 23fa770:	1007ad64 	.word	0x1007ad64

023fa774 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 23fa774:	6042      	str	r2, [r0, #4]
  _begun = false;
 23fa776:	2200      	movs	r2, #0
 23fa778:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
 23fa77a:	2220      	movs	r2, #32
  _addr = addr;
 23fa77c:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 23fa77e:	60c2      	str	r2, [r0, #12]
#endif
}
 23fa780:	4770      	bx	lr

023fa782 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 23fa782:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 23fa784:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 23fa786:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 23fa788:	b153      	cbz	r3, 23fa7a0 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 23fa78a:	7821      	ldrb	r1, [r4, #0]
 23fa78c:	6860      	ldr	r0, [r4, #4]
 23fa78e:	f002 f98b 	bl	23fcaa8 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 23fa792:	6860      	ldr	r0, [r4, #4]
 23fa794:	f002 f990 	bl	23fcab8 <_ZN7TwoWire15endTransmissionEv>
 23fa798:	fab0 f080 	clz	r0, r0
 23fa79c:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 23fa79e:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 23fa7a0:	2101      	movs	r1, #1
 23fa7a2:	f000 f803 	bl	23fa7ac <_ZN18Adafruit_I2CDevice5beginEb>
 23fa7a6:	2800      	cmp	r0, #0
 23fa7a8:	d1ef      	bne.n	23fa78a <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 23fa7aa:	e7f8      	b.n	23fa79e <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

023fa7ac <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23fa7ac:	b538      	push	{r3, r4, r5, lr}
 23fa7ae:	4604      	mov	r4, r0
  _wire->begin();
 23fa7b0:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23fa7b2:	460d      	mov	r5, r1
  _wire->begin();
 23fa7b4:	f002 f972 	bl	23fca9c <_ZN7TwoWire5beginEv>
  _begun = true;
 23fa7b8:	2001      	movs	r0, #1
 23fa7ba:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 23fa7bc:	b125      	cbz	r5, 23fa7c8 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 23fa7be:	4620      	mov	r0, r4
}
 23fa7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 23fa7c4:	f7ff bfdd 	b.w	23fa782 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 23fa7c8:	bd38      	pop	{r3, r4, r5, pc}

023fa7ca <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23fa7ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fa7ce:	461f      	mov	r7, r3
 23fa7d0:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23fa7d4:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23fa7d6:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23fa7d8:	4432      	add	r2, r6
 23fa7da:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23fa7dc:	4604      	mov	r4, r0
 23fa7de:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23fa7e0:	d902      	bls.n	23fa7e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23fa7e2:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 23fa7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23fa7e8:	7801      	ldrb	r1, [r0, #0]
 23fa7ea:	6840      	ldr	r0, [r0, #4]
 23fa7ec:	f002 f95c 	bl	23fcaa8 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fa7f0:	b97e      	cbnz	r6, 23fa812 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23fa7f2:	6860      	ldr	r0, [r4, #4]
 23fa7f4:	462a      	mov	r2, r5
 23fa7f6:	6803      	ldr	r3, [r0, #0]
 23fa7f8:	4641      	mov	r1, r8
 23fa7fa:	68db      	ldr	r3, [r3, #12]
 23fa7fc:	4798      	blx	r3
 23fa7fe:	4285      	cmp	r5, r0
 23fa800:	d1ef      	bne.n	23fa7e2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23fa802:	4639      	mov	r1, r7
 23fa804:	6860      	ldr	r0, [r4, #4]
 23fa806:	f002 f953 	bl	23fcab0 <_ZN7TwoWire15endTransmissionEh>
 23fa80a:	fab0 f080 	clz	r0, r0
 23fa80e:	0940      	lsrs	r0, r0, #5
 23fa810:	e7e8      	b.n	23fa7e4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fa812:	f1b9 0f00 	cmp.w	r9, #0
 23fa816:	d0ec      	beq.n	23fa7f2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23fa818:	6860      	ldr	r0, [r4, #4]
 23fa81a:	4632      	mov	r2, r6
 23fa81c:	6803      	ldr	r3, [r0, #0]
 23fa81e:	4649      	mov	r1, r9
 23fa820:	68db      	ldr	r3, [r3, #12]
 23fa822:	4798      	blx	r3
 23fa824:	4286      	cmp	r6, r0
 23fa826:	d1dc      	bne.n	23fa7e2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23fa828:	e7e3      	b.n	23fa7f2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023fa82a <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
 23fa82a:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 23fa82c:	6840      	ldr	r0, [r0, #4]
 23fa82e:	f002 f931 	bl	23fca94 <_ZN7TwoWire8setSpeedEm>

#else
  (void)desiredclk;
  return false;
#endif
}
 23fa832:	2001      	movs	r0, #1
 23fa834:	bd08      	pop	{r3, pc}

023fa836 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 23fa836:	b510      	push	{r4, lr}
 23fa838:	4604      	mov	r4, r0
  if (_spiSetting)
 23fa83a:	6840      	ldr	r0, [r0, #4]
 23fa83c:	b110      	cbz	r0, 23fa844 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 23fa83e:	6803      	ldr	r3, [r0, #0]
 23fa840:	689b      	ldr	r3, [r3, #8]
 23fa842:	4798      	blx	r3
}
 23fa844:	4620      	mov	r0, r4
 23fa846:	bd10      	pop	{r4, pc}

023fa848 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
 23fa848:	b538      	push	{r3, r4, r5, lr}
 23fa84a:	4604      	mov	r4, r0
  if (_cs != -1) {
 23fa84c:	f990 000e 	ldrsb.w	r0, [r0, #14]
 23fa850:	1c41      	adds	r1, r0, #1
 23fa852:	d009      	beq.n	23fa868 <_ZN18Adafruit_SPIDevice5beginEv+0x20>
    pinMode(_cs, OUTPUT);
 23fa854:	2101      	movs	r1, #1
 23fa856:	b280      	uxth	r0, r0
 23fa858:	f003 ffca 	bl	23fe7f0 <pinMode>
    digitalWrite(_cs, HIGH);
 23fa85c:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23fa860:	2101      	movs	r1, #1
 23fa862:	b280      	uxth	r0, r0
 23fa864:	f003 ffd5 	bl	23fe812 <digitalWrite>
  }

  if (_spi) { // hardware SPI
 23fa868:	6825      	ldr	r5, [r4, #0]
 23fa86a:	b135      	cbz	r5, 23fa87a <_ZN18Adafruit_SPIDevice5beginEv+0x32>
#ifdef BUSIO_HAS_HW_SPI
    _spi->begin();
 23fa86c:	4628      	mov	r0, r5
 23fa86e:	f003 fc5b 	bl	23fe128 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
 23fa872:	2001      	movs	r0, #1
 23fa874:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
 23fa878:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
 23fa87a:	f994 000f 	ldrsb.w	r0, [r4, #15]
 23fa87e:	2101      	movs	r1, #1
 23fa880:	b280      	uxth	r0, r0
 23fa882:	f003 ffb5 	bl	23fe7f0 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
 23fa886:	7b63      	ldrb	r3, [r4, #13]
 23fa888:	f994 000f 	ldrsb.w	r0, [r4, #15]
 23fa88c:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
 23fa88e:	bf94      	ite	ls
 23fa890:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
 23fa892:	2101      	movhi	r1, #1
 23fa894:	b280      	uxth	r0, r0
 23fa896:	f003 ffbc 	bl	23fe812 <digitalWrite>
    if (_mosi != -1) {
 23fa89a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fa89e:	1c42      	adds	r2, r0, #1
 23fa8a0:	d009      	beq.n	23fa8b6 <_ZN18Adafruit_SPIDevice5beginEv+0x6e>
      pinMode(_mosi, OUTPUT);
 23fa8a2:	2101      	movs	r1, #1
 23fa8a4:	b280      	uxth	r0, r0
 23fa8a6:	f003 ffa3 	bl	23fe7f0 <pinMode>
      digitalWrite(_mosi, HIGH);
 23fa8aa:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fa8ae:	2101      	movs	r1, #1
 23fa8b0:	b280      	uxth	r0, r0
 23fa8b2:	f003 ffae 	bl	23fe812 <digitalWrite>
    if (_miso != -1) {
 23fa8b6:	f994 0011 	ldrsb.w	r0, [r4, #17]
 23fa8ba:	1c43      	adds	r3, r0, #1
 23fa8bc:	d0d9      	beq.n	23fa872 <_ZN18Adafruit_SPIDevice5beginEv+0x2a>
      pinMode(_miso, INPUT);
 23fa8be:	2100      	movs	r1, #0
 23fa8c0:	b280      	uxth	r0, r0
 23fa8c2:	f003 ff95 	bl	23fe7f0 <pinMode>
 23fa8c6:	e7d4      	b.n	23fa872 <_ZN18Adafruit_SPIDevice5beginEv+0x2a>

023fa8c8 <_ZN18Adafruit_SPIDevice8transferEPhj>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23fa8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa8cc:	4604      	mov	r4, r0
  //
  // HARDWARE SPI
  //
  if (_spi) {
 23fa8ce:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23fa8d0:	460d      	mov	r5, r1
 23fa8d2:	b085      	sub	sp, #20
  if (_spi) {
 23fa8d4:	b140      	cbz	r0, 23fa8e8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
#ifdef BUSIO_HAS_HW_SPI
#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, nullptr);
 23fa8d6:	2300      	movs	r3, #0
 23fa8d8:	9300      	str	r3, [sp, #0]
 23fa8da:	4613      	mov	r3, r2
 23fa8dc:	460a      	mov	r2, r1
 23fa8de:	f003 fcbf 	bl	23fe260 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 23fa8e2:	b005      	add	sp, #20
 23fa8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 23fa8e8:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fa8ea:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 23fa8ec:	2b00      	cmp	r3, #0
 23fa8ee:	bf0c      	ite	eq
 23fa8f0:	f04f 0b01 	moveq.w	fp, #1
 23fa8f4:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23fa8f8:	780b      	ldrb	r3, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fa8fa:	4f44      	ldr	r7, [pc, #272]	; (23faa0c <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23fa8fc:	ea1b 0f03 	tst.w	fp, r3
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fa900:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23fa904:	bf0c      	ite	eq
 23fa906:	f04f 0901 	moveq.w	r9, #1
 23fa90a:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fa90e:	188b      	adds	r3, r1, r2
 23fa910:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 23fa912:	9303      	str	r3, [sp, #12]
 23fa914:	9b03      	ldr	r3, [sp, #12]
 23fa916:	42ab      	cmp	r3, r5
 23fa918:	d0e3      	beq.n	23fa8e2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 23fa91a:	465e      	mov	r6, fp
    uint8_t reply = 0;
 23fa91c:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 23fa920:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 23fa924:	b117      	cbz	r7, 23fa92c <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fa926:	4638      	mov	r0, r7
 23fa928:	f001 fbbc 	bl	23fc0a4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 23fa92c:	7b63      	ldrb	r3, [r4, #13]
 23fa92e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 23fa932:	d141      	bne.n	23fa9b8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23fa934:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23fa938:	1c5a      	adds	r2, r3, #1
 23fa93a:	d00f      	beq.n	23fa95c <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 23fa93c:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23fa940:	bf14      	ite	ne
 23fa942:	2301      	movne	r3, #1
 23fa944:	2300      	moveq	r3, #0
 23fa946:	454b      	cmp	r3, r9
 23fa948:	d008      	beq.n	23fa95c <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort |= mosiPinMask;
 23fa94a:	6963      	ldr	r3, [r4, #20]
 23fa94c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fa94e:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 23fa950:	2900      	cmp	r1, #0
 23fa952:	d02c      	beq.n	23fa9ae <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 23fa954:	f04f 0901 	mov.w	r9, #1
 23fa958:	4302      	orrs	r2, r0
 23fa95a:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 23fa95c:	69a1      	ldr	r1, [r4, #24]
 23fa95e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fa960:	680a      	ldr	r2, [r1, #0]
 23fa962:	4313      	orrs	r3, r2
 23fa964:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23fa966:	b117      	cbz	r7, 23fa96e <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 23fa968:	4638      	mov	r0, r7
 23fa96a:	f001 fb9b 	bl	23fc0a4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 23fa96e:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23fa972:	3301      	adds	r3, #1
 23fa974:	d006      	beq.n	23fa984 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 23fa976:	69e3      	ldr	r3, [r4, #28]
 23fa978:	681a      	ldr	r2, [r3, #0]
 23fa97a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23fa97c:	421a      	tst	r2, r3
            reply |= b;
 23fa97e:	bf18      	it	ne
 23fa980:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 23fa984:	69a1      	ldr	r1, [r4, #24]
 23fa986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fa988:	680a      	ldr	r2, [r1, #0]
 23fa98a:	ea22 0303 	bic.w	r3, r2, r3
 23fa98e:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 23fa990:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23fa994:	3301      	adds	r3, #1
        buffer[i] = reply;
 23fa996:	bf18      	it	ne
 23fa998:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 23fa99c:	7b23      	ldrb	r3, [r4, #12]
 23fa99e:	2b00      	cmp	r3, #0
 23fa9a0:	d132      	bne.n	23faa08 <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 23fa9a2:	0076      	lsls	r6, r6, #1
 23fa9a4:	b2f6      	uxtb	r6, r6
 23fa9a6:	2e00      	cmp	r6, #0
 23fa9a8:	d1bc      	bne.n	23fa924 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 23fa9aa:	3501      	adds	r5, #1
 23fa9ac:	e7b2      	b.n	23fa914 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 23fa9ae:	ea22 0200 	bic.w	r2, r2, r0
 23fa9b2:	4689      	mov	r9, r1
 23fa9b4:	601a      	str	r2, [r3, #0]
 23fa9b6:	e7d1      	b.n	23fa95c <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 23fa9b8:	69a1      	ldr	r1, [r4, #24]
 23fa9ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fa9bc:	680a      	ldr	r2, [r1, #0]
 23fa9be:	4313      	orrs	r3, r2
 23fa9c0:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23fa9c2:	b117      	cbz	r7, 23fa9ca <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 23fa9c4:	4638      	mov	r0, r7
 23fa9c6:	f001 fb6d 	bl	23fc0a4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 23fa9ca:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23fa9ce:	3301      	adds	r3, #1
 23fa9d0:	d008      	beq.n	23fa9e4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort |= mosiPinMask;
 23fa9d2:	6963      	ldr	r3, [r4, #20]
 23fa9d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23fa9d6:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 23fa9d8:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 23fa9dc:	bf14      	ite	ne
 23fa9de:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 23fa9e0:	438a      	biceq	r2, r1
 23fa9e2:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 23fa9e4:	69a1      	ldr	r1, [r4, #24]
 23fa9e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fa9e8:	680a      	ldr	r2, [r1, #0]
 23fa9ea:	ea22 0303 	bic.w	r3, r2, r3
 23fa9ee:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 23fa9f0:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23fa9f4:	3301      	adds	r3, #1
 23fa9f6:	d0cb      	beq.n	23fa990 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 23fa9f8:	69e3      	ldr	r3, [r4, #28]
 23fa9fa:	681a      	ldr	r2, [r3, #0]
 23fa9fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23fa9fe:	421a      	tst	r2, r3
            reply |= b;
 23faa00:	bf18      	it	ne
 23faa02:	ea46 0808 	orrne.w	r8, r6, r8
 23faa06:	e7c3      	b.n	23fa990 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 23faa08:	0876      	lsrs	r6, r6, #1
 23faa0a:	e7cc      	b.n	23fa9a6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 23faa0c:	0007a120 	.word	0x0007a120

023faa10 <_ZN18Adafruit_SPIDevice8transferEh>:
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 23faa10:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 23faa12:	2201      	movs	r2, #1
  uint8_t data = send;
 23faa14:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 23faa18:	f10d 0107 	add.w	r1, sp, #7
 23faa1c:	f7ff ff54 	bl	23fa8c8 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 23faa20:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23faa24:	b003      	add	sp, #12
 23faa26:	f85d fb04 	ldr.w	pc, [sp], #4

023faa2a <_ZN18Adafruit_SPIDevice16beginTransactionEv>:
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
 23faa2a:	6803      	ldr	r3, [r0, #0]
 23faa2c:	b11b      	cbz	r3, 23faa36 <_ZN18Adafruit_SPIDevice16beginTransactionEv+0xc>
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
 23faa2e:	6841      	ldr	r1, [r0, #4]
 23faa30:	4618      	mov	r0, r3
 23faa32:	f003 bba7 	b.w	23fe184 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
#endif
  }
}
 23faa36:	4770      	bx	lr

023faa38 <_ZN18Adafruit_SPIDevice14endTransactionEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 */
void Adafruit_SPIDevice::endTransaction(void) {
  if (_spi) {
 23faa38:	6800      	ldr	r0, [r0, #0]
 23faa3a:	b108      	cbz	r0, 23faa40 <_ZN18Adafruit_SPIDevice14endTransactionEv+0x8>
#ifdef BUSIO_HAS_HW_SPI
    _spi->endTransaction();
 23faa3c:	f003 bb88 	b.w	23fe150 <_ZN8SPIClass14endTransactionEv>
#endif
  }
}
 23faa40:	4770      	bx	lr

023faa42 <_ZN18Adafruit_SPIDevice13setChipSelectEi>:
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
 23faa42:	f990 000e 	ldrsb.w	r0, [r0, #14]
 23faa46:	1c43      	adds	r3, r0, #1
 23faa48:	d003      	beq.n	23faa52 <_ZN18Adafruit_SPIDevice13setChipSelectEi+0x10>
    digitalWrite(_cs, value);
 23faa4a:	b2c9      	uxtb	r1, r1
 23faa4c:	b280      	uxth	r0, r0
 23faa4e:	f003 bee0 	b.w	23fe812 <digitalWrite>
  }
}
 23faa52:	4770      	bx	lr

023faa54 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>:
 *    @brief  Write a buffer or two to the SPI device, with transaction
 * management.
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
 23faa54:	b510      	push	{r4, lr}
 23faa56:	4604      	mov	r4, r0
  beginTransaction();
 23faa58:	f7ff ffe7 	bl	23faa2a <_ZN18Adafruit_SPIDevice16beginTransactionEv>
  setChipSelect(LOW);
 23faa5c:	4620      	mov	r0, r4
}
 23faa5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setChipSelect(LOW);
 23faa62:	2100      	movs	r1, #0
 23faa64:	f7ff bfed 	b.w	23faa42 <_ZN18Adafruit_SPIDevice13setChipSelectEi>

023faa68 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
 23faa68:	b510      	push	{r4, lr}
 23faa6a:	4604      	mov	r4, r0
  setChipSelect(HIGH);
 23faa6c:	2101      	movs	r1, #1
 23faa6e:	f7ff ffe8 	bl	23faa42 <_ZN18Adafruit_SPIDevice13setChipSelectEi>
  endTransaction();
 23faa72:	4620      	mov	r0, r4
}
 23faa74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  endTransaction();
 23faa78:	f7ff bfde 	b.w	23faa38 <_ZN18Adafruit_SPIDevice14endTransactionEv>

023faa7c <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23faa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23faa80:	461c      	mov	r4, r3
 23faa82:	4606      	mov	r6, r0
 23faa84:	460d      	mov	r5, r1
 23faa86:	4617      	mov	r7, r2
  beginTransactionWithAssertingCS();
 23faa88:	f7ff ffe4 	bl	23faa54 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
 23faa8c:	9b06      	ldr	r3, [sp, #24]
 23faa8e:	eb04 0803 	add.w	r8, r4, r3
 23faa92:	4544      	cmp	r4, r8
 23faa94:	d108      	bne.n	23faaa8 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x2c>
 23faa96:	442f      	add	r7, r5
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
 23faa98:	42bd      	cmp	r5, r7
 23faa9a:	d00b      	beq.n	23faab4 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x38>
      transfer(buffer[i]);
 23faa9c:	4630      	mov	r0, r6
 23faa9e:	f815 1b01 	ldrb.w	r1, [r5], #1
 23faaa2:	f7ff ffb5 	bl	23faa10 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < len; i++) {
 23faaa6:	e7f7      	b.n	23faa98 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x1c>
      transfer(prefix_buffer[i]);
 23faaa8:	4630      	mov	r0, r6
 23faaaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 23faaae:	f7ff ffaf 	bl	23faa10 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < prefix_len; i++) {
 23faab2:	e7ee      	b.n	23faa92 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x16>
    }
  }
  endTransactionWithDeassertingCS();
 23faab4:	4630      	mov	r0, r6
 23faab6:	f7ff ffd7 	bl	23faa68 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23faaba:	2001      	movs	r0, #1
 23faabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023faac0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 23faac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23faac4:	461f      	mov	r7, r3
 23faac6:	b085      	sub	sp, #20
 23faac8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23faacc:	eba7 0a01 	sub.w	sl, r7, r1
 23faad0:	eba8 0902 	sub.w	r9, r8, r2
 23faad4:	f1b9 0f00 	cmp.w	r9, #0
 23faad8:	bfb8      	it	lt
 23faada:	f1c9 0900 	rsblt	r9, r9, #0
 23faade:	f1ba 0f00 	cmp.w	sl, #0
 23faae2:	bfb8      	it	lt
 23faae4:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23faae8:	45d1      	cmp	r9, sl
                             uint16_t color) {
 23faaea:	4683      	mov	fp, r0
 23faaec:	460c      	mov	r4, r1
 23faaee:	4615      	mov	r5, r2
 23faaf0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23faaf4:	dd04      	ble.n	23fab00 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23faaf6:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 23faaf8:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 23faafa:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 23faafc:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
 23faafe:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23fab00:	42bc      	cmp	r4, r7
 23fab02:	dd05      	ble.n	23fab10 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23fab04:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 23fab06:	4645      	mov	r5, r8
 23fab08:	4690      	mov	r8, r2
  if (x0 > x1) {
 23fab0a:	4622      	mov	r2, r4
 23fab0c:	463c      	mov	r4, r7
 23fab0e:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23fab10:	1b3e      	subs	r6, r7, r4
 23fab12:	b2b2      	uxth	r2, r6
 23fab14:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23fab16:	eba8 0205 	sub.w	r2, r8, r5
 23fab1a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fab1e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23fab22:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fab26:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23fab2a:	4545      	cmp	r5, r8
 23fab2c:	bfb4      	ite	lt
 23fab2e:	2201      	movlt	r2, #1
 23fab30:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
 23fab34:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23fab36:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23fab38:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 23fab3a:	42bc      	cmp	r4, r7
 23fab3c:	dc1c      	bgt.n	23fab78 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
 23fab3e:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23fab42:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 23fab44:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23fab48:	bfc7      	ittee	gt
 23fab4a:	4629      	movgt	r1, r5
 23fab4c:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 23fab4e:	462a      	movle	r2, r5
 23fab50:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 23fab52:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 23fab54:	4658      	mov	r0, fp
 23fab56:	47c0      	blx	r8
    }
    err -= dy;
 23fab58:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 23fab5a:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23fab5c:	1ab6      	subs	r6, r6, r2
 23fab5e:	b2b1      	uxth	r1, r6
 23fab60:	b236      	sxth	r6, r6
    if (err < 0) {
 23fab62:	2e00      	cmp	r6, #0
 23fab64:	da05      	bge.n	23fab72 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
 23fab66:	9a02      	ldr	r2, [sp, #8]
 23fab68:	4415      	add	r5, r2
      err += dx;
 23fab6a:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23fab6c:	b22d      	sxth	r5, r5
      err += dx;
 23fab6e:	1856      	adds	r6, r2, r1
 23fab70:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 23fab72:	3401      	adds	r4, #1
 23fab74:	b224      	sxth	r4, r4
 23fab76:	e7e0      	b.n	23fab3a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
 23fab78:	b005      	add	sp, #20
 23fab7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fab7e <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 23fab7e:	4770      	bx	lr

023fab80 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fab80:	b410      	push	{r4}
  drawPixel(x, y, color);
 23fab82:	6804      	ldr	r4, [r0, #0]
 23fab84:	6924      	ldr	r4, [r4, #16]
 23fab86:	46a4      	mov	ip, r4
}
 23fab88:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 23fab8c:	4760      	bx	ip

023fab8e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 23fab8e:	b430      	push	{r4, r5}
 23fab90:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 23fab94:	6804      	ldr	r4, [r0, #0]
 23fab96:	9502      	str	r5, [sp, #8]
 23fab98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fab9a:	46a4      	mov	ip, r4
}
 23fab9c:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 23fab9e:	4760      	bx	ip

023faba0 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 23faba0:	b430      	push	{r4, r5}
 23faba2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 23faba6:	6804      	ldr	r4, [r0, #0]
 23faba8:	9502      	str	r5, [sp, #8]
 23fabaa:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fabac:	46a4      	mov	ip, r4
}
 23fabae:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 23fabb0:	4760      	bx	ip

023fabb2 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 23fabb2:	b470      	push	{r4, r5, r6}
 23fabb4:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fabb8:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 23fabbc:	6804      	ldr	r4, [r0, #0]
 23fabbe:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fabc2:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fabc4:	46a4      	mov	ip, r4
}
 23fabc6:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 23fabc8:	4760      	bx	ip

023fabca <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 23fabca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fabce:	461c      	mov	r4, r3
 23fabd0:	4616      	mov	r6, r2
 23fabd2:	4605      	mov	r5, r0
 23fabd4:	460f      	mov	r7, r1
  startWrite();
 23fabd6:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 23fabd8:	3c01      	subs	r4, #1
                                 uint16_t color) {
 23fabda:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23fabde:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 23fabe0:	4434      	add	r4, r6
  startWrite();
 23fabe2:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 23fabe4:	b224      	sxth	r4, r4
 23fabe6:	682b      	ldr	r3, [r5, #0]
 23fabe8:	f8cd 8004 	str.w	r8, [sp, #4]
 23fabec:	9400      	str	r4, [sp, #0]
 23fabee:	4628      	mov	r0, r5
 23fabf0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fabf2:	4632      	mov	r2, r6
 23fabf4:	463b      	mov	r3, r7
 23fabf6:	4639      	mov	r1, r7
 23fabf8:	47a0      	blx	r4
  endWrite();
 23fabfa:	4628      	mov	r0, r5
 23fabfc:	682b      	ldr	r3, [r5, #0]
 23fabfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fac00:	b002      	add	sp, #8
 23fac02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23fac06:	4718      	bx	r3

023fac08 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 23fac08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fac0c:	4617      	mov	r7, r2
 23fac0e:	4604      	mov	r4, r0
 23fac10:	461d      	mov	r5, r3
 23fac12:	460e      	mov	r6, r1
  startWrite();
 23fac14:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 23fac16:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23fac1a:	695b      	ldr	r3, [r3, #20]
 23fac1c:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 23fac1e:	e9cd 7800 	strd	r7, r8, [sp]
 23fac22:	6822      	ldr	r2, [r4, #0]
 23fac24:	1e6b      	subs	r3, r5, #1
 23fac26:	4433      	add	r3, r6
 23fac28:	4620      	mov	r0, r4
 23fac2a:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fac2c:	4631      	mov	r1, r6
 23fac2e:	463a      	mov	r2, r7
 23fac30:	b21b      	sxth	r3, r3
 23fac32:	47a8      	blx	r5
  endWrite();
 23fac34:	4620      	mov	r0, r4
 23fac36:	6823      	ldr	r3, [r4, #0]
 23fac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fac3a:	b002      	add	sp, #8
 23fac3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23fac40:	4718      	bx	r3

023fac42 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23fac42:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fac46:	461e      	mov	r6, r3
  startWrite();
 23fac48:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23fac4a:	460c      	mov	r4, r1
  startWrite();
 23fac4c:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23fac4e:	4605      	mov	r5, r0
 23fac50:	4617      	mov	r7, r2
 23fac52:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fac56:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23fac5a:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 23fac5c:	4426      	add	r6, r4
 23fac5e:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
 23fac60:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
 23fac62:	da0b      	bge.n	23fac7c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 23fac64:	f8cd 8000 	str.w	r8, [sp]
 23fac68:	4621      	mov	r1, r4
 23fac6a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fac6e:	463a      	mov	r2, r7
 23fac70:	464b      	mov	r3, r9
 23fac72:	4628      	mov	r0, r5
 23fac74:	3401      	adds	r4, #1
 23fac76:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 23fac78:	b224      	sxth	r4, r4
 23fac7a:	e7f0      	b.n	23fac5e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 23fac7c:	4628      	mov	r0, r5
 23fac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fac80:	b002      	add	sp, #8
 23fac82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fac86:	4718      	bx	r3

023fac88 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fac88:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23fac8a:	9101      	str	r1, [sp, #4]
 23fac8c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fac90:	6802      	ldr	r2, [r0, #0]
 23fac92:	9100      	str	r1, [sp, #0]
 23fac94:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fac96:	2200      	movs	r2, #0
 23fac98:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fac9c:	4611      	mov	r1, r2
 23fac9e:	47a0      	blx	r4
}
 23faca0:	b002      	add	sp, #8
 23faca2:	bd10      	pop	{r4, pc}

023faca4 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 23faca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
 23faca8:	4299      	cmp	r1, r3
                            uint16_t color) {
 23facaa:	4616      	mov	r6, r2
 23facac:	4680      	mov	r8, r0
 23facae:	460d      	mov	r5, r1
 23facb0:	461c      	mov	r4, r3
 23facb2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23facb6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23facba:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 23facbc:	d112      	bne.n	23face4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 23facbe:	42be      	cmp	r6, r7
 23facc0:	bfc2      	ittt	gt
 23facc2:	4633      	movgt	r3, r6
 23facc4:	463e      	movgt	r6, r7
 23facc6:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23facc8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23faccc:	1c7b      	adds	r3, r7, #1
 23facce:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23facd0:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23facd2:	4632      	mov	r2, r6
 23facd4:	4629      	mov	r1, r5
 23facd6:	4640      	mov	r0, r8
 23facd8:	46a4      	mov	ip, r4
 23facda:	b21b      	sxth	r3, r3
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 23facdc:	b003      	add	sp, #12
 23facde:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23face2:	4760      	bx	ip
  } else if (y0 == y1) {
 23face4:	42be      	cmp	r6, r7
 23face6:	d10a      	bne.n	23facfe <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 23face8:	4299      	cmp	r1, r3
 23facea:	bfc2      	ittt	gt
 23facec:	460b      	movgt	r3, r1
 23facee:	4625      	movgt	r5, r4
 23facf0:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23facf2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23facf6:	1c63      	adds	r3, r4, #1
 23facf8:	1b5b      	subs	r3, r3, r5
 23facfa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23facfc:	e7e9      	b.n	23facd2 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 23facfe:	6953      	ldr	r3, [r2, #20]
 23fad00:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 23fad02:	e9cd 7900 	strd	r7, r9, [sp]
 23fad06:	f8d8 3000 	ldr.w	r3, [r8]
 23fad0a:	4640      	mov	r0, r8
 23fad0c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23fad0e:	4632      	mov	r2, r6
 23fad10:	4623      	mov	r3, r4
 23fad12:	4629      	mov	r1, r5
 23fad14:	47b8      	blx	r7
    endWrite();
 23fad16:	4640      	mov	r0, r8
 23fad18:	f8d8 3000 	ldr.w	r3, [r8]
 23fad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fad1e:	b003      	add	sp, #12
 23fad20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 23fad24:	4718      	bx	r3

023fad26 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23fad26:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fad2a:	4604      	mov	r4, r0
 23fad2c:	460f      	mov	r7, r1
 23fad2e:	4616      	mov	r6, r2
 23fad30:	461d      	mov	r5, r3
  startWrite();
 23fad32:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23fad34:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23fad38:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23fad3a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 23fad3e:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 23fad40:	6823      	ldr	r3, [r4, #0]
 23fad42:	f8cd 8000 	str.w	r8, [sp]
 23fad46:	4632      	mov	r2, r6
 23fad48:	4639      	mov	r1, r7
 23fad4a:	4620      	mov	r0, r4
 23fad4c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fad50:	462b      	mov	r3, r5
 23fad52:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 23fad54:	6823      	ldr	r3, [r4, #0]
 23fad56:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23fad5a:	f8cd 8000 	str.w	r8, [sp]
 23fad5e:	4432      	add	r2, r6
 23fad60:	4639      	mov	r1, r7
 23fad62:	4620      	mov	r0, r4
 23fad64:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fad68:	b212      	sxth	r2, r2
 23fad6a:	462b      	mov	r3, r5
 23fad6c:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 23fad6e:	6823      	ldr	r3, [r4, #0]
 23fad70:	f8cd 8000 	str.w	r8, [sp]
 23fad74:	4632      	mov	r2, r6
 23fad76:	4639      	mov	r1, r7
 23fad78:	4620      	mov	r0, r4
 23fad7a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fad7e:	464b      	mov	r3, r9
 23fad80:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 23fad82:	1e6b      	subs	r3, r5, #1
 23fad84:	19d9      	adds	r1, r3, r7
 23fad86:	6823      	ldr	r3, [r4, #0]
 23fad88:	f8cd 8000 	str.w	r8, [sp]
 23fad8c:	4620      	mov	r0, r4
 23fad8e:	6a1d      	ldr	r5, [r3, #32]
 23fad90:	4632      	mov	r2, r6
 23fad92:	464b      	mov	r3, r9
 23fad94:	b209      	sxth	r1, r1
 23fad96:	47a8      	blx	r5
  endWrite();
 23fad98:	4620      	mov	r0, r4
 23fad9a:	6823      	ldr	r3, [r4, #0]
 23fad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fad9e:	b002      	add	sp, #8
 23fada0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fada4:	4718      	bx	r3

023fada6 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 23fada6:	4770      	bx	lr

023fada8 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 23fada8:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 23fadac:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 23fadb0:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 23fadb2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch (rotation) {
 23fadb6:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 23fadb8:	bf59      	ittee	pl
 23fadba:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 23fadbc:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 23fadbe:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 23fadc0:	81c3      	strhmi	r3, [r0, #14]
}
 23fadc2:	4770      	bx	lr

023fadc4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23fadc4:	b530      	push	{r4, r5, lr}
 23fadc6:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 23fadc8:	2400      	movs	r4, #0
  _width = WIDTH;
 23fadca:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 23fadcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23fadd0:	4d05      	ldr	r5, [pc, #20]	; (23fade8 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fadd2:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 23fadd4:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 23fadd6:	4a05      	ldr	r2, [pc, #20]	; (23fadec <_ZN12Adafruit_GFXC1Ess+0x28>)
 23fadd8:	6044      	str	r4, [r0, #4]
 23fadda:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23fadde:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 23fade0:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 23fade2:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 23fade4:	6204      	str	r4, [r0, #32]
}
 23fade6:	bd30      	pop	{r4, r5, pc}
 23fade8:	023ff330 	.word	0x023ff330
 23fadec:	01000101 	.word	0x01000101

023fadf0 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>:
                                    uint8_t cornername, uint16_t color) {
 23fadf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fadf4:	461c      	mov	r4, r3
 23fadf6:	b087      	sub	sp, #28
 23fadf8:	9200      	str	r2, [sp, #0]
  int16_t f = 1 - r;
 23fadfa:	b2a2      	uxth	r2, r4
 23fadfc:	f1c2 0601 	rsb	r6, r2, #1
  int16_t ddF_y = -2 * r;
 23fae00:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 23fae04:	0052      	lsls	r2, r2, #1
 23fae06:	b212      	sxth	r2, r2
 23fae08:	9203      	str	r2, [sp, #12]
  int16_t x = 0;
 23fae0a:	2200      	movs	r2, #0
                                    uint8_t cornername, uint16_t color) {
 23fae0c:	4680      	mov	r8, r0
 23fae0e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  int16_t x = 0;
 23fae12:	9202      	str	r2, [sp, #8]
                                    uint8_t cornername, uint16_t color) {
 23fae14:	9301      	str	r3, [sp, #4]
    if (cornername & 0x4) {
 23fae16:	9a01      	ldr	r2, [sp, #4]
                                    uint8_t cornername, uint16_t color) {
 23fae18:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (cornername & 0x4) {
 23fae1c:	f002 0204 	and.w	r2, r2, #4
  int16_t f = 1 - r;
 23fae20:	b236      	sxth	r6, r6
    if (cornername & 0x4) {
 23fae22:	9204      	str	r2, [sp, #16]
      writePixel(x0 + x, y0 + y, color);
 23fae24:	b28f      	uxth	r7, r1
  while (x < y) {
 23fae26:	9a02      	ldr	r2, [sp, #8]
 23fae28:	42a2      	cmp	r2, r4
 23fae2a:	f280 8099 	bge.w	23faf60 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x170>
    if (f >= 0) {
 23fae2e:	2e00      	cmp	r6, #0
 23fae30:	db08      	blt.n	23fae44 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x54>
      ddF_y += 2;
 23fae32:	9a03      	ldr	r2, [sp, #12]
      y--;
 23fae34:	3c01      	subs	r4, #1
      ddF_y += 2;
 23fae36:	3202      	adds	r2, #2
 23fae38:	b211      	sxth	r1, r2
      f += ddF_y;
 23fae3a:	fa16 f682 	uxtah	r6, r6, r2
      y--;
 23fae3e:	b224      	sxth	r4, r4
      ddF_y += 2;
 23fae40:	9103      	str	r1, [sp, #12]
      f += ddF_y;
 23fae42:	b236      	sxth	r6, r6
    x++;
 23fae44:	9a02      	ldr	r2, [sp, #8]
 23fae46:	3201      	adds	r2, #1
 23fae48:	b295      	uxth	r5, r2
 23fae4a:	b212      	sxth	r2, r2
 23fae4c:	9202      	str	r2, [sp, #8]
    ddF_x += 2;
 23fae4e:	eb06 0645 	add.w	r6, r6, r5, lsl #1
    if (cornername & 0x4) {
 23fae52:	9a04      	ldr	r2, [sp, #16]
    f += ddF_x;
 23fae54:	3601      	adds	r6, #1
 23fae56:	b236      	sxth	r6, r6
    if (cornername & 0x4) {
 23fae58:	b1f2      	cbz	r2, 23fae98 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0xa8>
      writePixel(x0 + x, y0 + y, color);
 23fae5a:	9a00      	ldr	r2, [sp, #0]
 23fae5c:	f8d8 0000 	ldr.w	r0, [r8]
 23fae60:	fa1f fa84 	uxth.w	sl, r4
 23fae64:	fa1a f282 	uxtah	r2, sl, r2
 23fae68:	1979      	adds	r1, r7, r5
 23fae6a:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23fae6e:	f8bd 9000 	ldrh.w	r9, [sp]
 23fae72:	4640      	mov	r0, r8
 23fae74:	9305      	str	r3, [sp, #20]
 23fae76:	b212      	sxth	r2, r2
 23fae78:	b209      	sxth	r1, r1
 23fae7a:	47d8      	blx	fp
      writePixel(x0 + y, y0 + x, color);
 23fae7c:	f8d8 3000 	ldr.w	r3, [r8]
 23fae80:	eb09 0205 	add.w	r2, r9, r5
 23fae84:	eb07 010a 	add.w	r1, r7, sl
 23fae88:	f8d3 b018 	ldr.w	fp, [r3, #24]
 23fae8c:	4640      	mov	r0, r8
 23fae8e:	9b05      	ldr	r3, [sp, #20]
 23fae90:	b212      	sxth	r2, r2
 23fae92:	b209      	sxth	r1, r1
 23fae94:	47d8      	blx	fp
 23fae96:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x2) {
 23fae98:	9a01      	ldr	r2, [sp, #4]
 23fae9a:	0790      	lsls	r0, r2, #30
 23fae9c:	d51d      	bpl.n	23faeda <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0xea>
      writePixel(x0 + x, y0 - y, color);
 23fae9e:	f8bd 9000 	ldrh.w	r9, [sp]
 23faea2:	f8d8 0000 	ldr.w	r0, [r8]
 23faea6:	fa1f fa84 	uxth.w	sl, r4
 23faeaa:	eba9 020a 	sub.w	r2, r9, sl
 23faeae:	1979      	adds	r1, r7, r5
 23faeb0:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23faeb4:	9305      	str	r3, [sp, #20]
 23faeb6:	4640      	mov	r0, r8
 23faeb8:	b212      	sxth	r2, r2
 23faeba:	b209      	sxth	r1, r1
 23faebc:	47d8      	blx	fp
      writePixel(x0 + y, y0 - x, color);
 23faebe:	f8d8 3000 	ldr.w	r3, [r8]
 23faec2:	eba9 0205 	sub.w	r2, r9, r5
 23faec6:	eb07 010a 	add.w	r1, r7, sl
 23faeca:	f8d3 b018 	ldr.w	fp, [r3, #24]
 23faece:	4640      	mov	r0, r8
 23faed0:	9b05      	ldr	r3, [sp, #20]
 23faed2:	b212      	sxth	r2, r2
 23faed4:	b209      	sxth	r1, r1
 23faed6:	47d8      	blx	fp
 23faed8:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x8) {
 23faeda:	9a01      	ldr	r2, [sp, #4]
 23faedc:	0711      	lsls	r1, r2, #28
 23faede:	d51e      	bpl.n	23faf1e <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x12e>
      writePixel(x0 - y, y0 + x, color);
 23faee0:	9a00      	ldr	r2, [sp, #0]
 23faee2:	f8d8 0000 	ldr.w	r0, [r8]
 23faee6:	fa1f f984 	uxth.w	r9, r4
 23faeea:	fa15 f282 	uxtah	r2, r5, r2
 23faeee:	eba7 0109 	sub.w	r1, r7, r9
 23faef2:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23faef6:	f8bd a000 	ldrh.w	sl, [sp]
 23faefa:	4640      	mov	r0, r8
 23faefc:	9305      	str	r3, [sp, #20]
 23faefe:	b212      	sxth	r2, r2
 23faf00:	b209      	sxth	r1, r1
 23faf02:	47d8      	blx	fp
      writePixel(x0 - x, y0 + y, color);
 23faf04:	f8d8 3000 	ldr.w	r3, [r8]
 23faf08:	eb09 020a 	add.w	r2, r9, sl
 23faf0c:	1b79      	subs	r1, r7, r5
 23faf0e:	f8d3 b018 	ldr.w	fp, [r3, #24]
 23faf12:	4640      	mov	r0, r8
 23faf14:	9b05      	ldr	r3, [sp, #20]
 23faf16:	b212      	sxth	r2, r2
 23faf18:	b209      	sxth	r1, r1
 23faf1a:	47d8      	blx	fp
 23faf1c:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x1) {
 23faf1e:	9a01      	ldr	r2, [sp, #4]
 23faf20:	07d2      	lsls	r2, r2, #31
 23faf22:	d580      	bpl.n	23fae26 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x36>
      writePixel(x0 - y, y0 - x, color);
 23faf24:	f8bd 9000 	ldrh.w	r9, [sp]
 23faf28:	f8d8 0000 	ldr.w	r0, [r8]
 23faf2c:	fa1f fa84 	uxth.w	sl, r4
 23faf30:	eba9 0205 	sub.w	r2, r9, r5
 23faf34:	eba7 010a 	sub.w	r1, r7, sl
 23faf38:	f8d0 b018 	ldr.w	fp, [r0, #24]
 23faf3c:	9305      	str	r3, [sp, #20]
 23faf3e:	4640      	mov	r0, r8
 23faf40:	b212      	sxth	r2, r2
 23faf42:	b209      	sxth	r1, r1
 23faf44:	47d8      	blx	fp
      writePixel(x0 - x, y0 - y, color);
 23faf46:	1b79      	subs	r1, r7, r5
 23faf48:	f8d8 5000 	ldr.w	r5, [r8]
 23faf4c:	eba9 020a 	sub.w	r2, r9, sl
 23faf50:	9b05      	ldr	r3, [sp, #20]
 23faf52:	4640      	mov	r0, r8
 23faf54:	69ad      	ldr	r5, [r5, #24]
 23faf56:	b212      	sxth	r2, r2
 23faf58:	b209      	sxth	r1, r1
 23faf5a:	47a8      	blx	r5
 23faf5c:	9b05      	ldr	r3, [sp, #20]
 23faf5e:	e762      	b.n	23fae26 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x36>
}
 23faf60:	b007      	add	sp, #28
 23faf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023faf66 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
                                    uint16_t color) {
 23faf66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23faf6a:	461c      	mov	r4, r3
 23faf6c:	b08b      	sub	sp, #44	; 0x2c
 23faf6e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 23faf72:	4683      	mov	fp, r0
 23faf74:	9304      	str	r3, [sp, #16]
  int16_t f = 1 - r;
 23faf76:	b2a3      	uxth	r3, r4
 23faf78:	f1c3 0501 	rsb	r5, r3, #1
  int16_t ddF_y = -2 * r;
 23faf7c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 23faf80:	005b      	lsls	r3, r3, #1
 23faf82:	b21b      	sxth	r3, r3
 23faf84:	9307      	str	r3, [sp, #28]
  delta++; // Avoid some +1's in the loop
 23faf86:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
                                    uint16_t color) {
 23faf8a:	4688      	mov	r8, r1
  delta++; // Avoid some +1's in the loop
 23faf8c:	3301      	adds	r3, #1
 23faf8e:	b29b      	uxth	r3, r3
 23faf90:	9305      	str	r3, [sp, #20]
 23faf92:	b293      	uxth	r3, r2
 23faf94:	9306      	str	r3, [sp, #24]
 23faf96:	9b05      	ldr	r3, [sp, #20]
                                    uint16_t color) {
 23faf98:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
  delta++; // Avoid some +1's in the loop
 23faf9c:	9303      	str	r3, [sp, #12]
  int16_t x = 0;
 23faf9e:	2300      	movs	r3, #0
 23fafa0:	9302      	str	r3, [sp, #8]
      if (corners & 1)
 23fafa2:	f001 0301 	and.w	r3, r1, #1
 23fafa6:	9308      	str	r3, [sp, #32]
  delta++; // Avoid some +1's in the loop
 23fafa8:	f8dd a018 	ldr.w	sl, [sp, #24]
      if (corners & 2)
 23fafac:	f001 0302 	and.w	r3, r1, #2
  int16_t f = 1 - r;
 23fafb0:	b22d      	sxth	r5, r5
      if (corners & 2)
 23fafb2:	9309      	str	r3, [sp, #36]	; 0x24
  while (x < y) {
 23fafb4:	9b02      	ldr	r3, [sp, #8]
 23fafb6:	42a3      	cmp	r3, r4
 23fafb8:	da6f      	bge.n	23fb09a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
    if (f >= 0) {
 23fafba:	2d00      	cmp	r5, #0
 23fafbc:	db6b      	blt.n	23fb096 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
      ddF_y += 2;
 23fafbe:	9b07      	ldr	r3, [sp, #28]
      y--;
 23fafc0:	1e66      	subs	r6, r4, #1
      ddF_y += 2;
 23fafc2:	3302      	adds	r3, #2
 23fafc4:	b21a      	sxth	r2, r3
      f += ddF_y;
 23fafc6:	fa15 f583 	uxtah	r5, r5, r3
      y--;
 23fafca:	b236      	sxth	r6, r6
      ddF_y += 2;
 23fafcc:	9207      	str	r2, [sp, #28]
      f += ddF_y;
 23fafce:	b22d      	sxth	r5, r5
    x++;
 23fafd0:	9f02      	ldr	r7, [sp, #8]
 23fafd2:	3701      	adds	r7, #1
 23fafd4:	fa1f f987 	uxth.w	r9, r7
 23fafd8:	b23b      	sxth	r3, r7
    ddF_x += 2;
 23fafda:	eb05 0549 	add.w	r5, r5, r9, lsl #1
    f += ddF_x;
 23fafde:	3501      	adds	r5, #1
    if (x < (y + 1)) {
 23fafe0:	429e      	cmp	r6, r3
 23fafe2:	9302      	str	r3, [sp, #8]
    f += ddF_x;
 23fafe4:	b22d      	sxth	r5, r5
    if (x < (y + 1)) {
 23fafe6:	db29      	blt.n	23fb03c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
      if (corners & 1)
 23fafe8:	9b08      	ldr	r3, [sp, #32]
 23fafea:	b193      	cbz	r3, 23fb012 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
        writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 23fafec:	9804      	ldr	r0, [sp, #16]
 23fafee:	9906      	ldr	r1, [sp, #24]
 23faff0:	9000      	str	r0, [sp, #0]
 23faff2:	f8db 0000 	ldr.w	r0, [fp]
 23faff6:	9b05      	ldr	r3, [sp, #20]
 23faff8:	6a00      	ldr	r0, [r0, #32]
 23faffa:	b2b2      	uxth	r2, r6
 23faffc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 23fb000:	1a8a      	subs	r2, r1, r2
 23fb002:	eb09 0108 	add.w	r1, r9, r8
 23fb006:	4607      	mov	r7, r0
 23fb008:	b21b      	sxth	r3, r3
 23fb00a:	4658      	mov	r0, fp
 23fb00c:	b212      	sxth	r2, r2
 23fb00e:	b209      	sxth	r1, r1
 23fb010:	47b8      	blx	r7
      if (corners & 2)
 23fb012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb014:	b193      	cbz	r3, 23fb03c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
        writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 23fb016:	9804      	ldr	r0, [sp, #16]
 23fb018:	9906      	ldr	r1, [sp, #24]
 23fb01a:	9b05      	ldr	r3, [sp, #20]
 23fb01c:	b2b2      	uxth	r2, r6
 23fb01e:	9000      	str	r0, [sp, #0]
 23fb020:	f8db 0000 	ldr.w	r0, [fp]
 23fb024:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 23fb028:	1a8a      	subs	r2, r1, r2
 23fb02a:	eba8 0109 	sub.w	r1, r8, r9
 23fb02e:	b21b      	sxth	r3, r3
 23fb030:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fb034:	b212      	sxth	r2, r2
 23fb036:	4658      	mov	r0, fp
 23fb038:	b209      	sxth	r1, r1
 23fb03a:	47c8      	blx	r9
    if (y != py) {
 23fb03c:	42b4      	cmp	r4, r6
 23fb03e:	d020      	beq.n	23fb082 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
      if (corners & 1)
 23fb040:	9b08      	ldr	r3, [sp, #32]
 23fb042:	b173      	cbz	r3, 23fb062 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
        writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 23fb044:	9a04      	ldr	r2, [sp, #16]
 23fb046:	f8db 3000 	ldr.w	r3, [fp]
 23fb04a:	9200      	str	r2, [sp, #0]
 23fb04c:	eb08 0104 	add.w	r1, r8, r4
 23fb050:	f8d3 9020 	ldr.w	r9, [r3, #32]
 23fb054:	4658      	mov	r0, fp
 23fb056:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 23fb05a:	fa0f f28a 	sxth.w	r2, sl
 23fb05e:	b209      	sxth	r1, r1
 23fb060:	47c8      	blx	r9
      if (corners & 2)
 23fb062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb064:	b16b      	cbz	r3, 23fb082 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
        writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 23fb066:	9a04      	ldr	r2, [sp, #16]
 23fb068:	f8db 3000 	ldr.w	r3, [fp]
 23fb06c:	eba8 0104 	sub.w	r1, r8, r4
 23fb070:	9200      	str	r2, [sp, #0]
 23fb072:	6a1c      	ldr	r4, [r3, #32]
 23fb074:	4658      	mov	r0, fp
 23fb076:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 23fb07a:	fa0f f28a 	sxth.w	r2, sl
 23fb07e:	b209      	sxth	r1, r1
 23fb080:	47a0      	blx	r4
 23fb082:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 23fb086:	fa1f fa83 	uxth.w	sl, r3
 23fb08a:	9b03      	ldr	r3, [sp, #12]
                                    uint16_t color) {
 23fb08c:	4634      	mov	r4, r6
 23fb08e:	3302      	adds	r3, #2
 23fb090:	b29b      	uxth	r3, r3
 23fb092:	9303      	str	r3, [sp, #12]
 23fb094:	e78e      	b.n	23fafb4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
 23fb096:	4626      	mov	r6, r4
 23fb098:	e79a      	b.n	23fafd0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
 23fb09a:	b00b      	add	sp, #44	; 0x2c
 23fb09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb0a0 <_ZN12Adafruit_GFX13drawRoundRectEssssst>:
                                 int16_t r, uint16_t color) {
 23fb0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb0a4:	b089      	sub	sp, #36	; 0x24
 23fb0a6:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 23fb0aa:	468b      	mov	fp, r1
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fb0ac:	4599      	cmp	r9, r3
 23fb0ae:	464d      	mov	r5, r9
 23fb0b0:	bfa8      	it	ge
 23fb0b2:	461d      	movge	r5, r3
                                 int16_t r, uint16_t color) {
 23fb0b4:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fb0b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 23fb0bc:	106e      	asrs	r6, r5, #1
 23fb0be:	428e      	cmp	r6, r1
 23fb0c0:	bfa8      	it	ge
 23fb0c2:	460e      	movge	r6, r1
                                 int16_t r, uint16_t color) {
 23fb0c4:	4604      	mov	r4, r0
  startWrite();
 23fb0c6:	6801      	ldr	r1, [r0, #0]
                                 int16_t r, uint16_t color) {
 23fb0c8:	9205      	str	r2, [sp, #20]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fb0ca:	9302      	str	r3, [sp, #8]
  startWrite();
 23fb0cc:	6949      	ldr	r1, [r1, #20]
                                 int16_t r, uint16_t color) {
 23fb0ce:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
  startWrite();
 23fb0d2:	4788      	blx	r1
  writeFastHLine(x + r, y, w - 2 * r, color);         // Top
 23fb0d4:	fa1f f38b 	uxth.w	r3, fp
 23fb0d8:	9304      	str	r3, [sp, #16]
 23fb0da:	9b02      	ldr	r3, [sp, #8]
 23fb0dc:	fa1f fa86 	uxth.w	sl, r6
 23fb0e0:	b29b      	uxth	r3, r3
 23fb0e2:	9302      	str	r3, [sp, #8]
 23fb0e4:	ea4f 034a 	mov.w	r3, sl, lsl #1
 23fb0e8:	b29b      	uxth	r3, r3
 23fb0ea:	9303      	str	r3, [sp, #12]
 23fb0ec:	6821      	ldr	r1, [r4, #0]
 23fb0ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 23fb0f2:	fa1a f88b 	uxtah	r8, sl, fp
 23fb0f6:	1a9b      	subs	r3, r3, r2
 23fb0f8:	fa0f f888 	sxth.w	r8, r8
 23fb0fc:	b21b      	sxth	r3, r3
 23fb0fe:	9700      	str	r7, [sp, #0]
 23fb100:	4620      	mov	r0, r4
 23fb102:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 23fb104:	9a05      	ldr	r2, [sp, #20]
 23fb106:	4641      	mov	r1, r8
 23fb108:	9307      	str	r3, [sp, #28]
 23fb10a:	47a8      	blx	r5
  writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 23fb10c:	9a05      	ldr	r2, [sp, #20]
 23fb10e:	6821      	ldr	r1, [r4, #0]
 23fb110:	b295      	uxth	r5, r2
 23fb112:	1e6a      	subs	r2, r5, #1
 23fb114:	fa1f f389 	uxth.w	r3, r9
 23fb118:	fa12 f289 	uxtah	r2, r2, r9
 23fb11c:	9305      	str	r3, [sp, #20]
 23fb11e:	9700      	str	r7, [sp, #0]
 23fb120:	b293      	uxth	r3, r2
 23fb122:	4620      	mov	r0, r4
 23fb124:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 23fb128:	9306      	str	r3, [sp, #24]
 23fb12a:	4641      	mov	r1, r8
 23fb12c:	9b07      	ldr	r3, [sp, #28]
 23fb12e:	b212      	sxth	r2, r2
 23fb130:	47c8      	blx	r9
  writeFastVLine(x, y + r, h - 2 * r, color);         // Left
 23fb132:	9903      	ldr	r1, [sp, #12]
 23fb134:	9b05      	ldr	r3, [sp, #20]
 23fb136:	eb0a 0205 	add.w	r2, sl, r5
 23fb13a:	1a5b      	subs	r3, r3, r1
 23fb13c:	6821      	ldr	r1, [r4, #0]
 23fb13e:	b212      	sxth	r2, r2
 23fb140:	b21b      	sxth	r3, r3
 23fb142:	9700      	str	r7, [sp, #0]
 23fb144:	4620      	mov	r0, r4
 23fb146:	6a0d      	ldr	r5, [r1, #32]
 23fb148:	9305      	str	r3, [sp, #20]
 23fb14a:	4659      	mov	r1, fp
 23fb14c:	9203      	str	r2, [sp, #12]
 23fb14e:	47a8      	blx	r5
  writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 23fb150:	9b04      	ldr	r3, [sp, #16]
 23fb152:	6820      	ldr	r0, [r4, #0]
 23fb154:	1e59      	subs	r1, r3, #1
 23fb156:	9b02      	ldr	r3, [sp, #8]
 23fb158:	9a03      	ldr	r2, [sp, #12]
 23fb15a:	4419      	add	r1, r3
 23fb15c:	9700      	str	r7, [sp, #0]
 23fb15e:	6a05      	ldr	r5, [r0, #32]
 23fb160:	9b05      	ldr	r3, [sp, #20]
 23fb162:	4620      	mov	r0, r4
 23fb164:	fa1f f981 	uxth.w	r9, r1
 23fb168:	9202      	str	r2, [sp, #8]
 23fb16a:	b209      	sxth	r1, r1
 23fb16c:	47a8      	blx	r5
  drawCircleHelper(x + r, y + r, r, 1, color);
 23fb16e:	2301      	movs	r3, #1
 23fb170:	4641      	mov	r1, r8
 23fb172:	4620      	mov	r0, r4
 23fb174:	9a02      	ldr	r2, [sp, #8]
 23fb176:	9300      	str	r3, [sp, #0]
 23fb178:	9701      	str	r7, [sp, #4]
 23fb17a:	4633      	mov	r3, r6
 23fb17c:	f7ff fe38 	bl	23fadf0 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 23fb180:	2302      	movs	r3, #2
 23fb182:	eba9 010a 	sub.w	r1, r9, sl
 23fb186:	4620      	mov	r0, r4
 23fb188:	9a02      	ldr	r2, [sp, #8]
 23fb18a:	b209      	sxth	r1, r1
 23fb18c:	9300      	str	r3, [sp, #0]
 23fb18e:	9701      	str	r7, [sp, #4]
 23fb190:	4633      	mov	r3, r6
 23fb192:	9103      	str	r1, [sp, #12]
 23fb194:	f7ff fe2c 	bl	23fadf0 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 23fb198:	9b06      	ldr	r3, [sp, #24]
 23fb19a:	4620      	mov	r0, r4
 23fb19c:	eba3 020a 	sub.w	r2, r3, sl
 23fb1a0:	2304      	movs	r3, #4
 23fb1a2:	9903      	ldr	r1, [sp, #12]
 23fb1a4:	b212      	sxth	r2, r2
 23fb1a6:	9300      	str	r3, [sp, #0]
 23fb1a8:	9701      	str	r7, [sp, #4]
 23fb1aa:	4633      	mov	r3, r6
 23fb1ac:	9202      	str	r2, [sp, #8]
 23fb1ae:	f7ff fe1f 	bl	23fadf0 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 23fb1b2:	2308      	movs	r3, #8
 23fb1b4:	4620      	mov	r0, r4
 23fb1b6:	9300      	str	r3, [sp, #0]
 23fb1b8:	4641      	mov	r1, r8
 23fb1ba:	4633      	mov	r3, r6
 23fb1bc:	9a02      	ldr	r2, [sp, #8]
 23fb1be:	9701      	str	r7, [sp, #4]
 23fb1c0:	f7ff fe16 	bl	23fadf0 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  endWrite();
 23fb1c4:	4620      	mov	r0, r4
 23fb1c6:	6823      	ldr	r3, [r4, #0]
 23fb1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb1ca:	b009      	add	sp, #36	; 0x24
 23fb1cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23fb1d0:	4718      	bx	r3

023fb1d2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>:
                                 int16_t r, uint16_t color) {
 23fb1d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb1d6:	ed2d 8b02 	vpush	{d8}
 23fb1da:	4699      	mov	r9, r3
 23fb1dc:	b087      	sub	sp, #28
 23fb1de:	f9bd 5048 	ldrsh.w	r5, [sp, #72]	; 0x48
 23fb1e2:	460f      	mov	r7, r1
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fb1e4:	454d      	cmp	r5, r9
 23fb1e6:	462b      	mov	r3, r5
 23fb1e8:	bfa8      	it	ge
 23fb1ea:	464b      	movge	r3, r9
                                 int16_t r, uint16_t color) {
 23fb1ec:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 23fb1f0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23fb1f4:	105c      	asrs	r4, r3, #1
 23fb1f6:	428c      	cmp	r4, r1
 23fb1f8:	bfa8      	it	ge
 23fb1fa:	460c      	movge	r4, r1
  startWrite();
 23fb1fc:	6803      	ldr	r3, [r0, #0]
                                 int16_t r, uint16_t color) {
 23fb1fe:	4606      	mov	r6, r0
  writeFillRect(x + r, y, w - 2 * r, h, color);
 23fb200:	fa1f f884 	uxth.w	r8, r4
  startWrite();
 23fb204:	695b      	ldr	r3, [r3, #20]
                                 int16_t r, uint16_t color) {
 23fb206:	4693      	mov	fp, r2
 23fb208:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 23fb20c:	4798      	blx	r3
  writeFillRect(x + r, y, w - 2 * r, h, color);
 23fb20e:	b2bb      	uxth	r3, r7
 23fb210:	fa18 f787 	uxtah	r7, r8, r7
 23fb214:	9305      	str	r3, [sp, #20]
 23fb216:	b23b      	sxth	r3, r7
 23fb218:	ee08 3a10 	vmov	s16, r3
 23fb21c:	e9cd 5a00 	strd	r5, sl, [sp]
 23fb220:	6831      	ldr	r1, [r6, #0]
 23fb222:	fa1f f389 	uxth.w	r3, r9
 23fb226:	ea4f 0948 	mov.w	r9, r8, lsl #1
 23fb22a:	69ca      	ldr	r2, [r1, #28]
 23fb22c:	fa1f f989 	uxth.w	r9, r9
 23fb230:	9304      	str	r3, [sp, #16]
 23fb232:	eba3 0309 	sub.w	r3, r3, r9
 23fb236:	4617      	mov	r7, r2
 23fb238:	ee18 1a10 	vmov	r1, s16
 23fb23c:	465a      	mov	r2, fp
 23fb23e:	4630      	mov	r0, r6
 23fb240:	b21b      	sxth	r3, r3
 23fb242:	47b8      	blx	r7
  fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 23fb244:	9b05      	ldr	r3, [sp, #20]
 23fb246:	3d01      	subs	r5, #1
 23fb248:	1e59      	subs	r1, r3, #1
 23fb24a:	9b04      	ldr	r3, [sp, #16]
 23fb24c:	eba5 0509 	sub.w	r5, r5, r9
 23fb250:	4419      	add	r1, r3
 23fb252:	2301      	movs	r3, #1
 23fb254:	b22d      	sxth	r5, r5
 23fb256:	eb08 020b 	add.w	r2, r8, fp
 23fb25a:	eba1 0108 	sub.w	r1, r1, r8
 23fb25e:	4630      	mov	r0, r6
 23fb260:	b212      	sxth	r2, r2
 23fb262:	9300      	str	r3, [sp, #0]
 23fb264:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 23fb268:	4623      	mov	r3, r4
 23fb26a:	b209      	sxth	r1, r1
 23fb26c:	9204      	str	r2, [sp, #16]
 23fb26e:	f7ff fe7a 	bl	23faf66 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 23fb272:	2302      	movs	r3, #2
 23fb274:	4630      	mov	r0, r6
 23fb276:	9300      	str	r3, [sp, #0]
 23fb278:	ee18 1a10 	vmov	r1, s16
 23fb27c:	4623      	mov	r3, r4
 23fb27e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 23fb282:	9a04      	ldr	r2, [sp, #16]
 23fb284:	f7ff fe6f 	bl	23faf66 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 23fb288:	4630      	mov	r0, r6
 23fb28a:	6833      	ldr	r3, [r6, #0]
 23fb28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb28e:	b007      	add	sp, #28
 23fb290:	ecbd 8b02 	vpop	{d8}
 23fb294:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23fb298:	4718      	bx	r3

023fb29a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
 23fb29a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 23fb29e:	2600      	movs	r6, #0
  uint8_t b = 0;
 23fb2a0:	4635      	mov	r5, r6
                              int16_t w, int16_t h, uint16_t color) {
 23fb2a2:	b089      	sub	sp, #36	; 0x24
 23fb2a4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fb2a8:	9304      	str	r3, [sp, #16]
  startWrite();
 23fb2aa:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
 23fb2ac:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 23fb2b0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
  startWrite();
 23fb2b4:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
 23fb2b6:	9305      	str	r3, [sp, #20]
 23fb2b8:	4604      	mov	r4, r0
 23fb2ba:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 23fb2be:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 23fb2c0:	f118 0207 	adds.w	r2, r8, #7
 23fb2c4:	bf48      	it	mi
 23fb2c6:	f108 020e 	addmi.w	r2, r8, #14
 23fb2ca:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
 23fb2ce:	9601      	str	r6, [sp, #4]
 23fb2d0:	9b03      	ldr	r3, [sp, #12]
 23fb2d2:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
 23fb2d4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 23fb2d8:	189a      	adds	r2, r3, r2
 23fb2da:	9b05      	ldr	r3, [sp, #20]
 23fb2dc:	b212      	sxth	r2, r2
 23fb2de:	428b      	cmp	r3, r1
 23fb2e0:	dd27      	ble.n	23fb332 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 23fb2e2:	f04f 0900 	mov.w	r9, #0
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23fb2e6:	9b04      	ldr	r3, [sp, #16]
 23fb2e8:	4433      	add	r3, r6
 23fb2ea:	9306      	str	r3, [sp, #24]
 23fb2ec:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
 23fb2f0:	4580      	cmp	r8, r0
 23fb2f2:	fa1f f189 	uxth.w	r1, r9
 23fb2f6:	dd17      	ble.n	23fb328 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if (i & 7)
 23fb2f8:	074f      	lsls	r7, r1, #29
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23fb2fa:	bf05      	ittet	eq
 23fb2fc:	9b06      	ldreq	r3, [sp, #24]
 23fb2fe:	10c0      	asreq	r0, r0, #3
        b <<= 1;
 23fb300:	006d      	lslne	r5, r5, #1
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23fb302:	5c1d      	ldrbeq	r5, [r3, r0]
        b <<= 1;
 23fb304:	bf18      	it	ne
 23fb306:	b2ed      	uxtbne	r5, r5
      if (b & 0x80)
 23fb308:	062b      	lsls	r3, r5, #24
 23fb30a:	d50a      	bpl.n	23fb322 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
        writePixel(x + i, y, color);
 23fb30c:	9b02      	ldr	r3, [sp, #8]
 23fb30e:	6820      	ldr	r0, [r4, #0]
 23fb310:	4419      	add	r1, r3
 23fb312:	6983      	ldr	r3, [r0, #24]
 23fb314:	9207      	str	r2, [sp, #28]
 23fb316:	461f      	mov	r7, r3
 23fb318:	4620      	mov	r0, r4
 23fb31a:	4653      	mov	r3, sl
 23fb31c:	b209      	sxth	r1, r1
 23fb31e:	47b8      	blx	r7
 23fb320:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
 23fb322:	f109 0901 	add.w	r9, r9, #1
 23fb326:	e7e1      	b.n	23fb2ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
  for (int16_t j = 0; j < h; j++, y++) {
 23fb328:	9b01      	ldr	r3, [sp, #4]
 23fb32a:	445e      	add	r6, fp
 23fb32c:	3301      	adds	r3, #1
 23fb32e:	9301      	str	r3, [sp, #4]
 23fb330:	e7ce      	b.n	23fb2d0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
  endWrite();
 23fb332:	4620      	mov	r0, r4
 23fb334:	6823      	ldr	r3, [r4, #0]
 23fb336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb338:	b009      	add	sp, #36	; 0x24
 23fb33a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23fb33e:	4718      	bx	r3

023fb340 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 23fb340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb344:	ed2d 8b02 	vpush	{d8}
 23fb348:	b091      	sub	sp, #68	; 0x44
 23fb34a:	4616      	mov	r6, r2
 23fb34c:	461f      	mov	r7, r3
  if (!gfxFont) { // 'Classic' built-in font
 23fb34e:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 23fb350:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23fb354:	4683      	mov	fp, r0
 23fb356:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23fb35a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23fb35e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23fb362:	9103      	str	r1, [sp, #12]
 23fb364:	9304      	str	r3, [sp, #16]
  if (!gfxFont) { // 'Classic' built-in font
 23fb366:	2a00      	cmp	r2, #0
 23fb368:	f040 80c5 	bne.w	23fb4f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
 23fb36c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fb370:	428b      	cmp	r3, r1
 23fb372:	f340 814c 	ble.w	23fb60e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23fb376:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fb37a:	42b3      	cmp	r3, r6
 23fb37c:	f340 8147 	ble.w	23fb60e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23fb380:	2306      	movs	r3, #6
 23fb382:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 23fb386:	2b00      	cmp	r3, #0
 23fb388:	f340 8141 	ble.w	23fb60e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 23fb38c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23fb390:	2b00      	cmp	r3, #0
 23fb392:	f340 813c 	ble.w	23fb60e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
 23fb396:	7f03      	ldrb	r3, [r0, #28]
 23fb398:	b91b      	cbnz	r3, 23fb3a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23fb39a:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 23fb39c:	bf84      	itt	hi
 23fb39e:	3701      	addhi	r7, #1
 23fb3a0:	b2ff      	uxtbhi	r7, r7
    startWrite();
 23fb3a2:	f8db 3000 	ldr.w	r3, [fp]
 23fb3a6:	4658      	mov	r0, fp
 23fb3a8:	695b      	ldr	r3, [r3, #20]
 23fb3aa:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb3ac:	2205      	movs	r2, #5
 23fb3ae:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23fb3b0:	2200      	movs	r2, #0
 23fb3b2:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb3b4:	4a98      	ldr	r2, [pc, #608]	; (23fb618 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fb3b6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fb3ba:	18d3      	adds	r3, r2, r3
 23fb3bc:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
 23fb3be:	b2b3      	uxth	r3, r6
 23fb3c0:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb3c2:	9a05      	ldr	r2, [sp, #20]
 23fb3c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fb3c6:	fb02 f905 	mul.w	r9, r2, r5
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb3ca:	5c9b      	ldrb	r3, [r3, r2]
 23fb3cc:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fb3ce:	b2ab      	uxth	r3, r5
 23fb3d0:	930b      	str	r3, [sp, #44]	; 0x2c
 23fb3d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fb3d6:	9308      	str	r3, [sp, #32]
 23fb3d8:	9b03      	ldr	r3, [sp, #12]
 23fb3da:	fa19 f983 	uxtah	r9, r9, r3
 23fb3de:	fa0f f389 	sxth.w	r3, r9
 23fb3e2:	ee08 3a10 	vmov	s16, r3
 23fb3e6:	2308      	movs	r3, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23fb3e8:	f04f 0900 	mov.w	r9, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fb3ec:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
 23fb3ee:	9b03      	ldr	r3, [sp, #12]
 23fb3f0:	eb02 0a03 	add.w	sl, r2, r3
 23fb3f4:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
 23fb3f8:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
 23fb3fa:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
 23fb3fe:	07d2      	lsls	r2, r2, #31
 23fb400:	d552      	bpl.n	23fb4a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
 23fb402:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23fb404:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23fb408:	d13e      	bne.n	23fb488 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fb40a:	2c01      	cmp	r4, #1
 23fb40c:	d13c      	bne.n	23fb488 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
 23fb40e:	699b      	ldr	r3, [r3, #24]
 23fb410:	9906      	ldr	r1, [sp, #24]
 23fb412:	461f      	mov	r7, r3
 23fb414:	9b04      	ldr	r3, [sp, #16]
 23fb416:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 23fb418:	4651      	mov	r1, sl
 23fb41a:	4658      	mov	r0, fp
 23fb41c:	b212      	sxth	r2, r2
 23fb41e:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23fb420:	f109 0301 	add.w	r3, r9, #1
 23fb424:	fa4f f983 	sxtb.w	r9, r3
 23fb428:	9b07      	ldr	r3, [sp, #28]
 23fb42a:	085b      	lsrs	r3, r3, #1
 23fb42c:	9307      	str	r3, [sp, #28]
 23fb42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fb430:	3b01      	subs	r3, #1
 23fb432:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fb436:	930a      	str	r3, [sp, #40]	; 0x28
 23fb438:	d1de      	bne.n	23fb3f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23fb43a:	9f05      	ldr	r7, [sp, #20]
 23fb43c:	3701      	adds	r7, #1
 23fb43e:	b27b      	sxtb	r3, r7
 23fb440:	9305      	str	r3, [sp, #20]
 23fb442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb444:	3b01      	subs	r3, #1
 23fb446:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fb44a:	9309      	str	r3, [sp, #36]	; 0x24
 23fb44c:	d1b9      	bne.n	23fb3c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
 23fb44e:	9b04      	ldr	r3, [sp, #16]
 23fb450:	4543      	cmp	r3, r8
 23fb452:	d00f      	beq.n	23fb474 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
 23fb454:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
 23fb456:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
 23fb45a:	d13b      	bne.n	23fb4d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fb45c:	2c01      	cmp	r4, #1
 23fb45e:	d139      	bne.n	23fb4d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
 23fb460:	9908      	ldr	r1, [sp, #32]
 23fb462:	f8cd 8000 	str.w	r8, [sp]
 23fb466:	3105      	adds	r1, #5
 23fb468:	6a1c      	ldr	r4, [r3, #32]
 23fb46a:	4632      	mov	r2, r6
 23fb46c:	2308      	movs	r3, #8
 23fb46e:	4658      	mov	r0, fp
 23fb470:	b209      	sxth	r1, r1
 23fb472:	47a0      	blx	r4
    endWrite();
 23fb474:	4658      	mov	r0, fp
 23fb476:	f8db 3000 	ldr.w	r3, [fp]
 23fb47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb47c:	b011      	add	sp, #68	; 0x44
 23fb47e:	ecbd 8b02 	vpop	{d8}
 23fb482:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23fb486:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 23fb488:	fb14 f202 	smulbb	r2, r4, r2
 23fb48c:	9906      	ldr	r1, [sp, #24]
 23fb48e:	440a      	add	r2, r1
 23fb490:	9904      	ldr	r1, [sp, #16]
 23fb492:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fb494:	9400      	str	r4, [sp, #0]
 23fb496:	69db      	ldr	r3, [r3, #28]
 23fb498:	ee18 1a10 	vmov	r1, s16
 23fb49c:	461f      	mov	r7, r3
 23fb49e:	4658      	mov	r0, fp
 23fb4a0:	462b      	mov	r3, r5
 23fb4a2:	b212      	sxth	r2, r2
 23fb4a4:	47b8      	blx	r7
 23fb4a6:	e7bb      	b.n	23fb420 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
 23fb4a8:	9a04      	ldr	r2, [sp, #16]
 23fb4aa:	4542      	cmp	r2, r8
 23fb4ac:	d0b8      	beq.n	23fb420 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
 23fb4ae:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23fb4b0:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23fb4b4:	d107      	bne.n	23fb4c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fb4b6:	2c01      	cmp	r4, #1
 23fb4b8:	d105      	bne.n	23fb4c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
 23fb4ba:	699b      	ldr	r3, [r3, #24]
 23fb4bc:	9906      	ldr	r1, [sp, #24]
 23fb4be:	461f      	mov	r7, r3
 23fb4c0:	440a      	add	r2, r1
 23fb4c2:	4643      	mov	r3, r8
 23fb4c4:	e7a8      	b.n	23fb418 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fb4c6:	fb14 f202 	smulbb	r2, r4, r2
 23fb4ca:	9906      	ldr	r1, [sp, #24]
 23fb4cc:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb4d0:	440a      	add	r2, r1
 23fb4d2:	e7df      	b.n	23fb494 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 23fb4d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fb4d6:	00e4      	lsls	r4, r4, #3
 23fb4d8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fb4dc:	9a08      	ldr	r2, [sp, #32]
 23fb4de:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb4e2:	440a      	add	r2, r1
 23fb4e4:	4611      	mov	r1, r2
 23fb4e6:	9400      	str	r4, [sp, #0]
 23fb4e8:	69dc      	ldr	r4, [r3, #28]
 23fb4ea:	4632      	mov	r2, r6
 23fb4ec:	462b      	mov	r3, r5
 23fb4ee:	4658      	mov	r0, fp
 23fb4f0:	b209      	sxth	r1, r1
 23fb4f2:	47a0      	blx	r4
    endWrite();
 23fb4f4:	e7be      	b.n	23fb474 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fb4f6:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 23fb4f8:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fb4fa:	1aff      	subs	r7, r7, r3
  return gfxFont->bitmap;
 23fb4fc:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 23fb4fe:	b2ff      	uxtb	r7, r7
  return gfxFont->bitmap;
 23fb500:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fb502:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
  return gfxFont->glyph + c;
 23fb506:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fb50a:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23fb50c:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 23fb50e:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23fb510:	9209      	str	r2, [sp, #36]	; 0x24
 23fb512:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 23fb514:	f993 a006 	ldrsb.w	sl, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23fb518:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 23fb51a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fb51e:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
 23fb520:	d801      	bhi.n	23fb526 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fb522:	2c01      	cmp	r4, #1
 23fb524:	d957      	bls.n	23fb5d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
 23fb526:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fb52a:	9308      	str	r3, [sp, #32]
      yo16 = yo;
 23fb52c:	fa0f f38a 	sxth.w	r3, sl
 23fb530:	9307      	str	r3, [sp, #28]
    uint8_t xx, yy, bits = 0, bit = 0;
 23fb532:	f04f 0800 	mov.w	r8, #0
 23fb536:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
 23fb538:	4647      	mov	r7, r8
    startWrite();
 23fb53a:	f8db 3000 	ldr.w	r3, [fp]
 23fb53e:	4658      	mov	r0, fp
 23fb540:	695b      	ldr	r3, [r3, #20]
 23fb542:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23fb544:	b2b3      	uxth	r3, r6
 23fb546:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
 23fb548:	fa1a f386 	uxtah	r3, sl, r6
 23fb54c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 23fb54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fb550:	429f      	cmp	r7, r3
 23fb552:	d28f      	bcs.n	23fb474 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23fb554:	9b07      	ldr	r3, [sp, #28]
 23fb556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23fb558:	443b      	add	r3, r7
 23fb55a:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
 23fb55e:	2200      	movs	r2, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23fb560:	b21b      	sxth	r3, r3
 23fb562:	ee08 3a10 	vmov	s16, r3
 23fb566:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
 23fb568:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
 23fb56a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23fb56c:	eb02 0a07 	add.w	sl, r2, r7
 23fb570:	fa0f fa8a 	sxth.w	sl, sl
      for (xx = 0; xx < w; xx++) {
 23fb574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fb576:	9905      	ldr	r1, [sp, #20]
 23fb578:	4291      	cmp	r1, r2
 23fb57a:	d241      	bcs.n	23fb600 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
 23fb57c:	1c5a      	adds	r2, r3, #1
 23fb57e:	b2d2      	uxtb	r2, r2
 23fb580:	075b      	lsls	r3, r3, #29
 23fb582:	920d      	str	r2, [sp, #52]	; 0x34
 23fb584:	d107      	bne.n	23fb596 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
 23fb586:	9b06      	ldr	r3, [sp, #24]
 23fb588:	9906      	ldr	r1, [sp, #24]
 23fb58a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fb58c:	3301      	adds	r3, #1
 23fb58e:	b29b      	uxth	r3, r3
 23fb590:	f812 9001 	ldrb.w	r9, [r2, r1]
 23fb594:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 23fb596:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fb59a:	d012      	beq.n	23fb5c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
 23fb59c:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
 23fb59e:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fb5a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
 23fb5a6:	d11a      	bne.n	23fb5de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23fb5a8:	2c01      	cmp	r4, #1
 23fb5aa:	d118      	bne.n	23fb5de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
 23fb5ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fb5ae:	699b      	ldr	r3, [r3, #24]
 23fb5b0:	4411      	add	r1, r2
 23fb5b2:	9a05      	ldr	r2, [sp, #20]
 23fb5b4:	461e      	mov	r6, r3
 23fb5b6:	4411      	add	r1, r2
 23fb5b8:	4658      	mov	r0, fp
 23fb5ba:	4652      	mov	r2, sl
 23fb5bc:	9b04      	ldr	r3, [sp, #16]
 23fb5be:	b209      	sxth	r1, r1
 23fb5c0:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
 23fb5c2:	9e05      	ldr	r6, [sp, #20]
        bits <<= 1;
 23fb5c4:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 23fb5c8:	3601      	adds	r6, #1
 23fb5ca:	b2f3      	uxtb	r3, r6
 23fb5cc:	9305      	str	r3, [sp, #20]
        bits <<= 1;
 23fb5ce:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
 23fb5d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
 23fb5d4:	e7ce      	b.n	23fb574 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
 23fb5d6:	2300      	movs	r3, #0
 23fb5d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23fb5dc:	e7a9      	b.n	23fb532 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23fb5de:	9805      	ldr	r0, [sp, #20]
 23fb5e0:	9a08      	ldr	r2, [sp, #32]
 23fb5e2:	4402      	add	r2, r0
 23fb5e4:	fb02 1105 	mla	r1, r2, r5, r1
 23fb5e8:	9a04      	ldr	r2, [sp, #16]
 23fb5ea:	4658      	mov	r0, fp
 23fb5ec:	e9cd 4200 	strd	r4, r2, [sp]
 23fb5f0:	69db      	ldr	r3, [r3, #28]
 23fb5f2:	ee18 2a10 	vmov	r2, s16
 23fb5f6:	461e      	mov	r6, r3
 23fb5f8:	b209      	sxth	r1, r1
 23fb5fa:	462b      	mov	r3, r5
 23fb5fc:	47b0      	blx	r6
 23fb5fe:	e7e0      	b.n	23fb5c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23fb600:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
 23fb602:	3701      	adds	r7, #1
 23fb604:	4498      	add	r8, r3
 23fb606:	fa5f f888 	uxtb.w	r8, r8
 23fb60a:	b2ff      	uxtb	r7, r7
 23fb60c:	e79f      	b.n	23fb54e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23fb60e:	b011      	add	sp, #68	; 0x44
 23fb610:	ecbd 8b02 	vpop	{d8}
 23fb614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb618:	023fee28 	.word	0x023fee28

023fb61c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fb61c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 23fb61e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23fb620:	4604      	mov	r4, r0
 23fb622:	460b      	mov	r3, r1
 23fb624:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 23fb626:	2a00      	cmp	r2, #0
 23fb628:	d134      	bne.n	23fb694 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 23fb62a:	290a      	cmp	r1, #10
 23fb62c:	d108      	bne.n	23fb640 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 23fb62e:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 23fb630:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23fb632:	7e42      	ldrb	r2, [r0, #25]
 23fb634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 23fb638:	8263      	strh	r3, [r4, #18]
}
 23fb63a:	2001      	movs	r0, #1
 23fb63c:	b005      	add	sp, #20
 23fb63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 23fb640:	290d      	cmp	r1, #13
 23fb642:	d0fa      	beq.n	23fb63a <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb644:	7ee1      	ldrb	r1, [r4, #27]
 23fb646:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23fb648:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb64a:	b171      	cbz	r1, 23fb66a <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fb64c:	2106      	movs	r1, #6
 23fb64e:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fb652:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fb656:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fb65a:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
 23fb65c:	bfc1      	itttt	gt
 23fb65e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 23fb662:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 23fb664:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fb668:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23fb66a:	8ae2      	ldrh	r2, [r4, #22]
 23fb66c:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fb670:	9201      	str	r2, [sp, #4]
 23fb672:	8aa2      	ldrh	r2, [r4, #20]
 23fb674:	4620      	mov	r0, r4
 23fb676:	9200      	str	r2, [sp, #0]
 23fb678:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb67c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fb680:	f7ff fe5e 	bl	23fb340 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 23fb684:	7e23      	ldrb	r3, [r4, #24]
 23fb686:	8a22      	ldrh	r2, [r4, #16]
 23fb688:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fb68c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 23fb690:	8223      	strh	r3, [r4, #16]
 23fb692:	e7d2      	b.n	23fb63a <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 23fb694:	290a      	cmp	r1, #10
 23fb696:	d107      	bne.n	23fb6a8 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 23fb698:	2300      	movs	r3, #0
 23fb69a:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fb69c:	7e41      	ldrb	r1, [r0, #25]
 23fb69e:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
 23fb6a0:	8a43      	ldrh	r3, [r0, #18]
 23fb6a2:	fb01 3302 	mla	r3, r1, r2, r3
 23fb6a6:	e7c7      	b.n	23fb638 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 23fb6a8:	290d      	cmp	r1, #13
 23fb6aa:	d0c6      	beq.n	23fb63a <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 23fb6ac:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fb6ae:	42a9      	cmp	r1, r5
 23fb6b0:	d3c3      	bcc.n	23fb63a <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fb6b2:	7a91      	ldrb	r1, [r2, #10]
 23fb6b4:	4299      	cmp	r1, r3
 23fb6b6:	d3c0      	bcc.n	23fb63a <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 23fb6b8:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 23fb6ba:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 23fb6bc:	b2ed      	uxtb	r5, r5
 23fb6be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 23fb6c2:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fb6c4:	b328      	cbz	r0, 23fb712 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fb6c6:	78e9      	ldrb	r1, [r5, #3]
 23fb6c8:	b319      	cbz	r1, 23fb712 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fb6ca:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb6cc:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23fb6ce:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fb6d0:	b191      	cbz	r1, 23fb6f8 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fb6d2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fb6d6:	4408      	add	r0, r1
 23fb6d8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb6dc:	fb06 1100 	mla	r1, r6, r0, r1
 23fb6e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fb6e4:	4281      	cmp	r1, r0
 23fb6e6:	dd07      	ble.n	23fb6f8 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 23fb6e8:	2000      	movs	r0, #0
 23fb6ea:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23fb6ec:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fb6f0:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 23fb6f2:	fb02 1207 	mla	r2, r2, r7, r1
 23fb6f6:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23fb6f8:	8ae2      	ldrh	r2, [r4, #22]
 23fb6fa:	4620      	mov	r0, r4
 23fb6fc:	9201      	str	r2, [sp, #4]
 23fb6fe:	8aa2      	ldrh	r2, [r4, #20]
 23fb700:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fb704:	9200      	str	r2, [sp, #0]
 23fb706:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb70a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fb70e:	f7ff fe17 	bl	23fb340 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fb712:	7929      	ldrb	r1, [r5, #4]
 23fb714:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 23fb716:	8a23      	ldrh	r3, [r4, #16]
 23fb718:	fb01 3302 	mla	r3, r1, r2, r3
 23fb71c:	e7b8      	b.n	23fb690 <_ZN12Adafruit_GFX5writeEh+0x74>

023fb71e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
 23fb71e:	2901      	cmp	r1, #1
 23fb720:	bf38      	it	cc
 23fb722:	2101      	movcc	r1, #1
 23fb724:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 23fb726:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 23fb728:	4770      	bx	lr

023fb72a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
    if (!gfxFont) { // And no current font struct?
 23fb72a:	6a03      	ldr	r3, [r0, #32]
  if (f) {          // Font struct pointer passed in?
 23fb72c:	b129      	cbz	r1, 23fb73a <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x10>
    if (!gfxFont) { // And no current font struct?
 23fb72e:	b913      	cbnz	r3, 23fb736 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
      cursor_y += 6;
 23fb730:	8a43      	ldrh	r3, [r0, #18]
 23fb732:	3306      	adds	r3, #6
    cursor_y -= 6;
 23fb734:	8243      	strh	r3, [r0, #18]
  gfxFont = (GFXfont *)f;
 23fb736:	6201      	str	r1, [r0, #32]
}
 23fb738:	4770      	bx	lr
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
 23fb73a:	2b00      	cmp	r3, #0
 23fb73c:	d0fb      	beq.n	23fb736 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
    cursor_y -= 6;
 23fb73e:	8a43      	ldrh	r3, [r0, #18]
 23fb740:	3b06      	subs	r3, #6
 23fb742:	e7f7      	b.n	23fb734 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xa>

023fb744 <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23fb744:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fb746:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23fb748:	db66      	blt.n	23fb818 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
 23fb74a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fb74e:	428c      	cmp	r4, r1
 23fb750:	dd62      	ble.n	23fb818 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
 23fb752:	2a00      	cmp	r2, #0
 23fb754:	db60      	blt.n	23fb818 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
 23fb756:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fb75a:	4294      	cmp	r4, r2
 23fb75c:	dd5c      	ble.n	23fb818 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 23fb75e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 23fb760:	2c02      	cmp	r4, #2
 23fb762:	d05a      	beq.n	23fb81a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
 23fb764:	2c03      	cmp	r4, #3
 23fb766:	d061      	beq.n	23fb82c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
 23fb768:	2c01      	cmp	r4, #1
 23fb76a:	d104      	bne.n	23fb776 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
 23fb76c:	43d2      	mvns	r2, r2
 23fb76e:	8904      	ldrh	r4, [r0, #8]
 23fb770:	4414      	add	r4, r2
      break;
 23fb772:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 23fb774:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
 23fb776:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
 23fb77a:	428c      	cmp	r4, r1
 23fb77c:	bfa8      	it	ge
 23fb77e:	460c      	movge	r4, r1
 23fb780:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
 23fb782:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 23fb786:	4294      	cmp	r4, r2
 23fb788:	bfa8      	it	ge
 23fb78a:	4614      	movge	r4, r2
 23fb78c:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
 23fb78e:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
 23fb792:	428c      	cmp	r4, r1
 23fb794:	bfb8      	it	lt
 23fb796:	460c      	movlt	r4, r1
 23fb798:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
 23fb79a:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 23fb79e:	4294      	cmp	r4, r2
 23fb7a0:	bfb8      	it	lt
 23fb7a2:	4614      	movlt	r4, r2
 23fb7a4:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
 23fb7a6:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 23fb7aa:	2c01      	cmp	r4, #1
 23fb7ac:	d116      	bne.n	23fb7dc <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
 23fb7ae:	2b01      	cmp	r3, #1
 23fb7b0:	d042      	beq.n	23fb838 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
 23fb7b2:	2b02      	cmp	r3, #2
 23fb7b4:	d051      	beq.n	23fb85a <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
 23fb7b6:	b98b      	cbnz	r3, 23fb7dc <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 23fb7b8:	4614      	mov	r4, r2
 23fb7ba:	2a00      	cmp	r2, #0
 23fb7bc:	8905      	ldrh	r5, [r0, #8]
 23fb7be:	bfb8      	it	lt
 23fb7c0:	1dd4      	addlt	r4, r2, #7
 23fb7c2:	10e4      	asrs	r4, r4, #3
 23fb7c4:	fb14 1405 	smlabb	r4, r4, r5, r1
 23fb7c8:	2501      	movs	r5, #1
 23fb7ca:	6b47      	ldr	r7, [r0, #52]	; 0x34
 23fb7cc:	f002 0607 	and.w	r6, r2, #7
 23fb7d0:	fa05 f606 	lsl.w	r6, r5, r6
 23fb7d4:	5d3d      	ldrb	r5, [r7, r4]
 23fb7d6:	ea25 0506 	bic.w	r5, r5, r6
 23fb7da:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
 23fb7dc:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 23fb7e0:	2c04      	cmp	r4, #4
 23fb7e2:	d119      	bne.n	23fb818 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
 23fb7e4:	8904      	ldrh	r4, [r0, #8]
 23fb7e6:	fb14 f202 	smulbb	r2, r4, r2
 23fb7ea:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 23fb7ee:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
 23fb7f2:	f342 024f 	sbfx	r2, r2, #1, #16
 23fb7f6:	eb02 0264 	add.w	r2, r2, r4, asr #1
 23fb7fa:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
 23fb7fc:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
 23fb7fe:	5ca0      	ldrb	r0, [r4, r2]
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
 23fb800:	bf4b      	itete	mi
 23fb802:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
 23fb806:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
 23fb80a:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
 23fb80e:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
 23fb812:	bf48      	it	mi
 23fb814:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
 23fb816:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
 23fb818:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 23fb81a:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 23fb81c:	8904      	ldrh	r4, [r0, #8]
 23fb81e:	3c01      	subs	r4, #1
 23fb820:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 23fb822:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 23fb824:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 23fb826:	4422      	add	r2, r4
 23fb828:	b212      	sxth	r2, r2
      break;
 23fb82a:	e7a4      	b.n	23fb776 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 23fb82c:	8944      	ldrh	r4, [r0, #10]
 23fb82e:	3c01      	subs	r4, #1
 23fb830:	1a64      	subs	r4, r4, r1
      break;
 23fb832:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 23fb834:	b222      	sxth	r2, r4
      break;
 23fb836:	e79e      	b.n	23fb776 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 23fb838:	4614      	mov	r4, r2
 23fb83a:	2a00      	cmp	r2, #0
 23fb83c:	8905      	ldrh	r5, [r0, #8]
 23fb83e:	bfb8      	it	lt
 23fb840:	1dd4      	addlt	r4, r2, #7
 23fb842:	10e4      	asrs	r4, r4, #3
 23fb844:	fb14 1405 	smlabb	r4, r4, r5, r1
 23fb848:	2501      	movs	r5, #1
 23fb84a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23fb84c:	f002 0707 	and.w	r7, r2, #7
 23fb850:	40bd      	lsls	r5, r7
 23fb852:	5d37      	ldrb	r7, [r6, r4]
 23fb854:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23fb856:	5535      	strb	r5, [r6, r4]
        break;
 23fb858:	e7c0      	b.n	23fb7dc <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23fb85a:	4614      	mov	r4, r2
 23fb85c:	2a00      	cmp	r2, #0
 23fb85e:	8905      	ldrh	r5, [r0, #8]
 23fb860:	bfb8      	it	lt
 23fb862:	1dd4      	addlt	r4, r2, #7
 23fb864:	10e4      	asrs	r4, r4, #3
 23fb866:	fb14 1405 	smlabb	r4, r4, r5, r1
 23fb86a:	2501      	movs	r5, #1
 23fb86c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23fb86e:	f002 0707 	and.w	r7, r2, #7
 23fb872:	40bd      	lsls	r5, r7
 23fb874:	5d37      	ldrb	r7, [r6, r4]
 23fb876:	407d      	eors	r5, r7
 23fb878:	e7ed      	b.n	23fb856 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>
	...

023fb87c <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
 23fb87c:	b538      	push	{r3, r4, r5, lr}
 23fb87e:	460d      	mov	r5, r1
 23fb880:	4611      	mov	r1, r2
 23fb882:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 23fb884:	b21a      	sxth	r2, r3
 23fb886:	b209      	sxth	r1, r1
 23fb888:	f7ff fa9c 	bl	23fadc4 <_ZN12Adafruit_GFXC1Ess>
 23fb88c:	4b0b      	ldr	r3, [pc, #44]	; (23fb8bc <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
 23fb88e:	9a06      	ldr	r2, [sp, #24]
 23fb890:	6023      	str	r3, [r4, #0]
 23fb892:	2300      	movs	r3, #0
 23fb894:	62e2      	str	r2, [r4, #44]	; 0x2c
 23fb896:	9a07      	ldr	r2, [sp, #28]
 23fb898:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 23fb89c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 23fb8a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fb8a4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 23fb8a8:	f99d 3014 	ldrsb.w	r3, [sp, #20]
}
 23fb8ac:	4620      	mov	r0, r4
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 23fb8ae:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
 23fb8b0:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 23fb8b2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
 23fb8b6:	6523      	str	r3, [r4, #80]	; 0x50
}
 23fb8b8:	bd38      	pop	{r3, r4, r5, pc}
 23fb8ba:	bf00      	nop
 23fb8bc:	023ff388 	.word	0x023ff388

023fb8c0 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
 23fb8c0:	b538      	push	{r3, r4, r5, lr}
 23fb8c2:	4b0c      	ldr	r3, [pc, #48]	; (23fb8f4 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
 23fb8c4:	4604      	mov	r4, r0
 23fb8c6:	6003      	str	r3, [r0, #0]
  if (buffer) {
 23fb8c8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23fb8ca:	b118      	cbz	r0, 23fb8d4 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
 23fb8cc:	f000 ffbe 	bl	23fc84c <free>
    buffer = NULL;
 23fb8d0:	2300      	movs	r3, #0
 23fb8d2:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
 23fb8d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 23fb8d6:	b135      	cbz	r5, 23fb8e6 <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
 23fb8d8:	4628      	mov	r0, r5
 23fb8da:	f7fe ffac 	bl	23fa836 <_ZN18Adafruit_SPIDeviceD1Ev>
 23fb8de:	2138      	movs	r1, #56	; 0x38
 23fb8e0:	4628      	mov	r0, r5
 23fb8e2:	f7fe fdcc 	bl	23fa47e <_ZdlPvj>
  if (i2c_dev)
 23fb8e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23fb8e8:	b110      	cbz	r0, 23fb8f0 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
 23fb8ea:	2110      	movs	r1, #16
 23fb8ec:	f7fe fdc7 	bl	23fa47e <_ZdlPvj>
}
 23fb8f0:	4620      	mov	r0, r4
 23fb8f2:	bd38      	pop	{r3, r4, r5, pc}
 23fb8f4:	023ff388 	.word	0x023ff388

023fb8f8 <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 23fb8f8:	b530      	push	{r4, r5, lr}
  if (i2c_dev) {                // I2C
 23fb8fa:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 23fb8fc:	b087      	sub	sp, #28
 23fb8fe:	4604      	mov	r4, r0
 23fb900:	f88d 100f 	strb.w	r1, [sp, #15]
  if (i2c_dev) {                // I2C
 23fb904:	b17d      	cbz	r5, 23fb926 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 23fb906:	2300      	movs	r3, #0
 23fb908:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
 23fb90a:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 23fb90e:	f88d 3014 	strb.w	r3, [sp, #20]
 23fb912:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
 23fb916:	2301      	movs	r3, #1
 23fb918:	2202      	movs	r2, #2
 23fb91a:	4628      	mov	r0, r5
 23fb91c:	a905      	add	r1, sp, #20
 23fb91e:	f7fe ff54 	bl	23fa7ca <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23fb922:	b007      	add	sp, #28
 23fb924:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
 23fb926:	4629      	mov	r1, r5
 23fb928:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 23fb92c:	f002 ff71 	bl	23fe812 <digitalWrite>
    spi_dev->write(&c, 1);
 23fb930:	462b      	mov	r3, r5
 23fb932:	2201      	movs	r2, #1
 23fb934:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb936:	9500      	str	r5, [sp, #0]
 23fb938:	f10d 010f 	add.w	r1, sp, #15
 23fb93c:	f7ff f89e 	bl	23faa7c <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
}
 23fb940:	e7ef      	b.n	23fb922 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

023fb942 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
 23fb942:	2900      	cmp	r1, #0
 23fb944:	bf14      	ite	ne
 23fb946:	21a7      	movne	r1, #167	; 0xa7
 23fb948:	21a6      	moveq	r1, #166	; 0xa6
 23fb94a:	f7ff bfd5 	b.w	23fb8f8 <_ZN17Adafruit_GrayOLED12oled_commandEh>

023fb94e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
 23fb94e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
 23fb950:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
 23fb952:	4604      	mov	r4, r0
 23fb954:	460e      	mov	r6, r1
 23fb956:	4617      	mov	r7, r2
 23fb958:	b085      	sub	sp, #20
  if (i2c_dev) {            // I2C
 23fb95a:	b165      	cbz	r5, 23fb976 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
 23fb95c:	2300      	movs	r3, #0
 23fb95e:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
 23fb962:	2301      	movs	r3, #1
 23fb964:	f10d 000f 	add.w	r0, sp, #15
 23fb968:	9000      	str	r0, [sp, #0]
 23fb96a:	9301      	str	r3, [sp, #4]
 23fb96c:	4628      	mov	r0, r5
 23fb96e:	f7fe ff2c 	bl	23fa7ca <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23fb972:	b005      	add	sp, #20
 23fb974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
 23fb976:	4629      	mov	r1, r5
 23fb978:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 23fb97c:	f002 ff49 	bl	23fe812 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
 23fb980:	462b      	mov	r3, r5
 23fb982:	463a      	mov	r2, r7
 23fb984:	4631      	mov	r1, r6
 23fb986:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb988:	9500      	str	r5, [sp, #0]
 23fb98a:	f7ff f877 	bl	23faa7c <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
 23fb98e:	e7f0      	b.n	23fb972 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

023fb990 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
 23fb990:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
 23fb992:	8903      	ldrh	r3, [r0, #8]
 23fb994:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 23fb998:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 23fb99c:	fb12 f203 	smulbb	r2, r2, r3
 23fb9a0:	1dcb      	adds	r3, r1, #7
 23fb9a2:	bf48      	it	mi
 23fb9a4:	f101 030e 	addmi.w	r3, r1, #14
 23fb9a8:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
 23fb9aa:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
 23fb9ac:	435a      	muls	r2, r3
 23fb9ae:	2100      	movs	r1, #0
 23fb9b0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23fb9b2:	f003 f880 	bl	23feab6 <memset>
  window_x1 = 0;
 23fb9b6:	2300      	movs	r3, #0
 23fb9b8:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
 23fb9ba:	8923      	ldrh	r3, [r4, #8]
 23fb9bc:	3b01      	subs	r3, #1
 23fb9be:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
 23fb9c0:	8963      	ldrh	r3, [r4, #10]
 23fb9c2:	3b01      	subs	r3, #1
 23fb9c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
 23fb9c6:	bd10      	pop	{r4, pc}

023fb9c8 <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
 23fb9c8:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
 23fb9ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
 23fb9cc:	4604      	mov	r4, r0
 23fb9ce:	460e      	mov	r6, r1
 23fb9d0:	4615      	mov	r5, r2
  if ((!buffer) &&
 23fb9d2:	b30b      	cbz	r3, 23fba18 <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
 23fb9d4:	2d00      	cmp	r5, #0
 23fb9d6:	d133      	bne.n	23fba40 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
 23fb9d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23fb9da:	2b00      	cmp	r3, #0
 23fb9dc:	d050      	beq.n	23fba80 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
 23fb9de:	2010      	movs	r0, #16
 23fb9e0:	f7fe fd49 	bl	23fa476 <_Znwj>
 23fb9e4:	4605      	mov	r5, r0
 23fb9e6:	b118      	cbz	r0, 23fb9f0 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
 23fb9e8:	4631      	mov	r1, r6
 23fb9ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 23fb9ec:	f7fe fec2 	bl	23fa774 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23fb9f0:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
 23fb9f2:	b31d      	cbz	r5, 23fba3c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
 23fb9f4:	2101      	movs	r1, #1
 23fb9f6:	4628      	mov	r0, r5
 23fb9f8:	f7fe fed8 	bl	23fa7ac <_ZN18Adafruit_I2CDevice5beginEb>
 23fb9fc:	b1f0      	cbz	r0, 23fba3c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
 23fb9fe:	4620      	mov	r0, r4
 23fba00:	f7ff ffc6 	bl	23fb990 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
 23fba04:	2300      	movs	r3, #0
 23fba06:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
 23fba08:	8923      	ldrh	r3, [r4, #8]
  return true; // Success
 23fba0a:	2001      	movs	r0, #1
  window_x2 = WIDTH - 1;
 23fba0c:	3b01      	subs	r3, #1
 23fba0e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
 23fba10:	8963      	ldrh	r3, [r4, #10]
 23fba12:	3b01      	subs	r3, #1
 23fba14:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
 23fba16:	e012      	b.n	23fba3e <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
 23fba18:	8923      	ldrh	r3, [r4, #8]
 23fba1a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 23fba1e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 23fba22:	fb10 f003 	smulbb	r0, r0, r3
 23fba26:	1dd3      	adds	r3, r2, #7
 23fba28:	bf48      	it	mi
 23fba2a:	f102 030e 	addmi.w	r3, r2, #14
 23fba2e:	10db      	asrs	r3, r3, #3
 23fba30:	4358      	muls	r0, r3
 23fba32:	f000 fefd 	bl	23fc830 <malloc>
 23fba36:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
 23fba38:	2800      	cmp	r0, #0
 23fba3a:	d1cb      	bne.n	23fb9d4 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
 23fba3c:	2000      	movs	r0, #0
}
 23fba3e:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
 23fba40:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 23fba42:	2800      	cmp	r0, #0
 23fba44:	dbc8      	blt.n	23fb9d8 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
 23fba46:	2101      	movs	r1, #1
 23fba48:	b280      	uxth	r0, r0
 23fba4a:	f002 fed1 	bl	23fe7f0 <pinMode>
    digitalWrite(rstPin, HIGH);
 23fba4e:	2101      	movs	r1, #1
 23fba50:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 23fba54:	f002 fedd 	bl	23fe812 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
 23fba58:	200a      	movs	r0, #10
 23fba5a:	f000 ff4b 	bl	23fc8f4 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 23fba5e:	2100      	movs	r1, #0
 23fba60:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 23fba64:	f002 fed5 	bl	23fe812 <digitalWrite>
    delay(10);                  // Wait 10 ms
 23fba68:	200a      	movs	r0, #10
 23fba6a:	f000 ff43 	bl	23fc8f4 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 23fba6e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 23fba72:	2101      	movs	r1, #1
 23fba74:	f002 fecd 	bl	23fe812 <digitalWrite>
    delay(10);
 23fba78:	200a      	movs	r0, #10
 23fba7a:	f000 ff3b 	bl	23fc8f4 <delay>
 23fba7e:	e7ab      	b.n	23fb9d8 <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
 23fba80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fba82:	2800      	cmp	r0, #0
 23fba84:	d0da      	beq.n	23fba3c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
 23fba86:	f7fe fedf 	bl	23fa848 <_ZN18Adafruit_SPIDevice5beginEv>
 23fba8a:	2800      	cmp	r0, #0
 23fba8c:	d0d6      	beq.n	23fba3c <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 23fba8e:	2101      	movs	r1, #1
 23fba90:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 23fba94:	f002 feac 	bl	23fe7f0 <pinMode>
 23fba98:	e7b1      	b.n	23fb9fe <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

023fba9a <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 23fba9a:	2381      	movs	r3, #129	; 0x81
void Adafruit_GrayOLED::setContrast(uint8_t level) {
 23fba9c:	b507      	push	{r0, r1, r2, lr}
  oled_commandList(cmd, 2);
 23fba9e:	2202      	movs	r2, #2
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 23fbaa0:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
 23fbaa4:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
 23fbaa6:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
 23fbaaa:	f7ff ff50 	bl	23fb94e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
 23fbaae:	b003      	add	sp, #12
 23fbab0:	f85d fb04 	ldr.w	pc, [sp], #4

023fbab4 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
 23fbab4:	b510      	push	{r4, lr}
 23fbab6:	4604      	mov	r4, r0
 23fbab8:	4b02      	ldr	r3, [pc, #8]	; (23fbac4 <_ZN15Adafruit_SH1107D1Ev+0x10>)
 23fbaba:	6003      	str	r3, [r0, #0]
 23fbabc:	f000 f958 	bl	23fbd70 <_ZN15Adafruit_SH110XD1Ev>
 23fbac0:	4620      	mov	r0, r4
 23fbac2:	bd10      	pop	{r4, pc}
 23fbac4:	023ff5c4 	.word	0x023ff5c4

023fbac8 <_ZN15Adafruit_SH1107D0Ev>:
 23fbac8:	b510      	push	{r4, lr}
 23fbaca:	4604      	mov	r4, r0
 23fbacc:	f7ff fff2 	bl	23fbab4 <_ZN15Adafruit_SH1107D1Ev>
 23fbad0:	4620      	mov	r0, r4
 23fbad2:	2158      	movs	r1, #88	; 0x58
 23fbad4:	f7fe fcd3 	bl	23fa47e <_ZdlPvj>
 23fbad8:	4620      	mov	r0, r4
 23fbada:	bd10      	pop	{r4, pc}

023fbadc <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
 23fbadc:	b530      	push	{r4, r5, lr}
 23fbade:	4604      	mov	r4, r0
 23fbae0:	b085      	sub	sp, #20
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
 23fbae2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fbae4:	9502      	str	r5, [sp, #8]
 23fbae6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fbae8:	9501      	str	r5, [sp, #4]
 23fbaea:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 23fbaee:	9500      	str	r5, [sp, #0]
 23fbaf0:	f000 f924 	bl	23fbd3c <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
 23fbaf4:	4620      	mov	r0, r4
 23fbaf6:	4b02      	ldr	r3, [pc, #8]	; (23fbb00 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
 23fbaf8:	6023      	str	r3, [r4, #0]
 23fbafa:	b005      	add	sp, #20
 23fbafc:	bd30      	pop	{r4, r5, pc}
 23fbafe:	bf00      	nop
 23fbb00:	023ff5c4 	.word	0x023ff5c4

023fbb04 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
 23fbb04:	b530      	push	{r4, r5, lr}
 23fbb06:	4604      	mov	r4, r0
 23fbb08:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
 23fbb0a:	f7ff ff5d 	bl	23fb9c8 <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
 23fbb0e:	212f      	movs	r1, #47	; 0x2f
 23fbb10:	4620      	mov	r0, r4
 23fbb12:	f7ff ffc2 	bl	23fba9a <_ZN17Adafruit_GrayOLED11setContrastEh>

#ifndef SH110X_NO_SPLASH
  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
 23fbb16:	68a2      	ldr	r2, [r4, #8]
 23fbb18:	4b2f      	ldr	r3, [pc, #188]	; (23fbbd8 <_ZN15Adafruit_SH11075beginEhb+0xd4>)
 23fbb1a:	429a      	cmp	r2, r3
 23fbb1c:	d121      	bne.n	23fbb62 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
 23fbb1e:	6823      	ldr	r3, [r4, #0]
 23fbb20:	2101      	movs	r1, #1
 23fbb22:	4620      	mov	r0, r4
 23fbb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbb26:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
 23fbb28:	2501      	movs	r5, #1
 23fbb2a:	2320      	movs	r3, #32
 23fbb2c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 23fbb30:	2373      	movs	r3, #115	; 0x73
 23fbb32:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 23fbb36:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 23fbb3a:	3a20      	subs	r2, #32
 23fbb3c:	3973      	subs	r1, #115	; 0x73
 23fbb3e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 23fbb42:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23fbb46:	4620      	mov	r0, r4
 23fbb48:	9300      	str	r3, [sp, #0]
 23fbb4a:	f341 014f 	sbfx	r1, r1, #1, #16
 23fbb4e:	4b23      	ldr	r3, [pc, #140]	; (23fbbdc <_ZN15Adafruit_SH11075beginEhb+0xd8>)
 23fbb50:	f342 024f 	sbfx	r2, r2, #1, #16
 23fbb54:	f7ff fba1 	bl	23fb29a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
 23fbb58:	6823      	ldr	r3, [r4, #0]
 23fbb5a:	2100      	movs	r1, #0
 23fbb5c:	4620      	mov	r0, r4
 23fbb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbb60:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
 23fbb62:	68a3      	ldr	r3, [r4, #8]
 23fbb64:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
 23fbb68:	d117      	bne.n	23fbb9a <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
 23fbb6a:	2320      	movs	r3, #32
 23fbb6c:	2001      	movs	r0, #1
 23fbb6e:	e9cd 3001 	strd	r3, r0, [sp, #4]
 23fbb72:	2373      	movs	r3, #115	; 0x73
 23fbb74:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 23fbb78:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 23fbb7c:	3a20      	subs	r2, #32
 23fbb7e:	3973      	subs	r1, #115	; 0x73
 23fbb80:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 23fbb84:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23fbb88:	9300      	str	r3, [sp, #0]
 23fbb8a:	4620      	mov	r0, r4
 23fbb8c:	4b13      	ldr	r3, [pc, #76]	; (23fbbdc <_ZN15Adafruit_SH11075beginEhb+0xd8>)
 23fbb8e:	f342 024f 	sbfx	r2, r2, #1, #16
 23fbb92:	f341 014f 	sbfx	r1, r1, #1, #16
 23fbb96:	f7ff fb80 	bl	23fb29a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
 23fbb9a:	2216      	movs	r2, #22
 23fbb9c:	4620      	mov	r0, r4
 23fbb9e:	4910      	ldr	r1, [pc, #64]	; (23fbbe0 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
 23fbba0:	f7ff fed5 	bl	23fb94e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
 23fbba4:	4605      	mov	r5, r0
 23fbba6:	b918      	cbnz	r0, 23fbbb0 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
 23fbba8:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
 23fbbaa:	4628      	mov	r0, r5
 23fbbac:	b005      	add	sp, #20
 23fbbae:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
 23fbbb0:	68a3      	ldr	r3, [r4, #8]
 23fbbb2:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
 23fbbb6:	d007      	beq.n	23fbbc8 <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
 23fbbb8:	2064      	movs	r0, #100	; 0x64
 23fbbba:	f000 fe9b 	bl	23fc8f4 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
 23fbbbe:	21af      	movs	r1, #175	; 0xaf
 23fbbc0:	4620      	mov	r0, r4
 23fbbc2:	f7ff fe99 	bl	23fb8f8 <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
 23fbbc6:	e7f0      	b.n	23fbbaa <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
 23fbbc8:	2204      	movs	r2, #4
 23fbbca:	4620      	mov	r0, r4
 23fbbcc:	4905      	ldr	r1, [pc, #20]	; (23fbbe4 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
 23fbbce:	f7ff febe 	bl	23fb94e <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
 23fbbd2:	2800      	cmp	r0, #0
 23fbbd4:	d1f0      	bne.n	23fbbb8 <_ZN15Adafruit_SH11075beginEhb+0xb4>
 23fbbd6:	e7e7      	b.n	23fbba8 <_ZN15Adafruit_SH11075beginEhb+0xa4>
 23fbbd8:	00800040 	.word	0x00800040
 23fbbdc:	023ff3dc 	.word	0x023ff3dc
 23fbbe0:	023ff61c 	.word	0x023ff61c
 23fbbe4:	023ff618 	.word	0x023ff618

023fbbe8 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
 23fbbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbbec:	b089      	sub	sp, #36	; 0x24
 23fbbee:	4604      	mov	r4, r0
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
 23fbbf0:	f000 fa04 	bl	23fbffc <os_thread_yield>
  // 32-byte transfer condition below.
  yield();

  // uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
  uint8_t *ptr = buffer;
  uint8_t dc_byte = 0x40;
 23fbbf4:	2340      	movs	r3, #64	; 0x40
 23fbbf6:	f88d 301b 	strb.w	r3, [sp, #27]
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fbbfa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
 23fbbfe:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint8_t bytes_per_page = WIDTH;
 23fbc02:	f894 a008 	ldrb.w	sl, [r4, #8]
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fbc06:	1dda      	adds	r2, r3, #7
  //  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 23fbc08:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fbc0c:	bf48      	it	mi
 23fbc0e:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t first_page = window_y1 / 8;
 23fbc12:	2d00      	cmp	r5, #0
 23fbc14:	bfb8      	it	lt
 23fbc16:	3507      	addlt	r5, #7
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 23fbc18:	45d0      	cmp	r8, sl
 23fbc1a:	bf28      	it	cs
 23fbc1c:	46d0      	movcs	r8, sl
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fbc1e:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 23fbc22:	9303      	str	r3, [sp, #12]
  uint8_t first_page = window_y1 / 8;
 23fbc24:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
 23fbc28:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 23fbc2c:	fb05 8b0a 	mla	fp, r5, sl, r8
 23fbc30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fbc34:	f10a 0201 	add.w	r2, sl, #1
 23fbc38:	fa52 f383 	uxtab	r3, r2, r3
 23fbc3c:	9304      	str	r3, [sp, #16]
  for (uint8_t p = first_page; p < pages; p++) {
 23fbc3e:	9b03      	ldr	r3, [sp, #12]
 23fbc40:	429d      	cmp	r5, r3
 23fbc42:	d271      	bcs.n	23fbd28 <_ZN15Adafruit_SH110X7displayEv+0x140>
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fbc44:	9b04      	ldr	r3, [sp, #16]
 23fbc46:	8926      	ldrh	r6, [r4, #8]
    if (i2c_dev) { // I2C
      uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;

      uint8_t cmd[] = {
          0x00, (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fbc48:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fbc4c:	1b9e      	subs	r6, r3, r6
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fbc4e:	4442      	add	r2, r8
    ptr += page_start;
 23fbc50:	6b67      	ldr	r7, [r4, #52]	; 0x34
    if (i2c_dev) { // I2C
 23fbc52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fbc54:	ea4f 1c22 	mov.w	ip, r2, asr #4
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fbc58:	eba6 0608 	sub.w	r6, r6, r8
 23fbc5c:	f1a5 0150 	sub.w	r1, r5, #80	; 0x50
    ptr += page_start;
 23fbc60:	445f      	add	r7, fp
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fbc62:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
 23fbc64:	b2c9      	uxtb	r1, r1
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fbc66:	f10c 0c10 	add.w	ip, ip, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fbc6a:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
 23fbc6e:	2b00      	cmp	r3, #0
 23fbc70:	d03a      	beq.n	23fbce8 <_ZN15Adafruit_SH110X7displayEv+0x100>
      uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
 23fbc72:	68d8      	ldr	r0, [r3, #12]
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fbc74:	f88d 101d 	strb.w	r1, [sp, #29]
      uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
 23fbc78:	3801      	subs	r0, #1
 23fbc7a:	fa1f f980 	uxth.w	r9, r0
      uint8_t cmd[] = {
 23fbc7e:	f04f 0000 	mov.w	r0, #0

      // Set high speed clk
      i2c_dev->setSpeed(i2c_preclk);
 23fbc82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      uint8_t cmd[] = {
 23fbc84:	f88d 001c 	strb.w	r0, [sp, #28]
      i2c_dev->setSpeed(i2c_preclk);
 23fbc88:	4618      	mov	r0, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fbc8a:	f88d c01e 	strb.w	ip, [sp, #30]
 23fbc8e:	f88d 201f 	strb.w	r2, [sp, #31]
      i2c_dev->setSpeed(i2c_preclk);
 23fbc92:	f7fe fdca 	bl	23fa82a <_ZN18Adafruit_I2CDevice8setSpeedEm>

      i2c_dev->write(cmd, 4);
 23fbc96:	2300      	movs	r3, #0
 23fbc98:	2204      	movs	r2, #4
 23fbc9a:	e9cd 3300 	strd	r3, r3, [sp]
 23fbc9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23fbca0:	2301      	movs	r3, #1
 23fbca2:	a907      	add	r1, sp, #28
 23fbca4:	f7fe fd91 	bl	23fa7ca <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

      while (bytes_remaining) {
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 23fbca8:	fa5f f989 	uxtb.w	r9, r9
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 23fbcac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
 23fbcae:	b1a6      	cbz	r6, 23fbcda <_ZN15Adafruit_SH110X7displayEv+0xf2>
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 23fbcb0:	2301      	movs	r3, #1
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 23fbcb2:	45b1      	cmp	r9, r6
 23fbcb4:	464a      	mov	r2, r9
 23fbcb6:	bf28      	it	cs
 23fbcb8:	4632      	movcs	r2, r6
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 23fbcba:	9301      	str	r3, [sp, #4]
 23fbcbc:	f10d 031b 	add.w	r3, sp, #27
 23fbcc0:	4639      	mov	r1, r7
 23fbcc2:	9300      	str	r3, [sp, #0]
 23fbcc4:	2301      	movs	r3, #1
 23fbcc6:	9205      	str	r2, [sp, #20]
 23fbcc8:	f7fe fd7f 	bl	23fa7ca <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
 23fbccc:	9a05      	ldr	r2, [sp, #20]
        bytes_remaining -= to_write;
 23fbcce:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
 23fbcd0:	4417      	add	r7, r2
        bytes_remaining -= to_write;
 23fbcd2:	b2f6      	uxtb	r6, r6
 23fbcd4:	f000 f992 	bl	23fbffc <os_thread_yield>
#endif // PLATFORM_THREADING
}
 23fbcd8:	e7e8      	b.n	23fbcac <_ZN15Adafruit_SH110X7displayEv+0xc4>
        yield();
      }

      // Set low speed clk
      i2c_dev->setSpeed(i2c_postclk);
 23fbcda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 23fbcdc:	f7fe fda5 	bl	23fa82a <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
 23fbce0:	3501      	adds	r5, #1
 23fbce2:	b2ed      	uxtb	r5, r5
 23fbce4:	44d3      	add	fp, sl
 23fbce6:	e7aa      	b.n	23fbc3e <_ZN15Adafruit_SH110X7displayEv+0x56>
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
 23fbce8:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fbcec:	f88d 101c 	strb.w	r1, [sp, #28]
      digitalWrite(dcPin, LOW);
 23fbcf0:	4619      	mov	r1, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fbcf2:	f88d c01d 	strb.w	ip, [sp, #29]
 23fbcf6:	f88d 201e 	strb.w	r2, [sp, #30]
      digitalWrite(dcPin, LOW);
 23fbcfa:	9305      	str	r3, [sp, #20]
 23fbcfc:	f002 fd89 	bl	23fe812 <digitalWrite>
      spi_dev->write(cmd, 3);
 23fbd00:	9b05      	ldr	r3, [sp, #20]
 23fbd02:	2203      	movs	r2, #3
 23fbd04:	9300      	str	r3, [sp, #0]
 23fbd06:	a907      	add	r1, sp, #28
 23fbd08:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fbd0a:	f7fe feb7 	bl	23faa7c <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
      digitalWrite(dcPin, HIGH);
 23fbd0e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 23fbd12:	2101      	movs	r1, #1
 23fbd14:	f002 fd7d 	bl	23fe812 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
 23fbd18:	9b05      	ldr	r3, [sp, #20]
 23fbd1a:	4632      	mov	r2, r6
 23fbd1c:	4639      	mov	r1, r7
 23fbd1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fbd20:	9300      	str	r3, [sp, #0]
 23fbd22:	f7fe feab 	bl	23faa7c <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
 23fbd26:	e7db      	b.n	23fbce0 <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
 23fbd28:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 23fbd2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fbd30:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
 23fbd34:	b009      	add	sp, #36	; 0x24
 23fbd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

023fbd3c <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
 23fbd3c:	b530      	push	{r4, r5, lr}
 23fbd3e:	4604      	mov	r4, r0
 23fbd40:	b085      	sub	sp, #20
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
 23fbd42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fbd44:	9503      	str	r5, [sp, #12]
 23fbd46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fbd48:	9502      	str	r5, [sp, #8]
 23fbd4a:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 23fbd4e:	e9cd 3500 	strd	r3, r5, [sp]
 23fbd52:	4613      	mov	r3, r2
 23fbd54:	460a      	mov	r2, r1
 23fbd56:	2101      	movs	r1, #1
 23fbd58:	f7ff fd90 	bl	23fb87c <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
 23fbd5c:	4b03      	ldr	r3, [pc, #12]	; (23fbd6c <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
 23fbd5e:	4620      	mov	r0, r4
 23fbd60:	6023      	str	r3, [r4, #0]
 23fbd62:	2300      	movs	r3, #0
 23fbd64:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 23fbd68:	b005      	add	sp, #20
 23fbd6a:	bd30      	pop	{r4, r5, pc}
 23fbd6c:	023ff63c 	.word	0x023ff63c

023fbd70 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
 23fbd70:	b510      	push	{r4, lr}
 23fbd72:	4604      	mov	r4, r0
 23fbd74:	4b02      	ldr	r3, [pc, #8]	; (23fbd80 <_ZN15Adafruit_SH110XD1Ev+0x10>)
 23fbd76:	6003      	str	r3, [r0, #0]
 23fbd78:	f7ff fda2 	bl	23fb8c0 <_ZN17Adafruit_GrayOLEDD1Ev>
 23fbd7c:	4620      	mov	r0, r4
 23fbd7e:	bd10      	pop	{r4, pc}
 23fbd80:	023ff63c 	.word	0x023ff63c

023fbd84 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23fbd84:	b40e      	push	{r1, r2, r3}
    attr.flags = 0;
 23fbd86:	f04f 0c20 	mov.w	ip, #32
 23fbd8a:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23fbd8c:	b500      	push	{lr}
 23fbd8e:	b08c      	sub	sp, #48	; 0x30
 23fbd90:	aa0d      	add	r2, sp, #52	; 0x34
 23fbd92:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fbd96:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fbd9a:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fbd9e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fbda0:	6801      	ldr	r1, [r0, #0]
 23fbda2:	aa04      	add	r2, sp, #16
 23fbda4:	2032      	movs	r0, #50	; 0x32
 23fbda6:	f000 fc0f 	bl	23fc5c8 <log_message_v>
}
 23fbdaa:	b00c      	add	sp, #48	; 0x30
 23fbdac:	f85d eb04 	ldr.w	lr, [sp], #4
 23fbdb0:	b003      	add	sp, #12
 23fbdb2:	4770      	bx	lr

023fbdb4 <_ZN9UIDisplayC1Ev>:
#include "UIDisplay.h"
#include "Particle.h"
#include "icons.h"

UIDisplay::UIDisplay() 
 23fbdb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fbdb6:	4604      	mov	r4, r0
    : _display(64, 128, &Wire), 
 23fbdb8:	f002 fd60 	bl	23fe87c <_Z19__fetch_global_Wirev>
      toasterElement(Bitmaps::toaster, 0, 0), 
      blenderElement(Bitmaps::blender, 0, 28), 
      fridgeElement(Bitmaps::fridge, 0, 56), 
      fanElement(Bitmaps::fan, 0, 84) {}
 23fbdbc:	4a15      	ldr	r2, [pc, #84]	; (23fbe14 <_ZN9UIDisplayC1Ev+0x60>)
 23fbdbe:	4916      	ldr	r1, [pc, #88]	; (23fbe18 <_ZN9UIDisplayC1Ev+0x64>)
    : _display(64, 128, &Wire), 
 23fbdc0:	4603      	mov	r3, r0
      fanElement(Bitmaps::fan, 0, 84) {}
 23fbdc2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 23fbdc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fbdca:	2140      	movs	r1, #64	; 0x40
 23fbdcc:	9200      	str	r2, [sp, #0]
 23fbdce:	4620      	mov	r0, r4
 23fbdd0:	2280      	movs	r2, #128	; 0x80
 23fbdd2:	f7ff fe83 	bl	23fbadc <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
 23fbdd6:	2300      	movs	r3, #0
 23fbdd8:	4910      	ldr	r1, [pc, #64]	; (23fbe1c <_ZN9UIDisplayC1Ev+0x68>)
 23fbdda:	461a      	mov	r2, r3
 23fbddc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 23fbde0:	f000 f872 	bl	23fbec8 <_ZN9UIElementC1EPKhii>
 23fbde4:	231c      	movs	r3, #28
 23fbde6:	2200      	movs	r2, #0
 23fbde8:	490d      	ldr	r1, [pc, #52]	; (23fbe20 <_ZN9UIDisplayC1Ev+0x6c>)
 23fbdea:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 23fbdee:	f000 f86b 	bl	23fbec8 <_ZN9UIElementC1EPKhii>
 23fbdf2:	2338      	movs	r3, #56	; 0x38
 23fbdf4:	2200      	movs	r2, #0
 23fbdf6:	490b      	ldr	r1, [pc, #44]	; (23fbe24 <_ZN9UIDisplayC1Ev+0x70>)
 23fbdf8:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 23fbdfc:	f000 f864 	bl	23fbec8 <_ZN9UIElementC1EPKhii>
 23fbe00:	2354      	movs	r3, #84	; 0x54
 23fbe02:	2200      	movs	r2, #0
 23fbe04:	4908      	ldr	r1, [pc, #32]	; (23fbe28 <_ZN9UIDisplayC1Ev+0x74>)
 23fbe06:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 23fbe0a:	f000 f85d 	bl	23fbec8 <_ZN9UIElementC1EPKhii>
 23fbe0e:	4620      	mov	r0, r4
 23fbe10:	b004      	add	sp, #16
 23fbe12:	bd10      	pop	{r4, pc}
 23fbe14:	00061a80 	.word	0x00061a80
 23fbe18:	000186a0 	.word	0x000186a0
 23fbe1c:	023ff78e 	.word	0x023ff78e
 23fbe20:	023ff746 	.word	0x023ff746
 23fbe24:	023ff6fe 	.word	0x023ff6fe
 23fbe28:	023ff6b6 	.word	0x023ff6b6

023fbe2c <_ZN9UIDisplay15setBlenderStateE12ElementState>:
void UIDisplay::setToasterState(ElementState state) {
    toasterElement.setState(state);
    toasterElement.draw(_display);
}

void UIDisplay::setBlenderState(ElementState state) {
 23fbe2c:	b513      	push	{r0, r1, r4, lr}
 23fbe2e:	4604      	mov	r4, r0
    blenderElement.setState(state);
 23fbe30:	307c      	adds	r0, #124	; 0x7c
 23fbe32:	9001      	str	r0, [sp, #4]
 23fbe34:	f000 f85a 	bl	23fbeec <_ZN9UIElement8setStateE12ElementState>
    blenderElement.draw(_display);
 23fbe38:	4621      	mov	r1, r4
 23fbe3a:	9801      	ldr	r0, [sp, #4]
}
 23fbe3c:	b002      	add	sp, #8
 23fbe3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    blenderElement.draw(_display);
 23fbe42:	f000 b857 	b.w	23fbef4 <_ZN9UIElement4drawER15Adafruit_SH1107>

023fbe46 <_ZN9UIDisplay7drawAllEv>:
void UIDisplay::drawAll() {
 23fbe46:	b510      	push	{r4, lr}
 23fbe48:	4604      	mov	r4, r0
    toasterElement.draw(_display);
 23fbe4a:	4601      	mov	r1, r0
 23fbe4c:	3058      	adds	r0, #88	; 0x58
 23fbe4e:	f000 f851 	bl	23fbef4 <_ZN9UIElement4drawER15Adafruit_SH1107>
    blenderElement.draw(_display);
 23fbe52:	4621      	mov	r1, r4
 23fbe54:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 23fbe58:	f000 f84c 	bl	23fbef4 <_ZN9UIElement4drawER15Adafruit_SH1107>
    fridgeElement.draw(_display);
 23fbe5c:	4621      	mov	r1, r4
 23fbe5e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 23fbe62:	f000 f847 	bl	23fbef4 <_ZN9UIElement4drawER15Adafruit_SH1107>
    fanElement.draw(_display);
 23fbe66:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 23fbe6a:	4621      	mov	r1, r4
 23fbe6c:	f000 f842 	bl	23fbef4 <_ZN9UIElement4drawER15Adafruit_SH1107>
    _display.display();
 23fbe70:	4620      	mov	r0, r4
}
 23fbe72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _display.display();
 23fbe76:	f7ff beb7 	b.w	23fbbe8 <_ZN15Adafruit_SH110X7displayEv>
	...

023fbe7c <_ZN9UIDisplay5beginEv>:
void UIDisplay::begin() {
 23fbe7c:	b510      	push	{r4, lr}
    if(!_display.begin(0x3C, true)) {
 23fbe7e:	2201      	movs	r2, #1
 23fbe80:	213c      	movs	r1, #60	; 0x3c
void UIDisplay::begin() {
 23fbe82:	4604      	mov	r4, r0
    if(!_display.begin(0x3C, true)) {
 23fbe84:	f7ff fe3e 	bl	23fbb04 <_ZN15Adafruit_SH11075beginEhb>
 23fbe88:	b950      	cbnz	r0, 23fbea0 <_ZN9UIDisplay5beginEv+0x24>
        Log.error("Could not initialize OLED!");
 23fbe8a:	490b      	ldr	r1, [pc, #44]	; (23fbeb8 <_ZN9UIDisplay5beginEv+0x3c>)
 23fbe8c:	480b      	ldr	r0, [pc, #44]	; (23fbebc <_ZN9UIDisplay5beginEv+0x40>)
 23fbe8e:	f7ff ff79 	bl	23fbd84 <_ZNK5spark6Logger5errorEPKcz>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fbe92:	4c0b      	ldr	r4, [pc, #44]	; (23fbec0 <_ZN9UIDisplay5beginEv+0x44>)
		return HAL_Timer_Get_Milli_Seconds();
 23fbe94:	f000 f914 	bl	23fc0c0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 23fbe98:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
 23fbe9a:	f000 fc05 	bl	23fc6a8 <spark_process>
 23fbe9e:	e7f9      	b.n	23fbe94 <_ZN9UIDisplay5beginEv+0x18>
    Log.info("OLED begun");
 23fbea0:	4908      	ldr	r1, [pc, #32]	; (23fbec4 <_ZN9UIDisplay5beginEv+0x48>)
 23fbea2:	4806      	ldr	r0, [pc, #24]	; (23fbebc <_ZN9UIDisplay5beginEv+0x40>)
 23fbea4:	f7fe fb28 	bl	23fa4f8 <_ZNK5spark6Logger4infoEPKcz>
    _display.clearDisplay();
 23fbea8:	4620      	mov	r0, r4
 23fbeaa:	f7ff fd71 	bl	23fb990 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    drawAll();
 23fbeae:	4620      	mov	r0, r4
}
 23fbeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    drawAll();
 23fbeb4:	f7ff bfc7 	b.w	23fbe46 <_ZN9UIDisplay7drawAllEv>
 23fbeb8:	023ff690 	.word	0x023ff690
 23fbebc:	1007ae70 	.word	0x1007ae70
 23fbec0:	1007aef0 	.word	0x1007aef0
 23fbec4:	023ff6ab 	.word	0x023ff6ab

023fbec8 <_ZN9UIElementC1EPKhii>:
#include "UIElement.h"
#include "Org_01.h"

UIElement::UIElement(const uint8_t *iconBitmap, int x, int y) 
    : icon(iconBitmap), posX(x), posY(y), state(OFF) {}
 23fbec8:	e9c0 1200 	strd	r1, r2, [r0]
 23fbecc:	6083      	str	r3, [r0, #8]
 23fbece:	2240      	movs	r2, #64	; 0x40
 23fbed0:	2318      	movs	r3, #24
 23fbed2:	2122      	movs	r1, #34	; 0x22
 23fbed4:	e9c0 2303 	strd	r2, r3, [r0, #12]
 23fbed8:	231b      	movs	r3, #27
 23fbeda:	e9c0 1305 	strd	r1, r3, [r0, #20]
 23fbede:	2311      	movs	r3, #17
 23fbee0:	61c3      	str	r3, [r0, #28]
 23fbee2:	2301      	movs	r3, #1
UIElement::UIElement(const uint8_t *iconBitmap, int x, int y) 
 23fbee4:	b510      	push	{r4, lr}
    : icon(iconBitmap), posX(x), posY(y), state(OFF) {}
 23fbee6:	f880 3020 	strb.w	r3, [r0, #32]
 23fbeea:	bd10      	pop	{r4, pc}

023fbeec <_ZN9UIElement8setStateE12ElementState>:
ElementState UIElement::getState() const {
    return state;
}

void UIElement::setState(ElementState newState) {
    state = newState;
 23fbeec:	f880 1020 	strb.w	r1, [r0, #32]
}
 23fbef0:	4770      	bx	lr
	...

023fbef4 <_ZN9UIElement4drawER15Adafruit_SH1107>:

void UIElement::draw(Adafruit_SH1107& display) {
 23fbef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fbef6:	460d      	mov	r5, r1
 23fbef8:	4604      	mov	r4, r0
    display.setFont(&Org_01);
 23fbefa:	493d      	ldr	r1, [pc, #244]	; (23fbff0 <_ZN9UIElement4drawER15Adafruit_SH1107+0xfc>)
 23fbefc:	4628      	mov	r0, r5
void UIElement::draw(Adafruit_SH1107& display) {
 23fbefe:	b085      	sub	sp, #20
    display.setFont(&Org_01);
 23fbf00:	f7ff fc13 	bl	23fb72a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    display.setTextSize(2);
 23fbf04:	2102      	movs	r1, #2
 23fbf06:	4628      	mov	r0, r5
 23fbf08:	f7ff fc09 	bl	23fb71e <_ZN12Adafruit_GFX11setTextSizeEh>

    if (state == ON) {
 23fbf0c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 23fbf10:	f894 6020 	ldrb.w	r6, [r4, #32]
 23fbf14:	6861      	ldr	r1, [r4, #4]
 23fbf16:	6920      	ldr	r0, [r4, #16]
 23fbf18:	2e00      	cmp	r6, #0
 23fbf1a:	d130      	bne.n	23fbf7e <_ZN9UIElement4drawER15Adafruit_SH1107+0x8a>
        display.fillRoundRect(posX, posY, WIDTH, ICON_SIZE + 2, 3, 1);
 23fbf1c:	f04f 0c01 	mov.w	ip, #1
 23fbf20:	2703      	movs	r7, #3
 23fbf22:	3002      	adds	r0, #2
 23fbf24:	b200      	sxth	r0, r0
 23fbf26:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 23fbf2a:	9000      	str	r0, [sp, #0]
 23fbf2c:	b21b      	sxth	r3, r3
 23fbf2e:	4628      	mov	r0, r5
 23fbf30:	b212      	sxth	r2, r2
 23fbf32:	b209      	sxth	r1, r1
 23fbf34:	f7ff f94d 	bl	23fb1d2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
        display.drawBitmap(posX + 1, posY + 1, icon, ICON_SIZE, ICON_SIZE, 0);
 23fbf38:	68a2      	ldr	r2, [r4, #8]
 23fbf3a:	6861      	ldr	r1, [r4, #4]
 23fbf3c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 23fbf40:	3201      	adds	r2, #1
 23fbf42:	3101      	adds	r1, #1
 23fbf44:	e9cd 3601 	strd	r3, r6, [sp, #4]
 23fbf48:	9300      	str	r3, [sp, #0]
 23fbf4a:	b212      	sxth	r2, r2
 23fbf4c:	6823      	ldr	r3, [r4, #0]
 23fbf4e:	b209      	sxth	r1, r1
 23fbf50:	4628      	mov	r0, r5
 23fbf52:	f7ff f9a2 	bl	23fb29a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        display.setCursor(posX + TEXT_ON_X, posY + TEXT_Y);
 23fbf56:	69e2      	ldr	r2, [r4, #28]
 23fbf58:	68a3      	ldr	r3, [r4, #8]
 23fbf5a:	6961      	ldr	r1, [r4, #20]
 23fbf5c:	4413      	add	r3, r2
 23fbf5e:	6862      	ldr	r2, [r4, #4]
    cursor_y = y;
 23fbf60:	826b      	strh	r3, [r5, #18]
 23fbf62:	440a      	add	r2, r1
        display.setTextColor(0);
        display.println("ON");
 23fbf64:	4923      	ldr	r1, [pc, #140]	; (23fbff4 <_ZN9UIElement4drawER15Adafruit_SH1107+0x100>)
    cursor_x = x;
 23fbf66:	822a      	strh	r2, [r5, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fbf68:	616e      	str	r6, [r5, #20]
        
        display.drawRoundRect(posX, posY, WIDTH, ICON_SIZE + 2, 3, 1);
        display.drawBitmap(posX + 1, posY + 1, icon, ICON_SIZE, ICON_SIZE, 1);
        display.setCursor(posX + TEXT_OFF_X, posY + TEXT_Y);
        display.setTextColor(1);
        display.println("OFF");
 23fbf6a:	4628      	mov	r0, r5
 23fbf6c:	f002 f89d 	bl	23fe0aa <_ZN5Print7printlnEPKc>
    }

    display.display();
 23fbf70:	4628      	mov	r0, r5
 23fbf72:	682b      	ldr	r3, [r5, #0]
 23fbf74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 23fbf76:	b005      	add	sp, #20
 23fbf78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    display.display();
 23fbf7c:	4718      	bx	r3
        display.fillRoundRect(posX, posY, WIDTH, ICON_SIZE + 1, 3, 0);  // Clear screen first
 23fbf7e:	2703      	movs	r7, #3
 23fbf80:	2600      	movs	r6, #0
 23fbf82:	e9cd 7601 	strd	r7, r6, [sp, #4]
        display.drawRoundRect(posX, posY, WIDTH, ICON_SIZE + 2, 3, 1);
 23fbf86:	2601      	movs	r6, #1
        display.fillRoundRect(posX, posY, WIDTH, ICON_SIZE + 1, 3, 0);  // Clear screen first
 23fbf88:	3001      	adds	r0, #1
 23fbf8a:	b200      	sxth	r0, r0
 23fbf8c:	9000      	str	r0, [sp, #0]
 23fbf8e:	b21b      	sxth	r3, r3
 23fbf90:	4628      	mov	r0, r5
 23fbf92:	b212      	sxth	r2, r2
 23fbf94:	b209      	sxth	r1, r1
 23fbf96:	f7ff f91c 	bl	23fb1d2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
        display.drawRoundRect(posX, posY, WIDTH, ICON_SIZE + 2, 3, 1);
 23fbf9a:	6923      	ldr	r3, [r4, #16]
 23fbf9c:	4628      	mov	r0, r5
 23fbf9e:	3302      	adds	r3, #2
 23fbfa0:	b21b      	sxth	r3, r3
 23fbfa2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 23fbfa6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 23fbfaa:	9300      	str	r3, [sp, #0]
 23fbfac:	e9cd 7601 	strd	r7, r6, [sp, #4]
 23fbfb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 23fbfb4:	f7ff f874 	bl	23fb0a0 <_ZN12Adafruit_GFX13drawRoundRectEssssst>
        display.drawBitmap(posX + 1, posY + 1, icon, ICON_SIZE, ICON_SIZE, 1);
 23fbfb8:	68a2      	ldr	r2, [r4, #8]
 23fbfba:	6861      	ldr	r1, [r4, #4]
 23fbfbc:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 23fbfc0:	4432      	add	r2, r6
 23fbfc2:	4431      	add	r1, r6
 23fbfc4:	e9cd 3601 	strd	r3, r6, [sp, #4]
 23fbfc8:	9300      	str	r3, [sp, #0]
 23fbfca:	b212      	sxth	r2, r2
 23fbfcc:	6823      	ldr	r3, [r4, #0]
 23fbfce:	b209      	sxth	r1, r1
 23fbfd0:	4628      	mov	r0, r5
 23fbfd2:	f7ff f962 	bl	23fb29a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        display.setCursor(posX + TEXT_OFF_X, posY + TEXT_Y);
 23fbfd6:	69e2      	ldr	r2, [r4, #28]
 23fbfd8:	68a3      	ldr	r3, [r4, #8]
 23fbfda:	69a1      	ldr	r1, [r4, #24]
 23fbfdc:	4413      	add	r3, r2
 23fbfde:	6862      	ldr	r2, [r4, #4]
    cursor_y = y;
 23fbfe0:	826b      	strh	r3, [r5, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fbfe2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 23fbfe6:	440a      	add	r2, r1
    cursor_x = x;
 23fbfe8:	822a      	strh	r2, [r5, #16]
        display.println("OFF");
 23fbfea:	4903      	ldr	r1, [pc, #12]	; (23fbff8 <_ZN9UIElement4drawER15Adafruit_SH1107+0x104>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fbfec:	616b      	str	r3, [r5, #20]
 23fbfee:	e7bc      	b.n	23fbf6a <_ZN9UIElement4drawER15Adafruit_SH1107+0x76>
 23fbff0:	023ffbe0 	.word	0x023ffbe0
 23fbff4:	023fedd7 	.word	0x023fedd7
 23fbff8:	023fedda 	.word	0x023fedda

023fbffc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 23fbffc:	b509      	push	{r0, r3, lr}
 23fbffe:	4804      	ldr	r0, [pc, #16]	; (23fc010 <os_thread_yield+0x14>)
 23fc000:	6800      	ldr	r0, [r0, #0]
 23fc002:	4b04      	ldr	r3, [pc, #16]	; (23fc014 <os_thread_yield+0x18>)
 23fc004:	4403      	add	r3, r0
 23fc006:	681b      	ldr	r3, [r3, #0]
 23fc008:	68db      	ldr	r3, [r3, #12]
 23fc00a:	9302      	str	r3, [sp, #8]
 23fc00c:	bd09      	pop	{r0, r3, pc}
 23fc00e:	0000      	.short	0x0000
 23fc010:	1007acb0 	.word	0x1007acb0
 23fc014:	00000030 	.word	0x00000030

023fc018 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc018:	b509      	push	{r0, r3, lr}
 23fc01a:	4804      	ldr	r0, [pc, #16]	; (23fc02c <os_mutex_recursive_create+0x14>)
 23fc01c:	6800      	ldr	r0, [r0, #0]
 23fc01e:	4b04      	ldr	r3, [pc, #16]	; (23fc030 <os_mutex_recursive_create+0x18>)
 23fc020:	4403      	add	r3, r0
 23fc022:	681b      	ldr	r3, [r3, #0]
 23fc024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc026:	9302      	str	r3, [sp, #8]
 23fc028:	bd09      	pop	{r0, r3, pc}
 23fc02a:	0000      	.short	0x0000
 23fc02c:	1007acb0 	.word	0x1007acb0
 23fc030:	00000030 	.word	0x00000030

023fc034 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc034:	b509      	push	{r0, r3, lr}
 23fc036:	4804      	ldr	r0, [pc, #16]	; (23fc048 <os_mutex_recursive_destroy+0x14>)
 23fc038:	6800      	ldr	r0, [r0, #0]
 23fc03a:	4b04      	ldr	r3, [pc, #16]	; (23fc04c <os_mutex_recursive_destroy+0x18>)
 23fc03c:	4403      	add	r3, r0
 23fc03e:	681b      	ldr	r3, [r3, #0]
 23fc040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc042:	9302      	str	r3, [sp, #8]
 23fc044:	bd09      	pop	{r0, r3, pc}
 23fc046:	0000      	.short	0x0000
 23fc048:	1007acb0 	.word	0x1007acb0
 23fc04c:	00000030 	.word	0x00000030

023fc050 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc050:	b509      	push	{r0, r3, lr}
 23fc052:	4804      	ldr	r0, [pc, #16]	; (23fc064 <os_mutex_recursive_lock+0x14>)
 23fc054:	6800      	ldr	r0, [r0, #0]
 23fc056:	4b04      	ldr	r3, [pc, #16]	; (23fc068 <os_mutex_recursive_lock+0x18>)
 23fc058:	4403      	add	r3, r0
 23fc05a:	681b      	ldr	r3, [r3, #0]
 23fc05c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc05e:	9302      	str	r3, [sp, #8]
 23fc060:	bd09      	pop	{r0, r3, pc}
 23fc062:	0000      	.short	0x0000
 23fc064:	1007acb0 	.word	0x1007acb0
 23fc068:	00000030 	.word	0x00000030

023fc06c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc06c:	b509      	push	{r0, r3, lr}
 23fc06e:	4804      	ldr	r0, [pc, #16]	; (23fc080 <os_mutex_recursive_unlock+0x14>)
 23fc070:	6800      	ldr	r0, [r0, #0]
 23fc072:	4b04      	ldr	r3, [pc, #16]	; (23fc084 <os_mutex_recursive_unlock+0x18>)
 23fc074:	4403      	add	r3, r0
 23fc076:	681b      	ldr	r3, [r3, #0]
 23fc078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc07a:	9302      	str	r3, [sp, #8]
 23fc07c:	bd09      	pop	{r0, r3, pc}
 23fc07e:	0000      	.short	0x0000
 23fc080:	1007acb0 	.word	0x1007acb0
 23fc084:	00000030 	.word	0x00000030

023fc088 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc088:	b509      	push	{r0, r3, lr}
 23fc08a:	4804      	ldr	r0, [pc, #16]	; (23fc09c <HAL_RNG_GetRandomNumber+0x14>)
 23fc08c:	6800      	ldr	r0, [r0, #0]
 23fc08e:	4b04      	ldr	r3, [pc, #16]	; (23fc0a0 <HAL_RNG_GetRandomNumber+0x18>)
 23fc090:	4403      	add	r3, r0
 23fc092:	681b      	ldr	r3, [r3, #0]
 23fc094:	685b      	ldr	r3, [r3, #4]
 23fc096:	9302      	str	r3, [sp, #8]
 23fc098:	bd09      	pop	{r0, r3, pc}
 23fc09a:	0000      	.short	0x0000
 23fc09c:	1007acb0 	.word	0x1007acb0
 23fc0a0:	00000000 	.word	0x00000000

023fc0a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc0a4:	b509      	push	{r0, r3, lr}
 23fc0a6:	4804      	ldr	r0, [pc, #16]	; (23fc0b8 <HAL_Delay_Microseconds+0x14>)
 23fc0a8:	6800      	ldr	r0, [r0, #0]
 23fc0aa:	4b04      	ldr	r3, [pc, #16]	; (23fc0bc <HAL_Delay_Microseconds+0x18>)
 23fc0ac:	4403      	add	r3, r0
 23fc0ae:	681b      	ldr	r3, [r3, #0]
 23fc0b0:	68db      	ldr	r3, [r3, #12]
 23fc0b2:	9302      	str	r3, [sp, #8]
 23fc0b4:	bd09      	pop	{r0, r3, pc}
 23fc0b6:	0000      	.short	0x0000
 23fc0b8:	1007acb0 	.word	0x1007acb0
 23fc0bc:	00000000 	.word	0x00000000

023fc0c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc0c0:	b509      	push	{r0, r3, lr}
 23fc0c2:	4804      	ldr	r0, [pc, #16]	; (23fc0d4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc0c4:	6800      	ldr	r0, [r0, #0]
 23fc0c6:	4b04      	ldr	r3, [pc, #16]	; (23fc0d8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc0c8:	4403      	add	r3, r0
 23fc0ca:	681b      	ldr	r3, [r3, #0]
 23fc0cc:	695b      	ldr	r3, [r3, #20]
 23fc0ce:	9302      	str	r3, [sp, #8]
 23fc0d0:	bd09      	pop	{r0, r3, pc}
 23fc0d2:	0000      	.short	0x0000
 23fc0d4:	1007acb0 	.word	0x1007acb0
 23fc0d8:	00000000 	.word	0x00000000

023fc0dc <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc0dc:	b509      	push	{r0, r3, lr}
 23fc0de:	4804      	ldr	r0, [pc, #16]	; (23fc0f0 <hal_gpio_mode+0x14>)
 23fc0e0:	6800      	ldr	r0, [r0, #0]
 23fc0e2:	4b04      	ldr	r3, [pc, #16]	; (23fc0f4 <hal_gpio_mode+0x18>)
 23fc0e4:	4403      	add	r3, r0
 23fc0e6:	681b      	ldr	r3, [r3, #0]
 23fc0e8:	689b      	ldr	r3, [r3, #8]
 23fc0ea:	9302      	str	r3, [sp, #8]
 23fc0ec:	bd09      	pop	{r0, r3, pc}
 23fc0ee:	0000      	.short	0x0000
 23fc0f0:	1007acb0 	.word	0x1007acb0
 23fc0f4:	00000014 	.word	0x00000014

023fc0f8 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc0f8:	b509      	push	{r0, r3, lr}
 23fc0fa:	4804      	ldr	r0, [pc, #16]	; (23fc10c <hal_gpio_get_mode+0x14>)
 23fc0fc:	6800      	ldr	r0, [r0, #0]
 23fc0fe:	4b04      	ldr	r3, [pc, #16]	; (23fc110 <hal_gpio_get_mode+0x18>)
 23fc100:	4403      	add	r3, r0
 23fc102:	681b      	ldr	r3, [r3, #0]
 23fc104:	68db      	ldr	r3, [r3, #12]
 23fc106:	9302      	str	r3, [sp, #8]
 23fc108:	bd09      	pop	{r0, r3, pc}
 23fc10a:	0000      	.short	0x0000
 23fc10c:	1007acb0 	.word	0x1007acb0
 23fc110:	00000014 	.word	0x00000014

023fc114 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc114:	b509      	push	{r0, r3, lr}
 23fc116:	4804      	ldr	r0, [pc, #16]	; (23fc128 <hal_gpio_write+0x14>)
 23fc118:	6800      	ldr	r0, [r0, #0]
 23fc11a:	4b04      	ldr	r3, [pc, #16]	; (23fc12c <hal_gpio_write+0x18>)
 23fc11c:	4403      	add	r3, r0
 23fc11e:	681b      	ldr	r3, [r3, #0]
 23fc120:	691b      	ldr	r3, [r3, #16]
 23fc122:	9302      	str	r3, [sp, #8]
 23fc124:	bd09      	pop	{r0, r3, pc}
 23fc126:	0000      	.short	0x0000
 23fc128:	1007acb0 	.word	0x1007acb0
 23fc12c:	00000014 	.word	0x00000014

023fc130 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fc130:	b509      	push	{r0, r3, lr}
 23fc132:	4804      	ldr	r0, [pc, #16]	; (23fc144 <hal_i2c_set_speed+0x14>)
 23fc134:	6800      	ldr	r0, [r0, #0]
 23fc136:	4b04      	ldr	r3, [pc, #16]	; (23fc148 <hal_i2c_set_speed+0x18>)
 23fc138:	4403      	add	r3, r0
 23fc13a:	681b      	ldr	r3, [r3, #0]
 23fc13c:	681b      	ldr	r3, [r3, #0]
 23fc13e:	9302      	str	r3, [sp, #8]
 23fc140:	bd09      	pop	{r0, r3, pc}
 23fc142:	0000      	.short	0x0000
 23fc144:	1007acb0 	.word	0x1007acb0
 23fc148:	00000010 	.word	0x00000010

023fc14c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fc14c:	b509      	push	{r0, r3, lr}
 23fc14e:	4804      	ldr	r0, [pc, #16]	; (23fc160 <hal_i2c_begin+0x14>)
 23fc150:	6800      	ldr	r0, [r0, #0]
 23fc152:	4b04      	ldr	r3, [pc, #16]	; (23fc164 <hal_i2c_begin+0x18>)
 23fc154:	4403      	add	r3, r0
 23fc156:	681b      	ldr	r3, [r3, #0]
 23fc158:	68db      	ldr	r3, [r3, #12]
 23fc15a:	9302      	str	r3, [sp, #8]
 23fc15c:	bd09      	pop	{r0, r3, pc}
 23fc15e:	0000      	.short	0x0000
 23fc160:	1007acb0 	.word	0x1007acb0
 23fc164:	00000010 	.word	0x00000010

023fc168 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fc168:	b509      	push	{r0, r3, lr}
 23fc16a:	4804      	ldr	r0, [pc, #16]	; (23fc17c <hal_i2c_begin_transmission+0x14>)
 23fc16c:	6800      	ldr	r0, [r0, #0]
 23fc16e:	4b04      	ldr	r3, [pc, #16]	; (23fc180 <hal_i2c_begin_transmission+0x18>)
 23fc170:	4403      	add	r3, r0
 23fc172:	681b      	ldr	r3, [r3, #0]
 23fc174:	699b      	ldr	r3, [r3, #24]
 23fc176:	9302      	str	r3, [sp, #8]
 23fc178:	bd09      	pop	{r0, r3, pc}
 23fc17a:	0000      	.short	0x0000
 23fc17c:	1007acb0 	.word	0x1007acb0
 23fc180:	00000010 	.word	0x00000010

023fc184 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fc184:	b509      	push	{r0, r3, lr}
 23fc186:	4804      	ldr	r0, [pc, #16]	; (23fc198 <hal_i2c_end_transmission+0x14>)
 23fc188:	6800      	ldr	r0, [r0, #0]
 23fc18a:	4b04      	ldr	r3, [pc, #16]	; (23fc19c <hal_i2c_end_transmission+0x18>)
 23fc18c:	4403      	add	r3, r0
 23fc18e:	681b      	ldr	r3, [r3, #0]
 23fc190:	69db      	ldr	r3, [r3, #28]
 23fc192:	9302      	str	r3, [sp, #8]
 23fc194:	bd09      	pop	{r0, r3, pc}
 23fc196:	0000      	.short	0x0000
 23fc198:	1007acb0 	.word	0x1007acb0
 23fc19c:	00000010 	.word	0x00000010

023fc1a0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc1a0:	b509      	push	{r0, r3, lr}
 23fc1a2:	4804      	ldr	r0, [pc, #16]	; (23fc1b4 <hal_i2c_write+0x14>)
 23fc1a4:	6800      	ldr	r0, [r0, #0]
 23fc1a6:	4b04      	ldr	r3, [pc, #16]	; (23fc1b8 <hal_i2c_write+0x18>)
 23fc1a8:	4403      	add	r3, r0
 23fc1aa:	681b      	ldr	r3, [r3, #0]
 23fc1ac:	6a1b      	ldr	r3, [r3, #32]
 23fc1ae:	9302      	str	r3, [sp, #8]
 23fc1b0:	bd09      	pop	{r0, r3, pc}
 23fc1b2:	0000      	.short	0x0000
 23fc1b4:	1007acb0 	.word	0x1007acb0
 23fc1b8:	00000010 	.word	0x00000010

023fc1bc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc1bc:	b509      	push	{r0, r3, lr}
 23fc1be:	4804      	ldr	r0, [pc, #16]	; (23fc1d0 <hal_i2c_available+0x14>)
 23fc1c0:	6800      	ldr	r0, [r0, #0]
 23fc1c2:	4b04      	ldr	r3, [pc, #16]	; (23fc1d4 <hal_i2c_available+0x18>)
 23fc1c4:	4403      	add	r3, r0
 23fc1c6:	681b      	ldr	r3, [r3, #0]
 23fc1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc1ca:	9302      	str	r3, [sp, #8]
 23fc1cc:	bd09      	pop	{r0, r3, pc}
 23fc1ce:	0000      	.short	0x0000
 23fc1d0:	1007acb0 	.word	0x1007acb0
 23fc1d4:	00000010 	.word	0x00000010

023fc1d8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc1d8:	b509      	push	{r0, r3, lr}
 23fc1da:	4804      	ldr	r0, [pc, #16]	; (23fc1ec <hal_i2c_read+0x14>)
 23fc1dc:	6800      	ldr	r0, [r0, #0]
 23fc1de:	4b04      	ldr	r3, [pc, #16]	; (23fc1f0 <hal_i2c_read+0x18>)
 23fc1e0:	4403      	add	r3, r0
 23fc1e2:	681b      	ldr	r3, [r3, #0]
 23fc1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc1e6:	9302      	str	r3, [sp, #8]
 23fc1e8:	bd09      	pop	{r0, r3, pc}
 23fc1ea:	0000      	.short	0x0000
 23fc1ec:	1007acb0 	.word	0x1007acb0
 23fc1f0:	00000010 	.word	0x00000010

023fc1f4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc1f4:	b509      	push	{r0, r3, lr}
 23fc1f6:	4804      	ldr	r0, [pc, #16]	; (23fc208 <hal_i2c_peek+0x14>)
 23fc1f8:	6800      	ldr	r0, [r0, #0]
 23fc1fa:	4b04      	ldr	r3, [pc, #16]	; (23fc20c <hal_i2c_peek+0x18>)
 23fc1fc:	4403      	add	r3, r0
 23fc1fe:	681b      	ldr	r3, [r3, #0]
 23fc200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc202:	9302      	str	r3, [sp, #8]
 23fc204:	bd09      	pop	{r0, r3, pc}
 23fc206:	0000      	.short	0x0000
 23fc208:	1007acb0 	.word	0x1007acb0
 23fc20c:	00000010 	.word	0x00000010

023fc210 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc210:	b509      	push	{r0, r3, lr}
 23fc212:	4804      	ldr	r0, [pc, #16]	; (23fc224 <hal_i2c_flush+0x14>)
 23fc214:	6800      	ldr	r0, [r0, #0]
 23fc216:	4b04      	ldr	r3, [pc, #16]	; (23fc228 <hal_i2c_flush+0x18>)
 23fc218:	4403      	add	r3, r0
 23fc21a:	681b      	ldr	r3, [r3, #0]
 23fc21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc21e:	9302      	str	r3, [sp, #8]
 23fc220:	bd09      	pop	{r0, r3, pc}
 23fc222:	0000      	.short	0x0000
 23fc224:	1007acb0 	.word	0x1007acb0
 23fc228:	00000010 	.word	0x00000010

023fc22c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc22c:	b509      	push	{r0, r3, lr}
 23fc22e:	4804      	ldr	r0, [pc, #16]	; (23fc240 <hal_i2c_is_enabled+0x14>)
 23fc230:	6800      	ldr	r0, [r0, #0]
 23fc232:	4b04      	ldr	r3, [pc, #16]	; (23fc244 <hal_i2c_is_enabled+0x18>)
 23fc234:	4403      	add	r3, r0
 23fc236:	681b      	ldr	r3, [r3, #0]
 23fc238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc23a:	9302      	str	r3, [sp, #8]
 23fc23c:	bd09      	pop	{r0, r3, pc}
 23fc23e:	0000      	.short	0x0000
 23fc240:	1007acb0 	.word	0x1007acb0
 23fc244:	00000010 	.word	0x00000010

023fc248 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc248:	b509      	push	{r0, r3, lr}
 23fc24a:	4804      	ldr	r0, [pc, #16]	; (23fc25c <hal_i2c_init+0x14>)
 23fc24c:	6800      	ldr	r0, [r0, #0]
 23fc24e:	4b04      	ldr	r3, [pc, #16]	; (23fc260 <hal_i2c_init+0x18>)
 23fc250:	4403      	add	r3, r0
 23fc252:	681b      	ldr	r3, [r3, #0]
 23fc254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc256:	9302      	str	r3, [sp, #8]
 23fc258:	bd09      	pop	{r0, r3, pc}
 23fc25a:	0000      	.short	0x0000
 23fc25c:	1007acb0 	.word	0x1007acb0
 23fc260:	00000010 	.word	0x00000010

023fc264 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc264:	b509      	push	{r0, r3, lr}
 23fc266:	4804      	ldr	r0, [pc, #16]	; (23fc278 <inet_inet_ntop+0x14>)
 23fc268:	6800      	ldr	r0, [r0, #0]
 23fc26a:	4b04      	ldr	r3, [pc, #16]	; (23fc27c <inet_inet_ntop+0x18>)
 23fc26c:	4403      	add	r3, r0
 23fc26e:	681b      	ldr	r3, [r3, #0]
 23fc270:	695b      	ldr	r3, [r3, #20]
 23fc272:	9302      	str	r3, [sp, #8]
 23fc274:	bd09      	pop	{r0, r3, pc}
 23fc276:	0000      	.short	0x0000
 23fc278:	1007acb0 	.word	0x1007acb0
 23fc27c:	0000004c 	.word	0x0000004c

023fc280 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc280:	b509      	push	{r0, r3, lr}
 23fc282:	4804      	ldr	r0, [pc, #16]	; (23fc294 <netdb_freeaddrinfo+0x14>)
 23fc284:	6800      	ldr	r0, [r0, #0]
 23fc286:	4b04      	ldr	r3, [pc, #16]	; (23fc298 <netdb_freeaddrinfo+0x18>)
 23fc288:	4403      	add	r3, r0
 23fc28a:	681b      	ldr	r3, [r3, #0]
 23fc28c:	689b      	ldr	r3, [r3, #8]
 23fc28e:	9302      	str	r3, [sp, #8]
 23fc290:	bd09      	pop	{r0, r3, pc}
 23fc292:	0000      	.short	0x0000
 23fc294:	1007acb0 	.word	0x1007acb0
 23fc298:	00000050 	.word	0x00000050

023fc29c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc29c:	b509      	push	{r0, r3, lr}
 23fc29e:	4804      	ldr	r0, [pc, #16]	; (23fc2b0 <netdb_getaddrinfo+0x14>)
 23fc2a0:	6800      	ldr	r0, [r0, #0]
 23fc2a2:	4b04      	ldr	r3, [pc, #16]	; (23fc2b4 <netdb_getaddrinfo+0x18>)
 23fc2a4:	4403      	add	r3, r0
 23fc2a6:	681b      	ldr	r3, [r3, #0]
 23fc2a8:	68db      	ldr	r3, [r3, #12]
 23fc2aa:	9302      	str	r3, [sp, #8]
 23fc2ac:	bd09      	pop	{r0, r3, pc}
 23fc2ae:	0000      	.short	0x0000
 23fc2b0:	1007acb0 	.word	0x1007acb0
 23fc2b4:	00000050 	.word	0x00000050

023fc2b8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fc2b8:	b509      	push	{r0, r3, lr}
 23fc2ba:	4804      	ldr	r0, [pc, #16]	; (23fc2cc <hal_spi_begin+0x14>)
 23fc2bc:	6800      	ldr	r0, [r0, #0]
 23fc2be:	4b04      	ldr	r3, [pc, #16]	; (23fc2d0 <hal_spi_begin+0x18>)
 23fc2c0:	4403      	add	r3, r0
 23fc2c2:	681b      	ldr	r3, [r3, #0]
 23fc2c4:	681b      	ldr	r3, [r3, #0]
 23fc2c6:	9302      	str	r3, [sp, #8]
 23fc2c8:	bd09      	pop	{r0, r3, pc}
 23fc2ca:	0000      	.short	0x0000
 23fc2cc:	1007acb0 	.word	0x1007acb0
 23fc2d0:	00000018 	.word	0x00000018

023fc2d4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc2d4:	b509      	push	{r0, r3, lr}
 23fc2d6:	4804      	ldr	r0, [pc, #16]	; (23fc2e8 <hal_spi_init+0x14>)
 23fc2d8:	6800      	ldr	r0, [r0, #0]
 23fc2da:	4b04      	ldr	r3, [pc, #16]	; (23fc2ec <hal_spi_init+0x18>)
 23fc2dc:	4403      	add	r3, r0
 23fc2de:	681b      	ldr	r3, [r3, #0]
 23fc2e0:	69db      	ldr	r3, [r3, #28]
 23fc2e2:	9302      	str	r3, [sp, #8]
 23fc2e4:	bd09      	pop	{r0, r3, pc}
 23fc2e6:	0000      	.short	0x0000
 23fc2e8:	1007acb0 	.word	0x1007acb0
 23fc2ec:	00000018 	.word	0x00000018

023fc2f0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc2f0:	b509      	push	{r0, r3, lr}
 23fc2f2:	4804      	ldr	r0, [pc, #16]	; (23fc304 <hal_spi_is_enabled+0x14>)
 23fc2f4:	6800      	ldr	r0, [r0, #0]
 23fc2f6:	4b04      	ldr	r3, [pc, #16]	; (23fc308 <hal_spi_is_enabled+0x18>)
 23fc2f8:	4403      	add	r3, r0
 23fc2fa:	681b      	ldr	r3, [r3, #0]
 23fc2fc:	6a1b      	ldr	r3, [r3, #32]
 23fc2fe:	9302      	str	r3, [sp, #8]
 23fc300:	bd09      	pop	{r0, r3, pc}
 23fc302:	0000      	.short	0x0000
 23fc304:	1007acb0 	.word	0x1007acb0
 23fc308:	00000018 	.word	0x00000018

023fc30c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fc30c:	b509      	push	{r0, r3, lr}
 23fc30e:	4804      	ldr	r0, [pc, #16]	; (23fc320 <hal_spi_info+0x14>)
 23fc310:	6800      	ldr	r0, [r0, #0]
 23fc312:	4b04      	ldr	r3, [pc, #16]	; (23fc324 <hal_spi_info+0x18>)
 23fc314:	4403      	add	r3, r0
 23fc316:	681b      	ldr	r3, [r3, #0]
 23fc318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc31a:	9302      	str	r3, [sp, #8]
 23fc31c:	bd09      	pop	{r0, r3, pc}
 23fc31e:	0000      	.short	0x0000
 23fc320:	1007acb0 	.word	0x1007acb0
 23fc324:	00000018 	.word	0x00000018

023fc328 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fc328:	b509      	push	{r0, r3, lr}
 23fc32a:	4804      	ldr	r0, [pc, #16]	; (23fc33c <hal_spi_transfer_dma+0x14>)
 23fc32c:	6800      	ldr	r0, [r0, #0]
 23fc32e:	4b04      	ldr	r3, [pc, #16]	; (23fc340 <hal_spi_transfer_dma+0x18>)
 23fc330:	4403      	add	r3, r0
 23fc332:	681b      	ldr	r3, [r3, #0]
 23fc334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc336:	9302      	str	r3, [sp, #8]
 23fc338:	bd09      	pop	{r0, r3, pc}
 23fc33a:	0000      	.short	0x0000
 23fc33c:	1007acb0 	.word	0x1007acb0
 23fc340:	00000018 	.word	0x00000018

023fc344 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fc344:	b509      	push	{r0, r3, lr}
 23fc346:	4804      	ldr	r0, [pc, #16]	; (23fc358 <hal_spi_transfer_dma_status+0x14>)
 23fc348:	6800      	ldr	r0, [r0, #0]
 23fc34a:	4b04      	ldr	r3, [pc, #16]	; (23fc35c <hal_spi_transfer_dma_status+0x18>)
 23fc34c:	4403      	add	r3, r0
 23fc34e:	681b      	ldr	r3, [r3, #0]
 23fc350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fc352:	9302      	str	r3, [sp, #8]
 23fc354:	bd09      	pop	{r0, r3, pc}
 23fc356:	0000      	.short	0x0000
 23fc358:	1007acb0 	.word	0x1007acb0
 23fc35c:	00000018 	.word	0x00000018

023fc360 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fc360:	b509      	push	{r0, r3, lr}
 23fc362:	4804      	ldr	r0, [pc, #16]	; (23fc374 <hal_spi_set_settings+0x14>)
 23fc364:	6800      	ldr	r0, [r0, #0]
 23fc366:	4b04      	ldr	r3, [pc, #16]	; (23fc378 <hal_spi_set_settings+0x18>)
 23fc368:	4403      	add	r3, r0
 23fc36a:	681b      	ldr	r3, [r3, #0]
 23fc36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc36e:	9302      	str	r3, [sp, #8]
 23fc370:	bd09      	pop	{r0, r3, pc}
 23fc372:	0000      	.short	0x0000
 23fc374:	1007acb0 	.word	0x1007acb0
 23fc378:	00000018 	.word	0x00000018

023fc37c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fc37c:	b509      	push	{r0, r3, lr}
 23fc37e:	4804      	ldr	r0, [pc, #16]	; (23fc390 <hal_spi_acquire+0x14>)
 23fc380:	6800      	ldr	r0, [r0, #0]
 23fc382:	4b04      	ldr	r3, [pc, #16]	; (23fc394 <hal_spi_acquire+0x18>)
 23fc384:	4403      	add	r3, r0
 23fc386:	681b      	ldr	r3, [r3, #0]
 23fc388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc38a:	9302      	str	r3, [sp, #8]
 23fc38c:	bd09      	pop	{r0, r3, pc}
 23fc38e:	0000      	.short	0x0000
 23fc390:	1007acb0 	.word	0x1007acb0
 23fc394:	00000018 	.word	0x00000018

023fc398 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fc398:	b509      	push	{r0, r3, lr}
 23fc39a:	4804      	ldr	r0, [pc, #16]	; (23fc3ac <hal_spi_release+0x14>)
 23fc39c:	6800      	ldr	r0, [r0, #0]
 23fc39e:	4b04      	ldr	r3, [pc, #16]	; (23fc3b0 <hal_spi_release+0x18>)
 23fc3a0:	4403      	add	r3, r0
 23fc3a2:	681b      	ldr	r3, [r3, #0]
 23fc3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc3a6:	9302      	str	r3, [sp, #8]
 23fc3a8:	bd09      	pop	{r0, r3, pc}
 23fc3aa:	0000      	.short	0x0000
 23fc3ac:	1007acb0 	.word	0x1007acb0
 23fc3b0:	00000018 	.word	0x00000018

023fc3b4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fc3b4:	b509      	push	{r0, r3, lr}
 23fc3b6:	4804      	ldr	r0, [pc, #16]	; (23fc3c8 <hal_usart_end+0x14>)
 23fc3b8:	6800      	ldr	r0, [r0, #0]
 23fc3ba:	4b04      	ldr	r3, [pc, #16]	; (23fc3cc <hal_usart_end+0x18>)
 23fc3bc:	4403      	add	r3, r0
 23fc3be:	681b      	ldr	r3, [r3, #0]
 23fc3c0:	689b      	ldr	r3, [r3, #8]
 23fc3c2:	9302      	str	r3, [sp, #8]
 23fc3c4:	bd09      	pop	{r0, r3, pc}
 23fc3c6:	0000      	.short	0x0000
 23fc3c8:	1007acb0 	.word	0x1007acb0
 23fc3cc:	00000024 	.word	0x00000024

023fc3d0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc3d0:	b509      	push	{r0, r3, lr}
 23fc3d2:	4804      	ldr	r0, [pc, #16]	; (23fc3e4 <hal_usart_write+0x14>)
 23fc3d4:	6800      	ldr	r0, [r0, #0]
 23fc3d6:	4b04      	ldr	r3, [pc, #16]	; (23fc3e8 <hal_usart_write+0x18>)
 23fc3d8:	4403      	add	r3, r0
 23fc3da:	681b      	ldr	r3, [r3, #0]
 23fc3dc:	68db      	ldr	r3, [r3, #12]
 23fc3de:	9302      	str	r3, [sp, #8]
 23fc3e0:	bd09      	pop	{r0, r3, pc}
 23fc3e2:	0000      	.short	0x0000
 23fc3e4:	1007acb0 	.word	0x1007acb0
 23fc3e8:	00000024 	.word	0x00000024

023fc3ec <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc3ec:	b509      	push	{r0, r3, lr}
 23fc3ee:	4804      	ldr	r0, [pc, #16]	; (23fc400 <hal_usart_available+0x14>)
 23fc3f0:	6800      	ldr	r0, [r0, #0]
 23fc3f2:	4b04      	ldr	r3, [pc, #16]	; (23fc404 <hal_usart_available+0x18>)
 23fc3f4:	4403      	add	r3, r0
 23fc3f6:	681b      	ldr	r3, [r3, #0]
 23fc3f8:	691b      	ldr	r3, [r3, #16]
 23fc3fa:	9302      	str	r3, [sp, #8]
 23fc3fc:	bd09      	pop	{r0, r3, pc}
 23fc3fe:	0000      	.short	0x0000
 23fc400:	1007acb0 	.word	0x1007acb0
 23fc404:	00000024 	.word	0x00000024

023fc408 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc408:	b509      	push	{r0, r3, lr}
 23fc40a:	4804      	ldr	r0, [pc, #16]	; (23fc41c <hal_usart_read+0x14>)
 23fc40c:	6800      	ldr	r0, [r0, #0]
 23fc40e:	4b04      	ldr	r3, [pc, #16]	; (23fc420 <hal_usart_read+0x18>)
 23fc410:	4403      	add	r3, r0
 23fc412:	681b      	ldr	r3, [r3, #0]
 23fc414:	695b      	ldr	r3, [r3, #20]
 23fc416:	9302      	str	r3, [sp, #8]
 23fc418:	bd09      	pop	{r0, r3, pc}
 23fc41a:	0000      	.short	0x0000
 23fc41c:	1007acb0 	.word	0x1007acb0
 23fc420:	00000024 	.word	0x00000024

023fc424 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc424:	b509      	push	{r0, r3, lr}
 23fc426:	4804      	ldr	r0, [pc, #16]	; (23fc438 <hal_usart_peek+0x14>)
 23fc428:	6800      	ldr	r0, [r0, #0]
 23fc42a:	4b04      	ldr	r3, [pc, #16]	; (23fc43c <hal_usart_peek+0x18>)
 23fc42c:	4403      	add	r3, r0
 23fc42e:	681b      	ldr	r3, [r3, #0]
 23fc430:	699b      	ldr	r3, [r3, #24]
 23fc432:	9302      	str	r3, [sp, #8]
 23fc434:	bd09      	pop	{r0, r3, pc}
 23fc436:	0000      	.short	0x0000
 23fc438:	1007acb0 	.word	0x1007acb0
 23fc43c:	00000024 	.word	0x00000024

023fc440 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc440:	b509      	push	{r0, r3, lr}
 23fc442:	4804      	ldr	r0, [pc, #16]	; (23fc454 <hal_usart_flush+0x14>)
 23fc444:	6800      	ldr	r0, [r0, #0]
 23fc446:	4b04      	ldr	r3, [pc, #16]	; (23fc458 <hal_usart_flush+0x18>)
 23fc448:	4403      	add	r3, r0
 23fc44a:	681b      	ldr	r3, [r3, #0]
 23fc44c:	69db      	ldr	r3, [r3, #28]
 23fc44e:	9302      	str	r3, [sp, #8]
 23fc450:	bd09      	pop	{r0, r3, pc}
 23fc452:	0000      	.short	0x0000
 23fc454:	1007acb0 	.word	0x1007acb0
 23fc458:	00000024 	.word	0x00000024

023fc45c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc45c:	b509      	push	{r0, r3, lr}
 23fc45e:	4804      	ldr	r0, [pc, #16]	; (23fc470 <hal_usart_is_enabled+0x14>)
 23fc460:	6800      	ldr	r0, [r0, #0]
 23fc462:	4b04      	ldr	r3, [pc, #16]	; (23fc474 <hal_usart_is_enabled+0x18>)
 23fc464:	4403      	add	r3, r0
 23fc466:	681b      	ldr	r3, [r3, #0]
 23fc468:	6a1b      	ldr	r3, [r3, #32]
 23fc46a:	9302      	str	r3, [sp, #8]
 23fc46c:	bd09      	pop	{r0, r3, pc}
 23fc46e:	0000      	.short	0x0000
 23fc470:	1007acb0 	.word	0x1007acb0
 23fc474:	00000024 	.word	0x00000024

023fc478 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc478:	b509      	push	{r0, r3, lr}
 23fc47a:	4804      	ldr	r0, [pc, #16]	; (23fc48c <hal_usart_available_data_for_write+0x14>)
 23fc47c:	6800      	ldr	r0, [r0, #0]
 23fc47e:	4b04      	ldr	r3, [pc, #16]	; (23fc490 <hal_usart_available_data_for_write+0x18>)
 23fc480:	4403      	add	r3, r0
 23fc482:	681b      	ldr	r3, [r3, #0]
 23fc484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc486:	9302      	str	r3, [sp, #8]
 23fc488:	bd09      	pop	{r0, r3, pc}
 23fc48a:	0000      	.short	0x0000
 23fc48c:	1007acb0 	.word	0x1007acb0
 23fc490:	00000024 	.word	0x00000024

023fc494 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fc494:	b509      	push	{r0, r3, lr}
 23fc496:	4804      	ldr	r0, [pc, #16]	; (23fc4a8 <hal_usart_begin_config+0x14>)
 23fc498:	6800      	ldr	r0, [r0, #0]
 23fc49a:	4b04      	ldr	r3, [pc, #16]	; (23fc4ac <hal_usart_begin_config+0x18>)
 23fc49c:	4403      	add	r3, r0
 23fc49e:	681b      	ldr	r3, [r3, #0]
 23fc4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc4a2:	9302      	str	r3, [sp, #8]
 23fc4a4:	bd09      	pop	{r0, r3, pc}
 23fc4a6:	0000      	.short	0x0000
 23fc4a8:	1007acb0 	.word	0x1007acb0
 23fc4ac:	00000024 	.word	0x00000024

023fc4b0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fc4b0:	b509      	push	{r0, r3, lr}
 23fc4b2:	4804      	ldr	r0, [pc, #16]	; (23fc4c4 <hal_usart_init_ex+0x14>)
 23fc4b4:	6800      	ldr	r0, [r0, #0]
 23fc4b6:	4b04      	ldr	r3, [pc, #16]	; (23fc4c8 <hal_usart_init_ex+0x18>)
 23fc4b8:	4403      	add	r3, r0
 23fc4ba:	681b      	ldr	r3, [r3, #0]
 23fc4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc4be:	9302      	str	r3, [sp, #8]
 23fc4c0:	bd09      	pop	{r0, r3, pc}
 23fc4c2:	0000      	.short	0x0000
 23fc4c4:	1007acb0 	.word	0x1007acb0
 23fc4c8:	00000024 	.word	0x00000024

023fc4cc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fc4cc:	b509      	push	{r0, r3, lr}
 23fc4ce:	4804      	ldr	r0, [pc, #16]	; (23fc4e0 <HAL_USB_USART_Init+0x14>)
 23fc4d0:	6800      	ldr	r0, [r0, #0]
 23fc4d2:	4b04      	ldr	r3, [pc, #16]	; (23fc4e4 <HAL_USB_USART_Init+0x18>)
 23fc4d4:	4403      	add	r3, r0
 23fc4d6:	681b      	ldr	r3, [r3, #0]
 23fc4d8:	681b      	ldr	r3, [r3, #0]
 23fc4da:	9302      	str	r3, [sp, #8]
 23fc4dc:	bd09      	pop	{r0, r3, pc}
 23fc4de:	0000      	.short	0x0000
 23fc4e0:	1007acb0 	.word	0x1007acb0
 23fc4e4:	00000034 	.word	0x00000034

023fc4e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fc4e8:	b509      	push	{r0, r3, lr}
 23fc4ea:	4804      	ldr	r0, [pc, #16]	; (23fc4fc <HAL_USB_USART_Begin+0x14>)
 23fc4ec:	6800      	ldr	r0, [r0, #0]
 23fc4ee:	4b04      	ldr	r3, [pc, #16]	; (23fc500 <HAL_USB_USART_Begin+0x18>)
 23fc4f0:	4403      	add	r3, r0
 23fc4f2:	681b      	ldr	r3, [r3, #0]
 23fc4f4:	685b      	ldr	r3, [r3, #4]
 23fc4f6:	9302      	str	r3, [sp, #8]
 23fc4f8:	bd09      	pop	{r0, r3, pc}
 23fc4fa:	0000      	.short	0x0000
 23fc4fc:	1007acb0 	.word	0x1007acb0
 23fc500:	00000034 	.word	0x00000034

023fc504 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fc504:	b509      	push	{r0, r3, lr}
 23fc506:	4804      	ldr	r0, [pc, #16]	; (23fc518 <HAL_USB_USART_End+0x14>)
 23fc508:	6800      	ldr	r0, [r0, #0]
 23fc50a:	4b04      	ldr	r3, [pc, #16]	; (23fc51c <HAL_USB_USART_End+0x18>)
 23fc50c:	4403      	add	r3, r0
 23fc50e:	681b      	ldr	r3, [r3, #0]
 23fc510:	689b      	ldr	r3, [r3, #8]
 23fc512:	9302      	str	r3, [sp, #8]
 23fc514:	bd09      	pop	{r0, r3, pc}
 23fc516:	0000      	.short	0x0000
 23fc518:	1007acb0 	.word	0x1007acb0
 23fc51c:	00000034 	.word	0x00000034

023fc520 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fc520:	b509      	push	{r0, r3, lr}
 23fc522:	4804      	ldr	r0, [pc, #16]	; (23fc534 <HAL_USB_USART_Available_Data+0x14>)
 23fc524:	6800      	ldr	r0, [r0, #0]
 23fc526:	4b04      	ldr	r3, [pc, #16]	; (23fc538 <HAL_USB_USART_Available_Data+0x18>)
 23fc528:	4403      	add	r3, r0
 23fc52a:	681b      	ldr	r3, [r3, #0]
 23fc52c:	691b      	ldr	r3, [r3, #16]
 23fc52e:	9302      	str	r3, [sp, #8]
 23fc530:	bd09      	pop	{r0, r3, pc}
 23fc532:	0000      	.short	0x0000
 23fc534:	1007acb0 	.word	0x1007acb0
 23fc538:	00000034 	.word	0x00000034

023fc53c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fc53c:	b509      	push	{r0, r3, lr}
 23fc53e:	4804      	ldr	r0, [pc, #16]	; (23fc550 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fc540:	6800      	ldr	r0, [r0, #0]
 23fc542:	4b04      	ldr	r3, [pc, #16]	; (23fc554 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fc544:	4403      	add	r3, r0
 23fc546:	681b      	ldr	r3, [r3, #0]
 23fc548:	695b      	ldr	r3, [r3, #20]
 23fc54a:	9302      	str	r3, [sp, #8]
 23fc54c:	bd09      	pop	{r0, r3, pc}
 23fc54e:	0000      	.short	0x0000
 23fc550:	1007acb0 	.word	0x1007acb0
 23fc554:	00000034 	.word	0x00000034

023fc558 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc558:	b509      	push	{r0, r3, lr}
 23fc55a:	4804      	ldr	r0, [pc, #16]	; (23fc56c <HAL_USB_USART_Receive_Data+0x14>)
 23fc55c:	6800      	ldr	r0, [r0, #0]
 23fc55e:	4b04      	ldr	r3, [pc, #16]	; (23fc570 <HAL_USB_USART_Receive_Data+0x18>)
 23fc560:	4403      	add	r3, r0
 23fc562:	681b      	ldr	r3, [r3, #0]
 23fc564:	699b      	ldr	r3, [r3, #24]
 23fc566:	9302      	str	r3, [sp, #8]
 23fc568:	bd09      	pop	{r0, r3, pc}
 23fc56a:	0000      	.short	0x0000
 23fc56c:	1007acb0 	.word	0x1007acb0
 23fc570:	00000034 	.word	0x00000034

023fc574 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc574:	b509      	push	{r0, r3, lr}
 23fc576:	4804      	ldr	r0, [pc, #16]	; (23fc588 <HAL_USB_USART_Send_Data+0x14>)
 23fc578:	6800      	ldr	r0, [r0, #0]
 23fc57a:	4b04      	ldr	r3, [pc, #16]	; (23fc58c <HAL_USB_USART_Send_Data+0x18>)
 23fc57c:	4403      	add	r3, r0
 23fc57e:	681b      	ldr	r3, [r3, #0]
 23fc580:	69db      	ldr	r3, [r3, #28]
 23fc582:	9302      	str	r3, [sp, #8]
 23fc584:	bd09      	pop	{r0, r3, pc}
 23fc586:	0000      	.short	0x0000
 23fc588:	1007acb0 	.word	0x1007acb0
 23fc58c:	00000034 	.word	0x00000034

023fc590 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fc590:	b509      	push	{r0, r3, lr}
 23fc592:	4804      	ldr	r0, [pc, #16]	; (23fc5a4 <HAL_USB_USART_Flush_Data+0x14>)
 23fc594:	6800      	ldr	r0, [r0, #0]
 23fc596:	4b04      	ldr	r3, [pc, #16]	; (23fc5a8 <HAL_USB_USART_Flush_Data+0x18>)
 23fc598:	4403      	add	r3, r0
 23fc59a:	681b      	ldr	r3, [r3, #0]
 23fc59c:	6a1b      	ldr	r3, [r3, #32]
 23fc59e:	9302      	str	r3, [sp, #8]
 23fc5a0:	bd09      	pop	{r0, r3, pc}
 23fc5a2:	0000      	.short	0x0000
 23fc5a4:	1007acb0 	.word	0x1007acb0
 23fc5a8:	00000034 	.word	0x00000034

023fc5ac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fc5ac:	b509      	push	{r0, r3, lr}
 23fc5ae:	4804      	ldr	r0, [pc, #16]	; (23fc5c0 <panic_+0x14>)
 23fc5b0:	6800      	ldr	r0, [r0, #0]
 23fc5b2:	4b04      	ldr	r3, [pc, #16]	; (23fc5c4 <panic_+0x18>)
 23fc5b4:	4403      	add	r3, r0
 23fc5b6:	681b      	ldr	r3, [r3, #0]
 23fc5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc5ba:	9302      	str	r3, [sp, #8]
 23fc5bc:	bd09      	pop	{r0, r3, pc}
 23fc5be:	0000      	.short	0x0000
 23fc5c0:	1007acb0 	.word	0x1007acb0
 23fc5c4:	00000048 	.word	0x00000048

023fc5c8 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fc5c8:	b509      	push	{r0, r3, lr}
 23fc5ca:	4804      	ldr	r0, [pc, #16]	; (23fc5dc <log_message_v+0x14>)
 23fc5cc:	6800      	ldr	r0, [r0, #0]
 23fc5ce:	4b04      	ldr	r3, [pc, #16]	; (23fc5e0 <log_message_v+0x18>)
 23fc5d0:	4403      	add	r3, r0
 23fc5d2:	681b      	ldr	r3, [r3, #0]
 23fc5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc5d6:	9302      	str	r3, [sp, #8]
 23fc5d8:	bd09      	pop	{r0, r3, pc}
 23fc5da:	0000      	.short	0x0000
 23fc5dc:	1007acb0 	.word	0x1007acb0
 23fc5e0:	00000048 	.word	0x00000048

023fc5e4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fc5e4:	b509      	push	{r0, r3, lr}
 23fc5e6:	4804      	ldr	r0, [pc, #16]	; (23fc5f8 <log_level_name+0x14>)
 23fc5e8:	6800      	ldr	r0, [r0, #0]
 23fc5ea:	4b04      	ldr	r3, [pc, #16]	; (23fc5fc <log_level_name+0x18>)
 23fc5ec:	4403      	add	r3, r0
 23fc5ee:	681b      	ldr	r3, [r3, #0]
 23fc5f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fc5f2:	9302      	str	r3, [sp, #8]
 23fc5f4:	bd09      	pop	{r0, r3, pc}
 23fc5f6:	0000      	.short	0x0000
 23fc5f8:	1007acb0 	.word	0x1007acb0
 23fc5fc:	00000048 	.word	0x00000048

023fc600 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fc600:	b509      	push	{r0, r3, lr}
 23fc602:	4804      	ldr	r0, [pc, #16]	; (23fc614 <log_set_callbacks+0x14>)
 23fc604:	6800      	ldr	r0, [r0, #0]
 23fc606:	4b04      	ldr	r3, [pc, #16]	; (23fc618 <log_set_callbacks+0x18>)
 23fc608:	4403      	add	r3, r0
 23fc60a:	681b      	ldr	r3, [r3, #0]
 23fc60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc60e:	9302      	str	r3, [sp, #8]
 23fc610:	bd09      	pop	{r0, r3, pc}
 23fc612:	0000      	.short	0x0000
 23fc614:	1007acb0 	.word	0x1007acb0
 23fc618:	00000048 	.word	0x00000048

023fc61c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc61c:	b509      	push	{r0, r3, lr}
 23fc61e:	4804      	ldr	r0, [pc, #16]	; (23fc630 <set_system_mode+0x14>)
 23fc620:	6800      	ldr	r0, [r0, #0]
 23fc622:	4b04      	ldr	r3, [pc, #16]	; (23fc634 <set_system_mode+0x18>)
 23fc624:	4403      	add	r3, r0
 23fc626:	681b      	ldr	r3, [r3, #0]
 23fc628:	685b      	ldr	r3, [r3, #4]
 23fc62a:	9302      	str	r3, [sp, #8]
 23fc62c:	bd09      	pop	{r0, r3, pc}
 23fc62e:	0000      	.short	0x0000
 23fc630:	1007acb0 	.word	0x1007acb0
 23fc634:	00000008 	.word	0x00000008

023fc638 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fc638:	b509      	push	{r0, r3, lr}
 23fc63a:	4804      	ldr	r0, [pc, #16]	; (23fc64c <system_delay_ms+0x14>)
 23fc63c:	6800      	ldr	r0, [r0, #0]
 23fc63e:	4b04      	ldr	r3, [pc, #16]	; (23fc650 <system_delay_ms+0x18>)
 23fc640:	4403      	add	r3, r0
 23fc642:	681b      	ldr	r3, [r3, #0]
 23fc644:	695b      	ldr	r3, [r3, #20]
 23fc646:	9302      	str	r3, [sp, #8]
 23fc648:	bd09      	pop	{r0, r3, pc}
 23fc64a:	0000      	.short	0x0000
 23fc64c:	1007acb0 	.word	0x1007acb0
 23fc650:	00000008 	.word	0x00000008

023fc654 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fc654:	b509      	push	{r0, r3, lr}
 23fc656:	4804      	ldr	r0, [pc, #16]	; (23fc668 <system_thread_set_state+0x14>)
 23fc658:	6800      	ldr	r0, [r0, #0]
 23fc65a:	4b04      	ldr	r3, [pc, #16]	; (23fc66c <system_thread_set_state+0x18>)
 23fc65c:	4403      	add	r3, r0
 23fc65e:	681b      	ldr	r3, [r3, #0]
 23fc660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc662:	9302      	str	r3, [sp, #8]
 23fc664:	bd09      	pop	{r0, r3, pc}
 23fc666:	0000      	.short	0x0000
 23fc668:	1007acb0 	.word	0x1007acb0
 23fc66c:	00000008 	.word	0x00000008

023fc670 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc670:	b509      	push	{r0, r3, lr}
 23fc672:	4804      	ldr	r0, [pc, #16]	; (23fc684 <system_ctrl_set_app_request_handler+0x14>)
 23fc674:	6800      	ldr	r0, [r0, #0]
 23fc676:	4b04      	ldr	r3, [pc, #16]	; (23fc688 <system_ctrl_set_app_request_handler+0x18>)
 23fc678:	4403      	add	r3, r0
 23fc67a:	681b      	ldr	r3, [r3, #0]
 23fc67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc680:	9302      	str	r3, [sp, #8]
 23fc682:	bd09      	pop	{r0, r3, pc}
 23fc684:	1007acb0 	.word	0x1007acb0
 23fc688:	00000008 	.word	0x00000008

023fc68c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc68c:	b509      	push	{r0, r3, lr}
 23fc68e:	4804      	ldr	r0, [pc, #16]	; (23fc6a0 <system_ctrl_set_result+0x14>)
 23fc690:	6800      	ldr	r0, [r0, #0]
 23fc692:	4b04      	ldr	r3, [pc, #16]	; (23fc6a4 <system_ctrl_set_result+0x18>)
 23fc694:	4403      	add	r3, r0
 23fc696:	681b      	ldr	r3, [r3, #0]
 23fc698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc69c:	9302      	str	r3, [sp, #8]
 23fc69e:	bd09      	pop	{r0, r3, pc}
 23fc6a0:	1007acb0 	.word	0x1007acb0
 23fc6a4:	00000008 	.word	0x00000008

023fc6a8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fc6a8:	b509      	push	{r0, r3, lr}
 23fc6aa:	4804      	ldr	r0, [pc, #16]	; (23fc6bc <spark_process+0x14>)
 23fc6ac:	6800      	ldr	r0, [r0, #0]
 23fc6ae:	4b04      	ldr	r3, [pc, #16]	; (23fc6c0 <spark_process+0x18>)
 23fc6b0:	4403      	add	r3, r0
 23fc6b2:	681b      	ldr	r3, [r3, #0]
 23fc6b4:	689b      	ldr	r3, [r3, #8]
 23fc6b6:	9302      	str	r3, [sp, #8]
 23fc6b8:	bd09      	pop	{r0, r3, pc}
 23fc6ba:	0000      	.short	0x0000
 23fc6bc:	1007acb0 	.word	0x1007acb0
 23fc6c0:	0000002c 	.word	0x0000002c

023fc6c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fc6c4:	b509      	push	{r0, r3, lr}
 23fc6c6:	4804      	ldr	r0, [pc, #16]	; (23fc6d8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fc6c8:	6800      	ldr	r0, [r0, #0]
 23fc6ca:	4b04      	ldr	r3, [pc, #16]	; (23fc6dc <spark_set_random_seed_from_cloud_handler+0x18>)
 23fc6cc:	4403      	add	r3, r0
 23fc6ce:	681b      	ldr	r3, [r3, #0]
 23fc6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc6d2:	9302      	str	r3, [sp, #8]
 23fc6d4:	bd09      	pop	{r0, r3, pc}
 23fc6d6:	0000      	.short	0x0000
 23fc6d8:	1007acb0 	.word	0x1007acb0
 23fc6dc:	0000002c 	.word	0x0000002c

023fc6e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc6e0:	b509      	push	{r0, r3, lr}
 23fc6e2:	4804      	ldr	r0, [pc, #16]	; (23fc6f4 <network_connect+0x14>)
 23fc6e4:	6800      	ldr	r0, [r0, #0]
 23fc6e6:	4b04      	ldr	r3, [pc, #16]	; (23fc6f8 <network_connect+0x18>)
 23fc6e8:	4403      	add	r3, r0
 23fc6ea:	681b      	ldr	r3, [r3, #0]
 23fc6ec:	685b      	ldr	r3, [r3, #4]
 23fc6ee:	9302      	str	r3, [sp, #8]
 23fc6f0:	bd09      	pop	{r0, r3, pc}
 23fc6f2:	0000      	.short	0x0000
 23fc6f4:	1007acb0 	.word	0x1007acb0
 23fc6f8:	00000028 	.word	0x00000028

023fc6fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fc6fc:	b509      	push	{r0, r3, lr}
 23fc6fe:	4804      	ldr	r0, [pc, #16]	; (23fc710 <network_connecting+0x14>)
 23fc700:	6800      	ldr	r0, [r0, #0]
 23fc702:	4b04      	ldr	r3, [pc, #16]	; (23fc714 <network_connecting+0x18>)
 23fc704:	4403      	add	r3, r0
 23fc706:	681b      	ldr	r3, [r3, #0]
 23fc708:	689b      	ldr	r3, [r3, #8]
 23fc70a:	9302      	str	r3, [sp, #8]
 23fc70c:	bd09      	pop	{r0, r3, pc}
 23fc70e:	0000      	.short	0x0000
 23fc710:	1007acb0 	.word	0x1007acb0
 23fc714:	00000028 	.word	0x00000028

023fc718 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fc718:	b509      	push	{r0, r3, lr}
 23fc71a:	4804      	ldr	r0, [pc, #16]	; (23fc72c <network_disconnect+0x14>)
 23fc71c:	6800      	ldr	r0, [r0, #0]
 23fc71e:	4b04      	ldr	r3, [pc, #16]	; (23fc730 <network_disconnect+0x18>)
 23fc720:	4403      	add	r3, r0
 23fc722:	681b      	ldr	r3, [r3, #0]
 23fc724:	68db      	ldr	r3, [r3, #12]
 23fc726:	9302      	str	r3, [sp, #8]
 23fc728:	bd09      	pop	{r0, r3, pc}
 23fc72a:	0000      	.short	0x0000
 23fc72c:	1007acb0 	.word	0x1007acb0
 23fc730:	00000028 	.word	0x00000028

023fc734 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fc734:	b509      	push	{r0, r3, lr}
 23fc736:	4804      	ldr	r0, [pc, #16]	; (23fc748 <network_ready+0x14>)
 23fc738:	6800      	ldr	r0, [r0, #0]
 23fc73a:	4b04      	ldr	r3, [pc, #16]	; (23fc74c <network_ready+0x18>)
 23fc73c:	4403      	add	r3, r0
 23fc73e:	681b      	ldr	r3, [r3, #0]
 23fc740:	691b      	ldr	r3, [r3, #16]
 23fc742:	9302      	str	r3, [sp, #8]
 23fc744:	bd09      	pop	{r0, r3, pc}
 23fc746:	0000      	.short	0x0000
 23fc748:	1007acb0 	.word	0x1007acb0
 23fc74c:	00000028 	.word	0x00000028

023fc750 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc750:	b509      	push	{r0, r3, lr}
 23fc752:	4804      	ldr	r0, [pc, #16]	; (23fc764 <network_on+0x14>)
 23fc754:	6800      	ldr	r0, [r0, #0]
 23fc756:	4b04      	ldr	r3, [pc, #16]	; (23fc768 <network_on+0x18>)
 23fc758:	4403      	add	r3, r0
 23fc75a:	681b      	ldr	r3, [r3, #0]
 23fc75c:	695b      	ldr	r3, [r3, #20]
 23fc75e:	9302      	str	r3, [sp, #8]
 23fc760:	bd09      	pop	{r0, r3, pc}
 23fc762:	0000      	.short	0x0000
 23fc764:	1007acb0 	.word	0x1007acb0
 23fc768:	00000028 	.word	0x00000028

023fc76c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc76c:	b509      	push	{r0, r3, lr}
 23fc76e:	4804      	ldr	r0, [pc, #16]	; (23fc780 <network_off+0x14>)
 23fc770:	6800      	ldr	r0, [r0, #0]
 23fc772:	4b04      	ldr	r3, [pc, #16]	; (23fc784 <network_off+0x18>)
 23fc774:	4403      	add	r3, r0
 23fc776:	681b      	ldr	r3, [r3, #0]
 23fc778:	699b      	ldr	r3, [r3, #24]
 23fc77a:	9302      	str	r3, [sp, #8]
 23fc77c:	bd09      	pop	{r0, r3, pc}
 23fc77e:	0000      	.short	0x0000
 23fc780:	1007acb0 	.word	0x1007acb0
 23fc784:	00000028 	.word	0x00000028

023fc788 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fc788:	b509      	push	{r0, r3, lr}
 23fc78a:	4804      	ldr	r0, [pc, #16]	; (23fc79c <network_listen+0x14>)
 23fc78c:	6800      	ldr	r0, [r0, #0]
 23fc78e:	4b04      	ldr	r3, [pc, #16]	; (23fc7a0 <network_listen+0x18>)
 23fc790:	4403      	add	r3, r0
 23fc792:	681b      	ldr	r3, [r3, #0]
 23fc794:	69db      	ldr	r3, [r3, #28]
 23fc796:	9302      	str	r3, [sp, #8]
 23fc798:	bd09      	pop	{r0, r3, pc}
 23fc79a:	0000      	.short	0x0000
 23fc79c:	1007acb0 	.word	0x1007acb0
 23fc7a0:	00000028 	.word	0x00000028

023fc7a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc7a4:	b509      	push	{r0, r3, lr}
 23fc7a6:	4804      	ldr	r0, [pc, #16]	; (23fc7b8 <network_listening+0x14>)
 23fc7a8:	6800      	ldr	r0, [r0, #0]
 23fc7aa:	4b04      	ldr	r3, [pc, #16]	; (23fc7bc <network_listening+0x18>)
 23fc7ac:	4403      	add	r3, r0
 23fc7ae:	681b      	ldr	r3, [r3, #0]
 23fc7b0:	6a1b      	ldr	r3, [r3, #32]
 23fc7b2:	9302      	str	r3, [sp, #8]
 23fc7b4:	bd09      	pop	{r0, r3, pc}
 23fc7b6:	0000      	.short	0x0000
 23fc7b8:	1007acb0 	.word	0x1007acb0
 23fc7bc:	00000028 	.word	0x00000028

023fc7c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc7c0:	b509      	push	{r0, r3, lr}
 23fc7c2:	4804      	ldr	r0, [pc, #16]	; (23fc7d4 <network_set_listen_timeout+0x14>)
 23fc7c4:	6800      	ldr	r0, [r0, #0]
 23fc7c6:	4b04      	ldr	r3, [pc, #16]	; (23fc7d8 <network_set_listen_timeout+0x18>)
 23fc7c8:	4403      	add	r3, r0
 23fc7ca:	681b      	ldr	r3, [r3, #0]
 23fc7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc7ce:	9302      	str	r3, [sp, #8]
 23fc7d0:	bd09      	pop	{r0, r3, pc}
 23fc7d2:	0000      	.short	0x0000
 23fc7d4:	1007acb0 	.word	0x1007acb0
 23fc7d8:	00000028 	.word	0x00000028

023fc7dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc7dc:	b509      	push	{r0, r3, lr}
 23fc7de:	4804      	ldr	r0, [pc, #16]	; (23fc7f0 <network_get_listen_timeout+0x14>)
 23fc7e0:	6800      	ldr	r0, [r0, #0]
 23fc7e2:	4b04      	ldr	r3, [pc, #16]	; (23fc7f4 <network_get_listen_timeout+0x18>)
 23fc7e4:	4403      	add	r3, r0
 23fc7e6:	681b      	ldr	r3, [r3, #0]
 23fc7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc7ea:	9302      	str	r3, [sp, #8]
 23fc7ec:	bd09      	pop	{r0, r3, pc}
 23fc7ee:	0000      	.short	0x0000
 23fc7f0:	1007acb0 	.word	0x1007acb0
 23fc7f4:	00000028 	.word	0x00000028

023fc7f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc7f8:	b509      	push	{r0, r3, lr}
 23fc7fa:	4804      	ldr	r0, [pc, #16]	; (23fc80c <network_is_on+0x14>)
 23fc7fc:	6800      	ldr	r0, [r0, #0]
 23fc7fe:	4b04      	ldr	r3, [pc, #16]	; (23fc810 <network_is_on+0x18>)
 23fc800:	4403      	add	r3, r0
 23fc802:	681b      	ldr	r3, [r3, #0]
 23fc804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc806:	9302      	str	r3, [sp, #8]
 23fc808:	bd09      	pop	{r0, r3, pc}
 23fc80a:	0000      	.short	0x0000
 23fc80c:	1007acb0 	.word	0x1007acb0
 23fc810:	00000028 	.word	0x00000028

023fc814 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc814:	b509      	push	{r0, r3, lr}
 23fc816:	4804      	ldr	r0, [pc, #16]	; (23fc828 <network_is_off+0x14>)
 23fc818:	6800      	ldr	r0, [r0, #0]
 23fc81a:	4b04      	ldr	r3, [pc, #16]	; (23fc82c <network_is_off+0x18>)
 23fc81c:	4403      	add	r3, r0
 23fc81e:	681b      	ldr	r3, [r3, #0]
 23fc820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc822:	9302      	str	r3, [sp, #8]
 23fc824:	bd09      	pop	{r0, r3, pc}
 23fc826:	0000      	.short	0x0000
 23fc828:	1007acb0 	.word	0x1007acb0
 23fc82c:	00000028 	.word	0x00000028

023fc830 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc830:	b509      	push	{r0, r3, lr}
 23fc832:	4804      	ldr	r0, [pc, #16]	; (23fc844 <malloc+0x14>)
 23fc834:	6800      	ldr	r0, [r0, #0]
 23fc836:	4b04      	ldr	r3, [pc, #16]	; (23fc848 <malloc+0x18>)
 23fc838:	4403      	add	r3, r0
 23fc83a:	681b      	ldr	r3, [r3, #0]
 23fc83c:	681b      	ldr	r3, [r3, #0]
 23fc83e:	9302      	str	r3, [sp, #8]
 23fc840:	bd09      	pop	{r0, r3, pc}
 23fc842:	0000      	.short	0x0000
 23fc844:	1007acb0 	.word	0x1007acb0
 23fc848:	00000004 	.word	0x00000004

023fc84c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc84c:	b509      	push	{r0, r3, lr}
 23fc84e:	4804      	ldr	r0, [pc, #16]	; (23fc860 <free+0x14>)
 23fc850:	6800      	ldr	r0, [r0, #0]
 23fc852:	4b04      	ldr	r3, [pc, #16]	; (23fc864 <free+0x18>)
 23fc854:	4403      	add	r3, r0
 23fc856:	681b      	ldr	r3, [r3, #0]
 23fc858:	685b      	ldr	r3, [r3, #4]
 23fc85a:	9302      	str	r3, [sp, #8]
 23fc85c:	bd09      	pop	{r0, r3, pc}
 23fc85e:	0000      	.short	0x0000
 23fc860:	1007acb0 	.word	0x1007acb0
 23fc864:	00000004 	.word	0x00000004

023fc868 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fc868:	b509      	push	{r0, r3, lr}
 23fc86a:	4804      	ldr	r0, [pc, #16]	; (23fc87c <realloc+0x14>)
 23fc86c:	6800      	ldr	r0, [r0, #0]
 23fc86e:	4b04      	ldr	r3, [pc, #16]	; (23fc880 <realloc+0x18>)
 23fc870:	4403      	add	r3, r0
 23fc872:	681b      	ldr	r3, [r3, #0]
 23fc874:	689b      	ldr	r3, [r3, #8]
 23fc876:	9302      	str	r3, [sp, #8]
 23fc878:	bd09      	pop	{r0, r3, pc}
 23fc87a:	0000      	.short	0x0000
 23fc87c:	1007acb0 	.word	0x1007acb0
 23fc880:	00000004 	.word	0x00000004

023fc884 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fc884:	b509      	push	{r0, r3, lr}
 23fc886:	4804      	ldr	r0, [pc, #16]	; (23fc898 <vsnprintf+0x14>)
 23fc888:	6800      	ldr	r0, [r0, #0]
 23fc88a:	4b04      	ldr	r3, [pc, #16]	; (23fc89c <vsnprintf+0x18>)
 23fc88c:	4403      	add	r3, r0
 23fc88e:	681b      	ldr	r3, [r3, #0]
 23fc890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc892:	9302      	str	r3, [sp, #8]
 23fc894:	bd09      	pop	{r0, r3, pc}
 23fc896:	0000      	.short	0x0000
 23fc898:	1007acb0 	.word	0x1007acb0
 23fc89c:	00000004 	.word	0x00000004

023fc8a0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fc8a0:	b509      	push	{r0, r3, lr}
 23fc8a2:	4804      	ldr	r0, [pc, #16]	; (23fc8b4 <__errno+0x14>)
 23fc8a4:	6800      	ldr	r0, [r0, #0]
 23fc8a6:	4b04      	ldr	r3, [pc, #16]	; (23fc8b8 <__errno+0x18>)
 23fc8a8:	4403      	add	r3, r0
 23fc8aa:	681b      	ldr	r3, [r3, #0]
 23fc8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc8ae:	9302      	str	r3, [sp, #8]
 23fc8b0:	bd09      	pop	{r0, r3, pc}
 23fc8b2:	0000      	.short	0x0000
 23fc8b4:	1007acb0 	.word	0x1007acb0
 23fc8b8:	00000004 	.word	0x00000004

023fc8bc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fc8bc:	b509      	push	{r0, r3, lr}
 23fc8be:	4804      	ldr	r0, [pc, #16]	; (23fc8d0 <__assert_func+0x14>)
 23fc8c0:	6800      	ldr	r0, [r0, #0]
 23fc8c2:	4b04      	ldr	r3, [pc, #16]	; (23fc8d4 <__assert_func+0x18>)
 23fc8c4:	4403      	add	r3, r0
 23fc8c6:	681b      	ldr	r3, [r3, #0]
 23fc8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc8ca:	9302      	str	r3, [sp, #8]
 23fc8cc:	bd09      	pop	{r0, r3, pc}
 23fc8ce:	0000      	.short	0x0000
 23fc8d0:	1007acb0 	.word	0x1007acb0
 23fc8d4:	00000004 	.word	0x00000004

023fc8d8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fc8d8:	b509      	push	{r0, r3, lr}
 23fc8da:	4804      	ldr	r0, [pc, #16]	; (23fc8ec <newlib_impure_ptr_callback+0x14>)
 23fc8dc:	6800      	ldr	r0, [r0, #0]
 23fc8de:	4b04      	ldr	r3, [pc, #16]	; (23fc8f0 <newlib_impure_ptr_callback+0x18>)
 23fc8e0:	4403      	add	r3, r0
 23fc8e2:	681b      	ldr	r3, [r3, #0]
 23fc8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc8e6:	9302      	str	r3, [sp, #8]
 23fc8e8:	bd09      	pop	{r0, r3, pc}
 23fc8ea:	0000      	.short	0x0000
 23fc8ec:	1007acb0 	.word	0x1007acb0
 23fc8f0:	00000004 	.word	0x00000004

023fc8f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fc8f4:	2100      	movs	r1, #0
 23fc8f6:	f7ff be9f 	b.w	23fc638 <system_delay_ms>

023fc8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fc8fa:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fc8fc:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fc8fe:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fc900:	b17c      	cbz	r4, 23fc922 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fc902:	6863      	ldr	r3, [r4, #4]
 23fc904:	3b01      	subs	r3, #1
 23fc906:	6063      	str	r3, [r4, #4]
 23fc908:	b95b      	cbnz	r3, 23fc922 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fc90a:	6823      	ldr	r3, [r4, #0]
 23fc90c:	4620      	mov	r0, r4
 23fc90e:	689b      	ldr	r3, [r3, #8]
 23fc910:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc912:	68a3      	ldr	r3, [r4, #8]
 23fc914:	3b01      	subs	r3, #1
 23fc916:	60a3      	str	r3, [r4, #8]
 23fc918:	b91b      	cbnz	r3, 23fc922 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fc91a:	6823      	ldr	r3, [r4, #0]
 23fc91c:	4620      	mov	r0, r4
 23fc91e:	68db      	ldr	r3, [r3, #12]
 23fc920:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fc922:	4628      	mov	r0, r5
 23fc924:	bd38      	pop	{r3, r4, r5, pc}

023fc926 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fc926:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fc928:	6843      	ldr	r3, [r0, #4]
    {
 23fc92a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fc92c:	3b01      	subs	r3, #1
 23fc92e:	6043      	str	r3, [r0, #4]
 23fc930:	b963      	cbnz	r3, 23fc94c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fc932:	6803      	ldr	r3, [r0, #0]
 23fc934:	689b      	ldr	r3, [r3, #8]
 23fc936:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc938:	68a3      	ldr	r3, [r4, #8]
 23fc93a:	3b01      	subs	r3, #1
 23fc93c:	60a3      	str	r3, [r4, #8]
 23fc93e:	b92b      	cbnz	r3, 23fc94c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fc940:	6823      	ldr	r3, [r4, #0]
 23fc942:	4620      	mov	r0, r4
    }
 23fc944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fc948:	68db      	ldr	r3, [r3, #12]
 23fc94a:	4718      	bx	r3
    }
 23fc94c:	bd10      	pop	{r4, pc}

023fc94e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc94e:	b570      	push	{r4, r5, r6, lr}
 23fc950:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc952:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fc956:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fc95a:	42ae      	cmp	r6, r5
 23fc95c:	d004      	beq.n	23fc968 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fc95e:	4628      	mov	r0, r5
 23fc960:	f001 fc91 	bl	23fe286 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fc964:	3510      	adds	r5, #16
 23fc966:	e7f8      	b.n	23fc95a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fc968:	6820      	ldr	r0, [r4, #0]
 23fc96a:	f7ff ff6f 	bl	23fc84c <free>
    AllocatorT::free(data_);
}
 23fc96e:	4620      	mov	r0, r4
 23fc970:	bd70      	pop	{r4, r5, r6, pc}
	...

023fc974 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fc974:	2300      	movs	r3, #0
 23fc976:	4802      	ldr	r0, [pc, #8]	; (23fc980 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fc978:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fc97a:	f7ff bb4d 	b.w	23fc018 <os_mutex_recursive_create>
 23fc97e:	bf00      	nop
 23fc980:	1007ae58 	.word	0x1007ae58

023fc984 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc984:	2200      	movs	r2, #0
 23fc986:	6840      	ldr	r0, [r0, #4]
 23fc988:	4611      	mov	r1, r2
 23fc98a:	f7ff bf0b 	b.w	23fc7a4 <network_listening>

023fc98e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc98e:	2200      	movs	r2, #0
 23fc990:	6840      	ldr	r0, [r0, #4]
 23fc992:	4611      	mov	r1, r2
 23fc994:	f7ff bf22 	b.w	23fc7dc <network_get_listen_timeout>

023fc998 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc998:	2200      	movs	r2, #0
 23fc99a:	6840      	ldr	r0, [r0, #4]
 23fc99c:	f7ff bf10 	b.w	23fc7c0 <network_set_listen_timeout>

023fc9a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc9a0:	2200      	movs	r2, #0
 23fc9a2:	6840      	ldr	r0, [r0, #4]
 23fc9a4:	f081 0101 	eor.w	r1, r1, #1
 23fc9a8:	f7ff beee 	b.w	23fc788 <network_listen>

023fc9ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc9ac:	2300      	movs	r3, #0
 23fc9ae:	6840      	ldr	r0, [r0, #4]
 23fc9b0:	461a      	mov	r2, r3
 23fc9b2:	4619      	mov	r1, r3
 23fc9b4:	f7ff beda 	b.w	23fc76c <network_off>

023fc9b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc9b8:	2300      	movs	r3, #0
 23fc9ba:	6840      	ldr	r0, [r0, #4]
 23fc9bc:	461a      	mov	r2, r3
 23fc9be:	4619      	mov	r1, r3
 23fc9c0:	f7ff bec6 	b.w	23fc750 <network_on>

023fc9c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fc9c4:	2200      	movs	r2, #0
 23fc9c6:	6840      	ldr	r0, [r0, #4]
 23fc9c8:	4611      	mov	r1, r2
 23fc9ca:	f7ff beb3 	b.w	23fc734 <network_ready>

023fc9ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc9ce:	2200      	movs	r2, #0
 23fc9d0:	6840      	ldr	r0, [r0, #4]
 23fc9d2:	4611      	mov	r1, r2
 23fc9d4:	f7ff be92 	b.w	23fc6fc <network_connecting>

023fc9d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc9d8:	2200      	movs	r2, #0
 23fc9da:	2102      	movs	r1, #2
 23fc9dc:	6840      	ldr	r0, [r0, #4]
 23fc9de:	f7ff be9b 	b.w	23fc718 <network_disconnect>

023fc9e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc9e2:	2300      	movs	r3, #0
 23fc9e4:	6840      	ldr	r0, [r0, #4]
 23fc9e6:	461a      	mov	r2, r3
 23fc9e8:	f7ff be7a 	b.w	23fc6e0 <network_connect>

023fc9ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fc9ec:	2203      	movs	r2, #3
 23fc9ee:	4b02      	ldr	r3, [pc, #8]	; (23fc9f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fc9f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fc9f2:	4a02      	ldr	r2, [pc, #8]	; (23fc9fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fc9f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fc9f6:	4770      	bx	lr
 23fc9f8:	1007ae5c 	.word	0x1007ae5c
 23fc9fc:	023ffbf8 	.word	0x023ffbf8

023fca00 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fca00:	4770      	bx	lr

023fca02 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fca02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fca04:	4606      	mov	r6, r0
 23fca06:	4615      	mov	r5, r2
 23fca08:	460c      	mov	r4, r1
 23fca0a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fca0c:	42bc      	cmp	r4, r7
 23fca0e:	d006      	beq.n	23fca1e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fca10:	6833      	ldr	r3, [r6, #0]
 23fca12:	4630      	mov	r0, r6
 23fca14:	689b      	ldr	r3, [r3, #8]
 23fca16:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fca1a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fca1c:	e7f6      	b.n	23fca0c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fca1e:	4628      	mov	r0, r5
 23fca20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fca22 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fca22:	2200      	movs	r2, #0
 23fca24:	7c00      	ldrb	r0, [r0, #16]
 23fca26:	f7ff bbbb 	b.w	23fc1a0 <hal_i2c_write>

023fca2a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fca2a:	2100      	movs	r1, #0
 23fca2c:	7c00      	ldrb	r0, [r0, #16]
 23fca2e:	f7ff bbc5 	b.w	23fc1bc <hal_i2c_available>

023fca32 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fca32:	2100      	movs	r1, #0
 23fca34:	7c00      	ldrb	r0, [r0, #16]
 23fca36:	f7ff bbcf 	b.w	23fc1d8 <hal_i2c_read>

023fca3a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fca3a:	2100      	movs	r1, #0
 23fca3c:	7c00      	ldrb	r0, [r0, #16]
 23fca3e:	f7ff bbd9 	b.w	23fc1f4 <hal_i2c_peek>

023fca42 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fca42:	2100      	movs	r1, #0
 23fca44:	7c00      	ldrb	r0, [r0, #16]
 23fca46:	f7ff bbe3 	b.w	23fc210 <hal_i2c_flush>

023fca4a <_ZN7TwoWireD0Ev>:
 23fca4a:	b510      	push	{r4, lr}
 23fca4c:	4604      	mov	r4, r0
 23fca4e:	2114      	movs	r1, #20
 23fca50:	f7fd fd15 	bl	23fa47e <_ZdlPvj>
 23fca54:	4620      	mov	r0, r4
 23fca56:	bd10      	pop	{r4, pc}

023fca58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fca58:	b538      	push	{r3, r4, r5, lr}
 23fca5a:	4604      	mov	r4, r0
 23fca5c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fca5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fca62:	2200      	movs	r2, #0
 23fca64:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fca68:	4b09      	ldr	r3, [pc, #36]	; (23fca90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fca6a:	4608      	mov	r0, r1
  _i2c = i2c;
 23fca6c:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fca6e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fca70:	4629      	mov	r1, r5
 23fca72:	f7ff fbe9 	bl	23fc248 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fca76:	30bf      	adds	r0, #191	; 0xbf
 23fca78:	d108      	bne.n	23fca8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fca7a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fca7c:	07db      	lsls	r3, r3, #31
 23fca7e:	d505      	bpl.n	23fca8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fca80:	6868      	ldr	r0, [r5, #4]
 23fca82:	f7ff fee3 	bl	23fc84c <free>
    free(conf.tx_buffer);
 23fca86:	68e8      	ldr	r0, [r5, #12]
 23fca88:	f7ff fee0 	bl	23fc84c <free>
}
 23fca8c:	4620      	mov	r0, r4
 23fca8e:	bd38      	pop	{r3, r4, r5, pc}
 23fca90:	023ffc34 	.word	0x023ffc34

023fca94 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fca94:	2200      	movs	r2, #0
 23fca96:	7c00      	ldrb	r0, [r0, #16]
 23fca98:	f7ff bb4a 	b.w	23fc130 <hal_i2c_set_speed>

023fca9c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fca9c:	2300      	movs	r3, #0
 23fca9e:	7c00      	ldrb	r0, [r0, #16]
 23fcaa0:	461a      	mov	r2, r3
 23fcaa2:	4619      	mov	r1, r3
 23fcaa4:	f7ff bb52 	b.w	23fc14c <hal_i2c_begin>

023fcaa8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fcaa8:	2200      	movs	r2, #0
 23fcaaa:	7c00      	ldrb	r0, [r0, #16]
 23fcaac:	f7ff bb5c 	b.w	23fc168 <hal_i2c_begin_transmission>

023fcab0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fcab0:	2200      	movs	r2, #0
 23fcab2:	7c00      	ldrb	r0, [r0, #16]
 23fcab4:	f7ff bb66 	b.w	23fc184 <hal_i2c_end_transmission>

023fcab8 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fcab8:	2101      	movs	r1, #1
 23fcaba:	f7ff bff9 	b.w	23fcab0 <_ZN7TwoWire15endTransmissionEh>

023fcabe <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fcabe:	4770      	bx	lr

023fcac0 <_ZN9IPAddressD0Ev>:
 23fcac0:	b510      	push	{r4, lr}
 23fcac2:	4604      	mov	r4, r0
 23fcac4:	2118      	movs	r1, #24
 23fcac6:	f7fd fcda 	bl	23fa47e <_ZdlPvj>
 23fcaca:	4620      	mov	r0, r4
 23fcacc:	bd10      	pop	{r4, pc}

023fcace <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fcace:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fcad0:	7d03      	ldrb	r3, [r0, #20]
{
 23fcad2:	460e      	mov	r6, r1
	if (address.v==6) {
 23fcad4:	2b06      	cmp	r3, #6
 23fcad6:	f04f 0400 	mov.w	r4, #0
{
 23fcada:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fcadc:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fcae0:	d012      	beq.n	23fcb08 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fcae2:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fcae6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fcaea:	220a      	movs	r2, #10
 23fcaec:	4630      	mov	r0, r6
 23fcaee:	f001 fae6 	bl	23fe0be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fcaf2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fcaf4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fcaf6:	d019      	beq.n	23fcb2c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fcaf8:	2c00      	cmp	r4, #0
 23fcafa:	d0f4      	beq.n	23fcae6 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fcafc:	212e      	movs	r1, #46	; 0x2e
 23fcafe:	4630      	mov	r0, r6
 23fcb00:	f001 fac4 	bl	23fe08c <_ZN5Print5printEc>
 23fcb04:	4404      	add	r4, r0
 23fcb06:	e7ee      	b.n	23fcae6 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fcb08:	232f      	movs	r3, #47	; 0x2f
 23fcb0a:	466a      	mov	r2, sp
 23fcb0c:	4639      	mov	r1, r7
 23fcb0e:	200a      	movs	r0, #10
		buf[0] = 0;
 23fcb10:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fcb14:	f7ff fba6 	bl	23fc264 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fcb18:	4668      	mov	r0, sp
 23fcb1a:	f7fd fc87 	bl	23fa42c <strlen>
 23fcb1e:	6833      	ldr	r3, [r6, #0]
 23fcb20:	4602      	mov	r2, r0
 23fcb22:	4669      	mov	r1, sp
 23fcb24:	4630      	mov	r0, r6
 23fcb26:	68db      	ldr	r3, [r3, #12]
 23fcb28:	4798      	blx	r3
 23fcb2a:	4604      	mov	r4, r0
    }
    return n;
}
 23fcb2c:	4620      	mov	r0, r4
 23fcb2e:	b00d      	add	sp, #52	; 0x34
 23fcb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fcb34 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fcb34:	b510      	push	{r4, lr}
 23fcb36:	4604      	mov	r4, r0
 23fcb38:	4b04      	ldr	r3, [pc, #16]	; (23fcb4c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fcb3a:	2211      	movs	r2, #17
 23fcb3c:	2100      	movs	r1, #0
 23fcb3e:	f840 3b04 	str.w	r3, [r0], #4
 23fcb42:	f001 ffb8 	bl	23feab6 <memset>
}
 23fcb46:	4620      	mov	r0, r4
 23fcb48:	bd10      	pop	{r4, pc}
 23fcb4a:	bf00      	nop
 23fcb4c:	023ffc5c 	.word	0x023ffc5c

023fcb50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fcb50:	4603      	mov	r3, r0
 23fcb52:	4a07      	ldr	r2, [pc, #28]	; (23fcb70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fcb54:	b510      	push	{r4, lr}
 23fcb56:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fcb5a:	f101 0210 	add.w	r2, r1, #16
 23fcb5e:	f851 4b04 	ldr.w	r4, [r1], #4
 23fcb62:	4291      	cmp	r1, r2
 23fcb64:	f843 4b04 	str.w	r4, [r3], #4
 23fcb68:	d1f9      	bne.n	23fcb5e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fcb6a:	780a      	ldrb	r2, [r1, #0]
 23fcb6c:	701a      	strb	r2, [r3, #0]
}
 23fcb6e:	bd10      	pop	{r4, pc}
 23fcb70:	023ffc5c 	.word	0x023ffc5c

023fcb74 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fcb74:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fcb76:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fcb7a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fcb7e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fcb82:	2304      	movs	r3, #4
 23fcb84:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fcb88:	6041      	str	r1, [r0, #4]
 23fcb8a:	7503      	strb	r3, [r0, #20]
}
 23fcb8c:	bd10      	pop	{r4, pc}
	...

023fcb90 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fcb90:	b507      	push	{r0, r1, r2, lr}
 23fcb92:	4b06      	ldr	r3, [pc, #24]	; (23fcbac <_ZN9IPAddressC1EPKh+0x1c>)
 23fcb94:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fcb96:	78cb      	ldrb	r3, [r1, #3]
 23fcb98:	9300      	str	r3, [sp, #0]
 23fcb9a:	788b      	ldrb	r3, [r1, #2]
 23fcb9c:	784a      	ldrb	r2, [r1, #1]
 23fcb9e:	7809      	ldrb	r1, [r1, #0]
 23fcba0:	f7ff ffe8 	bl	23fcb74 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fcba4:	b003      	add	sp, #12
 23fcba6:	f85d fb04 	ldr.w	pc, [sp], #4
 23fcbaa:	bf00      	nop
 23fcbac:	023ffc5c 	.word	0x023ffc5c

023fcbb0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fcbb0:	2201      	movs	r2, #1
 23fcbb2:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fcbb6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fcbba:	4618      	mov	r0, r3
 23fcbbc:	2901      	cmp	r1, #1
 23fcbbe:	d108      	bne.n	23fcbd2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fcbc0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fcbc4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fcbc8:	3a01      	subs	r2, #1
 23fcbca:	f103 0310 	add.w	r3, r3, #16
 23fcbce:	d1f2      	bne.n	23fcbb6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fcbd0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fcbd2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fcbd4:	bf04      	itt	eq
 23fcbd6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fcbda:	1852      	addeq	r2, r2, r1
 23fcbdc:	e7f4      	b.n	23fcbc8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fcbde <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fcbde:	b40e      	push	{r1, r2, r3}
 23fcbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcbe2:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcbe4:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fcbe6:	af00      	add	r7, sp, #0
 23fcbe8:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fcbec:	f855 2b04 	ldr.w	r2, [r5], #4
 23fcbf0:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcbf2:	462b      	mov	r3, r5
 23fcbf4:	1878      	adds	r0, r7, r1
 23fcbf6:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fcbf8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcbfa:	f7ff fe43 	bl	23fc884 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fcbfe:	280f      	cmp	r0, #15
 23fcc00:	687a      	ldr	r2, [r7, #4]
 23fcc02:	d91a      	bls.n	23fcc3a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fcc04:	f100 0308 	add.w	r3, r0, #8
 23fcc08:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fcc0c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fcc0e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcc12:	1c41      	adds	r1, r0, #1
 23fcc14:	462b      	mov	r3, r5
 23fcc16:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fcc18:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcc1a:	f7ff fe33 	bl	23fc884 <vsnprintf>
        if (n > 0) {
 23fcc1e:	1e02      	subs	r2, r0, #0
 23fcc20:	dd04      	ble.n	23fcc2c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fcc22:	6823      	ldr	r3, [r4, #0]
 23fcc24:	4669      	mov	r1, sp
 23fcc26:	4620      	mov	r0, r4
 23fcc28:	689b      	ldr	r3, [r3, #8]
 23fcc2a:	4798      	blx	r3
 23fcc2c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fcc2e:	3720      	adds	r7, #32
 23fcc30:	46bd      	mov	sp, r7
 23fcc32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fcc36:	b003      	add	sp, #12
 23fcc38:	4770      	bx	lr
    } else if (n > 0) {
 23fcc3a:	2800      	cmp	r0, #0
 23fcc3c:	d0f7      	beq.n	23fcc2e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fcc3e:	6823      	ldr	r3, [r4, #0]
 23fcc40:	4602      	mov	r2, r0
 23fcc42:	689b      	ldr	r3, [r3, #8]
 23fcc44:	4620      	mov	r0, r4
 23fcc46:	f107 0110 	add.w	r1, r7, #16
 23fcc4a:	4798      	blx	r3
}
 23fcc4c:	e7ef      	b.n	23fcc2e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fcc4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fcc4e:	b538      	push	{r3, r4, r5, lr}
 23fcc50:	680b      	ldr	r3, [r1, #0]
 23fcc52:	4604      	mov	r4, r0
 23fcc54:	6003      	str	r3, [r0, #0]
 23fcc56:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fcc58:	6843      	ldr	r3, [r0, #4]
 23fcc5a:	429d      	cmp	r5, r3
 23fcc5c:	d008      	beq.n	23fcc70 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fcc5e:	b115      	cbz	r5, 23fcc66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fcc60:	686b      	ldr	r3, [r5, #4]
 23fcc62:	3301      	adds	r3, #1
 23fcc64:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fcc66:	6860      	ldr	r0, [r4, #4]
 23fcc68:	b108      	cbz	r0, 23fcc6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fcc6a:	f7ff fe5c 	bl	23fc926 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fcc6e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fcc70:	bd38      	pop	{r3, r4, r5, pc}

023fcc72 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fcc72:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fcc74:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fcc76:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fcc7a:	2201      	movs	r2, #1
 23fcc7c:	689b      	ldr	r3, [r3, #8]
 23fcc7e:	f10d 0107 	add.w	r1, sp, #7
 23fcc82:	4798      	blx	r3
}
 23fcc84:	b003      	add	sp, #12
 23fcc86:	f85d fb04 	ldr.w	pc, [sp], #4

023fcc8a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fcc8a:	460b      	mov	r3, r1
 23fcc8c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fcc8e:	2200      	movs	r2, #0
 23fcc90:	b510      	push	{r4, lr}
 23fcc92:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcc94:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fcc98:	6083      	str	r3, [r0, #8]
    if (t) {
 23fcc9a:	b90b      	cbnz	r3, 23fcca0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fcc9c:	4620      	mov	r0, r4
 23fcc9e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fcca0:	f7ff ffd5 	bl	23fcc4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fcca4:	e7fa      	b.n	23fcc9c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fcca6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fcca6:	6883      	ldr	r3, [r0, #8]
 23fcca8:	b1eb      	cbz	r3, 23fcce6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fccaa:	781a      	ldrb	r2, [r3, #0]
 23fccac:	2a03      	cmp	r2, #3
 23fccae:	d81a      	bhi.n	23fcce6 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fccb0:	e8df f002 	tbb	[pc, r2]
 23fccb4:	1b021704 	.word	0x1b021704
 23fccb8:	2005      	movs	r0, #5
 23fccba:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fccbc:	6802      	ldr	r2, [r0, #0]
 23fccbe:	685b      	ldr	r3, [r3, #4]
 23fccc0:	6852      	ldr	r2, [r2, #4]
 23fccc2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fccc4:	282d      	cmp	r0, #45	; 0x2d
 23fccc6:	d012      	beq.n	23fccee <_ZNK5spark9JSONValue4typeEv+0x48>
 23fccc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fcccc:	2b09      	cmp	r3, #9
 23fccce:	d90e      	bls.n	23fccee <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fccd0:	2874      	cmp	r0, #116	; 0x74
 23fccd2:	d00e      	beq.n	23fccf2 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fccd4:	2866      	cmp	r0, #102	; 0x66
 23fccd6:	d00c      	beq.n	23fccf2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fccd8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fccdc:	4258      	negs	r0, r3
 23fccde:	4158      	adcs	r0, r3
 23fcce0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fcce2:	2006      	movs	r0, #6
 23fcce4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fcce6:	2000      	movs	r0, #0
 23fcce8:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fccea:	2004      	movs	r0, #4
 23fccec:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fccee:	2003      	movs	r0, #3
 23fccf0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fccf2:	2002      	movs	r0, #2
}
 23fccf4:	4770      	bx	lr

023fccf6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fccf6:	b510      	push	{r4, lr}
 23fccf8:	4604      	mov	r4, r0
    switch (type()) {
 23fccfa:	f7ff ffd4 	bl	23fcca6 <_ZNK5spark9JSONValue4typeEv>
 23fccfe:	2802      	cmp	r0, #2
 23fcd00:	d00e      	beq.n	23fcd20 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fcd02:	1ec3      	subs	r3, r0, #3
 23fcd04:	b2db      	uxtb	r3, r3
 23fcd06:	2b01      	cmp	r3, #1
 23fcd08:	d814      	bhi.n	23fcd34 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fcd0a:	6822      	ldr	r2, [r4, #0]
 23fcd0c:	68a3      	ldr	r3, [r4, #8]
 23fcd0e:	6850      	ldr	r0, [r2, #4]
 23fcd10:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fcd12:	220a      	movs	r2, #10
}
 23fcd14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fcd18:	2100      	movs	r1, #0
 23fcd1a:	4418      	add	r0, r3
 23fcd1c:	f001 bfcc 	b.w	23fecb8 <strtol>
        const char* const s = d_->json + t_->start;
 23fcd20:	6822      	ldr	r2, [r4, #0]
 23fcd22:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fcd24:	6852      	ldr	r2, [r2, #4]
 23fcd26:	685b      	ldr	r3, [r3, #4]
 23fcd28:	5cd0      	ldrb	r0, [r2, r3]
 23fcd2a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fcd2e:	4258      	negs	r0, r3
 23fcd30:	4158      	adcs	r0, r3
}
 23fcd32:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fcd34:	2000      	movs	r0, #0
 23fcd36:	e7fc      	b.n	23fcd32 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fcd38 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fcd38:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fcd3a:	2300      	movs	r3, #0
 23fcd3c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcd3e:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fcd42:	480e      	ldr	r0, [pc, #56]	; (23fcd7c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fcd44:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fcd48:	b1a9      	cbz	r1, 23fcd76 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fcd4a:	780b      	ldrb	r3, [r1, #0]
 23fcd4c:	2b03      	cmp	r3, #3
 23fcd4e:	d006      	beq.n	23fcd5e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fcd50:	b98b      	cbnz	r3, 23fcd76 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fcd52:	6813      	ldr	r3, [r2, #0]
 23fcd54:	6858      	ldr	r0, [r3, #4]
 23fcd56:	684b      	ldr	r3, [r1, #4]
 23fcd58:	5cc3      	ldrb	r3, [r0, r3]
 23fcd5a:	2b6e      	cmp	r3, #110	; 0x6e
 23fcd5c:	d007      	beq.n	23fcd6e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fcd5e:	6813      	ldr	r3, [r2, #0]
 23fcd60:	684d      	ldr	r5, [r1, #4]
 23fcd62:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fcd64:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fcd66:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fcd68:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fcd6a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fcd6c:	60e3      	str	r3, [r4, #12]
 23fcd6e:	4611      	mov	r1, r2
 23fcd70:	4620      	mov	r0, r4
 23fcd72:	f7ff ff6c 	bl	23fcc4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fcd76:	4620      	mov	r0, r4
 23fcd78:	bd38      	pop	{r3, r4, r5, pc}
 23fcd7a:	bf00      	nop
 23fcd7c:	023ffcce 	.word	0x023ffcce

023fcd80 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fcd80:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fcd82:	2500      	movs	r5, #0
 23fcd84:	460b      	mov	r3, r1
 23fcd86:	4604      	mov	r4, r0
 23fcd88:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcd8a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fcd8e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fcd92:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fcd96:	b14b      	cbz	r3, 23fcdac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fcd98:	781a      	ldrb	r2, [r3, #0]
 23fcd9a:	2a01      	cmp	r2, #1
 23fcd9c:	d106      	bne.n	23fcdac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fcd9e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fcda2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fcda4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fcda6:	6143      	str	r3, [r0, #20]
 23fcda8:	f7ff ff51 	bl	23fcc4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fcdac:	4620      	mov	r0, r4
 23fcdae:	bd38      	pop	{r3, r4, r5, pc}

023fcdb0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fcdb0:	b510      	push	{r4, lr}
    if (!n_) {
 23fcdb2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fcdb4:	4604      	mov	r4, r0
    if (!n_) {
 23fcdb6:	b163      	cbz	r3, 23fcdd2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fcdb8:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fcdba:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fcdbc:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fcdbe:	3010      	adds	r0, #16
 23fcdc0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fcdc2:	6120      	str	r0, [r4, #16]
    --n_;
 23fcdc4:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fcdc6:	b113      	cbz	r3, 23fcdce <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fcdc8:	f7ff fef2 	bl	23fcbb0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fcdcc:	60a0      	str	r0, [r4, #8]
    return true;
 23fcdce:	2001      	movs	r0, #1
 23fcdd0:	e000      	b.n	23fcdd4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fcdd2:	4618      	mov	r0, r3
}
 23fcdd4:	bd10      	pop	{r4, pc}

023fcdd6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fcdd6:	b510      	push	{r4, lr}
    write('}');
 23fcdd8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fcdda:	4604      	mov	r4, r0
    write('}');
 23fcddc:	f7ff ff49 	bl	23fcc72 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fcde0:	2301      	movs	r3, #1
}
 23fcde2:	4620      	mov	r0, r4
    state_ = NEXT;
 23fcde4:	7123      	strb	r3, [r4, #4]
}
 23fcde6:	bd10      	pop	{r4, pc}

023fcde8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fcde8:	b508      	push	{r3, lr}
    switch (state_) {
 23fcdea:	7903      	ldrb	r3, [r0, #4]
 23fcdec:	2b01      	cmp	r3, #1
 23fcdee:	d002      	beq.n	23fcdf6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fcdf0:	2b02      	cmp	r3, #2
 23fcdf2:	d004      	beq.n	23fcdfe <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fcdf4:	bd08      	pop	{r3, pc}
        write(',');
 23fcdf6:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fcdf8:	f7ff ff3b 	bl	23fcc72 <_ZN5spark10JSONWriter5writeEc>
}
 23fcdfc:	e7fa      	b.n	23fcdf4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fcdfe:	213a      	movs	r1, #58	; 0x3a
 23fce00:	e7fa      	b.n	23fcdf8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fce02 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fce02:	b510      	push	{r4, lr}
 23fce04:	4604      	mov	r4, r0
    writeSeparator();
 23fce06:	f7ff ffef 	bl	23fcde8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fce0a:	4620      	mov	r0, r4
 23fce0c:	217b      	movs	r1, #123	; 0x7b
 23fce0e:	f7ff ff30 	bl	23fcc72 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fce12:	2300      	movs	r3, #0
}
 23fce14:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fce16:	7123      	strb	r3, [r4, #4]
}
 23fce18:	bd10      	pop	{r4, pc}
	...

023fce1c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fce1c:	b513      	push	{r0, r1, r4, lr}
 23fce1e:	4604      	mov	r4, r0
 23fce20:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fce22:	f7ff ffe1 	bl	23fcde8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fce26:	6823      	ldr	r3, [r4, #0]
 23fce28:	4620      	mov	r0, r4
 23fce2a:	68db      	ldr	r3, [r3, #12]
 23fce2c:	9a01      	ldr	r2, [sp, #4]
 23fce2e:	4903      	ldr	r1, [pc, #12]	; (23fce3c <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fce30:	4798      	blx	r3
    state_ = NEXT;
 23fce32:	2301      	movs	r3, #1
}
 23fce34:	4620      	mov	r0, r4
    state_ = NEXT;
 23fce36:	7123      	strb	r3, [r4, #4]
}
 23fce38:	b002      	add	sp, #8
 23fce3a:	bd10      	pop	{r4, pc}
 23fce3c:	023ffc68 	.word	0x023ffc68

023fce40 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fce40:	b513      	push	{r0, r1, r4, lr}
 23fce42:	4604      	mov	r4, r0
 23fce44:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fce46:	f7ff ffcf 	bl	23fcde8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fce4a:	6823      	ldr	r3, [r4, #0]
 23fce4c:	4620      	mov	r0, r4
 23fce4e:	68db      	ldr	r3, [r3, #12]
 23fce50:	9a01      	ldr	r2, [sp, #4]
 23fce52:	4903      	ldr	r1, [pc, #12]	; (23fce60 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fce54:	4798      	blx	r3
    state_ = NEXT;
 23fce56:	2301      	movs	r3, #1
}
 23fce58:	4620      	mov	r0, r4
    state_ = NEXT;
 23fce5a:	7123      	strb	r3, [r4, #4]
}
 23fce5c:	b002      	add	sp, #8
 23fce5e:	bd10      	pop	{r4, pc}
 23fce60:	023ffc6b 	.word	0x023ffc6b

023fce64 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fce64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fce68:	460d      	mov	r5, r1
 23fce6a:	4690      	mov	r8, r2
    write('"');
 23fce6c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fce6e:	4604      	mov	r4, r0
 23fce70:	462f      	mov	r7, r5
    write('"');
 23fce72:	f7ff fefe 	bl	23fcc72 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fce76:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fcf1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fce7a:	44a8      	add	r8, r5
    while (s != end) {
 23fce7c:	4547      	cmp	r7, r8
 23fce7e:	46ba      	mov	sl, r7
 23fce80:	d03d      	beq.n	23fcefe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fce82:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fce86:	2e22      	cmp	r6, #34	; 0x22
 23fce88:	d006      	beq.n	23fce98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fce8a:	2e5c      	cmp	r6, #92	; 0x5c
 23fce8c:	d004      	beq.n	23fce98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fce8e:	4630      	mov	r0, r6
 23fce90:	f001 fde2 	bl	23fea58 <isprint>
 23fce94:	2800      	cmp	r0, #0
 23fce96:	d1f1      	bne.n	23fce7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fce98:	6823      	ldr	r3, [r4, #0]
 23fce9a:	4629      	mov	r1, r5
 23fce9c:	4620      	mov	r0, r4
 23fce9e:	689b      	ldr	r3, [r3, #8]
 23fcea0:	ebaa 0205 	sub.w	r2, sl, r5
 23fcea4:	4798      	blx	r3
            write('\\');
 23fcea6:	215c      	movs	r1, #92	; 0x5c
 23fcea8:	4620      	mov	r0, r4
 23fceaa:	f7ff fee2 	bl	23fcc72 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fceae:	2e0d      	cmp	r6, #13
 23fceb0:	d80a      	bhi.n	23fcec8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fceb2:	2e07      	cmp	r6, #7
 23fceb4:	d91c      	bls.n	23fcef0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fceb6:	f1a6 0308 	sub.w	r3, r6, #8
 23fceba:	2b05      	cmp	r3, #5
 23fcebc:	d818      	bhi.n	23fcef0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fcebe:	e8df f003 	tbb	[pc, r3]
 23fcec2:	0f0d      	.short	0x0f0d
 23fcec4:	15131711 	.word	0x15131711
 23fcec8:	2e22      	cmp	r6, #34	; 0x22
 23fceca:	d001      	beq.n	23fced0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fcecc:	2e5c      	cmp	r6, #92	; 0x5c
 23fcece:	d10f      	bne.n	23fcef0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fced0:	4631      	mov	r1, r6
                write('b');
 23fced2:	4620      	mov	r0, r4
 23fced4:	f7ff fecd 	bl	23fcc72 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fced8:	463d      	mov	r5, r7
    while (s != end) {
 23fceda:	e7cf      	b.n	23fce7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fcedc:	2162      	movs	r1, #98	; 0x62
 23fcede:	e7f8      	b.n	23fced2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fcee0:	2174      	movs	r1, #116	; 0x74
 23fcee2:	e7f6      	b.n	23fced2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fcee4:	216e      	movs	r1, #110	; 0x6e
 23fcee6:	e7f4      	b.n	23fced2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fcee8:	2166      	movs	r1, #102	; 0x66
 23fceea:	e7f2      	b.n	23fced2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fceec:	2172      	movs	r1, #114	; 0x72
 23fceee:	e7f0      	b.n	23fced2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fcef0:	6823      	ldr	r3, [r4, #0]
 23fcef2:	4632      	mov	r2, r6
 23fcef4:	4649      	mov	r1, r9
 23fcef6:	4620      	mov	r0, r4
 23fcef8:	68db      	ldr	r3, [r3, #12]
 23fcefa:	4798      	blx	r3
                break;
 23fcefc:	e7ec      	b.n	23fced8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fcefe:	42bd      	cmp	r5, r7
 23fcf00:	d005      	beq.n	23fcf0e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fcf02:	6823      	ldr	r3, [r4, #0]
 23fcf04:	4629      	mov	r1, r5
 23fcf06:	4620      	mov	r0, r4
 23fcf08:	689b      	ldr	r3, [r3, #8]
 23fcf0a:	1b7a      	subs	r2, r7, r5
 23fcf0c:	4798      	blx	r3
    }
    write('"');
 23fcf0e:	2122      	movs	r1, #34	; 0x22
 23fcf10:	4620      	mov	r0, r4
 23fcf12:	f7ff feae 	bl	23fcc72 <_ZN5spark10JSONWriter5writeEc>
}
 23fcf16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fcf1a:	bf00      	nop
 23fcf1c:	023ffc6e 	.word	0x023ffc6e

023fcf20 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fcf20:	b513      	push	{r0, r1, r4, lr}
 23fcf22:	4604      	mov	r4, r0
 23fcf24:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fcf28:	f7ff ff5e 	bl	23fcde8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fcf2c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fcf30:	4620      	mov	r0, r4
 23fcf32:	f7ff ff97 	bl	23fce64 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fcf36:	2302      	movs	r3, #2
}
 23fcf38:	4620      	mov	r0, r4
    state_ = VALUE;
 23fcf3a:	7123      	strb	r3, [r4, #4]
}
 23fcf3c:	b002      	add	sp, #8
 23fcf3e:	bd10      	pop	{r4, pc}

023fcf40 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fcf40:	b513      	push	{r0, r1, r4, lr}
 23fcf42:	4604      	mov	r4, r0
 23fcf44:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fcf48:	f7ff ff4e 	bl	23fcde8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fcf4c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fcf50:	4620      	mov	r0, r4
 23fcf52:	f7ff ff87 	bl	23fce64 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fcf56:	2301      	movs	r3, #1
}
 23fcf58:	4620      	mov	r0, r4
    state_ = NEXT;
 23fcf5a:	7123      	strb	r3, [r4, #4]
}
 23fcf5c:	b002      	add	sp, #8
 23fcf5e:	bd10      	pop	{r4, pc}

023fcf60 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fcf60:	6880      	ldr	r0, [r0, #8]
 23fcf62:	6803      	ldr	r3, [r0, #0]
 23fcf64:	68db      	ldr	r3, [r3, #12]
 23fcf66:	4718      	bx	r3

023fcf68 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fcf68:	4770      	bx	lr

023fcf6a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fcf6a:	4608      	mov	r0, r1
 23fcf6c:	b111      	cbz	r1, 23fcf74 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fcf6e:	680b      	ldr	r3, [r1, #0]
 23fcf70:	685b      	ldr	r3, [r3, #4]
 23fcf72:	4718      	bx	r3
}
 23fcf74:	4770      	bx	lr

023fcf76 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fcf76:	4770      	bx	lr

023fcf78 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fcf78:	4770      	bx	lr

023fcf7a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fcf7a:	4770      	bx	lr

023fcf7c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fcf7c:	4770      	bx	lr

023fcf7e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fcf7e:	b538      	push	{r3, r4, r5, lr}
 23fcf80:	4604      	mov	r4, r0
 23fcf82:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fcf84:	6800      	ldr	r0, [r0, #0]
 23fcf86:	212e      	movs	r1, #46	; 0x2e
 23fcf88:	f001 fdd9 	bl	23feb3e <strchrnul>
    size = s - category;
 23fcf8c:	6823      	ldr	r3, [r4, #0]
 23fcf8e:	1ac3      	subs	r3, r0, r3
 23fcf90:	602b      	str	r3, [r5, #0]
    if (size) {
 23fcf92:	b123      	cbz	r3, 23fcf9e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fcf94:	7803      	ldrb	r3, [r0, #0]
 23fcf96:	b103      	cbz	r3, 23fcf9a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fcf98:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fcf9a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf9c:	6020      	str	r0, [r4, #0]
}
 23fcf9e:	4618      	mov	r0, r3
 23fcfa0:	bd38      	pop	{r3, r4, r5, pc}

023fcfa2 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fcfa2:	b510      	push	{r4, lr}
 23fcfa4:	4604      	mov	r4, r0
 23fcfa6:	210c      	movs	r1, #12
 23fcfa8:	f7fd fa69 	bl	23fa47e <_ZdlPvj>
 23fcfac:	4620      	mov	r0, r4
 23fcfae:	bd10      	pop	{r4, pc}

023fcfb0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fcfb0:	b510      	push	{r4, lr}
 23fcfb2:	4604      	mov	r4, r0
 23fcfb4:	2104      	movs	r1, #4
 23fcfb6:	f7fd fa62 	bl	23fa47e <_ZdlPvj>
 23fcfba:	4620      	mov	r0, r4
 23fcfbc:	bd10      	pop	{r4, pc}

023fcfbe <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fcfbe:	b510      	push	{r4, lr}
 23fcfc0:	4604      	mov	r4, r0
 23fcfc2:	2104      	movs	r1, #4
 23fcfc4:	f7fd fa5b 	bl	23fa47e <_ZdlPvj>
 23fcfc8:	4620      	mov	r0, r4
 23fcfca:	bd10      	pop	{r4, pc}

023fcfcc <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fcfcc:	f7ff b840 	b.w	23fc050 <os_mutex_recursive_lock>

023fcfd0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fcfd0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fcfd2:	f7fd fa21 	bl	23fa418 <strcmp>
}
 23fcfd6:	fab0 f080 	clz	r0, r0
 23fcfda:	0940      	lsrs	r0, r0, #5
 23fcfdc:	bd08      	pop	{r3, pc}

023fcfde <__tcf_1>:
 23fcfde:	4770      	bx	lr

023fcfe0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fcfe0:	b510      	push	{r4, lr}
 23fcfe2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fcfe4:	f001 fabc 	bl	23fe560 <_Z16_fetch_usbserialv>
 23fcfe8:	4284      	cmp	r4, r0
 23fcfea:	d105      	bne.n	23fcff8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fcfec:	f001 fab8 	bl	23fe560 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fcff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fcff4:	f001 baa8 	b.w	23fe548 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fcff8:	f001 fc94 	bl	23fe924 <_Z22__fetch_global_Serial1v>
 23fcffc:	4284      	cmp	r4, r0
 23fcffe:	d105      	bne.n	23fd00c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd000:	f001 fc90 	bl	23fe924 <_Z22__fetch_global_Serial1v>
}
 23fd004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd008:	f001 ba41 	b.w	23fe48e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd00c:	b12c      	cbz	r4, 23fd01a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd00e:	6823      	ldr	r3, [r4, #0]
 23fd010:	4620      	mov	r0, r4
}
 23fd012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd016:	685b      	ldr	r3, [r3, #4]
 23fd018:	4718      	bx	r3
 23fd01a:	bd10      	pop	{r4, pc}

023fd01c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd01c:	680b      	ldr	r3, [r1, #0]
 23fd01e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd020:	684b      	ldr	r3, [r1, #4]
 23fd022:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd024:	b113      	cbz	r3, 23fd02c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd026:	685a      	ldr	r2, [r3, #4]
 23fd028:	3201      	adds	r2, #1
 23fd02a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd02c:	4770      	bx	lr

023fd02e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd02e:	b513      	push	{r0, r1, r4, lr}
 23fd030:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd032:	4608      	mov	r0, r1
 23fd034:	9101      	str	r1, [sp, #4]
 23fd036:	f7fd f9f9 	bl	23fa42c <strlen>
 23fd03a:	4602      	mov	r2, r0
 23fd03c:	4620      	mov	r0, r4
 23fd03e:	9901      	ldr	r1, [sp, #4]
}
 23fd040:	b002      	add	sp, #8
 23fd042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd046:	f7ff bf7b 	b.w	23fcf40 <_ZN5spark10JSONWriter5valueEPKcj>

023fd04a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd04a:	b513      	push	{r0, r1, r4, lr}
 23fd04c:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd04e:	4608      	mov	r0, r1
 23fd050:	9101      	str	r1, [sp, #4]
 23fd052:	f7fd f9eb 	bl	23fa42c <strlen>
 23fd056:	4602      	mov	r2, r0
 23fd058:	4620      	mov	r0, r4
 23fd05a:	6823      	ldr	r3, [r4, #0]
 23fd05c:	9901      	ldr	r1, [sp, #4]
 23fd05e:	68db      	ldr	r3, [r3, #12]
}
 23fd060:	b002      	add	sp, #8
 23fd062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd066:	4718      	bx	r3

023fd068 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd068:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd06a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd06c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd070:	2201      	movs	r2, #1
 23fd072:	68db      	ldr	r3, [r3, #12]
 23fd074:	f10d 0107 	add.w	r1, sp, #7
 23fd078:	4798      	blx	r3
}
 23fd07a:	b003      	add	sp, #12
 23fd07c:	f85d fb04 	ldr.w	pc, [sp], #4

023fd080 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd080:	680a      	ldr	r2, [r1, #0]
 23fd082:	b510      	push	{r4, lr}
 23fd084:	6002      	str	r2, [r0, #0]
 23fd086:	684a      	ldr	r2, [r1, #4]
 23fd088:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd08a:	2200      	movs	r2, #0
 23fd08c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd090:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd092:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd094:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd096:	6084      	str	r4, [r0, #8]
 23fd098:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd09a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd09c:	60c4      	str	r4, [r0, #12]
 23fd09e:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd0a0:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd0a2:	6104      	str	r4, [r0, #16]
 23fd0a4:	bd10      	pop	{r4, pc}
	...

023fd0a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd0ac:	f04f 0a14 	mov.w	sl, #20
 23fd0b0:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd0b4:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd0b6:	4645      	mov	r5, r8
 23fd0b8:	fb0a f404 	mul.w	r4, sl, r4
 23fd0bc:	9300      	str	r3, [sp, #0]
 23fd0be:	4b17      	ldr	r3, [pc, #92]	; (23fd11c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd0c0:	10a4      	asrs	r4, r4, #2
 23fd0c2:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd0c4:	2c00      	cmp	r4, #0
 23fd0c6:	dd21      	ble.n	23fd10c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd0c8:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd0ca:	fb0a f006 	mul.w	r0, sl, r6
 23fd0ce:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd0d2:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd0d6:	463a      	mov	r2, r7
 23fd0d8:	455f      	cmp	r7, fp
 23fd0da:	bf28      	it	cs
 23fd0dc:	465a      	movcs	r2, fp
 23fd0de:	5828      	ldr	r0, [r5, r0]
 23fd0e0:	9101      	str	r1, [sp, #4]
 23fd0e2:	f001 fd3e 	bl	23feb62 <strncmp>
                if (cmp == 0) {
 23fd0e6:	2800      	cmp	r0, #0
 23fd0e8:	f04f 0301 	mov.w	r3, #1
 23fd0ec:	9901      	ldr	r1, [sp, #4]
 23fd0ee:	d10b      	bne.n	23fd108 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd0f0:	455f      	cmp	r7, fp
 23fd0f2:	d103      	bne.n	23fd0fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd0f4:	9a00      	ldr	r2, [sp, #0]
 23fd0f6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd0f8:	4634      	mov	r4, r6
 23fd0fa:	e7e3      	b.n	23fd0c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd0fc:	d9fc      	bls.n	23fd0f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd0fe:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd100:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd104:	3e01      	subs	r6, #1
 23fd106:	e7f7      	b.n	23fd0f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd108:	dbf9      	blt.n	23fd0fe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd10a:	e7f5      	b.n	23fd0f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd10c:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd110:	4802      	ldr	r0, [pc, #8]	; (23fd11c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd112:	10ad      	asrs	r5, r5, #2
 23fd114:	4368      	muls	r0, r5
 23fd116:	b003      	add	sp, #12
 23fd118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd11c:	cccccccd 	.word	0xcccccccd

023fd120 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd122:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd124:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd126:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd128:	b303      	cbz	r3, 23fd16c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd12a:	b1f9      	cbz	r1, 23fd16c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd12c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd12e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd132:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd134:	a903      	add	r1, sp, #12
 23fd136:	a801      	add	r0, sp, #4
 23fd138:	f7ff ff21 	bl	23fcf7e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd13c:	4601      	mov	r1, r0
 23fd13e:	b1a8      	cbz	r0, 23fd16c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd140:	f10d 030b 	add.w	r3, sp, #11
 23fd144:	4620      	mov	r0, r4
 23fd146:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd148:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd14c:	f7ff ffac 	bl	23fd0a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd150:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd154:	b153      	cbz	r3, 23fd16c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd156:	6823      	ldr	r3, [r4, #0]
 23fd158:	2414      	movs	r4, #20
 23fd15a:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd15e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd162:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd164:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd166:	bfa8      	it	ge
 23fd168:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd16a:	e7e3      	b.n	23fd134 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd16c:	4628      	mov	r0, r5
 23fd16e:	b004      	add	sp, #16
 23fd170:	bd70      	pop	{r4, r5, r6, pc}

023fd172 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd172:	b40e      	push	{r1, r2, r3}
 23fd174:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd176:	b08c      	sub	sp, #48	; 0x30
 23fd178:	af00      	add	r7, sp, #0
 23fd17a:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd17e:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd182:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd184:	462b      	mov	r3, r5
 23fd186:	2120      	movs	r1, #32
 23fd188:	f107 0010 	add.w	r0, r7, #16
 23fd18c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd18e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd190:	f7ff fb78 	bl	23fc884 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd194:	281f      	cmp	r0, #31
 23fd196:	687a      	ldr	r2, [r7, #4]
 23fd198:	d91a      	bls.n	23fd1d0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd19a:	f100 0308 	add.w	r3, r0, #8
 23fd19e:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd1a2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd1a4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1a8:	1c41      	adds	r1, r0, #1
 23fd1aa:	462b      	mov	r3, r5
 23fd1ac:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd1ae:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1b0:	f7ff fb68 	bl	23fc884 <vsnprintf>
        if (n > 0) {
 23fd1b4:	1e02      	subs	r2, r0, #0
 23fd1b6:	dd04      	ble.n	23fd1c2 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd1b8:	6823      	ldr	r3, [r4, #0]
 23fd1ba:	4669      	mov	r1, sp
 23fd1bc:	4620      	mov	r0, r4
 23fd1be:	68db      	ldr	r3, [r3, #12]
 23fd1c0:	4798      	blx	r3
 23fd1c2:	46b5      	mov	sp, r6
}
 23fd1c4:	3730      	adds	r7, #48	; 0x30
 23fd1c6:	46bd      	mov	sp, r7
 23fd1c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd1cc:	b003      	add	sp, #12
 23fd1ce:	4770      	bx	lr
    } else if (n > 0) {
 23fd1d0:	2800      	cmp	r0, #0
 23fd1d2:	d0f7      	beq.n	23fd1c4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd1d4:	6823      	ldr	r3, [r4, #0]
 23fd1d6:	4602      	mov	r2, r0
 23fd1d8:	68db      	ldr	r3, [r3, #12]
 23fd1da:	4620      	mov	r0, r4
 23fd1dc:	f107 0110 	add.w	r1, r7, #16
 23fd1e0:	4798      	blx	r3
}
 23fd1e2:	e7ef      	b.n	23fd1c4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd1e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd1e4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd1e6:	4c08      	ldr	r4, [pc, #32]	; (23fd208 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd1e8:	e8d4 3f8f 	ldab	r3, [r4]
 23fd1ec:	07db      	lsls	r3, r3, #31
 23fd1ee:	d409      	bmi.n	23fd204 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd1f0:	4620      	mov	r0, r4
 23fd1f2:	f7fd f953 	bl	23fa49c <__cxa_guard_acquire>
 23fd1f6:	b128      	cbz	r0, 23fd204 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd1f8:	4620      	mov	r0, r4
 23fd1fa:	f7fd f954 	bl	23fa4a6 <__cxa_guard_release>
 23fd1fe:	4803      	ldr	r0, [pc, #12]	; (23fd20c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd200:	f001 fc24 	bl	23fea4c <atexit>
}
 23fd204:	4802      	ldr	r0, [pc, #8]	; (23fd210 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd206:	bd10      	pop	{r4, pc}
 23fd208:	1007ae68 	.word	0x1007ae68
 23fd20c:	023fcf77 	.word	0x023fcf77
 23fd210:	1007acb4 	.word	0x1007acb4

023fd214 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd214:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd216:	4c08      	ldr	r4, [pc, #32]	; (23fd238 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd218:	e8d4 3f8f 	ldab	r3, [r4]
 23fd21c:	07db      	lsls	r3, r3, #31
 23fd21e:	d409      	bmi.n	23fd234 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd220:	4620      	mov	r0, r4
 23fd222:	f7fd f93b 	bl	23fa49c <__cxa_guard_acquire>
 23fd226:	b128      	cbz	r0, 23fd234 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd228:	4620      	mov	r0, r4
 23fd22a:	f7fd f93c 	bl	23fa4a6 <__cxa_guard_release>
 23fd22e:	4803      	ldr	r0, [pc, #12]	; (23fd23c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd230:	f001 fc0c 	bl	23fea4c <atexit>
    return &factory;
}
 23fd234:	4802      	ldr	r0, [pc, #8]	; (23fd240 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd236:	bd10      	pop	{r4, pc}
 23fd238:	1007ae6c 	.word	0x1007ae6c
 23fd23c:	023fcfdf 	.word	0x023fcfdf
 23fd240:	1007acb8 	.word	0x1007acb8

023fd244 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd244:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd246:	2500      	movs	r5, #0
 23fd248:	4604      	mov	r4, r0
 23fd24a:	e9c0 5500 	strd	r5, r5, [r0]
 23fd24e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd252:	6085      	str	r5, [r0, #8]
 23fd254:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd256:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd25a:	f7fe fedd 	bl	23fc018 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd25e:	f7ff ffc1 	bl	23fd1e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd262:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd264:	f7ff ffd6 	bl	23fd214 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd268:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd26a:	6220      	str	r0, [r4, #32]
}
 23fd26c:	4620      	mov	r0, r4
 23fd26e:	bd38      	pop	{r3, r4, r5, pc}

023fd270 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd270:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd272:	4c0a      	ldr	r4, [pc, #40]	; (23fd29c <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd274:	e8d4 3f8f 	ldab	r3, [r4]
 23fd278:	07db      	lsls	r3, r3, #31
 23fd27a:	d40c      	bmi.n	23fd296 <_ZN5spark10LogManager8instanceEv+0x26>
 23fd27c:	4620      	mov	r0, r4
 23fd27e:	f7fd f90d 	bl	23fa49c <__cxa_guard_acquire>
 23fd282:	b140      	cbz	r0, 23fd296 <_ZN5spark10LogManager8instanceEv+0x26>
 23fd284:	4806      	ldr	r0, [pc, #24]	; (23fd2a0 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd286:	f7ff ffdd 	bl	23fd244 <_ZN5spark10LogManagerC1Ev>
 23fd28a:	4620      	mov	r0, r4
 23fd28c:	f7fd f90b 	bl	23fa4a6 <__cxa_guard_release>
 23fd290:	4804      	ldr	r0, [pc, #16]	; (23fd2a4 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd292:	f001 fbdb 	bl	23fea4c <atexit>
    return &mgr;
}
 23fd296:	4802      	ldr	r0, [pc, #8]	; (23fd2a0 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd298:	bd10      	pop	{r4, pc}
 23fd29a:	bf00      	nop
 23fd29c:	1007ae64 	.word	0x1007ae64
 23fd2a0:	1007ae74 	.word	0x1007ae74
 23fd2a4:	023fd7c1 	.word	0x023fd7c1

023fd2a8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd2a8:	2300      	movs	r3, #0
 23fd2aa:	4a02      	ldr	r2, [pc, #8]	; (23fd2b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd2ac:	4902      	ldr	r1, [pc, #8]	; (23fd2b8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd2ae:	4803      	ldr	r0, [pc, #12]	; (23fd2bc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd2b0:	f7ff b9a6 	b.w	23fc600 <log_set_callbacks>
 23fd2b4:	023fd5a9 	.word	0x023fd5a9
 23fd2b8:	023fd535 	.word	0x023fd535
 23fd2bc:	023fd4b5 	.word	0x023fd4b5

023fd2c0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd2c0:	2300      	movs	r3, #0
 23fd2c2:	461a      	mov	r2, r3
 23fd2c4:	4619      	mov	r1, r3
 23fd2c6:	4618      	mov	r0, r3
 23fd2c8:	f7ff b99a 	b.w	23fc600 <log_set_callbacks>

023fd2cc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd2ce:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd2d0:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd2d2:	4668      	mov	r0, sp
 23fd2d4:	f7ff fea2 	bl	23fd01c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd2d8:	466a      	mov	r2, sp
 23fd2da:	4629      	mov	r1, r5
 23fd2dc:	4620      	mov	r0, r4
 23fd2de:	f7ff fd4f 	bl	23fcd80 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fd2e2:	a801      	add	r0, sp, #4
 23fd2e4:	f7ff fb09 	bl	23fc8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd2e8:	4620      	mov	r0, r4
 23fd2ea:	b003      	add	sp, #12
 23fd2ec:	bd30      	pop	{r4, r5, pc}

023fd2ee <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd2ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd2f0:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd2f2:	68cd      	ldr	r5, [r1, #12]
 23fd2f4:	4668      	mov	r0, sp
 23fd2f6:	f7ff fe91 	bl	23fd01c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd2fa:	466a      	mov	r2, sp
 23fd2fc:	4629      	mov	r1, r5
 23fd2fe:	4620      	mov	r0, r4
 23fd300:	f7ff fd1a 	bl	23fcd38 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd304:	a801      	add	r0, sp, #4
 23fd306:	f7ff faf8 	bl	23fc8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd30a:	4620      	mov	r0, r4
 23fd30c:	b003      	add	sp, #12
 23fd30e:	bd30      	pop	{r4, r5, pc}

023fd310 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd312:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd314:	690d      	ldr	r5, [r1, #16]
 23fd316:	4668      	mov	r0, sp
 23fd318:	f7ff fe80 	bl	23fd01c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd31c:	466a      	mov	r2, sp
 23fd31e:	4629      	mov	r1, r5
 23fd320:	4620      	mov	r0, r4
 23fd322:	f7ff fcb2 	bl	23fcc8a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd326:	a801      	add	r0, sp, #4
 23fd328:	f7ff fae7 	bl	23fc8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd32c:	4620      	mov	r0, r4
 23fd32e:	b003      	add	sp, #12
 23fd330:	bd30      	pop	{r4, r5, pc}
	...

023fd334 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd334:	b570      	push	{r4, r5, r6, lr}
 23fd336:	b08a      	sub	sp, #40	; 0x28
 23fd338:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd33a:	4601      	mov	r1, r0
 23fd33c:	a804      	add	r0, sp, #16
 23fd33e:	f7ff ffc5 	bl	23fd2cc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd342:	4e14      	ldr	r6, [pc, #80]	; (23fd394 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd344:	a804      	add	r0, sp, #16
 23fd346:	f7ff fd33 	bl	23fcdb0 <_ZN5spark18JSONObjectIterator4nextEv>
 23fd34a:	b1e8      	cbz	r0, 23fd388 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd34c:	4668      	mov	r0, sp
 23fd34e:	a904      	add	r1, sp, #16
 23fd350:	f7ff ffcd 	bl	23fd2ee <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd354:	4631      	mov	r1, r6
 23fd356:	9802      	ldr	r0, [sp, #8]
 23fd358:	f7ff fe3a 	bl	23fcfd0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd35c:	4604      	mov	r4, r0
 23fd35e:	b110      	cbz	r0, 23fd366 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd360:	1e2c      	subs	r4, r5, #0
 23fd362:	bf18      	it	ne
 23fd364:	2401      	movne	r4, #1
 23fd366:	a801      	add	r0, sp, #4
 23fd368:	f7ff fac7 	bl	23fc8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd36c:	2c00      	cmp	r4, #0
 23fd36e:	d0e9      	beq.n	23fd344 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd370:	4668      	mov	r0, sp
 23fd372:	a904      	add	r1, sp, #16
 23fd374:	f7ff ffcc 	bl	23fd310 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd378:	4668      	mov	r0, sp
 23fd37a:	f7ff fcbc 	bl	23fccf6 <_ZNK5spark9JSONValue5toIntEv>
 23fd37e:	6028      	str	r0, [r5, #0]
 23fd380:	a801      	add	r0, sp, #4
 23fd382:	f7ff faba 	bl	23fc8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd386:	e7dd      	b.n	23fd344 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd388:	a805      	add	r0, sp, #20
 23fd38a:	f7ff fab6 	bl	23fc8fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd38e:	b00a      	add	sp, #40	; 0x28
 23fd390:	bd70      	pop	{r4, r5, r6, pc}
 23fd392:	bf00      	nop
 23fd394:	023ffc74 	.word	0x023ffc74

023fd398 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd39a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd39c:	4913      	ldr	r1, [pc, #76]	; (23fd3ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd39e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd3a0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd3a2:	f7fd f839 	bl	23fa418 <strcmp>
 23fd3a6:	b950      	cbnz	r0, 23fd3be <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd3a8:	f001 f8da 	bl	23fe560 <_Z16_fetch_usbserialv>
 23fd3ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd3b0:	f001 f8c6 	bl	23fe540 <_ZN9USBSerial5beginEl>
}
 23fd3b4:	b003      	add	sp, #12
 23fd3b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd3ba:	f001 b8d1 	b.w	23fe560 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd3be:	4620      	mov	r0, r4
 23fd3c0:	490b      	ldr	r1, [pc, #44]	; (23fd3f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd3c2:	f7fd f829 	bl	23fa418 <strcmp>
 23fd3c6:	b978      	cbnz	r0, 23fd3e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd3c8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd3cc:	a901      	add	r1, sp, #4
 23fd3ce:	4628      	mov	r0, r5
        int baud = 9600;
 23fd3d0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd3d2:	f7ff ffaf 	bl	23fd334 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd3d6:	f001 faa5 	bl	23fe924 <_Z22__fetch_global_Serial1v>
 23fd3da:	9901      	ldr	r1, [sp, #4]
 23fd3dc:	f001 f854 	bl	23fe488 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fd3e0:	f001 faa0 	bl	23fe924 <_Z22__fetch_global_Serial1v>
}
 23fd3e4:	b003      	add	sp, #12
 23fd3e6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fd3e8:	2000      	movs	r0, #0
 23fd3ea:	e7fb      	b.n	23fd3e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fd3ec:	023ffc79 	.word	0x023ffc79
 23fd3f0:	023ffc80 	.word	0x023ffc80

023fd3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd3f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd3f6:	2614      	movs	r6, #20
 23fd3f8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd3fc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd3fe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd402:	42ae      	cmp	r6, r5
 23fd404:	d005      	beq.n	23fd412 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fd406:	f105 0008 	add.w	r0, r5, #8
 23fd40a:	f7ff fff3 	bl	23fd3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd40e:	3514      	adds	r5, #20
 23fd410:	e7f7      	b.n	23fd402 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd412:	6820      	ldr	r0, [r4, #0]
 23fd414:	f7ff fa1a 	bl	23fc84c <free>
}
 23fd418:	4620      	mov	r0, r4
 23fd41a:	bd70      	pop	{r4, r5, r6, pc}

023fd41c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fd41c:	b510      	push	{r4, lr}
 23fd41e:	4604      	mov	r4, r0
 23fd420:	300c      	adds	r0, #12
 23fd422:	f7ff ffe7 	bl	23fd3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd426:	4620      	mov	r0, r4
 23fd428:	f7ff fa91 	bl	23fc94e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd42c:	4620      	mov	r0, r4
 23fd42e:	bd10      	pop	{r4, pc}

023fd430 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fd430:	b510      	push	{r4, lr}
 23fd432:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fd434:	4b03      	ldr	r3, [pc, #12]	; (23fd444 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fd436:	f840 3b04 	str.w	r3, [r0], #4
 23fd43a:	f7ff ffef 	bl	23fd41c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fd43e:	4620      	mov	r0, r4
 23fd440:	bd10      	pop	{r4, pc}
 23fd442:	bf00      	nop
 23fd444:	023fee00 	.word	0x023fee00

023fd448 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fd448:	b510      	push	{r4, lr}
 23fd44a:	4604      	mov	r4, r0
 23fd44c:	f7ff fff0 	bl	23fd430 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd450:	4620      	mov	r0, r4
 23fd452:	2124      	movs	r1, #36	; 0x24
 23fd454:	f7fd f813 	bl	23fa47e <_ZdlPvj>
 23fd458:	4620      	mov	r0, r4
 23fd45a:	bd10      	pop	{r4, pc}

023fd45c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fd45c:	b510      	push	{r4, lr}
 23fd45e:	4604      	mov	r4, r0
 23fd460:	4b02      	ldr	r3, [pc, #8]	; (23fd46c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fd462:	6003      	str	r3, [r0, #0]
 23fd464:	f7ff ffe4 	bl	23fd430 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd468:	4620      	mov	r0, r4
 23fd46a:	bd10      	pop	{r4, pc}
 23fd46c:	023ffd20 	.word	0x023ffd20

023fd470 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fd470:	b510      	push	{r4, lr}
 23fd472:	4604      	mov	r4, r0
 23fd474:	f7ff fff2 	bl	23fd45c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fd478:	4620      	mov	r0, r4
 23fd47a:	2124      	movs	r1, #36	; 0x24
 23fd47c:	f7fc ffff 	bl	23fa47e <_ZdlPvj>
 23fd480:	4620      	mov	r0, r4
 23fd482:	bd10      	pop	{r4, pc}

023fd484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fd484:	2200      	movs	r2, #0
 23fd486:	e9c0 2200 	strd	r2, r2, [r0]
 23fd48a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fd48c:	b510      	push	{r4, lr}
 23fd48e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd490:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd492:	6004      	str	r4, [r0, #0]
 23fd494:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd496:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd498:	6044      	str	r4, [r0, #4]
 23fd49a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd49c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd49e:	6084      	str	r4, [r0, #8]
}
 23fd4a0:	bd10      	pop	{r4, pc}

023fd4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fd4a2:	b510      	push	{r4, lr}
 23fd4a4:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fd4a6:	6803      	ldr	r3, [r0, #0]
 23fd4a8:	6818      	ldr	r0, [r3, #0]
 23fd4aa:	f7fe fddf 	bl	23fc06c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fd4ae:	4620      	mov	r0, r4
 23fd4b0:	bd10      	pop	{r4, pc}
	...

023fd4b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fd4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd4b8:	b087      	sub	sp, #28
 23fd4ba:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fd4bc:	4b1c      	ldr	r3, [pc, #112]	; (23fd530 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fd4be:	4680      	mov	r8, r0
 23fd4c0:	685b      	ldr	r3, [r3, #4]
 23fd4c2:	4689      	mov	r9, r1
 23fd4c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd4c8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fd4ca:	b96b      	cbnz	r3, 23fd4e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fd4cc:	f7ff fed0 	bl	23fd270 <_ZN5spark10LogManager8instanceEv>
 23fd4d0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd4d2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fd4d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd4d8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fd4da:	f7ff fd77 	bl	23fcfcc <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fd4de:	7b23      	ldrb	r3, [r4, #12]
 23fd4e0:	b12b      	cbz	r3, 23fd4ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fd4e2:	a805      	add	r0, sp, #20
 23fd4e4:	f7ff ffdd 	bl	23fd4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fd4e8:	b007      	add	sp, #28
 23fd4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fd4ee:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fd4f0:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fd4f4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fd4f6:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd4fa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd4fe:	45aa      	cmp	sl, r5
 23fd500:	d012      	beq.n	23fd528 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fd502:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fd506:	4631      	mov	r1, r6
 23fd508:	1d38      	adds	r0, r7, #4
 23fd50a:	f7ff fe09 	bl	23fd120 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd50e:	4581      	cmp	r9, r0
 23fd510:	d3f5      	bcc.n	23fd4fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fd512:	9a03      	ldr	r2, [sp, #12]
 23fd514:	683b      	ldr	r3, [r7, #0]
 23fd516:	9200      	str	r2, [sp, #0]
 23fd518:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fd51c:	464a      	mov	r2, r9
 23fd51e:	4633      	mov	r3, r6
 23fd520:	4641      	mov	r1, r8
 23fd522:	4638      	mov	r0, r7
 23fd524:	47d8      	blx	fp
 23fd526:	e7ea      	b.n	23fd4fe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fd528:	2300      	movs	r3, #0
 23fd52a:	7323      	strb	r3, [r4, #12]
 23fd52c:	e7d9      	b.n	23fd4e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fd52e:	bf00      	nop
 23fd530:	e000ed00 	.word	0xe000ed00

023fd534 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fd534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd538:	469b      	mov	fp, r3
 23fd53a:	4b1a      	ldr	r3, [pc, #104]	; (23fd5a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fd53c:	4680      	mov	r8, r0
 23fd53e:	685b      	ldr	r3, [r3, #4]
 23fd540:	4689      	mov	r9, r1
 23fd542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd546:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fd548:	b96b      	cbnz	r3, 23fd566 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fd54a:	f7ff fe91 	bl	23fd270 <_ZN5spark10LogManager8instanceEv>
 23fd54e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd550:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd554:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd556:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd558:	f7ff fd38 	bl	23fcfcc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fd55c:	7b23      	ldrb	r3, [r4, #12]
 23fd55e:	b12b      	cbz	r3, 23fd56c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fd560:	a801      	add	r0, sp, #4
 23fd562:	f7ff ff9e 	bl	23fd4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd566:	b003      	add	sp, #12
 23fd568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fd56c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fd56e:	b2f6      	uxtb	r6, r6
 23fd570:	7323      	strb	r3, [r4, #12]
 23fd572:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd576:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd57a:	4555      	cmp	r5, sl
 23fd57c:	d00e      	beq.n	23fd59c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fd57e:	f855 7b04 	ldr.w	r7, [r5], #4
 23fd582:	4659      	mov	r1, fp
 23fd584:	1d38      	adds	r0, r7, #4
 23fd586:	f7ff fdcb 	bl	23fd120 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd58a:	4286      	cmp	r6, r0
 23fd58c:	d3f5      	bcc.n	23fd57a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fd58e:	683b      	ldr	r3, [r7, #0]
 23fd590:	464a      	mov	r2, r9
 23fd592:	4641      	mov	r1, r8
 23fd594:	4638      	mov	r0, r7
 23fd596:	68db      	ldr	r3, [r3, #12]
 23fd598:	4798      	blx	r3
 23fd59a:	e7ee      	b.n	23fd57a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fd59c:	2300      	movs	r3, #0
 23fd59e:	7323      	strb	r3, [r4, #12]
 23fd5a0:	e7de      	b.n	23fd560 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fd5a2:	bf00      	nop
 23fd5a4:	e000ed00 	.word	0xe000ed00

023fd5a8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fd5a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fd5ac:	4b16      	ldr	r3, [pc, #88]	; (23fd608 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fd5ae:	4605      	mov	r5, r0
 23fd5b0:	685b      	ldr	r3, [r3, #4]
 23fd5b2:	460f      	mov	r7, r1
 23fd5b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fd5b8:	bb1b      	cbnz	r3, 23fd602 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fd5ba:	f7ff fe59 	bl	23fd270 <_ZN5spark10LogManager8instanceEv>
 23fd5be:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd5c0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd5c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd5c6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd5c8:	f7ff fd00 	bl	23fcfcc <_ZN14RecursiveMutex4lockEv.isra.0>
 23fd5cc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fd5d0:	2446      	movs	r4, #70	; 0x46
 23fd5d2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd5d6:	45b0      	cmp	r8, r6
 23fd5d8:	d109      	bne.n	23fd5ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fd5da:	a801      	add	r0, sp, #4
 23fd5dc:	f7ff ff61 	bl	23fd4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fd5e0:	42a5      	cmp	r5, r4
 23fd5e2:	bfb4      	ite	lt
 23fd5e4:	2000      	movlt	r0, #0
 23fd5e6:	2001      	movge	r0, #1
}
 23fd5e8:	b002      	add	sp, #8
 23fd5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fd5ee:	f856 0b04 	ldr.w	r0, [r6], #4
 23fd5f2:	4639      	mov	r1, r7
 23fd5f4:	3004      	adds	r0, #4
 23fd5f6:	f7ff fd93 	bl	23fd120 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fd5fa:	4284      	cmp	r4, r0
 23fd5fc:	bfa8      	it	ge
 23fd5fe:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fd600:	e7e9      	b.n	23fd5d6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fd602:	2000      	movs	r0, #0
 23fd604:	e7f0      	b.n	23fd5e8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fd606:	bf00      	nop
 23fd608:	e000ed00 	.word	0xe000ed00

023fd60c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd60e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fd612:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd614:	4604      	mov	r4, r0
 23fd616:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd618:	db0d      	blt.n	23fd636 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fd61a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fd61c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fd61e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fd620:	dd04      	ble.n	23fd62c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fd622:	00b9      	lsls	r1, r7, #2
 23fd624:	f7ff f920 	bl	23fc868 <realloc>
            if (!d) {
 23fd628:	b918      	cbnz	r0, 23fd632 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fd62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fd62c:	f7ff f90e 	bl	23fc84c <free>
        T* d = nullptr;
 23fd630:	2000      	movs	r0, #0
        data_ = d;
 23fd632:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd634:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fd636:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fd638:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd63a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fd63e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd640:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fd644:	1d08      	adds	r0, r1, #4
 23fd646:	f001 fa1c 	bl	23fea82 <memmove>
    new(p) T(std::move(value));
 23fd64a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fd64e:	6863      	ldr	r3, [r4, #4]
    return true;
 23fd650:	2001      	movs	r0, #1
    ++size_;
 23fd652:	3301      	adds	r3, #1
 23fd654:	6063      	str	r3, [r4, #4]
    return true;
 23fd656:	e7e8      	b.n	23fd62a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fd658 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd65a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd65c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd660:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd662:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd664:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fd666:	f7ff fcb1 	bl	23fcfcc <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fd66a:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fd66e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fd672:	4293      	cmp	r3, r2
 23fd674:	4619      	mov	r1, r3
 23fd676:	d00a      	beq.n	23fd68e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fd678:	6809      	ldr	r1, [r1, #0]
 23fd67a:	3304      	adds	r3, #4
 23fd67c:	42a9      	cmp	r1, r5
 23fd67e:	d1f8      	bne.n	23fd672 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fd680:	a801      	add	r0, sp, #4
 23fd682:	f7ff ff0e 	bl	23fd4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd686:	2500      	movs	r5, #0
}
 23fd688:	4628      	mov	r0, r5
 23fd68a:	b003      	add	sp, #12
 23fd68c:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fd68e:	4629      	mov	r1, r5
 23fd690:	4620      	mov	r0, r4
 23fd692:	f7ff ffbb 	bl	23fd60c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fd696:	4605      	mov	r5, r0
 23fd698:	2800      	cmp	r0, #0
 23fd69a:	d0f1      	beq.n	23fd680 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fd69c:	6863      	ldr	r3, [r4, #4]
 23fd69e:	2b01      	cmp	r3, #1
 23fd6a0:	d101      	bne.n	23fd6a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fd6a2:	f7ff fe01 	bl	23fd2a8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd6a6:	a801      	add	r0, sp, #4
 23fd6a8:	f7ff fefb 	bl	23fd4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd6ac:	e7ec      	b.n	23fd688 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fd6ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fd6ae:	460b      	mov	r3, r1
 23fd6b0:	b570      	push	{r4, r5, r6, lr}
 23fd6b2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fd6b4:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fd6b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fd6bc:	4282      	cmp	r2, r0
 23fd6be:	d00f      	beq.n	23fd6e0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fd6c0:	4601      	mov	r1, r0
            if (*p == value) {
 23fd6c2:	681d      	ldr	r5, [r3, #0]
 23fd6c4:	f851 6b04 	ldr.w	r6, [r1], #4
 23fd6c8:	42ae      	cmp	r6, r5
 23fd6ca:	d107      	bne.n	23fd6dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd6cc:	1a52      	subs	r2, r2, r1
 23fd6ce:	f001 f9d8 	bl	23fea82 <memmove>
    return true;
 23fd6d2:	2001      	movs	r0, #1
    --size_;
 23fd6d4:	6863      	ldr	r3, [r4, #4]
 23fd6d6:	3b01      	subs	r3, #1
 23fd6d8:	6063      	str	r3, [r4, #4]
}
 23fd6da:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fd6dc:	4608      	mov	r0, r1
 23fd6de:	e7ed      	b.n	23fd6bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fd6e0:	2000      	movs	r0, #0
 23fd6e2:	e7fa      	b.n	23fd6da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fd6e4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd6e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd6e6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd6e8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd6ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd6ee:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd6f0:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fd6f2:	f7ff fc6b 	bl	23fcfcc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fd6f6:	4620      	mov	r0, r4
 23fd6f8:	a901      	add	r1, sp, #4
 23fd6fa:	f7ff ffd8 	bl	23fd6ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fd6fe:	b118      	cbz	r0, 23fd708 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fd700:	6863      	ldr	r3, [r4, #4]
 23fd702:	b90b      	cbnz	r3, 23fd708 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fd704:	f7ff fddc 	bl	23fd2c0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd708:	a803      	add	r0, sp, #12
 23fd70a:	f7ff feca 	bl	23fd4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd70e:	b004      	add	sp, #16
 23fd710:	bd10      	pop	{r4, pc}

023fd712 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fd712:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fd714:	b570      	push	{r4, r5, r6, lr}
 23fd716:	4604      	mov	r4, r0
 23fd718:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fd71c:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd720:	42ae      	cmp	r6, r5
 23fd722:	d015      	beq.n	23fd750 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fd724:	4620      	mov	r0, r4
 23fd726:	f105 0110 	add.w	r1, r5, #16
 23fd72a:	f7ff ffc0 	bl	23fd6ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fd72e:	6863      	ldr	r3, [r4, #4]
 23fd730:	b90b      	cbnz	r3, 23fd736 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fd732:	f7ff fdc5 	bl	23fd2c0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fd736:	69e0      	ldr	r0, [r4, #28]
 23fd738:	6929      	ldr	r1, [r5, #16]
 23fd73a:	6803      	ldr	r3, [r0, #0]
 23fd73c:	68db      	ldr	r3, [r3, #12]
 23fd73e:	4798      	blx	r3
        if (h.stream) {
 23fd740:	6969      	ldr	r1, [r5, #20]
 23fd742:	b119      	cbz	r1, 23fd74c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fd744:	6a20      	ldr	r0, [r4, #32]
 23fd746:	6803      	ldr	r3, [r0, #0]
 23fd748:	68db      	ldr	r3, [r3, #12]
 23fd74a:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd74c:	3518      	adds	r5, #24
 23fd74e:	e7e7      	b.n	23fd720 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fd750:	2618      	movs	r6, #24
 23fd752:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd756:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd75a:	42ae      	cmp	r6, r5
 23fd75c:	d004      	beq.n	23fd768 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fd75e:	4628      	mov	r0, r5
 23fd760:	f000 fd91 	bl	23fe286 <_ZN6StringD1Ev>
 23fd764:	3518      	adds	r5, #24
 23fd766:	e7f8      	b.n	23fd75a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fd768:	2300      	movs	r3, #0
 23fd76a:	6163      	str	r3, [r4, #20]
}
 23fd76c:	bd70      	pop	{r4, r5, r6, pc}

023fd76e <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fd76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd770:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fd772:	f7ff fda5 	bl	23fd2c0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd776:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fd77a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd77c:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd77e:	f7ff fc25 	bl	23fcfcc <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fd782:	4620      	mov	r0, r4
 23fd784:	f7ff ffc5 	bl	23fd712 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fd788:	a801      	add	r0, sp, #4
 23fd78a:	f7ff fe8a 	bl	23fd4a2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fd78e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fd790:	b108      	cbz	r0, 23fd796 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fd792:	f7fe fc4f 	bl	23fc034 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fd796:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd79a:	2618      	movs	r6, #24
 23fd79c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd7a0:	42ae      	cmp	r6, r5
 23fd7a2:	d004      	beq.n	23fd7ae <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fd7a4:	4628      	mov	r0, r5
 23fd7a6:	f000 fd6e 	bl	23fe286 <_ZN6StringD1Ev>
 23fd7aa:	3518      	adds	r5, #24
 23fd7ac:	e7f8      	b.n	23fd7a0 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fd7ae:	6920      	ldr	r0, [r4, #16]
 23fd7b0:	f7ff f84c 	bl	23fc84c <free>
 23fd7b4:	6820      	ldr	r0, [r4, #0]
 23fd7b6:	f7ff f849 	bl	23fc84c <free>
}
 23fd7ba:	4620      	mov	r0, r4
 23fd7bc:	b002      	add	sp, #8
 23fd7be:	bd70      	pop	{r4, r5, r6, pc}

023fd7c0 <__tcf_2>:
    static LogManager mgr;
 23fd7c0:	4801      	ldr	r0, [pc, #4]	; (23fd7c8 <__tcf_2+0x8>)
 23fd7c2:	f7ff bfd4 	b.w	23fd76e <_ZN5spark10LogManagerD1Ev>
 23fd7c6:	bf00      	nop
 23fd7c8:	1007ae74 	.word	0x1007ae74

023fd7cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fd7cc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd7d0:	4604      	mov	r4, r0
 23fd7d2:	460d      	mov	r5, r1
 23fd7d4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd7d6:	d915      	bls.n	23fd804 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fd7d8:	4290      	cmp	r0, r2
 23fd7da:	d214      	bcs.n	23fd806 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fd7dc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd7e0:	1a75      	subs	r5, r6, r1
 23fd7e2:	f1a1 0714 	sub.w	r7, r1, #20
 23fd7e6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd7e8:	42b7      	cmp	r7, r6
 23fd7ea:	d01a      	beq.n	23fd822 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fd7ec:	b11c      	cbz	r4, 23fd7f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fd7ee:	4631      	mov	r1, r6
 23fd7f0:	4620      	mov	r0, r4
 23fd7f2:	f7ff fc45 	bl	23fd080 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fd7f6:	f106 0008 	add.w	r0, r6, #8
 23fd7fa:	f7ff fdfb 	bl	23fd3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fd7fe:	3e14      	subs	r6, #20
 23fd800:	3c14      	subs	r4, #20
 23fd802:	e7f1      	b.n	23fd7e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fd804:	d00d      	beq.n	23fd822 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fd806:	42b5      	cmp	r5, r6
 23fd808:	d00b      	beq.n	23fd822 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fd80a:	b11c      	cbz	r4, 23fd814 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fd80c:	4629      	mov	r1, r5
 23fd80e:	4620      	mov	r0, r4
 23fd810:	f7ff fc36 	bl	23fd080 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fd814:	f105 0008 	add.w	r0, r5, #8
 23fd818:	f7ff fdec 	bl	23fd3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fd81c:	3514      	adds	r5, #20
 23fd81e:	3414      	adds	r4, #20
 23fd820:	e7f1      	b.n	23fd806 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fd822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd824 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd824:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd828:	4604      	mov	r4, r0
 23fd82a:	460d      	mov	r5, r1
 23fd82c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd82e:	d914      	bls.n	23fd85a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fd830:	4290      	cmp	r0, r2
 23fd832:	d213      	bcs.n	23fd85c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fd834:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fd838:	1a75      	subs	r5, r6, r1
 23fd83a:	f1a1 0710 	sub.w	r7, r1, #16
 23fd83e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd840:	42b7      	cmp	r7, r6
 23fd842:	d018      	beq.n	23fd876 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fd844:	b11c      	cbz	r4, 23fd84e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fd846:	4631      	mov	r1, r6
 23fd848:	4620      	mov	r0, r4
 23fd84a:	f000 fd85 	bl	23fe358 <_ZN6StringC1EOS_>
                end->~T();
 23fd84e:	4630      	mov	r0, r6
 23fd850:	f000 fd19 	bl	23fe286 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd854:	3e10      	subs	r6, #16
 23fd856:	3c10      	subs	r4, #16
 23fd858:	e7f2      	b.n	23fd840 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd85a:	d00c      	beq.n	23fd876 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd85c:	42b5      	cmp	r5, r6
 23fd85e:	d00a      	beq.n	23fd876 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd860:	b11c      	cbz	r4, 23fd86a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd862:	4629      	mov	r1, r5
 23fd864:	4620      	mov	r0, r4
 23fd866:	f000 fd77 	bl	23fe358 <_ZN6StringC1EOS_>
                p->~T();
 23fd86a:	4628      	mov	r0, r5
 23fd86c:	f000 fd0b 	bl	23fe286 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd870:	3510      	adds	r5, #16
 23fd872:	3410      	adds	r4, #16
 23fd874:	e7f2      	b.n	23fd85c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd878 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd878:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd87a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd87c:	4605      	mov	r5, r0
        if (n > 0) {
 23fd87e:	dd11      	ble.n	23fd8a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd880:	0130      	lsls	r0, r6, #4
 23fd882:	f7fe ffd5 	bl	23fc830 <malloc>
            if (!d) {
 23fd886:	4604      	mov	r4, r0
 23fd888:	b158      	cbz	r0, 23fd8a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd88a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd88e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd892:	f7ff ffc7 	bl	23fd824 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd896:	6828      	ldr	r0, [r5, #0]
 23fd898:	f7fe ffd8 	bl	23fc84c <free>
        return true;
 23fd89c:	2001      	movs	r0, #1
        data_ = d;
 23fd89e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd8a0:	60ae      	str	r6, [r5, #8]
    }
 23fd8a2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd8a4:	2400      	movs	r4, #0
 23fd8a6:	e7f6      	b.n	23fd896 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd8a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd8ac:	4690      	mov	r8, r2
        capacity_(0) {
 23fd8ae:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd8b0:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd8b2:	b095      	sub	sp, #84	; 0x54
 23fd8b4:	9103      	str	r1, [sp, #12]
    return size_;
 23fd8b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd8ba:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd8bc:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd8be:	e9c0 3300 	strd	r3, r3, [r0]
 23fd8c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd8c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd8ca:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd8ce:	7602      	strb	r2, [r0, #24]
 23fd8d0:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd8d2:	dc23      	bgt.n	23fd91c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd8d4:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd8d8:	2314      	movs	r3, #20
 23fd8da:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd8de:	42af      	cmp	r7, r5
 23fd8e0:	d03b      	beq.n	23fd95a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd8e2:	4629      	mov	r1, r5
 23fd8e4:	a80b      	add	r0, sp, #44	; 0x2c
 23fd8e6:	f000 fd37 	bl	23fe358 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd8ea:	a90b      	add	r1, sp, #44	; 0x2c
 23fd8ec:	a80f      	add	r0, sp, #60	; 0x3c
 23fd8ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd8f0:	f000 fd32 	bl	23fe358 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd8f4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd8f8:	4299      	cmp	r1, r3
 23fd8fa:	da1b      	bge.n	23fd934 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd8fc:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd900:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd904:	4631      	mov	r1, r6
 23fd906:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd90a:	f106 0010 	add.w	r0, r6, #16
 23fd90e:	f7ff ff89 	bl	23fd824 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd912:	b9ee      	cbnz	r6, 23fd950 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd916:	3301      	adds	r3, #1
 23fd918:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd91a:	e011      	b.n	23fd940 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd91c:	a808      	add	r0, sp, #32
 23fd91e:	f7ff ffab 	bl	23fd878 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd922:	2800      	cmp	r0, #0
 23fd924:	d1d6      	bne.n	23fd8d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd926:	a808      	add	r0, sp, #32
 23fd928:	f7ff f811 	bl	23fc94e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd92c:	4620      	mov	r0, r4
 23fd92e:	b015      	add	sp, #84	; 0x54
 23fd930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd934:	3101      	adds	r1, #1
 23fd936:	a808      	add	r0, sp, #32
 23fd938:	f7ff ff9e 	bl	23fd878 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd93c:	2800      	cmp	r0, #0
 23fd93e:	d1dd      	bne.n	23fd8fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd940:	a80f      	add	r0, sp, #60	; 0x3c
 23fd942:	f000 fca0 	bl	23fe286 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd946:	a80b      	add	r0, sp, #44	; 0x2c
 23fd948:	f000 fc9d 	bl	23fe286 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd94c:	3514      	adds	r5, #20
 23fd94e:	e7c6      	b.n	23fd8de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd950:	4630      	mov	r0, r6
 23fd952:	a90f      	add	r1, sp, #60	; 0x3c
 23fd954:	f000 fd00 	bl	23fe358 <_ZN6StringC1EOS_>
 23fd958:	e7dc      	b.n	23fd914 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd95a:	2600      	movs	r6, #0
 23fd95c:	f04f 0914 	mov.w	r9, #20
 23fd960:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd964:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd966:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd96a:	429e      	cmp	r6, r3
 23fd96c:	da7c      	bge.n	23fda68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fd96e:	0133      	lsls	r3, r6, #4
 23fd970:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd972:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd974:	b90b      	cbnz	r3, 23fd97a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd976:	3601      	adds	r6, #1
 23fd978:	e7f5      	b.n	23fd966 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd97a:	2300      	movs	r3, #0
 23fd97c:	9307      	str	r3, [sp, #28]
 23fd97e:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd982:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd984:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd986:	a907      	add	r1, sp, #28
 23fd988:	a806      	add	r0, sp, #24
 23fd98a:	f7ff faf8 	bl	23fcf7e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd98e:	4682      	mov	sl, r0
 23fd990:	2800      	cmp	r0, #0
 23fd992:	d0f0      	beq.n	23fd976 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd994:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd998:	4601      	mov	r1, r0
            bool found = false;
 23fd99a:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd99e:	4628      	mov	r0, r5
 23fd9a0:	9a07      	ldr	r2, [sp, #28]
 23fd9a2:	f10d 0317 	add.w	r3, sp, #23
 23fd9a6:	f7ff fb7f 	bl	23fd0a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd9aa:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd9ae:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd9b0:	2f00      	cmp	r7, #0
 23fd9b2:	d14a      	bne.n	23fda4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fd9b4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fd9b8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fd9bc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fd9c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd9c4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fd9c8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fd9cc:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd9ce:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fd9d2:	4293      	cmp	r3, r2
 23fd9d4:	db17      	blt.n	23fda06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fd9d6:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fd9da:	f1ba 0f00 	cmp.w	sl, #0
 23fd9de:	dd30      	ble.n	23fda42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fd9e0:	fb09 f00a 	mul.w	r0, r9, sl
 23fd9e4:	f7fe ff24 	bl	23fc830 <malloc>
            if (!d) {
 23fd9e8:	4683      	mov	fp, r0
 23fd9ea:	b360      	cbz	r0, 23fda46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fd9ec:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd9f0:	fb09 1202 	mla	r2, r9, r2, r1
 23fd9f4:	f7ff feea 	bl	23fd7cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fd9f8:	6828      	ldr	r0, [r5, #0]
 23fd9fa:	f7fe ff27 	bl	23fc84c <free>
        data_ = d;
 23fd9fe:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fda02:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fda06:	682b      	ldr	r3, [r5, #0]
 23fda08:	9a01      	ldr	r2, [sp, #4]
 23fda0a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fda0e:	686a      	ldr	r2, [r5, #4]
 23fda10:	4651      	mov	r1, sl
 23fda12:	fb09 3202 	mla	r2, r9, r2, r3
 23fda16:	f10a 0014 	add.w	r0, sl, #20
 23fda1a:	f7ff fed7 	bl	23fd7cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fda1e:	f1ba 0f00 	cmp.w	sl, #0
 23fda22:	d003      	beq.n	23fda2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fda24:	4650      	mov	r0, sl
 23fda26:	a90f      	add	r1, sp, #60	; 0x3c
 23fda28:	f7ff fb2a 	bl	23fd080 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fda2c:	686b      	ldr	r3, [r5, #4]
 23fda2e:	3301      	adds	r3, #1
 23fda30:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fda32:	a811      	add	r0, sp, #68	; 0x44
 23fda34:	f7ff fcde 	bl	23fd3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fda38:	b13f      	cbz	r7, 23fda4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fda3a:	a80b      	add	r0, sp, #44	; 0x2c
 23fda3c:	f7ff fcda 	bl	23fd3f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fda40:	e771      	b.n	23fd926 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fda42:	46bb      	mov	fp, r7
 23fda44:	e7d8      	b.n	23fd9f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fda46:	2701      	movs	r7, #1
 23fda48:	e7f3      	b.n	23fda32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fda4a:	9b01      	ldr	r3, [sp, #4]
 23fda4c:	682d      	ldr	r5, [r5, #0]
 23fda4e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fda52:	9b06      	ldr	r3, [sp, #24]
 23fda54:	781b      	ldrb	r3, [r3, #0]
 23fda56:	b92b      	cbnz	r3, 23fda64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fda58:	f8d8 3000 	ldr.w	r3, [r8]
 23fda5c:	9a02      	ldr	r2, [sp, #8]
 23fda5e:	4413      	add	r3, r2
 23fda60:	7c1b      	ldrb	r3, [r3, #16]
 23fda62:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fda64:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fda66:	e78e      	b.n	23fd986 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fda68:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fda6a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fda6c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fda6e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fda70:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda72:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fda74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fda76:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fda78:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fda7a:	60a2      	str	r2, [r4, #8]
 23fda7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fda7e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fda80:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fda82:	60e2      	str	r2, [r4, #12]
 23fda84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fda86:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fda88:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fda8a:	6122      	str	r2, [r4, #16]
 23fda8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fda8e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fda90:	9b03      	ldr	r3, [sp, #12]
 23fda92:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fda94:	6162      	str	r2, [r4, #20]
 23fda96:	7623      	strb	r3, [r4, #24]
 23fda98:	e7cf      	b.n	23fda3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fda9c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fda9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fda9e:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fdaa0:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fdaa2:	4617      	mov	r7, r2
 23fdaa4:	b087      	sub	sp, #28
 23fdaa6:	460d      	mov	r5, r1
        stream_(&stream) {
 23fdaa8:	4668      	mov	r0, sp
 23fdaaa:	4619      	mov	r1, r3
 23fdaac:	f7fc fdd3 	bl	23fa656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fdab0:	4b0b      	ldr	r3, [pc, #44]	; (23fdae0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fdab2:	4669      	mov	r1, sp
 23fdab4:	f846 3b04 	str.w	r3, [r6], #4
 23fdab8:	a803      	add	r0, sp, #12
 23fdaba:	f7fc fdcc 	bl	23fa656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fdabe:	4639      	mov	r1, r7
 23fdac0:	aa03      	add	r2, sp, #12
 23fdac2:	4630      	mov	r0, r6
 23fdac4:	f7ff fef0 	bl	23fd8a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fdac8:	a803      	add	r0, sp, #12
 23fdaca:	f7fc fd83 	bl	23fa5d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fdace:	4668      	mov	r0, sp
 23fdad0:	f7fc fd80 	bl	23fa5d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fdad4:	4620      	mov	r0, r4
        stream_(&stream) {
 23fdad6:	4b03      	ldr	r3, [pc, #12]	; (23fdae4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fdad8:	6225      	str	r5, [r4, #32]
 23fdada:	6023      	str	r3, [r4, #0]
}
 23fdadc:	b007      	add	sp, #28
 23fdade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fdae0:	023fee00 	.word	0x023fee00
 23fdae4:	023ffd08 	.word	0x023ffd08

023fdae8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fdae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdaea:	460f      	mov	r7, r1
 23fdaec:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fdaee:	4638      	mov	r0, r7
 23fdaf0:	491c      	ldr	r1, [pc, #112]	; (23fdb64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fdaf2:	4616      	mov	r6, r2
 23fdaf4:	461d      	mov	r5, r3
 23fdaf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fdaf8:	f7fc fc8e 	bl	23fa418 <strcmp>
 23fdafc:	b9c0      	cbnz	r0, 23fdb30 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fdafe:	b1a4      	cbz	r4, 23fdb2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fdb00:	4629      	mov	r1, r5
 23fdb02:	a801      	add	r0, sp, #4
 23fdb04:	f7ff fcbe 	bl	23fd484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fdb08:	2024      	movs	r0, #36	; 0x24
 23fdb0a:	4917      	ldr	r1, [pc, #92]	; (23fdb68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fdb0c:	f000 ff9a 	bl	23fea44 <_ZnwjRKSt9nothrow_t>
 23fdb10:	4605      	mov	r5, r0
 23fdb12:	b130      	cbz	r0, 23fdb22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fdb14:	ab01      	add	r3, sp, #4
 23fdb16:	4632      	mov	r2, r6
 23fdb18:	4621      	mov	r1, r4
 23fdb1a:	f7ff ffbf 	bl	23fda9c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fdb1e:	4b13      	ldr	r3, [pc, #76]	; (23fdb6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fdb20:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fdb22:	a801      	add	r0, sp, #4
 23fdb24:	f7fc fd56 	bl	23fa5d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fdb28:	462c      	mov	r4, r5
}
 23fdb2a:	4620      	mov	r0, r4
 23fdb2c:	b005      	add	sp, #20
 23fdb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fdb30:	4638      	mov	r0, r7
 23fdb32:	490f      	ldr	r1, [pc, #60]	; (23fdb70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fdb34:	f7fc fc70 	bl	23fa418 <strcmp>
 23fdb38:	b990      	cbnz	r0, 23fdb60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fdb3a:	2c00      	cmp	r4, #0
 23fdb3c:	d0f5      	beq.n	23fdb2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fdb3e:	4629      	mov	r1, r5
 23fdb40:	a801      	add	r0, sp, #4
 23fdb42:	f7ff fc9f 	bl	23fd484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fdb46:	2024      	movs	r0, #36	; 0x24
 23fdb48:	4907      	ldr	r1, [pc, #28]	; (23fdb68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fdb4a:	f000 ff7b 	bl	23fea44 <_ZnwjRKSt9nothrow_t>
 23fdb4e:	4605      	mov	r5, r0
 23fdb50:	2800      	cmp	r0, #0
 23fdb52:	d0e6      	beq.n	23fdb22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fdb54:	4632      	mov	r2, r6
 23fdb56:	4621      	mov	r1, r4
 23fdb58:	ab01      	add	r3, sp, #4
 23fdb5a:	f7ff ff9f 	bl	23fda9c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fdb5e:	e7e0      	b.n	23fdb22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fdb60:	2400      	movs	r4, #0
 23fdb62:	e7e2      	b.n	23fdb2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fdb64:	023ffc88 	.word	0x023ffc88
 23fdb68:	023ffe5c 	.word	0x023ffe5c
 23fdb6c:	023ffd20 	.word	0x023ffd20
 23fdb70:	023ffc8c 	.word	0x023ffc8c

023fdb74 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fdb74:	4b01      	ldr	r3, [pc, #4]	; (23fdb7c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fdb76:	4a02      	ldr	r2, [pc, #8]	; (23fdb80 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fdb78:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fdb7a:	4770      	bx	lr
 23fdb7c:	1007ae70 	.word	0x1007ae70
 23fdb80:	023ffc9d 	.word	0x023ffc9d

023fdb84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdb88:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fdb8a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdb8e:	4604      	mov	r4, r0
 23fdb90:	460e      	mov	r6, r1
 23fdb92:	4617      	mov	r7, r2
 23fdb94:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fdb96:	f000 fce3 	bl	23fe560 <_Z16_fetch_usbserialv>
 23fdb9a:	4581      	cmp	r9, r0
 23fdb9c:	d04d      	beq.n	23fdc3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fdb9e:	792b      	ldrb	r3, [r5, #4]
 23fdba0:	0719      	lsls	r1, r3, #28
 23fdba2:	d504      	bpl.n	23fdbae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fdba4:	4620      	mov	r0, r4
 23fdba6:	696a      	ldr	r2, [r5, #20]
 23fdba8:	4954      	ldr	r1, [pc, #336]	; (23fdcfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fdbaa:	f7ff fae2 	bl	23fd172 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fdbae:	f1b8 0f00 	cmp.w	r8, #0
 23fdbb2:	d00d      	beq.n	23fdbd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fdbb4:	215b      	movs	r1, #91	; 0x5b
 23fdbb6:	4620      	mov	r0, r4
 23fdbb8:	f7ff fa56 	bl	23fd068 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fdbbc:	4641      	mov	r1, r8
 23fdbbe:	4620      	mov	r0, r4
 23fdbc0:	f7ff fa43 	bl	23fd04a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fdbc4:	6823      	ldr	r3, [r4, #0]
 23fdbc6:	2202      	movs	r2, #2
 23fdbc8:	4620      	mov	r0, r4
 23fdbca:	68db      	ldr	r3, [r3, #12]
 23fdbcc:	494c      	ldr	r1, [pc, #304]	; (23fdd00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fdbce:	4798      	blx	r3
    if (attr.has_file) {
 23fdbd0:	792b      	ldrb	r3, [r5, #4]
 23fdbd2:	07da      	lsls	r2, r3, #31
 23fdbd4:	d524      	bpl.n	23fdc20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fdbd6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fdbda:	212f      	movs	r1, #47	; 0x2f
 23fdbdc:	4640      	mov	r0, r8
 23fdbde:	f000 ffd4 	bl	23feb8a <strrchr>
    if (s1) {
 23fdbe2:	b108      	cbz	r0, 23fdbe8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fdbe4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fdbe8:	4641      	mov	r1, r8
 23fdbea:	4620      	mov	r0, r4
 23fdbec:	f7ff fa2d 	bl	23fd04a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fdbf0:	792b      	ldrb	r3, [r5, #4]
 23fdbf2:	079b      	lsls	r3, r3, #30
 23fdbf4:	d508      	bpl.n	23fdc08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fdbf6:	213a      	movs	r1, #58	; 0x3a
 23fdbf8:	4620      	mov	r0, r4
 23fdbfa:	f7ff fa35 	bl	23fd068 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fdbfe:	4620      	mov	r0, r4
 23fdc00:	68ea      	ldr	r2, [r5, #12]
 23fdc02:	4940      	ldr	r1, [pc, #256]	; (23fdd04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fdc04:	f7ff fab5 	bl	23fd172 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fdc08:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fdc0a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fdc0c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fdc10:	4620      	mov	r0, r4
            write(", ", 2);
 23fdc12:	f04f 0202 	mov.w	r2, #2
 23fdc16:	68db      	ldr	r3, [r3, #12]
 23fdc18:	bf14      	ite	ne
 23fdc1a:	493b      	ldrne	r1, [pc, #236]	; (23fdd08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fdc1c:	493b      	ldreq	r1, [pc, #236]	; (23fdd0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdc1e:	4798      	blx	r3
    if (attr.has_function) {
 23fdc20:	792b      	ldrb	r3, [r5, #4]
 23fdc22:	0758      	lsls	r0, r3, #29
 23fdc24:	d51d      	bpl.n	23fdc62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fdc26:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fdc28:	460b      	mov	r3, r1
 23fdc2a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fdc2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fdc30:	b160      	cbz	r0, 23fdc4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fdc32:	2820      	cmp	r0, #32
 23fdc34:	d108      	bne.n	23fdc48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fdc36:	4619      	mov	r1, r3
 23fdc38:	e7f7      	b.n	23fdc2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fdc3a:	4835      	ldr	r0, [pc, #212]	; (23fdd10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fdc3c:	f000 f983 	bl	23fdf46 <_ZN5spark12NetworkClass9listeningEv>
 23fdc40:	2800      	cmp	r0, #0
 23fdc42:	d0ac      	beq.n	23fdb9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fdc44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fdc48:	2828      	cmp	r0, #40	; 0x28
 23fdc4a:	d1ee      	bne.n	23fdc2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fdc4c:	6823      	ldr	r3, [r4, #0]
 23fdc4e:	1a52      	subs	r2, r2, r1
 23fdc50:	4620      	mov	r0, r4
 23fdc52:	68db      	ldr	r3, [r3, #12]
 23fdc54:	4798      	blx	r3
        write("(): ", 4);
 23fdc56:	6823      	ldr	r3, [r4, #0]
 23fdc58:	2204      	movs	r2, #4
 23fdc5a:	4620      	mov	r0, r4
 23fdc5c:	68db      	ldr	r3, [r3, #12]
 23fdc5e:	492d      	ldr	r1, [pc, #180]	; (23fdd14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fdc60:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fdc62:	2100      	movs	r1, #0
 23fdc64:	4638      	mov	r0, r7
 23fdc66:	f7fe fcbd 	bl	23fc5e4 <log_level_name>
 23fdc6a:	4601      	mov	r1, r0
    write(s);
 23fdc6c:	4620      	mov	r0, r4
 23fdc6e:	f7ff f9ec 	bl	23fd04a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fdc72:	6823      	ldr	r3, [r4, #0]
 23fdc74:	2202      	movs	r2, #2
 23fdc76:	4620      	mov	r0, r4
 23fdc78:	68db      	ldr	r3, [r3, #12]
 23fdc7a:	4924      	ldr	r1, [pc, #144]	; (23fdd0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdc7c:	4798      	blx	r3
    if (msg) {
 23fdc7e:	b11e      	cbz	r6, 23fdc88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fdc80:	4631      	mov	r1, r6
 23fdc82:	4620      	mov	r0, r4
 23fdc84:	f7ff f9e1 	bl	23fd04a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fdc88:	792b      	ldrb	r3, [r5, #4]
 23fdc8a:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fdc8e:	d02c      	beq.n	23fdcea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fdc90:	6823      	ldr	r3, [r4, #0]
 23fdc92:	4921      	ldr	r1, [pc, #132]	; (23fdd18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fdc94:	68db      	ldr	r3, [r3, #12]
 23fdc96:	2202      	movs	r2, #2
 23fdc98:	4620      	mov	r0, r4
 23fdc9a:	4798      	blx	r3
        if (attr.has_code) {
 23fdc9c:	792b      	ldrb	r3, [r5, #4]
 23fdc9e:	06d9      	lsls	r1, r3, #27
 23fdca0:	d50a      	bpl.n	23fdcb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fdca2:	6823      	ldr	r3, [r4, #0]
 23fdca4:	2207      	movs	r2, #7
 23fdca6:	4620      	mov	r0, r4
 23fdca8:	491c      	ldr	r1, [pc, #112]	; (23fdd1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fdcaa:	68db      	ldr	r3, [r3, #12]
 23fdcac:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fdcae:	4620      	mov	r0, r4
 23fdcb0:	69aa      	ldr	r2, [r5, #24]
 23fdcb2:	491b      	ldr	r1, [pc, #108]	; (23fdd20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fdcb4:	f7ff fa5d 	bl	23fd172 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fdcb8:	792b      	ldrb	r3, [r5, #4]
 23fdcba:	069a      	lsls	r2, r3, #26
 23fdcbc:	d511      	bpl.n	23fdce2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fdcbe:	06db      	lsls	r3, r3, #27
 23fdcc0:	d505      	bpl.n	23fdcce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fdcc2:	6823      	ldr	r3, [r4, #0]
 23fdcc4:	2202      	movs	r2, #2
 23fdcc6:	4620      	mov	r0, r4
 23fdcc8:	68db      	ldr	r3, [r3, #12]
 23fdcca:	490f      	ldr	r1, [pc, #60]	; (23fdd08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fdccc:	4798      	blx	r3
            write("details = ", 10);
 23fdcce:	6823      	ldr	r3, [r4, #0]
 23fdcd0:	4620      	mov	r0, r4
 23fdcd2:	4914      	ldr	r1, [pc, #80]	; (23fdd24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fdcd4:	220a      	movs	r2, #10
 23fdcd6:	68db      	ldr	r3, [r3, #12]
 23fdcd8:	4798      	blx	r3
            write(attr.details);
 23fdcda:	4620      	mov	r0, r4
 23fdcdc:	69e9      	ldr	r1, [r5, #28]
 23fdcde:	f7ff f9b4 	bl	23fd04a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fdce2:	215d      	movs	r1, #93	; 0x5d
 23fdce4:	4620      	mov	r0, r4
 23fdce6:	f7ff f9bf 	bl	23fd068 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fdcea:	6823      	ldr	r3, [r4, #0]
 23fdcec:	4620      	mov	r0, r4
}
 23fdcee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fdcf2:	2202      	movs	r2, #2
 23fdcf4:	68db      	ldr	r3, [r3, #12]
 23fdcf6:	490c      	ldr	r1, [pc, #48]	; (23fdd28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fdcf8:	4718      	bx	r3
 23fdcfa:	bf00      	nop
 23fdcfc:	023ffca1 	.word	0x023ffca1
 23fdd00:	023ffca8 	.word	0x023ffca8
 23fdd04:	023ffc68 	.word	0x023ffc68
 23fdd08:	023ffcab 	.word	0x023ffcab
 23fdd0c:	023ffcb0 	.word	0x023ffcb0
 23fdd10:	1007ae9c 	.word	0x1007ae9c
 23fdd14:	023ffcae 	.word	0x023ffcae
 23fdd18:	023ffcb3 	.word	0x023ffcb3
 23fdd1c:	023ffcb6 	.word	0x023ffcb6
 23fdd20:	023ffcbe 	.word	0x023ffcbe
 23fdd24:	023ffcc1 	.word	0x023ffcc1
 23fdd28:	023ffccc 	.word	0x023ffccc

023fdd2c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fdd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdd30:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fdd32:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fdd34:	460d      	mov	r5, r1
 23fdd36:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fdd38:	f000 fc12 	bl	23fe560 <_Z16_fetch_usbserialv>
 23fdd3c:	4287      	cmp	r7, r0
 23fdd3e:	d007      	beq.n	23fdd50 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fdd40:	6a20      	ldr	r0, [r4, #32]
 23fdd42:	4632      	mov	r2, r6
 23fdd44:	6803      	ldr	r3, [r0, #0]
 23fdd46:	4629      	mov	r1, r5
}
 23fdd48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fdd4c:	68db      	ldr	r3, [r3, #12]
 23fdd4e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fdd50:	4803      	ldr	r0, [pc, #12]	; (23fdd60 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fdd52:	f000 f8f8 	bl	23fdf46 <_ZN5spark12NetworkClass9listeningEv>
 23fdd56:	2800      	cmp	r0, #0
 23fdd58:	d0f2      	beq.n	23fdd40 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fdd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fdd5e:	bf00      	nop
 23fdd60:	1007ae9c 	.word	0x1007ae9c

023fdd64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdd64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdd68:	b085      	sub	sp, #20
    return stream_;
 23fdd6a:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fdd6e:	4605      	mov	r5, r0
 23fdd70:	460f      	mov	r7, r1
 23fdd72:	4690      	mov	r8, r2
 23fdd74:	461e      	mov	r6, r3
 23fdd76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fdd78:	f000 fbf2 	bl	23fe560 <_Z16_fetch_usbserialv>
 23fdd7c:	4581      	cmp	r9, r0
 23fdd7e:	d105      	bne.n	23fdd8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fdd80:	4849      	ldr	r0, [pc, #292]	; (23fdea8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fdd82:	f000 f8e0 	bl	23fdf46 <_ZN5spark12NetworkClass9listeningEv>
 23fdd86:	2800      	cmp	r0, #0
 23fdd88:	f040 808a 	bne.w	23fdea0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fdd8c:	f04f 0900 	mov.w	r9, #0
 23fdd90:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fdd92:	4a46      	ldr	r2, [pc, #280]	; (23fdeac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fdd94:	a801      	add	r0, sp, #4
 23fdd96:	9201      	str	r2, [sp, #4]
 23fdd98:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fdd9a:	f88d 9008 	strb.w	r9, [sp, #8]
 23fdd9e:	f7ff f830 	bl	23fce02 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fdda2:	4649      	mov	r1, r9
 23fdda4:	4640      	mov	r0, r8
 23fdda6:	f7fe fc1d 	bl	23fc5e4 <log_level_name>
 23fddaa:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fddac:	4940      	ldr	r1, [pc, #256]	; (23fdeb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fddae:	2201      	movs	r2, #1
 23fddb0:	a801      	add	r0, sp, #4
 23fddb2:	f7ff f8b5 	bl	23fcf20 <_ZN5spark10JSONWriter4nameEPKcj>
 23fddb6:	4641      	mov	r1, r8
 23fddb8:	f7ff f939 	bl	23fd02e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fddbc:	b13f      	cbz	r7, 23fddce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fddbe:	493d      	ldr	r1, [pc, #244]	; (23fdeb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fddc0:	2201      	movs	r2, #1
 23fddc2:	a801      	add	r0, sp, #4
 23fddc4:	f7ff f8ac 	bl	23fcf20 <_ZN5spark10JSONWriter4nameEPKcj>
 23fddc8:	4639      	mov	r1, r7
 23fddca:	f7ff f930 	bl	23fd02e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fddce:	b13e      	cbz	r6, 23fdde0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fddd0:	4939      	ldr	r1, [pc, #228]	; (23fdeb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fddd2:	2201      	movs	r2, #1
 23fddd4:	a801      	add	r0, sp, #4
 23fddd6:	f7ff f8a3 	bl	23fcf20 <_ZN5spark10JSONWriter4nameEPKcj>
 23fddda:	4631      	mov	r1, r6
 23fdddc:	f7ff f927 	bl	23fd02e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fdde0:	7923      	ldrb	r3, [r4, #4]
 23fdde2:	07df      	lsls	r7, r3, #31
 23fdde4:	d50e      	bpl.n	23fde04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fdde6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fdde8:	212f      	movs	r1, #47	; 0x2f
 23fddea:	4630      	mov	r0, r6
 23fddec:	f000 fecd 	bl	23feb8a <strrchr>
    if (s1) {
 23fddf0:	b100      	cbz	r0, 23fddf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fddf2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fddf4:	4931      	ldr	r1, [pc, #196]	; (23fdebc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fddf6:	2201      	movs	r2, #1
 23fddf8:	a801      	add	r0, sp, #4
 23fddfa:	f7ff f891 	bl	23fcf20 <_ZN5spark10JSONWriter4nameEPKcj>
 23fddfe:	4631      	mov	r1, r6
 23fde00:	f7ff f915 	bl	23fd02e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fde04:	7923      	ldrb	r3, [r4, #4]
 23fde06:	079e      	lsls	r6, r3, #30
 23fde08:	d507      	bpl.n	23fde1a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fde0a:	492d      	ldr	r1, [pc, #180]	; (23fdec0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fde0c:	2202      	movs	r2, #2
 23fde0e:	a801      	add	r0, sp, #4
 23fde10:	f7ff f886 	bl	23fcf20 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde14:	68e1      	ldr	r1, [r4, #12]
 23fde16:	f7ff f801 	bl	23fce1c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fde1a:	7923      	ldrb	r3, [r4, #4]
 23fde1c:	0758      	lsls	r0, r3, #29
 23fde1e:	d514      	bpl.n	23fde4a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fde20:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fde22:	4633      	mov	r3, r6
 23fde24:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fde26:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fde2a:	b12a      	cbz	r2, 23fde38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fde2c:	2a20      	cmp	r2, #32
 23fde2e:	d101      	bne.n	23fde34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fde30:	461e      	mov	r6, r3
 23fde32:	e7f7      	b.n	23fde24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fde34:	2a28      	cmp	r2, #40	; 0x28
 23fde36:	d1f5      	bne.n	23fde24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fde38:	2202      	movs	r2, #2
 23fde3a:	4922      	ldr	r1, [pc, #136]	; (23fdec4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fde3c:	a801      	add	r0, sp, #4
 23fde3e:	f7ff f86f 	bl	23fcf20 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde42:	4631      	mov	r1, r6
 23fde44:	1bba      	subs	r2, r7, r6
 23fde46:	f7ff f87b 	bl	23fcf40 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fde4a:	7923      	ldrb	r3, [r4, #4]
 23fde4c:	0719      	lsls	r1, r3, #28
 23fde4e:	d507      	bpl.n	23fde60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fde50:	491d      	ldr	r1, [pc, #116]	; (23fdec8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fde52:	2201      	movs	r2, #1
 23fde54:	a801      	add	r0, sp, #4
 23fde56:	f7ff f863 	bl	23fcf20 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde5a:	6961      	ldr	r1, [r4, #20]
 23fde5c:	f7fe fff0 	bl	23fce40 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fde60:	7923      	ldrb	r3, [r4, #4]
 23fde62:	06da      	lsls	r2, r3, #27
 23fde64:	d508      	bpl.n	23fde78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fde66:	2204      	movs	r2, #4
 23fde68:	4918      	ldr	r1, [pc, #96]	; (23fdecc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fde6a:	eb0d 0002 	add.w	r0, sp, r2
 23fde6e:	f7ff f857 	bl	23fcf20 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde72:	69a1      	ldr	r1, [r4, #24]
 23fde74:	f7fe ffd2 	bl	23fce1c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fde78:	7923      	ldrb	r3, [r4, #4]
 23fde7a:	069b      	lsls	r3, r3, #26
 23fde7c:	d507      	bpl.n	23fde8e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fde7e:	4914      	ldr	r1, [pc, #80]	; (23fded0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fde80:	2206      	movs	r2, #6
 23fde82:	a801      	add	r0, sp, #4
 23fde84:	f7ff f84c 	bl	23fcf20 <_ZN5spark10JSONWriter4nameEPKcj>
 23fde88:	69e1      	ldr	r1, [r4, #28]
 23fde8a:	f7ff f8d0 	bl	23fd02e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fde8e:	a801      	add	r0, sp, #4
 23fde90:	f7fe ffa1 	bl	23fcdd6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fde94:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fde96:	2202      	movs	r2, #2
 23fde98:	6803      	ldr	r3, [r0, #0]
 23fde9a:	490e      	ldr	r1, [pc, #56]	; (23fded4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fde9c:	68db      	ldr	r3, [r3, #12]
 23fde9e:	4798      	blx	r3
}
 23fdea0:	b005      	add	sp, #20
 23fdea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fdea6:	bf00      	nop
 23fdea8:	1007ae9c 	.word	0x1007ae9c
 23fdeac:	023ffcf0 	.word	0x023ffcf0
 23fdeb0:	023ffc7e 	.word	0x023ffc7e
 23fdeb4:	023ffccf 	.word	0x023ffccf
 23fdeb8:	023ffecb 	.word	0x023ffecb
 23fdebc:	023ffcd1 	.word	0x023ffcd1
 23fdec0:	023ffcd3 	.word	0x023ffcd3
 23fdec4:	023ffcd6 	.word	0x023ffcd6
 23fdec8:	023fedd5 	.word	0x023fedd5
 23fdecc:	023ffcd9 	.word	0x023ffcd9
 23fded0:	023ffcde 	.word	0x023ffcde
 23fded4:	023ffccc 	.word	0x023ffccc

023fded8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fded8:	2300      	movs	r3, #0
 23fdeda:	6840      	ldr	r0, [r0, #4]
 23fdedc:	461a      	mov	r2, r3
 23fdede:	f7fe bbff 	b.w	23fc6e0 <network_connect>

023fdee2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fdee2:	2200      	movs	r2, #0
 23fdee4:	2102      	movs	r1, #2
 23fdee6:	6840      	ldr	r0, [r0, #4]
 23fdee8:	f7fe bc16 	b.w	23fc718 <network_disconnect>

023fdeec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fdeec:	2200      	movs	r2, #0
 23fdeee:	6840      	ldr	r0, [r0, #4]
 23fdef0:	4611      	mov	r1, r2
 23fdef2:	f7fe bc03 	b.w	23fc6fc <network_connecting>

023fdef6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fdef6:	2200      	movs	r2, #0
 23fdef8:	6840      	ldr	r0, [r0, #4]
 23fdefa:	4611      	mov	r1, r2
 23fdefc:	f7fe bc1a 	b.w	23fc734 <network_ready>

023fdf00 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fdf00:	2300      	movs	r3, #0
 23fdf02:	6840      	ldr	r0, [r0, #4]
 23fdf04:	461a      	mov	r2, r3
 23fdf06:	4619      	mov	r1, r3
 23fdf08:	f7fe bc22 	b.w	23fc750 <network_on>

023fdf0c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fdf0c:	2300      	movs	r3, #0
 23fdf0e:	6840      	ldr	r0, [r0, #4]
 23fdf10:	461a      	mov	r2, r3
 23fdf12:	4619      	mov	r1, r3
 23fdf14:	f7fe bc2a 	b.w	23fc76c <network_off>

023fdf18 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fdf18:	2100      	movs	r1, #0
 23fdf1a:	6840      	ldr	r0, [r0, #4]
 23fdf1c:	f7fe bc6c 	b.w	23fc7f8 <network_is_on>

023fdf20 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fdf20:	2100      	movs	r1, #0
 23fdf22:	6840      	ldr	r0, [r0, #4]
 23fdf24:	f7fe bc76 	b.w	23fc814 <network_is_off>

023fdf28 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fdf28:	2200      	movs	r2, #0
 23fdf2a:	6840      	ldr	r0, [r0, #4]
 23fdf2c:	f081 0101 	eor.w	r1, r1, #1
 23fdf30:	f7fe bc2a 	b.w	23fc788 <network_listen>

023fdf34 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fdf34:	2200      	movs	r2, #0
 23fdf36:	6840      	ldr	r0, [r0, #4]
 23fdf38:	f7fe bc42 	b.w	23fc7c0 <network_set_listen_timeout>

023fdf3c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fdf3c:	2200      	movs	r2, #0
 23fdf3e:	6840      	ldr	r0, [r0, #4]
 23fdf40:	4611      	mov	r1, r2
 23fdf42:	f7fe bc4b 	b.w	23fc7dc <network_get_listen_timeout>

023fdf46 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fdf46:	2200      	movs	r2, #0
 23fdf48:	6840      	ldr	r0, [r0, #4]
 23fdf4a:	4611      	mov	r1, r2
 23fdf4c:	f7fe bc2a 	b.w	23fc7a4 <network_listening>

023fdf50 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fdf50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdf54:	b095      	sub	sp, #84	; 0x54
 23fdf56:	4614      	mov	r4, r2
 23fdf58:	460d      	mov	r5, r1
 23fdf5a:	4607      	mov	r7, r0
    IPAddress addr;
 23fdf5c:	f7fe fdea 	bl	23fcb34 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fdf60:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fdf62:	221c      	movs	r2, #28
 23fdf64:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fdf66:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fdf68:	f000 fda5 	bl	23feab6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fdf6c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fdf6e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fdf70:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fdf72:	2100      	movs	r1, #0
 23fdf74:	466b      	mov	r3, sp
 23fdf76:	aa0c      	add	r2, sp, #48	; 0x30
 23fdf78:	f7fe f990 	bl	23fc29c <netdb_getaddrinfo>
    if (!r) {
 23fdf7c:	4604      	mov	r4, r0
 23fdf7e:	2800      	cmp	r0, #0
 23fdf80:	d14b      	bne.n	23fe01a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fdf82:	4602      	mov	r2, r0
 23fdf84:	2101      	movs	r1, #1
 23fdf86:	6868      	ldr	r0, [r5, #4]
 23fdf88:	f7fe fbd4 	bl	23fc734 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdf8c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fdf8e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdf90:	4622      	mov	r2, r4
 23fdf92:	6868      	ldr	r0, [r5, #4]
 23fdf94:	f7fe fbce 	bl	23fc734 <network_ready>
        bool ok = false;
 23fdf98:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdf9a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fdf9c:	9e00      	ldr	r6, [sp, #0]
 23fdf9e:	2e00      	cmp	r6, #0
 23fdfa0:	d03b      	beq.n	23fe01a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fdfa2:	2900      	cmp	r1, #0
 23fdfa4:	d139      	bne.n	23fe01a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fdfa6:	6873      	ldr	r3, [r6, #4]
 23fdfa8:	2b02      	cmp	r3, #2
 23fdfaa:	d003      	beq.n	23fdfb4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fdfac:	2b0a      	cmp	r3, #10
 23fdfae:	d011      	beq.n	23fdfd4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fdfb0:	69f6      	ldr	r6, [r6, #28]
 23fdfb2:	e7f4      	b.n	23fdf9e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fdfb4:	f1b8 0f00 	cmp.w	r8, #0
 23fdfb8:	d0fa      	beq.n	23fdfb0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fdfba:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fdfbc:	a806      	add	r0, sp, #24
 23fdfbe:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fdfc0:	1d3c      	adds	r4, r7, #4
 23fdfc2:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fdfc4:	f7fe fde4 	bl	23fcb90 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fdfc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fdfca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fdfcc:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fdfce:	4641      	mov	r1, r8
 23fdfd0:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fdfd2:	e7ed      	b.n	23fdfb0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fdfd4:	f1b9 0f00 	cmp.w	r9, #0
 23fdfd8:	d0ea      	beq.n	23fdfb0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fdfda:	2210      	movs	r2, #16
 23fdfdc:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fdfde:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fdfe0:	f000 fd69 	bl	23feab6 <memset>
                    a.v = 6;
 23fdfe4:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdfe6:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fdfe8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdfec:	f104 0308 	add.w	r3, r4, #8
 23fdff0:	3418      	adds	r4, #24
 23fdff2:	462a      	mov	r2, r5
 23fdff4:	6818      	ldr	r0, [r3, #0]
 23fdff6:	6859      	ldr	r1, [r3, #4]
 23fdff8:	3308      	adds	r3, #8
 23fdffa:	c203      	stmia	r2!, {r0, r1}
 23fdffc:	42a3      	cmp	r3, r4
 23fdffe:	4615      	mov	r5, r2
 23fe000:	d1f7      	bne.n	23fdff2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe002:	a901      	add	r1, sp, #4
 23fe004:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe006:	1d3c      	adds	r4, r7, #4
 23fe008:	ad07      	add	r5, sp, #28
 23fe00a:	f7fe fda1 	bl	23fcb50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe00e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe012:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe014:	4649      	mov	r1, r9
 23fe016:	7023      	strb	r3, [r4, #0]
                    break;
 23fe018:	e7ca      	b.n	23fdfb0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe01a:	9800      	ldr	r0, [sp, #0]
 23fe01c:	f7fe f930 	bl	23fc280 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe020:	4638      	mov	r0, r7
 23fe022:	b015      	add	sp, #84	; 0x54
 23fe024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe028 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe028:	4b02      	ldr	r3, [pc, #8]	; (23fe034 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe02a:	4a03      	ldr	r2, [pc, #12]	; (23fe038 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe02c:	601a      	str	r2, [r3, #0]
 23fe02e:	2200      	movs	r2, #0
 23fe030:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe032:	4770      	bx	lr
 23fe034:	1007ae9c 	.word	0x1007ae9c
 23fe038:	023ffd68 	.word	0x023ffd68

023fe03c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe03e:	4606      	mov	r6, r0
 23fe040:	460d      	mov	r5, r1
  size_t n = 0;
 23fe042:	2400      	movs	r4, #0
 23fe044:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe046:	42bd      	cmp	r5, r7
 23fe048:	d00c      	beq.n	23fe064 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe04a:	6833      	ldr	r3, [r6, #0]
 23fe04c:	4630      	mov	r0, r6
 23fe04e:	689b      	ldr	r3, [r3, #8]
 23fe050:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe054:	4798      	blx	r3
     if (chunk>=0)
 23fe056:	1e03      	subs	r3, r0, #0
 23fe058:	db01      	blt.n	23fe05e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe05a:	441c      	add	r4, r3
  while (size--) {
 23fe05c:	e7f3      	b.n	23fe046 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe05e:	2c00      	cmp	r4, #0
 23fe060:	bf08      	it	eq
 23fe062:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe064:	4620      	mov	r0, r4
 23fe066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe068 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fe068:	b513      	push	{r0, r1, r4, lr}
 23fe06a:	4604      	mov	r4, r0
    }
 23fe06c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe06e:	b159      	cbz	r1, 23fe088 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe070:	9101      	str	r1, [sp, #4]
 23fe072:	f7fc f9db 	bl	23fa42c <strlen>
 23fe076:	4602      	mov	r2, r0
 23fe078:	4620      	mov	r0, r4
 23fe07a:	6823      	ldr	r3, [r4, #0]
 23fe07c:	9901      	ldr	r1, [sp, #4]
 23fe07e:	68db      	ldr	r3, [r3, #12]
    }
 23fe080:	b002      	add	sp, #8
 23fe082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe086:	4718      	bx	r3
    }
 23fe088:	b002      	add	sp, #8
 23fe08a:	bd10      	pop	{r4, pc}

023fe08c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fe08c:	6803      	ldr	r3, [r0, #0]
 23fe08e:	689b      	ldr	r3, [r3, #8]
 23fe090:	4718      	bx	r3

023fe092 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fe092:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fe094:	210d      	movs	r1, #13
{
 23fe096:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fe098:	f7ff fff8 	bl	23fe08c <_ZN5Print5printEc>
  n += print('\n');
 23fe09c:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fe09e:	4604      	mov	r4, r0
  n += print('\n');
 23fe0a0:	4628      	mov	r0, r5
 23fe0a2:	f7ff fff3 	bl	23fe08c <_ZN5Print5printEc>
  return n;
}
 23fe0a6:	4420      	add	r0, r4
 23fe0a8:	bd38      	pop	{r3, r4, r5, pc}

023fe0aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fe0aa:	b538      	push	{r3, r4, r5, lr}
 23fe0ac:	4605      	mov	r5, r0
  return write(str);
 23fe0ae:	f7ff ffdb 	bl	23fe068 <_ZN5Print5writeEPKc>
 23fe0b2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fe0b4:	4628      	mov	r0, r5
 23fe0b6:	f7ff ffec 	bl	23fe092 <_ZN5Print7printlnEv>
  return n;
}
 23fe0ba:	4420      	add	r0, r4
 23fe0bc:	bd38      	pop	{r3, r4, r5, pc}

023fe0be <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe0be:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe0c0:	2a01      	cmp	r2, #1
 23fe0c2:	bf98      	it	ls
 23fe0c4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe0c6:	b530      	push	{r4, r5, lr}
 23fe0c8:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe0ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe0ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe0d0:	460d      	mov	r5, r1
 23fe0d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe0d6:	fb01 5312 	mls	r3, r1, r2, r5
 23fe0da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe0de:	2b09      	cmp	r3, #9
 23fe0e0:	bf94      	ite	ls
 23fe0e2:	3330      	addls	r3, #48	; 0x30
 23fe0e4:	3337      	addhi	r3, #55	; 0x37
 23fe0e6:	b2db      	uxtb	r3, r3
  } while(n);
 23fe0e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe0ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe0ee:	d9ef      	bls.n	23fe0d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe0f0:	4621      	mov	r1, r4
 23fe0f2:	f7ff ffb9 	bl	23fe068 <_ZN5Print5writeEPKc>
}
 23fe0f6:	b00b      	add	sp, #44	; 0x2c
 23fe0f8:	bd30      	pop	{r4, r5, pc}
	...

023fe0fc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fe0fc:	2200      	movs	r2, #0
 23fe0fe:	4b01      	ldr	r3, [pc, #4]	; (23fe104 <_GLOBAL__sub_I_RGB+0x8>)
 23fe100:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe102:	4770      	bx	lr
 23fe104:	1007aea4 	.word	0x1007aea4

023fe108 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fe108:	2100      	movs	r1, #0
 23fe10a:	f7fe b945 	b.w	23fc398 <hal_spi_release>

023fe10e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fe10e:	2100      	movs	r1, #0
 23fe110:	f7fe b934 	b.w	23fc37c <hal_spi_acquire>

023fe114 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe114:	b510      	push	{r4, lr}
 23fe116:	4604      	mov	r4, r0
 23fe118:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe11a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe11c:	f7fe f8da 	bl	23fc2d4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe120:	2300      	movs	r3, #0
}
 23fe122:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe124:	6063      	str	r3, [r4, #4]
}
 23fe126:	bd10      	pop	{r4, pc}

023fe128 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fe128:	b513      	push	{r0, r1, r4, lr}
 23fe12a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fe12c:	7800      	ldrb	r0, [r0, #0]
 23fe12e:	f7ff ffee 	bl	23fe10e <_ZN8SPIClass4lockEv.isra.0>
 23fe132:	b958      	cbnz	r0, 23fe14c <_ZN8SPIClass5beginEv+0x24>
 23fe134:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fe136:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fe13a:	9001      	str	r0, [sp, #4]
 23fe13c:	f7fe f8bc 	bl	23fc2b8 <hal_spi_begin>
        unlock();
 23fe140:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe142:	b002      	add	sp, #8
 23fe144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe148:	f7ff bfde 	b.w	23fe108 <_ZN8SPIClass6unlockEv.isra.0>
 23fe14c:	b002      	add	sp, #8
 23fe14e:	bd10      	pop	{r4, pc}

023fe150 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fe150:	7800      	ldrb	r0, [r0, #0]
 23fe152:	f7ff bfd9 	b.w	23fe108 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fe158 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fe158:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fe15a:	2400      	movs	r4, #0
 23fe15c:	0840      	lsrs	r0, r0, #1
 23fe15e:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe160:	6818      	ldr	r0, [r3, #0]
 23fe162:	b2e5      	uxtb	r5, r4
 23fe164:	4288      	cmp	r0, r1
 23fe166:	d906      	bls.n	23fe176 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fe168:	3401      	adds	r4, #1
 23fe16a:	2c08      	cmp	r4, #8
 23fe16c:	d002      	beq.n	23fe174 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fe16e:	0840      	lsrs	r0, r0, #1
 23fe170:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe172:	e7f5      	b.n	23fe160 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fe174:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fe176:	4b02      	ldr	r3, [pc, #8]	; (23fe180 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fe178:	5d5b      	ldrb	r3, [r3, r5]
 23fe17a:	7013      	strb	r3, [r2, #0]
}
 23fe17c:	bd30      	pop	{r4, r5, pc}
 23fe17e:	bf00      	nop
 23fe180:	023ffd9c 	.word	0x023ffd9c

023fe184 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fe184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe188:	4606      	mov	r6, r0
 23fe18a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fe18c:	7800      	ldrb	r0, [r0, #0]
{
 23fe18e:	460c      	mov	r4, r1
    CHECK(lock());
 23fe190:	f7ff ffbd 	bl	23fe10e <_ZN8SPIClass4lockEv.isra.0>
 23fe194:	2800      	cmp	r0, #0
 23fe196:	db1b      	blt.n	23fe1d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe198:	2214      	movs	r2, #20
 23fe19a:	2100      	movs	r1, #0
 23fe19c:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fe19e:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe1a0:	f000 fc89 	bl	23feab6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe1a4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fe1a6:	2200      	movs	r2, #0
 23fe1a8:	4628      	mov	r0, r5
 23fe1aa:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe1ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fe1b0:	f7fe f8ac 	bl	23fc30c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fe1b4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fe1b8:	b113      	cbz	r3, 23fe1c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fe1ba:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fe1be:	b155      	cbz	r5, 23fe1d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fe1c0:	2700      	movs	r7, #0
 23fe1c2:	2501      	movs	r5, #1
 23fe1c4:	46b9      	mov	r9, r7
 23fe1c6:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fe1c8:	7923      	ldrb	r3, [r4, #4]
 23fe1ca:	b15d      	cbz	r5, 23fe1e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fe1cc:	b1c3      	cbz	r3, 23fe200 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fe1ce:	2000      	movs	r0, #0
}
 23fe1d0:	b00f      	add	sp, #60	; 0x3c
 23fe1d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fe1d6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fe1da:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fe1de:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fe1e2:	e7f1      	b.n	23fe1c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fe1e4:	2b00      	cmp	r3, #0
 23fe1e6:	d135      	bne.n	23fe254 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fe1e8:	68a3      	ldr	r3, [r4, #8]
 23fe1ea:	4543      	cmp	r3, r8
 23fe1ec:	d108      	bne.n	23fe200 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fe1ee:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe1f2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe1f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe1fa:	89a3      	ldrh	r3, [r4, #12]
 23fe1fc:	429a      	cmp	r2, r3
 23fe1fe:	d0e6      	beq.n	23fe1ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fe200:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe202:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fe204:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe208:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fe20a:	ab04      	add	r3, sp, #16
 23fe20c:	f10d 020f 	add.w	r2, sp, #15
 23fe210:	f7ff ffa2 	bl	23fe158 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fe214:	7921      	ldrb	r1, [r4, #4]
 23fe216:	b985      	cbnz	r5, 23fe23a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fe218:	b989      	cbnz	r1, 23fe23e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe21a:	68a3      	ldr	r3, [r4, #8]
 23fe21c:	4543      	cmp	r3, r8
 23fe21e:	d30e      	bcc.n	23fe23e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fe220:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe224:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe228:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe22c:	89a3      	ldrh	r3, [r4, #12]
 23fe22e:	429a      	cmp	r2, r3
 23fe230:	d105      	bne.n	23fe23e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fe232:	9b04      	ldr	r3, [sp, #16]
 23fe234:	4543      	cmp	r3, r8
 23fe236:	d102      	bne.n	23fe23e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe238:	e7c9      	b.n	23fe1ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fe23a:	2900      	cmp	r1, #0
 23fe23c:	d1f9      	bne.n	23fe232 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fe23e:	2300      	movs	r3, #0
 23fe240:	9301      	str	r3, [sp, #4]
 23fe242:	7b63      	ldrb	r3, [r4, #13]
 23fe244:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fe248:	9300      	str	r3, [sp, #0]
 23fe24a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fe24c:	7830      	ldrb	r0, [r6, #0]
 23fe24e:	f7fe f887 	bl	23fc360 <hal_spi_set_settings>
 23fe252:	e7bc      	b.n	23fe1ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fe254:	462b      	mov	r3, r5
 23fe256:	462a      	mov	r2, r5
 23fe258:	2101      	movs	r1, #1
 23fe25a:	e9cd 5500 	strd	r5, r5, [sp]
 23fe25e:	e7f5      	b.n	23fe24c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fe260 <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23fe260:	b530      	push	{r4, r5, lr}
 23fe262:	b087      	sub	sp, #28
 23fe264:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fe266:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23fe268:	9500      	str	r5, [sp, #0]
 23fe26a:	7800      	ldrb	r0, [r0, #0]
 23fe26c:	f7fe f85c 	bl	23fc328 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23fe270:	b93d      	cbnz	r5, 23fe282 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23fe272:	7820      	ldrb	r0, [r4, #0]
 23fe274:	a902      	add	r1, sp, #8
 23fe276:	f7fe f865 	bl	23fc344 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23fe27a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23fe27e:	07db      	lsls	r3, r3, #31
 23fe280:	d4f7      	bmi.n	23fe272 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23fe282:	b007      	add	sp, #28
 23fe284:	bd30      	pop	{r4, r5, pc}

023fe286 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fe286:	b510      	push	{r4, lr}
 23fe288:	4604      	mov	r4, r0
{
	free(buffer);
 23fe28a:	6800      	ldr	r0, [r0, #0]
 23fe28c:	f7fe fade 	bl	23fc84c <free>
}
 23fe290:	4620      	mov	r0, r4
 23fe292:	bd10      	pop	{r4, pc}

023fe294 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fe294:	b510      	push	{r4, lr}
 23fe296:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fe298:	6800      	ldr	r0, [r0, #0]
 23fe29a:	b108      	cbz	r0, 23fe2a0 <_ZN6String10invalidateEv+0xc>
 23fe29c:	f7fe fad6 	bl	23fc84c <free>
	buffer = NULL;
 23fe2a0:	2300      	movs	r3, #0
	capacity = len = 0;
 23fe2a2:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fe2a6:	6023      	str	r3, [r4, #0]
}
 23fe2a8:	bd10      	pop	{r4, pc}

023fe2aa <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe2aa:	b538      	push	{r3, r4, r5, lr}
 23fe2ac:	4604      	mov	r4, r0
 23fe2ae:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe2b0:	6800      	ldr	r0, [r0, #0]
 23fe2b2:	3101      	adds	r1, #1
 23fe2b4:	f7fe fad8 	bl	23fc868 <realloc>
	if (newbuffer) {
 23fe2b8:	b110      	cbz	r0, 23fe2c0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fe2ba:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fe2be:	2001      	movs	r0, #1
	}
	return 0;
}
 23fe2c0:	bd38      	pop	{r3, r4, r5, pc}

023fe2c2 <_ZN6String7reserveEj>:
{
 23fe2c2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fe2c4:	6803      	ldr	r3, [r0, #0]
{
 23fe2c6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fe2c8:	b123      	cbz	r3, 23fe2d4 <_ZN6String7reserveEj+0x12>
 23fe2ca:	6843      	ldr	r3, [r0, #4]
 23fe2cc:	428b      	cmp	r3, r1
 23fe2ce:	d301      	bcc.n	23fe2d4 <_ZN6String7reserveEj+0x12>
 23fe2d0:	2001      	movs	r0, #1
}
 23fe2d2:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fe2d4:	4620      	mov	r0, r4
 23fe2d6:	f7ff ffe8 	bl	23fe2aa <_ZN6String12changeBufferEj>
 23fe2da:	2800      	cmp	r0, #0
 23fe2dc:	d0f9      	beq.n	23fe2d2 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fe2de:	68a3      	ldr	r3, [r4, #8]
 23fe2e0:	2b00      	cmp	r3, #0
 23fe2e2:	d1f5      	bne.n	23fe2d0 <_ZN6String7reserveEj+0xe>
 23fe2e4:	6822      	ldr	r2, [r4, #0]
 23fe2e6:	7013      	strb	r3, [r2, #0]
 23fe2e8:	e7f2      	b.n	23fe2d0 <_ZN6String7reserveEj+0xe>

023fe2ea <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe2ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe2ec:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fe2ee:	4611      	mov	r1, r2
 23fe2f0:	9201      	str	r2, [sp, #4]
{
 23fe2f2:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fe2f4:	f7ff ffe5 	bl	23fe2c2 <_ZN6String7reserveEj>
 23fe2f8:	9a01      	ldr	r2, [sp, #4]
 23fe2fa:	b928      	cbnz	r0, 23fe308 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fe2fc:	4620      	mov	r0, r4
 23fe2fe:	f7ff ffc9 	bl	23fe294 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fe302:	4620      	mov	r0, r4
 23fe304:	b003      	add	sp, #12
 23fe306:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fe308:	4629      	mov	r1, r5
	len = length;
 23fe30a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fe30c:	6820      	ldr	r0, [r4, #0]
 23fe30e:	f000 fbab 	bl	23fea68 <memcpy>
	buffer[len] = 0;
 23fe312:	2100      	movs	r1, #0
 23fe314:	6822      	ldr	r2, [r4, #0]
 23fe316:	68a3      	ldr	r3, [r4, #8]
 23fe318:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fe31a:	e7f2      	b.n	23fe302 <_ZN6String4copyEPKcj+0x18>

023fe31c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fe31c:	b538      	push	{r3, r4, r5, lr}
 23fe31e:	4605      	mov	r5, r0
	if (buffer) {
 23fe320:	6800      	ldr	r0, [r0, #0]
{
 23fe322:	460c      	mov	r4, r1
	if (buffer) {
 23fe324:	b170      	cbz	r0, 23fe344 <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fe326:	686a      	ldr	r2, [r5, #4]
 23fe328:	688b      	ldr	r3, [r1, #8]
 23fe32a:	429a      	cmp	r2, r3
 23fe32c:	d308      	bcc.n	23fe340 <_ZN6String4moveERS_+0x24>
 23fe32e:	6809      	ldr	r1, [r1, #0]
 23fe330:	b131      	cbz	r1, 23fe340 <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fe332:	f000 fc0e 	bl	23feb52 <strcpy>
			len = rhs.len;
 23fe336:	68a3      	ldr	r3, [r4, #8]
 23fe338:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fe33a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fe33c:	60a3      	str	r3, [r4, #8]
}
 23fe33e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fe340:	f7fe fa84 	bl	23fc84c <free>
	buffer = rhs.buffer;
 23fe344:	6823      	ldr	r3, [r4, #0]
 23fe346:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fe348:	6863      	ldr	r3, [r4, #4]
 23fe34a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fe34c:	68a3      	ldr	r3, [r4, #8]
 23fe34e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fe350:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fe352:	e9c4 3300 	strd	r3, r3, [r4]
 23fe356:	e7f1      	b.n	23fe33c <_ZN6String4moveERS_+0x20>

023fe358 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fe358:	2300      	movs	r3, #0
String::String(String &&rval)
 23fe35a:	b510      	push	{r4, lr}
 23fe35c:	4604      	mov	r4, r0
	capacity = 0;
 23fe35e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe362:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe364:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fe366:	f7ff ffd9 	bl	23fe31c <_ZN6String4moveERS_>
}
 23fe36a:	4620      	mov	r0, r4
 23fe36c:	bd10      	pop	{r4, pc}

023fe36e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fe36e:	4288      	cmp	r0, r1
{
 23fe370:	b510      	push	{r4, lr}
 23fe372:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fe374:	d005      	beq.n	23fe382 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fe376:	680b      	ldr	r3, [r1, #0]
 23fe378:	b12b      	cbz	r3, 23fe386 <_ZN6StringaSERKS_+0x18>
 23fe37a:	688a      	ldr	r2, [r1, #8]
 23fe37c:	4619      	mov	r1, r3
 23fe37e:	f7ff ffb4 	bl	23fe2ea <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fe382:	4620      	mov	r0, r4
 23fe384:	bd10      	pop	{r4, pc}
	else invalidate();
 23fe386:	f7ff ff85 	bl	23fe294 <_ZN6String10invalidateEv>
 23fe38a:	e7fa      	b.n	23fe382 <_ZN6StringaSERKS_+0x14>

023fe38c <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fe38c:	2300      	movs	r3, #0
String::String(const String &value)
 23fe38e:	b510      	push	{r4, lr}
 23fe390:	4604      	mov	r4, r0
	capacity = 0;
 23fe392:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe396:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe398:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fe39a:	f7ff ffe8 	bl	23fe36e <_ZN6StringaSERKS_>
}
 23fe39e:	4620      	mov	r0, r4
 23fe3a0:	bd10      	pop	{r4, pc}
	...

023fe3a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fe3a4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe3a6:	2000      	movs	r0, #0
 23fe3a8:	4b04      	ldr	r3, [pc, #16]	; (23fe3bc <_GLOBAL__sub_I_System+0x18>)
 23fe3aa:	601a      	str	r2, [r3, #0]
 23fe3ac:	4b04      	ldr	r3, [pc, #16]	; (23fe3c0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fe3ae:	4a05      	ldr	r2, [pc, #20]	; (23fe3c4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fe3b0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fe3b4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe3b6:	f7fe b931 	b.w	23fc61c <set_system_mode>
 23fe3ba:	bf00      	nop
 23fe3bc:	1007aec0 	.word	0x1007aec0
 23fe3c0:	1007aeb4 	.word	0x1007aeb4
 23fe3c4:	ffff0000 	.word	0xffff0000

023fe3c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fe3c8:	4b02      	ldr	r3, [pc, #8]	; (23fe3d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fe3ca:	681a      	ldr	r2, [r3, #0]
 23fe3cc:	4b02      	ldr	r3, [pc, #8]	; (23fe3d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fe3ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fe3d0:	4770      	bx	lr
 23fe3d2:	bf00      	nop
 23fe3d4:	1007acbc 	.word	0x1007acbc
 23fe3d8:	1007aec4 	.word	0x1007aec4

023fe3dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe3dc:	4770      	bx	lr

023fe3de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe3de:	7441      	strb	r1, [r0, #17]
}
 23fe3e0:	4770      	bx	lr

023fe3e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe3e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe3e4:	7c00      	ldrb	r0, [r0, #16]
 23fe3e6:	f7fe f847 	bl	23fc478 <hal_usart_available_data_for_write>
}
 23fe3ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe3ee:	bd08      	pop	{r3, pc}

023fe3f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe3f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe3f2:	7c00      	ldrb	r0, [r0, #16]
 23fe3f4:	f7fd fffa 	bl	23fc3ec <hal_usart_available>
}
 23fe3f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe3fc:	bd08      	pop	{r3, pc}

023fe3fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe3fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe400:	7c00      	ldrb	r0, [r0, #16]
 23fe402:	f7fe f80f 	bl	23fc424 <hal_usart_peek>
}
 23fe406:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe40a:	bd08      	pop	{r3, pc}

023fe40c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe40c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe40e:	7c00      	ldrb	r0, [r0, #16]
 23fe410:	f7fd fffa 	bl	23fc408 <hal_usart_read>
}
 23fe414:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe418:	bd08      	pop	{r3, pc}

023fe41a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe41a:	7c00      	ldrb	r0, [r0, #16]
 23fe41c:	f7fe b810 	b.w	23fc440 <hal_usart_flush>

023fe420 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe420:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe422:	7c45      	ldrb	r5, [r0, #17]
{
 23fe424:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe426:	b12d      	cbz	r5, 23fe434 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe428:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe42a:	b003      	add	sp, #12
 23fe42c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe430:	f7fd bfce 	b.w	23fc3d0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe434:	7c00      	ldrb	r0, [r0, #16]
 23fe436:	9101      	str	r1, [sp, #4]
 23fe438:	f7fe f81e 	bl	23fc478 <hal_usart_available_data_for_write>
 23fe43c:	2800      	cmp	r0, #0
 23fe43e:	9901      	ldr	r1, [sp, #4]
 23fe440:	dcf2      	bgt.n	23fe428 <_ZN11USARTSerial5writeEh+0x8>
}
 23fe442:	4628      	mov	r0, r5
 23fe444:	b003      	add	sp, #12
 23fe446:	bd30      	pop	{r4, r5, pc}

023fe448 <_ZN11USARTSerialD0Ev>:
 23fe448:	b510      	push	{r4, lr}
 23fe44a:	4604      	mov	r4, r0
 23fe44c:	2114      	movs	r1, #20
 23fe44e:	f7fc f816 	bl	23fa47e <_ZdlPvj>
 23fe452:	4620      	mov	r0, r4
 23fe454:	bd10      	pop	{r4, pc}
	...

023fe458 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe458:	b510      	push	{r4, lr}
 23fe45a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe45e:	4604      	mov	r4, r0
 23fe460:	4608      	mov	r0, r1
 23fe462:	4611      	mov	r1, r2
 23fe464:	2200      	movs	r2, #0
 23fe466:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe46a:	4b04      	ldr	r3, [pc, #16]	; (23fe47c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe46c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe46e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe470:	2301      	movs	r3, #1
 23fe472:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe474:	f7fe f81c 	bl	23fc4b0 <hal_usart_init_ex>
}
 23fe478:	4620      	mov	r0, r4
 23fe47a:	bd10      	pop	{r4, pc}
 23fe47c:	023ffdc8 	.word	0x023ffdc8

023fe480 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fe480:	2300      	movs	r3, #0
 23fe482:	7c00      	ldrb	r0, [r0, #16]
 23fe484:	f7fe b806 	b.w	23fc494 <hal_usart_begin_config>

023fe488 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fe488:	2200      	movs	r2, #0
 23fe48a:	f7ff bff9 	b.w	23fe480 <_ZN11USARTSerial5beginEmm>

023fe48e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fe48e:	7c00      	ldrb	r0, [r0, #16]
 23fe490:	f7fd bf90 	b.w	23fc3b4 <hal_usart_end>

023fe494 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe494:	7c00      	ldrb	r0, [r0, #16]
 23fe496:	f7fd bfe1 	b.w	23fc45c <hal_usart_is_enabled>

023fe49a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe49a:	7441      	strb	r1, [r0, #17]
}
 23fe49c:	4770      	bx	lr

023fe49e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe49e:	4770      	bx	lr

023fe4a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fe4a0:	4770      	bx	lr

023fe4a2 <_ZN9USBSerial4readEv>:
{
 23fe4a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fe4a4:	2100      	movs	r1, #0
 23fe4a6:	7c00      	ldrb	r0, [r0, #16]
 23fe4a8:	f7fe f856 	bl	23fc558 <HAL_USB_USART_Receive_Data>
}
 23fe4ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe4b0:	bd08      	pop	{r3, pc}

023fe4b2 <_ZN9USBSerial4peekEv>:
{
 23fe4b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fe4b4:	2101      	movs	r1, #1
 23fe4b6:	7c00      	ldrb	r0, [r0, #16]
 23fe4b8:	f7fe f84e 	bl	23fc558 <HAL_USB_USART_Receive_Data>
}
 23fe4bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe4c0:	bd08      	pop	{r3, pc}

023fe4c2 <_ZN9USBSerial17availableForWriteEv>:
{
 23fe4c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fe4c4:	7c00      	ldrb	r0, [r0, #16]
 23fe4c6:	f7fe f839 	bl	23fc53c <HAL_USB_USART_Available_Data_For_Write>
}
 23fe4ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe4ce:	bd08      	pop	{r3, pc}

023fe4d0 <_ZN9USBSerial9availableEv>:
{
 23fe4d0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fe4d2:	7c00      	ldrb	r0, [r0, #16]
 23fe4d4:	f7fe f824 	bl	23fc520 <HAL_USB_USART_Available_Data>
}
 23fe4d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe4dc:	bd08      	pop	{r3, pc}

023fe4de <_ZN9USBSerial5writeEh>:
{
 23fe4de:	b513      	push	{r0, r1, r4, lr}
 23fe4e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe4e2:	7c00      	ldrb	r0, [r0, #16]
{
 23fe4e4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe4e6:	f7fe f829 	bl	23fc53c <HAL_USB_USART_Available_Data_For_Write>
 23fe4ea:	2800      	cmp	r0, #0
 23fe4ec:	9901      	ldr	r1, [sp, #4]
 23fe4ee:	dc01      	bgt.n	23fe4f4 <_ZN9USBSerial5writeEh+0x16>
 23fe4f0:	7c60      	ldrb	r0, [r4, #17]
 23fe4f2:	b120      	cbz	r0, 23fe4fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fe4f4:	7c20      	ldrb	r0, [r4, #16]
 23fe4f6:	f7fe f83d 	bl	23fc574 <HAL_USB_USART_Send_Data>
 23fe4fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fe4fe:	b002      	add	sp, #8
 23fe500:	bd10      	pop	{r4, pc}

023fe502 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fe502:	7c00      	ldrb	r0, [r0, #16]
 23fe504:	f7fe b844 	b.w	23fc590 <HAL_USB_USART_Flush_Data>

023fe508 <_ZN9USBSerialD0Ev>:
 23fe508:	b510      	push	{r4, lr}
 23fe50a:	4604      	mov	r4, r0
 23fe50c:	2114      	movs	r1, #20
 23fe50e:	f7fb ffb6 	bl	23fa47e <_ZdlPvj>
 23fe512:	4620      	mov	r0, r4
 23fe514:	bd10      	pop	{r4, pc}
	...

023fe518 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe518:	b510      	push	{r4, lr}
 23fe51a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe51e:	4604      	mov	r4, r0
 23fe520:	4608      	mov	r0, r1
 23fe522:	2100      	movs	r1, #0
 23fe524:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fe528:	4b04      	ldr	r3, [pc, #16]	; (23fe53c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fe52a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe52c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe52e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fe530:	4611      	mov	r1, r2
  _blocking = true;
 23fe532:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fe534:	f7fd ffca 	bl	23fc4cc <HAL_USB_USART_Init>
}
 23fe538:	4620      	mov	r0, r4
 23fe53a:	bd10      	pop	{r4, pc}
 23fe53c:	023ffdf8 	.word	0x023ffdf8

023fe540 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fe540:	2200      	movs	r2, #0
 23fe542:	7c00      	ldrb	r0, [r0, #16]
 23fe544:	f7fd bfd0 	b.w	23fc4e8 <HAL_USB_USART_Begin>

023fe548 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fe548:	7c00      	ldrb	r0, [r0, #16]
 23fe54a:	f7fd bfdb 	b.w	23fc504 <HAL_USB_USART_End>

023fe54e <_Z19acquireSerialBufferv>:
{
 23fe54e:	b510      	push	{r4, lr}
 23fe550:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fe552:	2214      	movs	r2, #20
 23fe554:	2100      	movs	r1, #0
 23fe556:	f000 faae 	bl	23feab6 <memset>
}
 23fe55a:	4620      	mov	r0, r4
 23fe55c:	bd10      	pop	{r4, pc}
	...

023fe560 <_Z16_fetch_usbserialv>:
{
 23fe560:	b510      	push	{r4, lr}
 23fe562:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fe564:	a803      	add	r0, sp, #12
 23fe566:	f7ff fff2 	bl	23fe54e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe56a:	4c0c      	ldr	r4, [pc, #48]	; (23fe59c <_Z16_fetch_usbserialv+0x3c>)
 23fe56c:	e8d4 1f8f 	ldab	r1, [r4]
 23fe570:	f011 0101 	ands.w	r1, r1, #1
 23fe574:	d10f      	bne.n	23fe596 <_Z16_fetch_usbserialv+0x36>
 23fe576:	4620      	mov	r0, r4
 23fe578:	9101      	str	r1, [sp, #4]
 23fe57a:	f7fb ff8f 	bl	23fa49c <__cxa_guard_acquire>
 23fe57e:	9901      	ldr	r1, [sp, #4]
 23fe580:	b148      	cbz	r0, 23fe596 <_Z16_fetch_usbserialv+0x36>
 23fe582:	aa03      	add	r2, sp, #12
 23fe584:	4806      	ldr	r0, [pc, #24]	; (23fe5a0 <_Z16_fetch_usbserialv+0x40>)
 23fe586:	f7ff ffc7 	bl	23fe518 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fe58a:	4620      	mov	r0, r4
 23fe58c:	f7fb ff8b 	bl	23fa4a6 <__cxa_guard_release>
 23fe590:	4804      	ldr	r0, [pc, #16]	; (23fe5a4 <_Z16_fetch_usbserialv+0x44>)
 23fe592:	f000 fa5b 	bl	23fea4c <atexit>
	return _usbserial;
}
 23fe596:	4802      	ldr	r0, [pc, #8]	; (23fe5a0 <_Z16_fetch_usbserialv+0x40>)
 23fe598:	b008      	add	sp, #32
 23fe59a:	bd10      	pop	{r4, pc}
 23fe59c:	1007aec8 	.word	0x1007aec8
 23fe5a0:	1007aecc 	.word	0x1007aecc
 23fe5a4:	023fe49f 	.word	0x023fe49f

023fe5a8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fe5a8:	2200      	movs	r2, #0
 23fe5aa:	6840      	ldr	r0, [r0, #4]
 23fe5ac:	4611      	mov	r1, r2
 23fe5ae:	f7fe b8c1 	b.w	23fc734 <network_ready>

023fe5b2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe5b2:	2200      	movs	r2, #0
 23fe5b4:	6840      	ldr	r0, [r0, #4]
 23fe5b6:	4611      	mov	r1, r2
 23fe5b8:	f7fe b8f4 	b.w	23fc7a4 <network_listening>

023fe5bc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe5bc:	2200      	movs	r2, #0
 23fe5be:	6840      	ldr	r0, [r0, #4]
 23fe5c0:	4611      	mov	r1, r2
 23fe5c2:	f7fe b90b 	b.w	23fc7dc <network_get_listen_timeout>

023fe5c6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe5c6:	2200      	movs	r2, #0
 23fe5c8:	6840      	ldr	r0, [r0, #4]
 23fe5ca:	f7fe b8f9 	b.w	23fc7c0 <network_set_listen_timeout>

023fe5ce <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe5ce:	2200      	movs	r2, #0
 23fe5d0:	6840      	ldr	r0, [r0, #4]
 23fe5d2:	f081 0101 	eor.w	r1, r1, #1
 23fe5d6:	f7fe b8d7 	b.w	23fc788 <network_listen>

023fe5da <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe5da:	2300      	movs	r3, #0
 23fe5dc:	6840      	ldr	r0, [r0, #4]
 23fe5de:	461a      	mov	r2, r3
 23fe5e0:	4619      	mov	r1, r3
 23fe5e2:	f7fe b8c3 	b.w	23fc76c <network_off>

023fe5e6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe5e6:	2300      	movs	r3, #0
 23fe5e8:	6840      	ldr	r0, [r0, #4]
 23fe5ea:	461a      	mov	r2, r3
 23fe5ec:	4619      	mov	r1, r3
 23fe5ee:	f7fe b8af 	b.w	23fc750 <network_on>

023fe5f2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe5f2:	2200      	movs	r2, #0
 23fe5f4:	6840      	ldr	r0, [r0, #4]
 23fe5f6:	4611      	mov	r1, r2
 23fe5f8:	f7fe b880 	b.w	23fc6fc <network_connecting>

023fe5fc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe5fc:	2200      	movs	r2, #0
 23fe5fe:	2102      	movs	r1, #2
 23fe600:	6840      	ldr	r0, [r0, #4]
 23fe602:	f7fe b889 	b.w	23fc718 <network_disconnect>

023fe606 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe606:	2300      	movs	r3, #0
 23fe608:	6840      	ldr	r0, [r0, #4]
 23fe60a:	461a      	mov	r2, r3
 23fe60c:	f7fe b868 	b.w	23fc6e0 <network_connect>

023fe610 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fe610:	2204      	movs	r2, #4
 23fe612:	4b02      	ldr	r3, [pc, #8]	; (23fe61c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fe614:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fe616:	4a02      	ldr	r2, [pc, #8]	; (23fe620 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fe618:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fe61a:	4770      	bx	lr
 23fe61c:	1007aee0 	.word	0x1007aee0
 23fe620:	023ffe28 	.word	0x023ffe28

023fe624 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fe624:	4b01      	ldr	r3, [pc, #4]	; (23fe62c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fe626:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fe628:	4770      	bx	lr
 23fe62a:	bf00      	nop
 23fe62c:	1007acc0 	.word	0x1007acc0

023fe630 <serialEventRun>:
{
 23fe630:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fe632:	4b0f      	ldr	r3, [pc, #60]	; (23fe670 <serialEventRun+0x40>)
 23fe634:	b143      	cbz	r3, 23fe648 <serialEventRun+0x18>
 23fe636:	f7ff ff93 	bl	23fe560 <_Z16_fetch_usbserialv>
 23fe63a:	6803      	ldr	r3, [r0, #0]
 23fe63c:	691b      	ldr	r3, [r3, #16]
 23fe63e:	4798      	blx	r3
 23fe640:	2800      	cmp	r0, #0
 23fe642:	dd01      	ble.n	23fe648 <serialEventRun+0x18>
        serialEvent();
 23fe644:	e000      	b.n	23fe648 <serialEventRun+0x18>
 23fe646:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fe648:	4b0a      	ldr	r3, [pc, #40]	; (23fe674 <serialEventRun+0x44>)
 23fe64a:	b143      	cbz	r3, 23fe65e <serialEventRun+0x2e>
 23fe64c:	f000 f96a 	bl	23fe924 <_Z22__fetch_global_Serial1v>
 23fe650:	6803      	ldr	r3, [r0, #0]
 23fe652:	691b      	ldr	r3, [r3, #16]
 23fe654:	4798      	blx	r3
 23fe656:	2800      	cmp	r0, #0
 23fe658:	dd01      	ble.n	23fe65e <serialEventRun+0x2e>
        serialEvent1();
 23fe65a:	e000      	b.n	23fe65e <serialEventRun+0x2e>
 23fe65c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fe65e:	4b06      	ldr	r3, [pc, #24]	; (23fe678 <serialEventRun+0x48>)
 23fe660:	b10b      	cbz	r3, 23fe666 <serialEventRun+0x36>
 23fe662:	f000 f9a5 	bl	23fe9b0 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fe666:	4b05      	ldr	r3, [pc, #20]	; (23fe67c <serialEventRun+0x4c>)
 23fe668:	b10b      	cbz	r3, 23fe66e <serialEventRun+0x3e>
 23fe66a:	f000 f9d7 	bl	23fea1c <_Z15serialEventRun3v>
}
 23fe66e:	bd08      	pop	{r3, pc}
	...

023fe680 <_post_loop>:
{
 23fe680:	b508      	push	{r3, lr}
	serialEventRun();
 23fe682:	f7ff ffd5 	bl	23fe630 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fe686:	f7fd fd1b 	bl	23fc0c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fe68a:	4b01      	ldr	r3, [pc, #4]	; (23fe690 <_post_loop+0x10>)
 23fe68c:	6018      	str	r0, [r3, #0]
}
 23fe68e:	bd08      	pop	{r3, pc}
 23fe690:	1007aef0 	.word	0x1007aef0

023fe694 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe694:	4805      	ldr	r0, [pc, #20]	; (23fe6ac <_Z33system_initialize_user_backup_ramv+0x18>)
 23fe696:	4a06      	ldr	r2, [pc, #24]	; (23fe6b0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fe698:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe69a:	1a12      	subs	r2, r2, r0
 23fe69c:	4905      	ldr	r1, [pc, #20]	; (23fe6b4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fe69e:	f000 f9e3 	bl	23fea68 <memcpy>
    __backup_sram_signature = signature;
 23fe6a2:	4b05      	ldr	r3, [pc, #20]	; (23fe6b8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fe6a4:	4a05      	ldr	r2, [pc, #20]	; (23fe6bc <_Z33system_initialize_user_backup_ramv+0x28>)
 23fe6a6:	601a      	str	r2, [r3, #0]
}
 23fe6a8:	bd08      	pop	{r3, pc}
 23fe6aa:	bf00      	nop
 23fe6ac:	1007b400 	.word	0x1007b400
 23fe6b0:	1007b404 	.word	0x1007b404
 23fe6b4:	085ffd04 	.word	0x085ffd04
 23fe6b8:	1007b400 	.word	0x1007b400
 23fe6bc:	9a271c1e 	.word	0x9a271c1e

023fe6c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe6c0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fe6c2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe6c4:	461a      	mov	r2, r3
 23fe6c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe6ca:	9300      	str	r3, [sp, #0]
 23fe6cc:	f7fd ffde 	bl	23fc68c <system_ctrl_set_result>
}
 23fe6d0:	b003      	add	sp, #12
 23fe6d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fe6d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fe6d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fe6da:	8843      	ldrh	r3, [r0, #2]
 23fe6dc:	2b0a      	cmp	r3, #10
 23fe6de:	d008      	beq.n	23fe6f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fe6e0:	2b50      	cmp	r3, #80	; 0x50
 23fe6e2:	d10b      	bne.n	23fe6fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fe6e4:	4b09      	ldr	r3, [pc, #36]	; (23fe70c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fe6e6:	681b      	ldr	r3, [r3, #0]
 23fe6e8:	b14b      	cbz	r3, 23fe6fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fe6ea:	b003      	add	sp, #12
 23fe6ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fe6f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fe6f2:	f7ff ffe5 	bl	23fe6c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fe6f6:	b003      	add	sp, #12
 23fe6f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe6fc:	2300      	movs	r3, #0
 23fe6fe:	461a      	mov	r2, r3
 23fe700:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe704:	9300      	str	r3, [sp, #0]
 23fe706:	f7fd ffc1 	bl	23fc68c <system_ctrl_set_result>
}
 23fe70a:	e7f4      	b.n	23fe6f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fe70c:	1007aeec 	.word	0x1007aeec

023fe710 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe710:	2100      	movs	r1, #0
{
 23fe712:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe714:	4811      	ldr	r0, [pc, #68]	; (23fe75c <module_user_init_hook+0x4c>)
 23fe716:	f7fe f8df 	bl	23fc8d8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fe71a:	4b11      	ldr	r3, [pc, #68]	; (23fe760 <module_user_init_hook+0x50>)
 23fe71c:	681a      	ldr	r2, [r3, #0]
 23fe71e:	4b11      	ldr	r3, [pc, #68]	; (23fe764 <module_user_init_hook+0x54>)
 23fe720:	429a      	cmp	r2, r3
 23fe722:	bf0c      	ite	eq
 23fe724:	2201      	moveq	r2, #1
 23fe726:	2200      	movne	r2, #0
 23fe728:	4b0f      	ldr	r3, [pc, #60]	; (23fe768 <module_user_init_hook+0x58>)
 23fe72a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fe72c:	d001      	beq.n	23fe732 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fe72e:	f7ff ffb1 	bl	23fe694 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fe732:	f7fd fca9 	bl	23fc088 <HAL_RNG_GetRandomNumber>
 23fe736:	4604      	mov	r4, r0
    srand(seed);
 23fe738:	f000 f9c6 	bl	23feac8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fe73c:	4b0b      	ldr	r3, [pc, #44]	; (23fe76c <module_user_init_hook+0x5c>)
 23fe73e:	b113      	cbz	r3, 23fe746 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fe740:	4620      	mov	r0, r4
 23fe742:	e000      	b.n	23fe746 <module_user_init_hook+0x36>
 23fe744:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fe746:	2100      	movs	r1, #0
 23fe748:	4808      	ldr	r0, [pc, #32]	; (23fe76c <module_user_init_hook+0x5c>)
 23fe74a:	f7fd ffbb 	bl	23fc6c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fe74e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fe752:	2100      	movs	r1, #0
 23fe754:	4806      	ldr	r0, [pc, #24]	; (23fe770 <module_user_init_hook+0x60>)
 23fe756:	f7fd bf8b 	b.w	23fc670 <system_ctrl_set_app_request_handler>
 23fe75a:	bf00      	nop
 23fe75c:	023fe625 	.word	0x023fe625
 23fe760:	1007b400 	.word	0x1007b400
 23fe764:	9a271c1e 	.word	0x9a271c1e
 23fe768:	1007aee8 	.word	0x1007aee8
 23fe76c:	00000000 	.word	0x00000000
 23fe770:	023fe6d9 	.word	0x023fe6d9

023fe774 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fe774:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fe776:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe778:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fe77a:	d902      	bls.n	23fe782 <pinAvailable+0xe>
    return false;
 23fe77c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fe77e:	b003      	add	sp, #12
 23fe780:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe782:	f1a0 030f 	sub.w	r3, r0, #15
 23fe786:	2b02      	cmp	r3, #2
 23fe788:	d90b      	bls.n	23fe7a2 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fe78a:	2801      	cmp	r0, #1
 23fe78c:	d821      	bhi.n	23fe7d2 <pinAvailable+0x5e>
 23fe78e:	f000 f875 	bl	23fe87c <_Z19__fetch_global_Wirev>
 23fe792:	2100      	movs	r1, #0
 23fe794:	7c00      	ldrb	r0, [r0, #16]
 23fe796:	f7fd fd49 	bl	23fc22c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe79a:	f080 0001 	eor.w	r0, r0, #1
 23fe79e:	b2c0      	uxtb	r0, r0
 23fe7a0:	e7ed      	b.n	23fe77e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fe7a2:	4d11      	ldr	r5, [pc, #68]	; (23fe7e8 <pinAvailable+0x74>)
 23fe7a4:	e8d5 1f8f 	ldab	r1, [r5]
 23fe7a8:	f011 0101 	ands.w	r1, r1, #1
 23fe7ac:	d10b      	bne.n	23fe7c6 <pinAvailable+0x52>
 23fe7ae:	4628      	mov	r0, r5
 23fe7b0:	9101      	str	r1, [sp, #4]
 23fe7b2:	f7fb fe73 	bl	23fa49c <__cxa_guard_acquire>
 23fe7b6:	9901      	ldr	r1, [sp, #4]
 23fe7b8:	b128      	cbz	r0, 23fe7c6 <pinAvailable+0x52>
 23fe7ba:	480c      	ldr	r0, [pc, #48]	; (23fe7ec <pinAvailable+0x78>)
 23fe7bc:	f7ff fcaa 	bl	23fe114 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe7c0:	4628      	mov	r0, r5
 23fe7c2:	f7fb fe70 	bl	23fa4a6 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe7c6:	4b09      	ldr	r3, [pc, #36]	; (23fe7ec <pinAvailable+0x78>)
 23fe7c8:	7818      	ldrb	r0, [r3, #0]
 23fe7ca:	f7fd fd91 	bl	23fc2f0 <hal_spi_is_enabled>
 23fe7ce:	2800      	cmp	r0, #0
 23fe7d0:	d1d4      	bne.n	23fe77c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe7d2:	3c08      	subs	r4, #8
 23fe7d4:	2c01      	cmp	r4, #1
 23fe7d6:	d805      	bhi.n	23fe7e4 <pinAvailable+0x70>
 23fe7d8:	f000 f8a4 	bl	23fe924 <_Z22__fetch_global_Serial1v>
 23fe7dc:	7c00      	ldrb	r0, [r0, #16]
 23fe7de:	f7fd fe3d 	bl	23fc45c <hal_usart_is_enabled>
 23fe7e2:	e7da      	b.n	23fe79a <pinAvailable+0x26>
  return true; // 'pin' is available
 23fe7e4:	2001      	movs	r0, #1
 23fe7e6:	e7ca      	b.n	23fe77e <pinAvailable+0xa>
 23fe7e8:	1007ae4c 	.word	0x1007ae4c
 23fe7ec:	1007ae50 	.word	0x1007ae50

023fe7f0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe7f0:	281b      	cmp	r0, #27
{
 23fe7f2:	b538      	push	{r3, r4, r5, lr}
 23fe7f4:	4604      	mov	r4, r0
 23fe7f6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe7f8:	d80a      	bhi.n	23fe810 <pinMode+0x20>
 23fe7fa:	29ff      	cmp	r1, #255	; 0xff
 23fe7fc:	d008      	beq.n	23fe810 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fe7fe:	f7ff ffb9 	bl	23fe774 <pinAvailable>
 23fe802:	b128      	cbz	r0, 23fe810 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fe804:	4629      	mov	r1, r5
 23fe806:	4620      	mov	r0, r4
}
 23fe808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fe80c:	f7fd bc66 	b.w	23fc0dc <hal_gpio_mode>
}
 23fe810:	bd38      	pop	{r3, r4, r5, pc}

023fe812 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fe812:	b538      	push	{r3, r4, r5, lr}
 23fe814:	4604      	mov	r4, r0
 23fe816:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fe818:	f7fd fc6e 	bl	23fc0f8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fe81c:	28ff      	cmp	r0, #255	; 0xff
 23fe81e:	d010      	beq.n	23fe842 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fe820:	2806      	cmp	r0, #6
 23fe822:	d804      	bhi.n	23fe82e <digitalWrite+0x1c>
 23fe824:	234d      	movs	r3, #77	; 0x4d
 23fe826:	fa23 f000 	lsr.w	r0, r3, r0
 23fe82a:	07c3      	lsls	r3, r0, #31
 23fe82c:	d409      	bmi.n	23fe842 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fe82e:	4620      	mov	r0, r4
 23fe830:	f7ff ffa0 	bl	23fe774 <pinAvailable>
 23fe834:	b128      	cbz	r0, 23fe842 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fe836:	4629      	mov	r1, r5
 23fe838:	4620      	mov	r0, r4
}
 23fe83a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fe83e:	f7fd bc69 	b.w	23fc114 <hal_gpio_write>
}
 23fe842:	bd38      	pop	{r3, r4, r5, pc}

023fe844 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe844:	4770      	bx	lr
	...

023fe848 <_Z17acquireWireBufferv>:
{
 23fe848:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fe84a:	4b0a      	ldr	r3, [pc, #40]	; (23fe874 <_Z17acquireWireBufferv+0x2c>)
{
 23fe84c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fe84e:	6003      	str	r3, [r0, #0]
 23fe850:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe852:	4909      	ldr	r1, [pc, #36]	; (23fe878 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fe854:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe856:	2020      	movs	r0, #32
 23fe858:	f000 f8f6 	bl	23fea48 <_ZnajRKSt9nothrow_t>
	};
 23fe85c:	2520      	movs	r5, #32
 23fe85e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe860:	4905      	ldr	r1, [pc, #20]	; (23fe878 <_Z17acquireWireBufferv+0x30>)
 23fe862:	4628      	mov	r0, r5
	};
 23fe864:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe866:	f000 f8ef 	bl	23fea48 <_ZnajRKSt9nothrow_t>
	};
 23fe86a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fe86e:	4620      	mov	r0, r4
 23fe870:	bd38      	pop	{r3, r4, r5, pc}
 23fe872:	bf00      	nop
 23fe874:	00010018 	.word	0x00010018
 23fe878:	023ffe5c 	.word	0x023ffe5c

023fe87c <_Z19__fetch_global_Wirev>:
{
 23fe87c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe87e:	4d0e      	ldr	r5, [pc, #56]	; (23fe8b8 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fe880:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe882:	e8d5 1f8f 	ldab	r1, [r5]
 23fe886:	f011 0401 	ands.w	r4, r1, #1
 23fe88a:	d111      	bne.n	23fe8b0 <_Z19__fetch_global_Wirev+0x34>
 23fe88c:	4628      	mov	r0, r5
 23fe88e:	f7fb fe05 	bl	23fa49c <__cxa_guard_acquire>
 23fe892:	b168      	cbz	r0, 23fe8b0 <_Z19__fetch_global_Wirev+0x34>
 23fe894:	4668      	mov	r0, sp
 23fe896:	f7ff ffd7 	bl	23fe848 <_Z17acquireWireBufferv>
 23fe89a:	466a      	mov	r2, sp
 23fe89c:	4621      	mov	r1, r4
 23fe89e:	4807      	ldr	r0, [pc, #28]	; (23fe8bc <_Z19__fetch_global_Wirev+0x40>)
 23fe8a0:	f7fe f8da 	bl	23fca58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fe8a4:	4628      	mov	r0, r5
 23fe8a6:	f7fb fdfe 	bl	23fa4a6 <__cxa_guard_release>
 23fe8aa:	4805      	ldr	r0, [pc, #20]	; (23fe8c0 <_Z19__fetch_global_Wirev+0x44>)
 23fe8ac:	f000 f8ce 	bl	23fea4c <atexit>
	return wire;
}
 23fe8b0:	4802      	ldr	r0, [pc, #8]	; (23fe8bc <_Z19__fetch_global_Wirev+0x40>)
 23fe8b2:	b007      	add	sp, #28
 23fe8b4:	bd30      	pop	{r4, r5, pc}
 23fe8b6:	bf00      	nop
 23fe8b8:	1007aef4 	.word	0x1007aef4
 23fe8bc:	1007aef8 	.word	0x1007aef8
 23fe8c0:	023fe845 	.word	0x023fe845

023fe8c4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe8c4:	4770      	bx	lr
	...

023fe8c8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe8c8:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fe8ca:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe8cc:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fe8ce:	462a      	mov	r2, r5
 23fe8d0:	2100      	movs	r1, #0
 23fe8d2:	f000 f8f0 	bl	23feab6 <memset>
 23fe8d6:	8025      	strh	r5, [r4, #0]
 23fe8d8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe8da:	4907      	ldr	r1, [pc, #28]	; (23fe8f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fe8dc:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fe8de:	8125      	strh	r5, [r4, #8]
 23fe8e0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe8e2:	f000 f8b1 	bl	23fea48 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe8e6:	4904      	ldr	r1, [pc, #16]	; (23fe8f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fe8e8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe8ea:	4628      	mov	r0, r5
 23fe8ec:	f000 f8ac 	bl	23fea48 <_ZnajRKSt9nothrow_t>
    };
 23fe8f0:	60e0      	str	r0, [r4, #12]
}
 23fe8f2:	4620      	mov	r0, r4
 23fe8f4:	bd38      	pop	{r3, r4, r5, pc}
 23fe8f6:	bf00      	nop
 23fe8f8:	023ffe5c 	.word	0x023ffe5c

023fe8fc <__tcf_2>:
 23fe8fc:	4770      	bx	lr

023fe8fe <__tcf_1>:
 23fe8fe:	4770      	bx	lr

023fe900 <_Z20acquireSerial1Bufferv>:
{
 23fe900:	b510      	push	{r4, lr}
 23fe902:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fe904:	f7ff ffe0 	bl	23fe8c8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fe908:	4620      	mov	r0, r4
 23fe90a:	bd10      	pop	{r4, pc}

023fe90c <_Z20acquireSerial2Bufferv>:
 23fe90c:	b510      	push	{r4, lr}
 23fe90e:	4604      	mov	r4, r0
 23fe910:	f7ff ffda 	bl	23fe8c8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe914:	4620      	mov	r0, r4
 23fe916:	bd10      	pop	{r4, pc}

023fe918 <_Z20acquireSerial3Bufferv>:
 23fe918:	b510      	push	{r4, lr}
 23fe91a:	4604      	mov	r4, r0
 23fe91c:	f7ff ffd4 	bl	23fe8c8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe920:	4620      	mov	r0, r4
 23fe922:	bd10      	pop	{r4, pc}

023fe924 <_Z22__fetch_global_Serial1v>:
{
 23fe924:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe926:	4d0e      	ldr	r5, [pc, #56]	; (23fe960 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe928:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe92a:	e8d5 1f8f 	ldab	r1, [r5]
 23fe92e:	f011 0401 	ands.w	r4, r1, #1
 23fe932:	d111      	bne.n	23fe958 <_Z22__fetch_global_Serial1v+0x34>
 23fe934:	4628      	mov	r0, r5
 23fe936:	f7fb fdb1 	bl	23fa49c <__cxa_guard_acquire>
 23fe93a:	b168      	cbz	r0, 23fe958 <_Z22__fetch_global_Serial1v+0x34>
 23fe93c:	a801      	add	r0, sp, #4
 23fe93e:	f7ff ffdf 	bl	23fe900 <_Z20acquireSerial1Bufferv>
 23fe942:	4621      	mov	r1, r4
 23fe944:	aa01      	add	r2, sp, #4
 23fe946:	4807      	ldr	r0, [pc, #28]	; (23fe964 <_Z22__fetch_global_Serial1v+0x40>)
 23fe948:	f7ff fd86 	bl	23fe458 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe94c:	4628      	mov	r0, r5
 23fe94e:	f7fb fdaa 	bl	23fa4a6 <__cxa_guard_release>
 23fe952:	4805      	ldr	r0, [pc, #20]	; (23fe968 <_Z22__fetch_global_Serial1v+0x44>)
 23fe954:	f000 f87a 	bl	23fea4c <atexit>
    return serial1;
}
 23fe958:	4802      	ldr	r0, [pc, #8]	; (23fe964 <_Z22__fetch_global_Serial1v+0x40>)
 23fe95a:	b007      	add	sp, #28
 23fe95c:	bd30      	pop	{r4, r5, pc}
 23fe95e:	bf00      	nop
 23fe960:	1007af0c 	.word	0x1007af0c
 23fe964:	1007af18 	.word	0x1007af18
 23fe968:	023fe8c5 	.word	0x023fe8c5

023fe96c <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe96c:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe96e:	4c0d      	ldr	r4, [pc, #52]	; (23fe9a4 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe970:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe972:	e8d4 3f8f 	ldab	r3, [r4]
 23fe976:	07db      	lsls	r3, r3, #31
 23fe978:	d411      	bmi.n	23fe99e <_Z22__fetch_global_Serial2v+0x32>
 23fe97a:	4620      	mov	r0, r4
 23fe97c:	f7fb fd8e 	bl	23fa49c <__cxa_guard_acquire>
 23fe980:	b168      	cbz	r0, 23fe99e <_Z22__fetch_global_Serial2v+0x32>
 23fe982:	a801      	add	r0, sp, #4
 23fe984:	f7ff ffc2 	bl	23fe90c <_Z20acquireSerial2Bufferv>
 23fe988:	2101      	movs	r1, #1
 23fe98a:	aa01      	add	r2, sp, #4
 23fe98c:	4806      	ldr	r0, [pc, #24]	; (23fe9a8 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe98e:	f7ff fd63 	bl	23fe458 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe992:	4620      	mov	r0, r4
 23fe994:	f7fb fd87 	bl	23fa4a6 <__cxa_guard_release>
 23fe998:	4804      	ldr	r0, [pc, #16]	; (23fe9ac <_Z22__fetch_global_Serial2v+0x40>)
 23fe99a:	f000 f857 	bl	23fea4c <atexit>
	return serial2;
}
 23fe99e:	4802      	ldr	r0, [pc, #8]	; (23fe9a8 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe9a0:	b006      	add	sp, #24
 23fe9a2:	bd10      	pop	{r4, pc}
 23fe9a4:	1007af10 	.word	0x1007af10
 23fe9a8:	1007af2c 	.word	0x1007af2c
 23fe9ac:	023fe8ff 	.word	0x023fe8ff

023fe9b0 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe9b0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe9b2:	f7ff ffdb 	bl	23fe96c <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe9b6:	4b07      	ldr	r3, [pc, #28]	; (23fe9d4 <_Z15serialEventRun2v+0x24>)
 23fe9b8:	4604      	mov	r4, r0
 23fe9ba:	b153      	cbz	r3, 23fe9d2 <_Z15serialEventRun2v+0x22>
 23fe9bc:	f7ff fd6a 	bl	23fe494 <_ZN11USARTSerial9isEnabledEv>
 23fe9c0:	b138      	cbz	r0, 23fe9d2 <_Z15serialEventRun2v+0x22>
 23fe9c2:	6823      	ldr	r3, [r4, #0]
 23fe9c4:	4620      	mov	r0, r4
 23fe9c6:	691b      	ldr	r3, [r3, #16]
 23fe9c8:	4798      	blx	r3
 23fe9ca:	2800      	cmp	r0, #0
 23fe9cc:	dd01      	ble.n	23fe9d2 <_Z15serialEventRun2v+0x22>
        handler();
 23fe9ce:	e000      	b.n	23fe9d2 <_Z15serialEventRun2v+0x22>
 23fe9d0:	bf00      	nop
}
 23fe9d2:	bd10      	pop	{r4, pc}
 23fe9d4:	00000000 	.word	0x00000000

023fe9d8 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe9d8:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe9da:	4c0d      	ldr	r4, [pc, #52]	; (23fea10 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe9dc:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe9de:	e8d4 3f8f 	ldab	r3, [r4]
 23fe9e2:	07db      	lsls	r3, r3, #31
 23fe9e4:	d411      	bmi.n	23fea0a <_Z22__fetch_global_Serial3v+0x32>
 23fe9e6:	4620      	mov	r0, r4
 23fe9e8:	f7fb fd58 	bl	23fa49c <__cxa_guard_acquire>
 23fe9ec:	b168      	cbz	r0, 23fea0a <_Z22__fetch_global_Serial3v+0x32>
 23fe9ee:	a801      	add	r0, sp, #4
 23fe9f0:	f7ff ff92 	bl	23fe918 <_Z20acquireSerial3Bufferv>
 23fe9f4:	2102      	movs	r1, #2
 23fe9f6:	aa01      	add	r2, sp, #4
 23fe9f8:	4806      	ldr	r0, [pc, #24]	; (23fea14 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe9fa:	f7ff fd2d 	bl	23fe458 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe9fe:	4620      	mov	r0, r4
 23fea00:	f7fb fd51 	bl	23fa4a6 <__cxa_guard_release>
 23fea04:	4804      	ldr	r0, [pc, #16]	; (23fea18 <_Z22__fetch_global_Serial3v+0x40>)
 23fea06:	f000 f821 	bl	23fea4c <atexit>
	return serial3;
}
 23fea0a:	4802      	ldr	r0, [pc, #8]	; (23fea14 <_Z22__fetch_global_Serial3v+0x3c>)
 23fea0c:	b006      	add	sp, #24
 23fea0e:	bd10      	pop	{r4, pc}
 23fea10:	1007af14 	.word	0x1007af14
 23fea14:	1007af40 	.word	0x1007af40
 23fea18:	023fe8fd 	.word	0x023fe8fd

023fea1c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fea1c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fea1e:	f7ff ffdb 	bl	23fe9d8 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fea22:	4b07      	ldr	r3, [pc, #28]	; (23fea40 <_Z15serialEventRun3v+0x24>)
 23fea24:	4604      	mov	r4, r0
 23fea26:	b153      	cbz	r3, 23fea3e <_Z15serialEventRun3v+0x22>
 23fea28:	f7ff fd34 	bl	23fe494 <_ZN11USARTSerial9isEnabledEv>
 23fea2c:	b138      	cbz	r0, 23fea3e <_Z15serialEventRun3v+0x22>
 23fea2e:	6823      	ldr	r3, [r4, #0]
 23fea30:	4620      	mov	r0, r4
 23fea32:	691b      	ldr	r3, [r3, #16]
 23fea34:	4798      	blx	r3
 23fea36:	2800      	cmp	r0, #0
 23fea38:	dd01      	ble.n	23fea3e <_Z15serialEventRun3v+0x22>
        handler();
 23fea3a:	e000      	b.n	23fea3e <_Z15serialEventRun3v+0x22>
 23fea3c:	bf00      	nop
}
 23fea3e:	bd10      	pop	{r4, pc}
 23fea40:	00000000 	.word	0x00000000

023fea44 <_ZnwjRKSt9nothrow_t>:
 23fea44:	f7fb bd17 	b.w	23fa476 <_Znwj>

023fea48 <_ZnajRKSt9nothrow_t>:
 23fea48:	f7fb bd17 	b.w	23fa47a <_Znaj>

023fea4c <atexit>:
 23fea4c:	2300      	movs	r3, #0
 23fea4e:	4601      	mov	r1, r0
 23fea50:	461a      	mov	r2, r3
 23fea52:	4618      	mov	r0, r3
 23fea54:	f000 b93a 	b.w	23feccc <__register_exitproc>

023fea58 <isprint>:
 23fea58:	4b02      	ldr	r3, [pc, #8]	; (23fea64 <isprint+0xc>)
 23fea5a:	4418      	add	r0, r3
 23fea5c:	7840      	ldrb	r0, [r0, #1]
 23fea5e:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fea62:	4770      	bx	lr
 23fea64:	023ffecd 	.word	0x023ffecd

023fea68 <memcpy>:
 23fea68:	440a      	add	r2, r1
 23fea6a:	1e43      	subs	r3, r0, #1
 23fea6c:	4291      	cmp	r1, r2
 23fea6e:	d100      	bne.n	23fea72 <memcpy+0xa>
 23fea70:	4770      	bx	lr
 23fea72:	b510      	push	{r4, lr}
 23fea74:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fea78:	4291      	cmp	r1, r2
 23fea7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fea7e:	d1f9      	bne.n	23fea74 <memcpy+0xc>
 23fea80:	bd10      	pop	{r4, pc}

023fea82 <memmove>:
 23fea82:	4288      	cmp	r0, r1
 23fea84:	b510      	push	{r4, lr}
 23fea86:	eb01 0402 	add.w	r4, r1, r2
 23fea8a:	d902      	bls.n	23fea92 <memmove+0x10>
 23fea8c:	4284      	cmp	r4, r0
 23fea8e:	4623      	mov	r3, r4
 23fea90:	d807      	bhi.n	23feaa2 <memmove+0x20>
 23fea92:	1e43      	subs	r3, r0, #1
 23fea94:	42a1      	cmp	r1, r4
 23fea96:	d008      	beq.n	23feaaa <memmove+0x28>
 23fea98:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fea9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 23feaa0:	e7f8      	b.n	23fea94 <memmove+0x12>
 23feaa2:	4402      	add	r2, r0
 23feaa4:	4601      	mov	r1, r0
 23feaa6:	428a      	cmp	r2, r1
 23feaa8:	d100      	bne.n	23feaac <memmove+0x2a>
 23feaaa:	bd10      	pop	{r4, pc}
 23feaac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23feab0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23feab4:	e7f7      	b.n	23feaa6 <memmove+0x24>

023feab6 <memset>:
 23feab6:	4402      	add	r2, r0
 23feab8:	4603      	mov	r3, r0
 23feaba:	4293      	cmp	r3, r2
 23feabc:	d100      	bne.n	23feac0 <memset+0xa>
 23feabe:	4770      	bx	lr
 23feac0:	f803 1b01 	strb.w	r1, [r3], #1
 23feac4:	e7f9      	b.n	23feaba <memset+0x4>
	...

023feac8 <srand>:
 23feac8:	b538      	push	{r3, r4, r5, lr}
 23feaca:	4b10      	ldr	r3, [pc, #64]	; (23feb0c <srand+0x44>)
 23feacc:	4604      	mov	r4, r0
 23feace:	681d      	ldr	r5, [r3, #0]
 23fead0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fead2:	b9b3      	cbnz	r3, 23feb02 <srand+0x3a>
 23fead4:	2018      	movs	r0, #24
 23fead6:	f7fd feab 	bl	23fc830 <malloc>
 23feada:	4602      	mov	r2, r0
 23feadc:	63a8      	str	r0, [r5, #56]	; 0x38
 23feade:	b920      	cbnz	r0, 23feaea <srand+0x22>
 23feae0:	4b0b      	ldr	r3, [pc, #44]	; (23feb10 <srand+0x48>)
 23feae2:	2142      	movs	r1, #66	; 0x42
 23feae4:	480b      	ldr	r0, [pc, #44]	; (23feb14 <srand+0x4c>)
 23feae6:	f7fd fee9 	bl	23fc8bc <__assert_func>
 23feaea:	490b      	ldr	r1, [pc, #44]	; (23feb18 <srand+0x50>)
 23feaec:	4b0b      	ldr	r3, [pc, #44]	; (23feb1c <srand+0x54>)
 23feaee:	e9c0 1300 	strd	r1, r3, [r0]
 23feaf2:	4b0b      	ldr	r3, [pc, #44]	; (23feb20 <srand+0x58>)
 23feaf4:	2100      	movs	r1, #0
 23feaf6:	6083      	str	r3, [r0, #8]
 23feaf8:	230b      	movs	r3, #11
 23feafa:	8183      	strh	r3, [r0, #12]
 23feafc:	2001      	movs	r0, #1
 23feafe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23feb02:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23feb04:	2200      	movs	r2, #0
 23feb06:	611c      	str	r4, [r3, #16]
 23feb08:	615a      	str	r2, [r3, #20]
 23feb0a:	bd38      	pop	{r3, r4, r5, pc}
 23feb0c:	1007acc0 	.word	0x1007acc0
 23feb10:	023ffe5d 	.word	0x023ffe5d
 23feb14:	023ffe74 	.word	0x023ffe74
 23feb18:	abcd330e 	.word	0xabcd330e
 23feb1c:	e66d1234 	.word	0xe66d1234
 23feb20:	0005deec 	.word	0x0005deec

023feb24 <strchr>:
 23feb24:	b2c9      	uxtb	r1, r1
 23feb26:	4603      	mov	r3, r0
 23feb28:	f810 2b01 	ldrb.w	r2, [r0], #1
 23feb2c:	b11a      	cbz	r2, 23feb36 <strchr+0x12>
 23feb2e:	428a      	cmp	r2, r1
 23feb30:	d1f9      	bne.n	23feb26 <strchr+0x2>
 23feb32:	4618      	mov	r0, r3
 23feb34:	4770      	bx	lr
 23feb36:	2900      	cmp	r1, #0
 23feb38:	bf18      	it	ne
 23feb3a:	2300      	movne	r3, #0
 23feb3c:	e7f9      	b.n	23feb32 <strchr+0xe>

023feb3e <strchrnul>:
 23feb3e:	b510      	push	{r4, lr}
 23feb40:	4604      	mov	r4, r0
 23feb42:	f7ff ffef 	bl	23feb24 <strchr>
 23feb46:	b918      	cbnz	r0, 23feb50 <strchrnul+0x12>
 23feb48:	4620      	mov	r0, r4
 23feb4a:	f7fb fc6f 	bl	23fa42c <strlen>
 23feb4e:	4420      	add	r0, r4
 23feb50:	bd10      	pop	{r4, pc}

023feb52 <strcpy>:
 23feb52:	4603      	mov	r3, r0
 23feb54:	f811 2b01 	ldrb.w	r2, [r1], #1
 23feb58:	f803 2b01 	strb.w	r2, [r3], #1
 23feb5c:	2a00      	cmp	r2, #0
 23feb5e:	d1f9      	bne.n	23feb54 <strcpy+0x2>
 23feb60:	4770      	bx	lr

023feb62 <strncmp>:
 23feb62:	b510      	push	{r4, lr}
 23feb64:	b17a      	cbz	r2, 23feb86 <strncmp+0x24>
 23feb66:	4603      	mov	r3, r0
 23feb68:	3901      	subs	r1, #1
 23feb6a:	1884      	adds	r4, r0, r2
 23feb6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23feb70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23feb74:	4290      	cmp	r0, r2
 23feb76:	d101      	bne.n	23feb7c <strncmp+0x1a>
 23feb78:	42a3      	cmp	r3, r4
 23feb7a:	d101      	bne.n	23feb80 <strncmp+0x1e>
 23feb7c:	1a80      	subs	r0, r0, r2
 23feb7e:	bd10      	pop	{r4, pc}
 23feb80:	2800      	cmp	r0, #0
 23feb82:	d1f3      	bne.n	23feb6c <strncmp+0xa>
 23feb84:	e7fa      	b.n	23feb7c <strncmp+0x1a>
 23feb86:	4610      	mov	r0, r2
 23feb88:	e7f9      	b.n	23feb7e <strncmp+0x1c>

023feb8a <strrchr>:
 23feb8a:	b538      	push	{r3, r4, r5, lr}
 23feb8c:	4603      	mov	r3, r0
 23feb8e:	460c      	mov	r4, r1
 23feb90:	b969      	cbnz	r1, 23febae <strrchr+0x24>
 23feb92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23feb96:	f7ff bfc5 	b.w	23feb24 <strchr>
 23feb9a:	1c43      	adds	r3, r0, #1
 23feb9c:	4605      	mov	r5, r0
 23feb9e:	4621      	mov	r1, r4
 23feba0:	4618      	mov	r0, r3
 23feba2:	f7ff ffbf 	bl	23feb24 <strchr>
 23feba6:	2800      	cmp	r0, #0
 23feba8:	d1f7      	bne.n	23feb9a <strrchr+0x10>
 23febaa:	4628      	mov	r0, r5
 23febac:	bd38      	pop	{r3, r4, r5, pc}
 23febae:	2500      	movs	r5, #0
 23febb0:	e7f5      	b.n	23feb9e <strrchr+0x14>
	...

023febb4 <_strtol_l.constprop.0>:
 23febb4:	2b01      	cmp	r3, #1
 23febb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23febba:	d001      	beq.n	23febc0 <_strtol_l.constprop.0+0xc>
 23febbc:	2b24      	cmp	r3, #36	; 0x24
 23febbe:	d906      	bls.n	23febce <_strtol_l.constprop.0+0x1a>
 23febc0:	f7fd fe6e 	bl	23fc8a0 <__errno>
 23febc4:	2316      	movs	r3, #22
 23febc6:	6003      	str	r3, [r0, #0]
 23febc8:	2000      	movs	r0, #0
 23febca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23febce:	460d      	mov	r5, r1
 23febd0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fecb4 <_strtol_l.constprop.0+0x100>
 23febd4:	462e      	mov	r6, r5
 23febd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 23febda:	f814 700c 	ldrb.w	r7, [r4, ip]
 23febde:	f017 0708 	ands.w	r7, r7, #8
 23febe2:	d1f7      	bne.n	23febd4 <_strtol_l.constprop.0+0x20>
 23febe4:	2c2d      	cmp	r4, #45	; 0x2d
 23febe6:	d132      	bne.n	23fec4e <_strtol_l.constprop.0+0x9a>
 23febe8:	782c      	ldrb	r4, [r5, #0]
 23febea:	2701      	movs	r7, #1
 23febec:	1cb5      	adds	r5, r6, #2
 23febee:	2b00      	cmp	r3, #0
 23febf0:	d05b      	beq.n	23fecaa <_strtol_l.constprop.0+0xf6>
 23febf2:	2b10      	cmp	r3, #16
 23febf4:	d109      	bne.n	23fec0a <_strtol_l.constprop.0+0x56>
 23febf6:	2c30      	cmp	r4, #48	; 0x30
 23febf8:	d107      	bne.n	23fec0a <_strtol_l.constprop.0+0x56>
 23febfa:	782c      	ldrb	r4, [r5, #0]
 23febfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fec00:	2c58      	cmp	r4, #88	; 0x58
 23fec02:	d14d      	bne.n	23feca0 <_strtol_l.constprop.0+0xec>
 23fec04:	786c      	ldrb	r4, [r5, #1]
 23fec06:	2310      	movs	r3, #16
 23fec08:	3502      	adds	r5, #2
 23fec0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fec0e:	f04f 0c00 	mov.w	ip, #0
 23fec12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fec16:	4666      	mov	r6, ip
 23fec18:	fbb8 f9f3 	udiv	r9, r8, r3
 23fec1c:	fb03 8a19 	mls	sl, r3, r9, r8
 23fec20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fec24:	f1be 0f09 	cmp.w	lr, #9
 23fec28:	d816      	bhi.n	23fec58 <_strtol_l.constprop.0+0xa4>
 23fec2a:	4674      	mov	r4, lr
 23fec2c:	42a3      	cmp	r3, r4
 23fec2e:	dd24      	ble.n	23fec7a <_strtol_l.constprop.0+0xc6>
 23fec30:	f1bc 0f00 	cmp.w	ip, #0
 23fec34:	db1e      	blt.n	23fec74 <_strtol_l.constprop.0+0xc0>
 23fec36:	45b1      	cmp	r9, r6
 23fec38:	d31c      	bcc.n	23fec74 <_strtol_l.constprop.0+0xc0>
 23fec3a:	d101      	bne.n	23fec40 <_strtol_l.constprop.0+0x8c>
 23fec3c:	45a2      	cmp	sl, r4
 23fec3e:	db19      	blt.n	23fec74 <_strtol_l.constprop.0+0xc0>
 23fec40:	fb06 4603 	mla	r6, r6, r3, r4
 23fec44:	f04f 0c01 	mov.w	ip, #1
 23fec48:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fec4c:	e7e8      	b.n	23fec20 <_strtol_l.constprop.0+0x6c>
 23fec4e:	2c2b      	cmp	r4, #43	; 0x2b
 23fec50:	bf04      	itt	eq
 23fec52:	782c      	ldrbeq	r4, [r5, #0]
 23fec54:	1cb5      	addeq	r5, r6, #2
 23fec56:	e7ca      	b.n	23febee <_strtol_l.constprop.0+0x3a>
 23fec58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fec5c:	f1be 0f19 	cmp.w	lr, #25
 23fec60:	d801      	bhi.n	23fec66 <_strtol_l.constprop.0+0xb2>
 23fec62:	3c37      	subs	r4, #55	; 0x37
 23fec64:	e7e2      	b.n	23fec2c <_strtol_l.constprop.0+0x78>
 23fec66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fec6a:	f1be 0f19 	cmp.w	lr, #25
 23fec6e:	d804      	bhi.n	23fec7a <_strtol_l.constprop.0+0xc6>
 23fec70:	3c57      	subs	r4, #87	; 0x57
 23fec72:	e7db      	b.n	23fec2c <_strtol_l.constprop.0+0x78>
 23fec74:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fec78:	e7e6      	b.n	23fec48 <_strtol_l.constprop.0+0x94>
 23fec7a:	f1bc 0f00 	cmp.w	ip, #0
 23fec7e:	da05      	bge.n	23fec8c <_strtol_l.constprop.0+0xd8>
 23fec80:	2322      	movs	r3, #34	; 0x22
 23fec82:	4646      	mov	r6, r8
 23fec84:	6003      	str	r3, [r0, #0]
 23fec86:	b942      	cbnz	r2, 23fec9a <_strtol_l.constprop.0+0xe6>
 23fec88:	4630      	mov	r0, r6
 23fec8a:	e79e      	b.n	23febca <_strtol_l.constprop.0+0x16>
 23fec8c:	b107      	cbz	r7, 23fec90 <_strtol_l.constprop.0+0xdc>
 23fec8e:	4276      	negs	r6, r6
 23fec90:	2a00      	cmp	r2, #0
 23fec92:	d0f9      	beq.n	23fec88 <_strtol_l.constprop.0+0xd4>
 23fec94:	f1bc 0f00 	cmp.w	ip, #0
 23fec98:	d000      	beq.n	23fec9c <_strtol_l.constprop.0+0xe8>
 23fec9a:	1e69      	subs	r1, r5, #1
 23fec9c:	6011      	str	r1, [r2, #0]
 23fec9e:	e7f3      	b.n	23fec88 <_strtol_l.constprop.0+0xd4>
 23feca0:	2430      	movs	r4, #48	; 0x30
 23feca2:	2b00      	cmp	r3, #0
 23feca4:	d1b1      	bne.n	23fec0a <_strtol_l.constprop.0+0x56>
 23feca6:	2308      	movs	r3, #8
 23feca8:	e7af      	b.n	23fec0a <_strtol_l.constprop.0+0x56>
 23fecaa:	2c30      	cmp	r4, #48	; 0x30
 23fecac:	d0a5      	beq.n	23febfa <_strtol_l.constprop.0+0x46>
 23fecae:	230a      	movs	r3, #10
 23fecb0:	e7ab      	b.n	23fec0a <_strtol_l.constprop.0+0x56>
 23fecb2:	bf00      	nop
 23fecb4:	023ffece 	.word	0x023ffece

023fecb8 <strtol>:
 23fecb8:	4613      	mov	r3, r2
 23fecba:	460a      	mov	r2, r1
 23fecbc:	4601      	mov	r1, r0
 23fecbe:	4802      	ldr	r0, [pc, #8]	; (23fecc8 <strtol+0x10>)
 23fecc0:	6800      	ldr	r0, [r0, #0]
 23fecc2:	f7ff bf77 	b.w	23febb4 <_strtol_l.constprop.0>
 23fecc6:	bf00      	nop
 23fecc8:	1007acc0 	.word	0x1007acc0

023feccc <__register_exitproc>:
 23feccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fecd0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fed90 <__register_exitproc+0xc4>
 23fecd4:	4606      	mov	r6, r0
 23fecd6:	461f      	mov	r7, r3
 23fecd8:	460d      	mov	r5, r1
 23fecda:	f8d8 0000 	ldr.w	r0, [r8]
 23fecde:	4691      	mov	r9, r2
 23fece0:	f000 f858 	bl	23fed94 <__retarget_lock_acquire_recursive>
 23fece4:	4b26      	ldr	r3, [pc, #152]	; (23fed80 <__register_exitproc+0xb4>)
 23fece6:	681c      	ldr	r4, [r3, #0]
 23fece8:	b934      	cbnz	r4, 23fecf8 <__register_exitproc+0x2c>
 23fecea:	4c26      	ldr	r4, [pc, #152]	; (23fed84 <__register_exitproc+0xb8>)
 23fecec:	601c      	str	r4, [r3, #0]
 23fecee:	4b26      	ldr	r3, [pc, #152]	; (23fed88 <__register_exitproc+0xbc>)
 23fecf0:	b113      	cbz	r3, 23fecf8 <__register_exitproc+0x2c>
 23fecf2:	681b      	ldr	r3, [r3, #0]
 23fecf4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fecf8:	6863      	ldr	r3, [r4, #4]
 23fecfa:	2b1f      	cmp	r3, #31
 23fecfc:	dd07      	ble.n	23fed0e <__register_exitproc+0x42>
 23fecfe:	f8d8 0000 	ldr.w	r0, [r8]
 23fed02:	f000 f849 	bl	23fed98 <__retarget_lock_release_recursive>
 23fed06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fed0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fed0e:	b35e      	cbz	r6, 23fed68 <__register_exitproc+0x9c>
 23fed10:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fed14:	b988      	cbnz	r0, 23fed3a <__register_exitproc+0x6e>
 23fed16:	4b1d      	ldr	r3, [pc, #116]	; (23fed8c <__register_exitproc+0xc0>)
 23fed18:	b923      	cbnz	r3, 23fed24 <__register_exitproc+0x58>
 23fed1a:	f8d8 0000 	ldr.w	r0, [r8]
 23fed1e:	f000 f83a 	bl	23fed96 <__retarget_lock_release>
 23fed22:	e7f0      	b.n	23fed06 <__register_exitproc+0x3a>
 23fed24:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fed28:	f7fd fd82 	bl	23fc830 <malloc>
 23fed2c:	2800      	cmp	r0, #0
 23fed2e:	d0f4      	beq.n	23fed1a <__register_exitproc+0x4e>
 23fed30:	2300      	movs	r3, #0
 23fed32:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fed36:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fed3a:	6863      	ldr	r3, [r4, #4]
 23fed3c:	2201      	movs	r2, #1
 23fed3e:	2e02      	cmp	r6, #2
 23fed40:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fed44:	fa02 f203 	lsl.w	r2, r2, r3
 23fed48:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fed4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fed50:	ea43 0302 	orr.w	r3, r3, r2
 23fed54:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fed58:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fed5c:	bf02      	ittt	eq
 23fed5e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fed62:	4313      	orreq	r3, r2
 23fed64:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fed68:	6863      	ldr	r3, [r4, #4]
 23fed6a:	f8d8 0000 	ldr.w	r0, [r8]
 23fed6e:	1c5a      	adds	r2, r3, #1
 23fed70:	3302      	adds	r3, #2
 23fed72:	6062      	str	r2, [r4, #4]
 23fed74:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fed78:	f000 f80e 	bl	23fed98 <__retarget_lock_release_recursive>
 23fed7c:	2000      	movs	r0, #0
 23fed7e:	e7c4      	b.n	23fed0a <__register_exitproc+0x3e>
 23fed80:	1007afe0 	.word	0x1007afe0
 23fed84:	1007af54 	.word	0x1007af54
 23fed88:	00000000 	.word	0x00000000
 23fed8c:	023fc831 	.word	0x023fc831
 23fed90:	1007ad24 	.word	0x1007ad24

023fed94 <__retarget_lock_acquire_recursive>:
 23fed94:	4770      	bx	lr

023fed96 <__retarget_lock_release>:
 23fed96:	4770      	bx	lr

023fed98 <__retarget_lock_release_recursive>:
 23fed98:	4770      	bx	lr
	...

023fed9c <dynalib_user>:
 23fed9c:	a43d 023f a465 023f a469 023f 0000 0000     =.?.e.?.i.?.....
 23fedac:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23fedbc:	7574 6c61 4f00 454c 2044 6546 7461 6568     tual.OLED Feathe
 23fedcc:	5772 6e69 2067 6574 7473 4f00 004e 464f     rWing test.ON.OF
 23feddc:	0046 6843 6e61 6567 4220 656c 646e 7265     F.Change Blender
 23fedec:	7320 6174 6574 203a 7325 0000                state: %s..

023fedf8 <_ZTVN5spark10LogHandlerE>:
	...
 23fee08:	a485 023f a4ad 023f                         ..?...?.

023fee10 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fee18:	a4b1 023f a4e5 023f db85 023f dd2d 023f     ..?...?...?.-.?.

023fee28 <_ZL4font>:
 23fee28:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23fee38:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23fee48:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23fee58:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23fee68:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23fee78:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23fee88:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23fee98:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23feea8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23feeb8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23feec8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23feed8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23feee8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23feef8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23fef08:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23fef18:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23fef28:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23fef38:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23fef48:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23fef58:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23fef68:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23fef78:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23fef88:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23fef98:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23fefa8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23fefb8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23fefc8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23fefd8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23fefe8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23feff8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff008:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff018:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff028:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff038:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff048:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff058:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff068:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff078:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff088:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff098:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff0a8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff0b8:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff0c8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff0d8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ff0e8:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ff0f8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ff108:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ff118:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ff128:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ff138:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ff148:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ff158:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ff168:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ff178:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ff188:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ff198:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ff1a8:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ff1b8:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ff1c8:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ff1d8:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ff1e8:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ff1f8:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ff208:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ff218:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ff228:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ff238:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ff248:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ff258:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ff268:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ff278:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ff288:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ff298:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ff2a8:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ff2b8:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ff2c8:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ff2d8:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ff2e8:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ff2f8:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ff308:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ff318:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

023ff328 <_ZTV12Adafruit_GFX>:
	...
 23ff338:	b61d 023f e03d 023f a485 023f ab7f 023f     ..?.=.?...?...?.
 23ff348:	ab81 023f abb3 023f ab8f 023f aba1 023f     ..?...?...?...?.
 23ff358:	aac1 023f ab7f 023f ada9 023f ada7 023f     ..?...?...?...?.
 23ff368:	abcb 023f ac09 023f ac43 023f ac89 023f     ..?...?.C.?...?.
 23ff378:	aca5 023f ad27 023f                         ..?.'.?.

023ff380 <_ZTV17Adafruit_GrayOLED>:
	...
 23ff390:	b61d 023f e03d 023f b745 023f ab7f 023f     ..?.=.?.E.?...?.
 23ff3a0:	ab81 023f abb3 023f ab8f 023f aba1 023f     ..?...?...?...?.
 23ff3b0:	aac1 023f ab7f 023f ada9 023f b943 023f     ..?...?...?.C.?.
 23ff3c0:	abcb 023f ac09 023f ac43 023f ac89 023f     ..?...?.C.?...?.
 23ff3d0:	aca5 023f ad27 023f a485 023f               ..?.'.?...?.

023ff3dc <_ZL12splash2_data>:
 23ff3dc:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
 23ff3ec:	e000 0000 0000 0000 0000 0000 0000 0100     ................
 23ff3fc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
 23ff418:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
 23ff428:	f007 0000 0000 0000 0000 0000 0000 0700     ................
 23ff438:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
 23ff448:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
 23ff458:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
 23ff468:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
 23ff478:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
 23ff488:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
 23ff498:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
 23ff4a8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
 23ff4b8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
 23ff4c8:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
 23ff4d8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
 23ff4e8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
 23ff4f8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
 23ff508:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
 23ff518:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
 23ff528:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
 23ff538:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
 23ff548:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
 23ff558:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
 23ff570:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
 23ff580:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
 23ff590:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
 23ff5a0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
 23ff5b0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

023ff5bc <_ZTV15Adafruit_SH1107>:
	...
 23ff5c4:	bab5 023f bac9 023f b61d 023f e03d 023f     ..?...?...?.=.?.
 23ff5d4:	b745 023f ab7f 023f ab81 023f abb3 023f     E.?...?...?...?.
 23ff5e4:	ab8f 023f aba1 023f aac1 023f ab7f 023f     ..?...?...?...?.
 23ff5f4:	ada9 023f b943 023f abcb 023f ac09 023f     ..?.C.?...?...?.
 23ff604:	ac43 023f ac89 023f aca5 023f ad27 023f     C.?...?...?.'.?.
 23ff614:	bbe9 023f                                   ..?.

023ff618 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
 23ff618:	00d3 7fa8                                   ....

023ff61c <_ZZN15Adafruit_SH11075beginEhbE4init>:
 23ff61c:	d5ae 2051 4f81 8aad c0a0 00dc 60d3 22d9     ..Q .O.......`."
 23ff62c:	35db 3fa8 a6a4 0000                         .5.?....

023ff634 <_ZTV15Adafruit_SH110X>:
	...
 23ff63c:	a485 023f a485 023f b61d 023f e03d 023f     ..?...?...?.=.?.
 23ff64c:	b745 023f ab7f 023f ab81 023f abb3 023f     E.?...?...?...?.
 23ff65c:	ab8f 023f aba1 023f aac1 023f ab7f 023f     ..?...?...?...?.
 23ff66c:	ada9 023f b943 023f abcb 023f ac09 023f     ..?.C.?...?...?.
 23ff67c:	ac43 023f ac89 023f aca5 023f ad27 023f     C.?...?...?.'.?.
 23ff68c:	bbe9 023f 6f43 6c75 2064 6f6e 2074 6e69     ..?.Could not in
 23ff69c:	7469 6169 696c 657a 4f20 454c 2144 4f00     itialize OLED!.O
 23ff6ac:	454c 2044 6562 7567 006e                    LED begun.

023ff6b6 <_ZN7Bitmaps3fanE>:
 23ff6b6:	0000 0000 0000 7e00 0100 80ff 8103 06c0     .......~........
 23ff6c6:	6000 700c 1830 18f0 f818 3018 0c78 2030     .`.p0......0x.0 
 23ff6d6:	300c cc1b 5b30 30cc cce7 e331 198c 18e0     .0..0[.0..1.....
 23ff6e6:	e018 0c18 3000 0006 0360 c081 ff01 0080     .....0..`.......
 23ff6f6:	007e 0000 0000 0000                         ~.......

023ff6fe <_ZN7Bitmaps6fridgeE>:
 23ff6fe:	0000 0000 0000 ff07 0fe0 f0ff 000c 0c30     ..............0.
 23ff70e:	3000 c00c 0c30 30c0 000c 0c30 3000 ff0f     .0..0..0..0..0..
 23ff71e:	0ff0 f0ff 000c 0c30 3000 c00c 0c30 30c0     ......0..0..0..0
 23ff72e:	c00c 0c30 30c0 000c 0c30 3000 ff0f 07f0     ..0..0..0..0....
 23ff73e:	e0ff 0000 0000 0000                         ........

023ff746 <_ZN7Bitmaps7blenderE>:
 23ff746:	0000 0000 0000 ff1f 1ff8 fcff ff1f 0fcc     ................
 23ff756:	ccff f90f 07cc ccf9 f907 07cc ccf9 f907     ................
 23ff766:	07cc c0f9 ff07 03c0 c0ff ff03 03c0 c0ff     ................
 23ff776:	0000 0000 0000 ff07 0fe0 f0e7 e70f 0ff0     ................
 23ff786:	f0ff 0000 0000 0000                         ........

023ff78e <_ZN7Bitmaps7toasterE>:
	...
 23ff796:	0300 80ff ff07 06e0 6000 3007 03e0 c034     .........`.0..4.
 23ff7a6:	0003 0fc0 f0ff ff1f 3ff8 fcff ff3f 3ffc     .........?..?..?
 23ff7b6:	fcff ff3f 3fff ffff ff3f 3ffc ccff ff3f     ..?..?..?..?..?.
 23ff7c6:	3fcc fcff ff3f 00fc 0000 0000 0000 0000     .?..?...........

023ff7d6 <_ZL12Org_01Glyphs>:
 23ff7d6:	0000 0000 0006 0001 0000 0501 0002 00fc     ................
 23ff7e6:	0001 0103 0004 00fc 0002 0505 0006 00fc     ................
 23ff7f6:	0006 0505 0006 00fc 000a 0505 0006 00fc     ................
 23ff806:	000e 0505 0006 00fc 0012 0101 0002 00fc     ................
 23ff816:	0013 0502 0003 00fc 0015 0502 0003 00fc     ................
 23ff826:	0017 0303 0004 00fd 0019 0303 0004 00fd     ................
 23ff836:	001b 0201 0002 0000 001c 0104 0005 00fe     ................
 23ff846:	001d 0101 0002 0000 001e 0505 0006 00fc     ................
 23ff856:	0022 0505 0006 00fc 0026 0501 0002 00fc     ".......&.......
 23ff866:	0027 0505 0006 00fc 002b 0505 0006 00fc     '.......+.......
 23ff876:	002f 0505 0006 00fc 0033 0505 0006 00fc     /.......3.......
 23ff886:	0037 0505 0006 00fc 003b 0505 0006 00fc     7.......;.......
 23ff896:	003f 0505 0006 00fc 0043 0505 0006 00fc     ?.......C.......
 23ff8a6:	0047 0401 0002 00fd 0048 0401 0002 00fd     G.......H.......
 23ff8b6:	0049 0503 0004 00fc 004b 0304 0005 00fd     I.......K.......
 23ff8c6:	004d 0503 0004 00fc 004f 0505 0006 00fc     M.......O.......
 23ff8d6:	0053 0505 0006 00fc 0057 0505 0006 00fc     S.......W.......
 23ff8e6:	005b 0505 0006 00fc 005f 0505 0006 00fc     [......._.......
 23ff8f6:	0063 0505 0006 00fc 0067 0505 0006 00fc     c.......g.......
 23ff906:	006b 0505 0006 00fc 006f 0505 0006 00fc     k.......o.......
 23ff916:	0073 0505 0006 00fc 0077 0505 0006 00fc     s.......w.......
 23ff926:	007b 0505 0006 00fc 007f 0505 0006 00fc     {...............
 23ff936:	0083 0505 0006 00fc 0087 0505 0006 00fc     ................
 23ff946:	008b 0505 0006 00fc 008f 0505 0006 00fc     ................
 23ff956:	0093 0505 0006 00fc 0097 0505 0006 00fc     ................
 23ff966:	009b 0505 0006 00fc 009f 0505 0006 00fc     ................
 23ff976:	00a3 0505 0006 00fc 00a7 0505 0006 00fc     ................
 23ff986:	00ab 0505 0006 00fc 00af 0505 0006 00fc     ................
 23ff996:	00b3 0505 0006 00fc 00b7 0505 0006 00fc     ................
 23ff9a6:	00bb 0505 0006 00fc 00bf 0502 0003 00fc     ................
 23ff9b6:	00c1 0505 0006 00fc 00c5 0502 0003 00fc     ................
 23ff9c6:	00c7 0203 0004 00fc 00c8 0105 0006 0001     ................
 23ff9d6:	00c9 0101 0002 00fc 00ca 0404 0005 00fd     ................
 23ff9e6:	00cc 0504 0005 00fc 00cf 0404 0005 00fd     ................
 23ff9f6:	00d1 0504 0005 00fc 00d4 0404 0005 00fd     ................
 23ffa06:	00d6 0503 0004 00fc 00d8 0504 0005 00fd     ................
 23ffa16:	00db 0504 0005 00fc 00de 0401 0002 00fd     ................
 23ffa26:	00df 0502 0003 00fd 00e1 0504 0005 00fc     ................
 23ffa36:	00e4 0501 0002 00fc 00e5 0405 0006 00fd     ................
 23ffa46:	00e8 0404 0005 00fd 00ea 0404 0005 00fd     ................
 23ffa56:	00ec 0504 0005 00fd 00ef 0504 0005 00fd     ................
 23ffa66:	00f2 0404 0005 00fd 00f4 0404 0005 00fd     ................
 23ffa76:	00f6 0505 0006 00fc 00fa 0404 0005 00fd     ................
 23ffa86:	00fc 0404 0005 00fd 00fe 0405 0006 00fd     ................
 23ffa96:	0101 0404 0005 00fd 0103 0504 0005 00fd     ................
 23ffaa6:	0106 0404 0005 00fd 0108 0503 0004 00fc     ................
 23ffab6:	010a 0501 0002 00fc 010b 0503 0004 00fc     ................
 23ffac6:	010d 0305 0006 00fd                         ........

023fface <_ZL13Org_01Bitmaps>:
 23fface:	a0e8 d557 00f5 3efd 805f 8888 8088 bff4     ..W....>_.......
 23ffade:	802e 6a80 9540 aa80 5d80 c000 80f0 8808     ...j@....]......
 23ffaee:	0088 63fc 801f f8f8 0f7f f880 1f7e 8c80     ...c........~...
 23ffafe:	107e fc80 1f3e fc80 1f3f f880 1042 fc80     ~...>...?...B...
 23ffb0e:	1f7f fc80 1f7e 9080 2ab0 f022 88f0 f8a8     ....~....*".....
 23ffb1e:	024e fd00 0f6f fc80 187f f480 1f7d fc00     N...o.......}...
 23ffb2e:	0f21 f480 1f63 fc00 0f3f fc80 083f fc00     !...c...?...?...
 23ffb3e:	1f2f 8c80 187f f980 4f08 7880 2f85 8d80     /........O.x./..
 23ffb4e:	68b1 8480 0f21 fd80 5a6b fc80 1863 fc80     .h..!...kZ..c...
 23ffb5e:	1f63 fc80 087f fc00 3f63 fc80 297f fc00     c.......c?...)..
 23ffb6e:	1f3e f980 4208 8c00 1f63 8c80 a262 ad00     >....B..c...b...
 23ffb7e:	5f6b 8a80 a888 8c80 4254 f800 0f7f ea80     k_......TB......
 23ffb8e:	82c0 2008 d580 54c0 80f8 fff1 998f f8f0     ... ...T........
 23ffb9e:	1f8f f099 8fff a46b 9ff9 8f10 9099 55f0     ......k........U
 23ffbae:	8ac0 90f9 fdf8 1063 99f9 9ff9 9ff9 f980     ......c.........
 23ffbbe:	209f 88f8 1f47 c827 0042 9f99 9799 6b8c     . ..G.'.B......k
 23ffbce:	96f0 9969 109f 8f2e 222b 89f8 0fa8 00e0     ..i.....+"......
	...

023ffbe0 <_ZL6Org_01>:
 23ffbe0:	face 023f f7d6 023f 0020 007e 0007 0000     ..?...?. .~.....

023ffbf0 <_ZTVN5spark13EthernetClassE>:
	...
 23ffbf8:	c9e3 023f c9d9 023f c9cf 023f c9c5 023f     ..?...?...?...?.
 23ffc08:	c9b9 023f c9ad 023f df19 023f df21 023f     ..?...?...?.!.?.
 23ffc18:	c9a1 023f c999 023f c98f 023f c985 023f     ..?...?...?...?.
 23ffc28:	df51 023f                                   Q.?.

023ffc2c <_ZTV7TwoWire>:
	...
 23ffc34:	ca01 023f ca4b 023f ca23 023f ca03 023f     ..?.K.?.#.?...?.
 23ffc44:	ca2b 023f ca33 023f ca3b 023f ca43 023f     +.?.3.?.;.?.C.?.

023ffc54 <_ZTV9IPAddress>:
	...
 23ffc5c:	cacf 023f cabf 023f cac1 023f 6425 2500     ..?...?...?.%d.%
 23ffc6c:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
 23ffc7c:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
 23ffc8c:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 23ffc9c:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
 23ffcac:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 23ffcbc:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 23ffccc:	0a0d 6d00 6600 6c00 006e 6e66 6300 646f     ...m.f.ln.fn.cod
 23ffcdc:	0065 6564 6174 6c69 0000 0000               e.detail....

023ffce8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffcf0:	cf7d 023f cfa3 023f cf61 023f cbdf 023f     }.?...?.a.?...?.

023ffd00 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffd08:	d431 023f d449 023f db85 023f dd2d 023f     1.?.I.?...?.-.?.

023ffd18 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffd20:	d45d 023f d471 023f dd65 023f cf69 023f     ].?.q.?.e.?.i.?.

023ffd30 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffd38:	cf7b 023f cfb1 023f dae9 023f cf6b 023f     {.?...?...?.k.?.

023ffd48 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffd50:	cf79 023f cfbf 023f d399 023f cfe1 023f     y.?...?...?...?.

023ffd60 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd68:	ded9 023f dee3 023f deed 023f def7 023f     ..?...?...?...?.
 23ffd78:	df01 023f df0d 023f df19 023f df21 023f     ..?...?...?.!.?.
 23ffd88:	df29 023f df35 023f df3d 023f df47 023f     ).?.5.?.=.?.G.?.
 23ffd98:	df51 023f                                   Q.?.

023ffd9c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffd9c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffdac:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffdbc:	6d69 0065                                   ime.

023ffdc0 <_ZTV11USARTSerial>:
	...
 23ffdc8:	e3dd 023f e449 023f e421 023f e03d 023f     ..?.I.?.!.?.=.?.
 23ffdd8:	e3f1 023f e40d 023f e3ff 023f e41b 023f     ..?...?...?...?.
 23ffde8:	e3df 023f e3e3 023f                         ..?...?.

023ffdf0 <_ZTV9USBSerial>:
	...
 23ffdf8:	e4a1 023f e509 023f e4df 023f e03d 023f     ..?...?...?.=.?.
 23ffe08:	e4d1 023f e4a3 023f e4b3 023f e503 023f     ..?...?...?...?.
 23ffe18:	e4c3 023f e49b 023f                         ..?...?.

023ffe20 <_ZTVN5spark9WiFiClassE>:
	...
 23ffe28:	e607 023f e5fd 023f e5f3 023f e5a9 023f     ..?...?...?...?.
 23ffe38:	e5e7 023f e5db 023f df19 023f df21 023f     ..?...?...?.!.?.
 23ffe48:	e5cf 023f e5c7 023f e5bd 023f e5b3 023f     ..?...?...?...?.
 23ffe58:	df51 023f                                   Q.?.

023ffe5c <_ZSt7nothrow>:
 23ffe5c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffe6c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23ffe7c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23ffe8c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23ffe9c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23ffeac:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23ffebc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023ffecd <_ctype_>:
 23ffecd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffedd:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffeed:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffefd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff0d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff1d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff2d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff3d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff4d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffce <link_const_data_end>:
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fa6bd 	.word	0x023fa6bd
 23fffd4:	023fc975 	.word	0x023fc975
 23fffd8:	023fc9ed 	.word	0x023fc9ed
 23fffdc:	023fdb75 	.word	0x023fdb75
 23fffe0:	023fe029 	.word	0x023fe029
 23fffe4:	023fe0fd 	.word	0x023fe0fd
 23fffe8:	023fe3a5 	.word	0x023fe3a5
 23fffec:	023fe3c9 	.word	0x023fe3c9
 23ffff0:	023fe611 	.word	0x023fe611
