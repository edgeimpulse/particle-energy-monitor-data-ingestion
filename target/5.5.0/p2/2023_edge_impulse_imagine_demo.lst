
/Users/brennandayberry/Downloads/2023_edge_impulse_imagine_demo/target/5.5.0/p2/2023_edge_impulse_imagine_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa690  085fa0a8  0000a690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   0000595c  023fa698  085fa0b0  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  6 .data         00000094  1007a9b0  085ffa0c  0001a9b0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005a4  1007aa48  1007aa48  0002aa48  2**3
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffaa0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000514  085ffaa4  085ffaa4  0001faa4  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001faa4  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001aeed1  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001ca03  00000000  00000000  001ceed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000502cc  00000000  00000000  001eb8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000037a0  00000000  00000000  0023bba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000d018  00000000  00000000  0023f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00032bff  00000000  00000000  0024c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005f0a3  00000000  00000000  0027ef57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d7d09  00000000  00000000  002ddffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a698  00000000  00000000  003b5d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	4813      	ldr	r0, [pc, #76]	; (85fa068 <module_user_pre_init+0x50>)
 85fa01a:	4914      	ldr	r1, [pc, #80]	; (85fa06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a13      	ldr	r2, [pc, #76]	; (85fa070 <module_user_pre_init+0x58>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b12      	ldr	r3, [pc, #72]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	4812      	ldr	r0, [pc, #72]	; (85fa078 <module_user_pre_init+0x60>)
 85fa030:	4a12      	ldr	r2, [pc, #72]	; (85fa07c <module_user_pre_init+0x64>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b12      	ldr	r3, [pc, #72]	; (85fa080 <module_user_pre_init+0x68>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fa03a:	4812      	ldr	r0, [pc, #72]	; (85fa084 <module_user_pre_init+0x6c>)
 85fa03c:	4912      	ldr	r1, [pc, #72]	; (85fa088 <module_user_pre_init+0x70>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a12      	ldr	r2, [pc, #72]	; (85fa08c <module_user_pre_init+0x74>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fa048:	4b0a      	ldr	r3, [pc, #40]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa04e:	4810      	ldr	r0, [pc, #64]	; (85fa090 <module_user_pre_init+0x78>)
 85fa050:	4910      	ldr	r1, [pc, #64]	; (85fa094 <module_user_pre_init+0x7c>)
 85fa052:	4288      	cmp	r0, r1
 85fa054:	d005      	beq.n	85fa062 <module_user_pre_init+0x4a>
 85fa056:	4a10      	ldr	r2, [pc, #64]	; (85fa098 <module_user_pre_init+0x80>)
 85fa058:	4282      	cmp	r2, r0
 85fa05a:	d002      	beq.n	85fa062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa05c:	4b05      	ldr	r3, [pc, #20]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa05e:	1a12      	subs	r2, r2, r0
 85fa060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa062:	4801      	ldr	r0, [pc, #4]	; (85fa068 <module_user_pre_init+0x50>)
 85fa064:	bd08      	pop	{r3, pc}
 85fa066:	bf00      	nop
 85fa068:	1007a9b0 	.word	0x1007a9b0
 85fa06c:	085ffa0c 	.word	0x085ffa0c
 85fa070:	1007aa44 	.word	0x1007aa44
 85fa074:	10110d2d 	.word	0x10110d2d
 85fa078:	1007aa48 	.word	0x1007aa48
 85fa07c:	1007afec 	.word	0x1007afec
 85fa080:	10110ea1 	.word	0x10110ea1
 85fa084:	023fa690 	.word	0x023fa690
 85fa088:	085fa0a8 	.word	0x085fa0a8
 85fa08c:	023fa698 	.word	0x023fa698
 85fa090:	023fa698 	.word	0x023fa698
 85fa094:	085fa0b0 	.word	0x085fa0b0
 85fa098:	023ffff4 	.word	0x023ffff4

085fa09c <dynalib_preinit>:
 85fa09c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa698 <__aeabi_drsub>:
 23fa698:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fa69c:	e002      	b.n	23fa6a4 <__adddf3>
 23fa69e:	bf00      	nop

023fa6a0 <__aeabi_dsub>:
 23fa6a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fa6a4 <__adddf3>:
 23fa6a4:	b530      	push	{r4, r5, lr}
 23fa6a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fa6aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fa6ae:	ea94 0f05 	teq	r4, r5
 23fa6b2:	bf08      	it	eq
 23fa6b4:	ea90 0f02 	teqeq	r0, r2
 23fa6b8:	bf1f      	itttt	ne
 23fa6ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fa6be:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fa6c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fa6c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fa6ca:	f000 80e2 	beq.w	23fa892 <__adddf3+0x1ee>
 23fa6ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fa6d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fa6d6:	bfb8      	it	lt
 23fa6d8:	426d      	neglt	r5, r5
 23fa6da:	dd0c      	ble.n	23fa6f6 <__adddf3+0x52>
 23fa6dc:	442c      	add	r4, r5
 23fa6de:	ea80 0202 	eor.w	r2, r0, r2
 23fa6e2:	ea81 0303 	eor.w	r3, r1, r3
 23fa6e6:	ea82 0000 	eor.w	r0, r2, r0
 23fa6ea:	ea83 0101 	eor.w	r1, r3, r1
 23fa6ee:	ea80 0202 	eor.w	r2, r0, r2
 23fa6f2:	ea81 0303 	eor.w	r3, r1, r3
 23fa6f6:	2d36      	cmp	r5, #54	; 0x36
 23fa6f8:	bf88      	it	hi
 23fa6fa:	bd30      	pophi	{r4, r5, pc}
 23fa6fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fa700:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fa704:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fa708:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fa70c:	d002      	beq.n	23fa714 <__adddf3+0x70>
 23fa70e:	4240      	negs	r0, r0
 23fa710:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fa714:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fa718:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fa71c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fa720:	d002      	beq.n	23fa728 <__adddf3+0x84>
 23fa722:	4252      	negs	r2, r2
 23fa724:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fa728:	ea94 0f05 	teq	r4, r5
 23fa72c:	f000 80a7 	beq.w	23fa87e <__adddf3+0x1da>
 23fa730:	f1a4 0401 	sub.w	r4, r4, #1
 23fa734:	f1d5 0e20 	rsbs	lr, r5, #32
 23fa738:	db0d      	blt.n	23fa756 <__adddf3+0xb2>
 23fa73a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fa73e:	fa22 f205 	lsr.w	r2, r2, r5
 23fa742:	1880      	adds	r0, r0, r2
 23fa744:	f141 0100 	adc.w	r1, r1, #0
 23fa748:	fa03 f20e 	lsl.w	r2, r3, lr
 23fa74c:	1880      	adds	r0, r0, r2
 23fa74e:	fa43 f305 	asr.w	r3, r3, r5
 23fa752:	4159      	adcs	r1, r3
 23fa754:	e00e      	b.n	23fa774 <__adddf3+0xd0>
 23fa756:	f1a5 0520 	sub.w	r5, r5, #32
 23fa75a:	f10e 0e20 	add.w	lr, lr, #32
 23fa75e:	2a01      	cmp	r2, #1
 23fa760:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fa764:	bf28      	it	cs
 23fa766:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fa76a:	fa43 f305 	asr.w	r3, r3, r5
 23fa76e:	18c0      	adds	r0, r0, r3
 23fa770:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fa774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa778:	d507      	bpl.n	23fa78a <__adddf3+0xe6>
 23fa77a:	f04f 0e00 	mov.w	lr, #0
 23fa77e:	f1dc 0c00 	rsbs	ip, ip, #0
 23fa782:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fa786:	eb6e 0101 	sbc.w	r1, lr, r1
 23fa78a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fa78e:	d31b      	bcc.n	23fa7c8 <__adddf3+0x124>
 23fa790:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fa794:	d30c      	bcc.n	23fa7b0 <__adddf3+0x10c>
 23fa796:	0849      	lsrs	r1, r1, #1
 23fa798:	ea5f 0030 	movs.w	r0, r0, rrx
 23fa79c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fa7a0:	f104 0401 	add.w	r4, r4, #1
 23fa7a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fa7a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fa7ac:	f080 809a 	bcs.w	23fa8e4 <__adddf3+0x240>
 23fa7b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fa7b4:	bf08      	it	eq
 23fa7b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fa7ba:	f150 0000 	adcs.w	r0, r0, #0
 23fa7be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fa7c2:	ea41 0105 	orr.w	r1, r1, r5
 23fa7c6:	bd30      	pop	{r4, r5, pc}
 23fa7c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fa7cc:	4140      	adcs	r0, r0
 23fa7ce:	eb41 0101 	adc.w	r1, r1, r1
 23fa7d2:	3c01      	subs	r4, #1
 23fa7d4:	bf28      	it	cs
 23fa7d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fa7da:	d2e9      	bcs.n	23fa7b0 <__adddf3+0x10c>
 23fa7dc:	f091 0f00 	teq	r1, #0
 23fa7e0:	bf04      	itt	eq
 23fa7e2:	4601      	moveq	r1, r0
 23fa7e4:	2000      	moveq	r0, #0
 23fa7e6:	fab1 f381 	clz	r3, r1
 23fa7ea:	bf08      	it	eq
 23fa7ec:	3320      	addeq	r3, #32
 23fa7ee:	f1a3 030b 	sub.w	r3, r3, #11
 23fa7f2:	f1b3 0220 	subs.w	r2, r3, #32
 23fa7f6:	da0c      	bge.n	23fa812 <__adddf3+0x16e>
 23fa7f8:	320c      	adds	r2, #12
 23fa7fa:	dd08      	ble.n	23fa80e <__adddf3+0x16a>
 23fa7fc:	f102 0c14 	add.w	ip, r2, #20
 23fa800:	f1c2 020c 	rsb	r2, r2, #12
 23fa804:	fa01 f00c 	lsl.w	r0, r1, ip
 23fa808:	fa21 f102 	lsr.w	r1, r1, r2
 23fa80c:	e00c      	b.n	23fa828 <__adddf3+0x184>
 23fa80e:	f102 0214 	add.w	r2, r2, #20
 23fa812:	bfd8      	it	le
 23fa814:	f1c2 0c20 	rsble	ip, r2, #32
 23fa818:	fa01 f102 	lsl.w	r1, r1, r2
 23fa81c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fa820:	bfdc      	itt	le
 23fa822:	ea41 010c 	orrle.w	r1, r1, ip
 23fa826:	4090      	lslle	r0, r2
 23fa828:	1ae4      	subs	r4, r4, r3
 23fa82a:	bfa2      	ittt	ge
 23fa82c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fa830:	4329      	orrge	r1, r5
 23fa832:	bd30      	popge	{r4, r5, pc}
 23fa834:	ea6f 0404 	mvn.w	r4, r4
 23fa838:	3c1f      	subs	r4, #31
 23fa83a:	da1c      	bge.n	23fa876 <__adddf3+0x1d2>
 23fa83c:	340c      	adds	r4, #12
 23fa83e:	dc0e      	bgt.n	23fa85e <__adddf3+0x1ba>
 23fa840:	f104 0414 	add.w	r4, r4, #20
 23fa844:	f1c4 0220 	rsb	r2, r4, #32
 23fa848:	fa20 f004 	lsr.w	r0, r0, r4
 23fa84c:	fa01 f302 	lsl.w	r3, r1, r2
 23fa850:	ea40 0003 	orr.w	r0, r0, r3
 23fa854:	fa21 f304 	lsr.w	r3, r1, r4
 23fa858:	ea45 0103 	orr.w	r1, r5, r3
 23fa85c:	bd30      	pop	{r4, r5, pc}
 23fa85e:	f1c4 040c 	rsb	r4, r4, #12
 23fa862:	f1c4 0220 	rsb	r2, r4, #32
 23fa866:	fa20 f002 	lsr.w	r0, r0, r2
 23fa86a:	fa01 f304 	lsl.w	r3, r1, r4
 23fa86e:	ea40 0003 	orr.w	r0, r0, r3
 23fa872:	4629      	mov	r1, r5
 23fa874:	bd30      	pop	{r4, r5, pc}
 23fa876:	fa21 f004 	lsr.w	r0, r1, r4
 23fa87a:	4629      	mov	r1, r5
 23fa87c:	bd30      	pop	{r4, r5, pc}
 23fa87e:	f094 0f00 	teq	r4, #0
 23fa882:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fa886:	bf06      	itte	eq
 23fa888:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fa88c:	3401      	addeq	r4, #1
 23fa88e:	3d01      	subne	r5, #1
 23fa890:	e74e      	b.n	23fa730 <__adddf3+0x8c>
 23fa892:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fa896:	bf18      	it	ne
 23fa898:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fa89c:	d029      	beq.n	23fa8f2 <__adddf3+0x24e>
 23fa89e:	ea94 0f05 	teq	r4, r5
 23fa8a2:	bf08      	it	eq
 23fa8a4:	ea90 0f02 	teqeq	r0, r2
 23fa8a8:	d005      	beq.n	23fa8b6 <__adddf3+0x212>
 23fa8aa:	ea54 0c00 	orrs.w	ip, r4, r0
 23fa8ae:	bf04      	itt	eq
 23fa8b0:	4619      	moveq	r1, r3
 23fa8b2:	4610      	moveq	r0, r2
 23fa8b4:	bd30      	pop	{r4, r5, pc}
 23fa8b6:	ea91 0f03 	teq	r1, r3
 23fa8ba:	bf1e      	ittt	ne
 23fa8bc:	2100      	movne	r1, #0
 23fa8be:	2000      	movne	r0, #0
 23fa8c0:	bd30      	popne	{r4, r5, pc}
 23fa8c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fa8c6:	d105      	bne.n	23fa8d4 <__adddf3+0x230>
 23fa8c8:	0040      	lsls	r0, r0, #1
 23fa8ca:	4149      	adcs	r1, r1
 23fa8cc:	bf28      	it	cs
 23fa8ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fa8d2:	bd30      	pop	{r4, r5, pc}
 23fa8d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fa8d8:	bf3c      	itt	cc
 23fa8da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fa8de:	bd30      	popcc	{r4, r5, pc}
 23fa8e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa8e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fa8e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fa8ec:	f04f 0000 	mov.w	r0, #0
 23fa8f0:	bd30      	pop	{r4, r5, pc}
 23fa8f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fa8f6:	bf1a      	itte	ne
 23fa8f8:	4619      	movne	r1, r3
 23fa8fa:	4610      	movne	r0, r2
 23fa8fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fa900:	bf1c      	itt	ne
 23fa902:	460b      	movne	r3, r1
 23fa904:	4602      	movne	r2, r0
 23fa906:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fa90a:	bf06      	itte	eq
 23fa90c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fa910:	ea91 0f03 	teqeq	r1, r3
 23fa914:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fa918:	bd30      	pop	{r4, r5, pc}
 23fa91a:	bf00      	nop

023fa91c <__aeabi_ui2d>:
 23fa91c:	f090 0f00 	teq	r0, #0
 23fa920:	bf04      	itt	eq
 23fa922:	2100      	moveq	r1, #0
 23fa924:	4770      	bxeq	lr
 23fa926:	b530      	push	{r4, r5, lr}
 23fa928:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fa92c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fa930:	f04f 0500 	mov.w	r5, #0
 23fa934:	f04f 0100 	mov.w	r1, #0
 23fa938:	e750      	b.n	23fa7dc <__adddf3+0x138>
 23fa93a:	bf00      	nop

023fa93c <__aeabi_i2d>:
 23fa93c:	f090 0f00 	teq	r0, #0
 23fa940:	bf04      	itt	eq
 23fa942:	2100      	moveq	r1, #0
 23fa944:	4770      	bxeq	lr
 23fa946:	b530      	push	{r4, r5, lr}
 23fa948:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fa94c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fa950:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fa954:	bf48      	it	mi
 23fa956:	4240      	negmi	r0, r0
 23fa958:	f04f 0100 	mov.w	r1, #0
 23fa95c:	e73e      	b.n	23fa7dc <__adddf3+0x138>
 23fa95e:	bf00      	nop

023fa960 <__aeabi_f2d>:
 23fa960:	0042      	lsls	r2, r0, #1
 23fa962:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fa966:	ea4f 0131 	mov.w	r1, r1, rrx
 23fa96a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fa96e:	bf1f      	itttt	ne
 23fa970:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fa974:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fa978:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fa97c:	4770      	bxne	lr
 23fa97e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fa982:	bf08      	it	eq
 23fa984:	4770      	bxeq	lr
 23fa986:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fa98a:	bf04      	itt	eq
 23fa98c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fa990:	4770      	bxeq	lr
 23fa992:	b530      	push	{r4, r5, lr}
 23fa994:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fa998:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa99c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fa9a0:	e71c      	b.n	23fa7dc <__adddf3+0x138>
 23fa9a2:	bf00      	nop

023fa9a4 <__aeabi_ul2d>:
 23fa9a4:	ea50 0201 	orrs.w	r2, r0, r1
 23fa9a8:	bf08      	it	eq
 23fa9aa:	4770      	bxeq	lr
 23fa9ac:	b530      	push	{r4, r5, lr}
 23fa9ae:	f04f 0500 	mov.w	r5, #0
 23fa9b2:	e00a      	b.n	23fa9ca <__aeabi_l2d+0x16>

023fa9b4 <__aeabi_l2d>:
 23fa9b4:	ea50 0201 	orrs.w	r2, r0, r1
 23fa9b8:	bf08      	it	eq
 23fa9ba:	4770      	bxeq	lr
 23fa9bc:	b530      	push	{r4, r5, lr}
 23fa9be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fa9c2:	d502      	bpl.n	23fa9ca <__aeabi_l2d+0x16>
 23fa9c4:	4240      	negs	r0, r0
 23fa9c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fa9ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fa9ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fa9d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fa9d6:	f43f aed8 	beq.w	23fa78a <__adddf3+0xe6>
 23fa9da:	f04f 0203 	mov.w	r2, #3
 23fa9de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fa9e2:	bf18      	it	ne
 23fa9e4:	3203      	addne	r2, #3
 23fa9e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fa9ea:	bf18      	it	ne
 23fa9ec:	3203      	addne	r2, #3
 23fa9ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fa9f2:	f1c2 0320 	rsb	r3, r2, #32
 23fa9f6:	fa00 fc03 	lsl.w	ip, r0, r3
 23fa9fa:	fa20 f002 	lsr.w	r0, r0, r2
 23fa9fe:	fa01 fe03 	lsl.w	lr, r1, r3
 23faa02:	ea40 000e 	orr.w	r0, r0, lr
 23faa06:	fa21 f102 	lsr.w	r1, r1, r2
 23faa0a:	4414      	add	r4, r2
 23faa0c:	e6bd      	b.n	23fa78a <__adddf3+0xe6>
 23faa0e:	bf00      	nop

023faa10 <__aeabi_dmul>:
 23faa10:	b570      	push	{r4, r5, r6, lr}
 23faa12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23faa16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23faa1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23faa1e:	bf1d      	ittte	ne
 23faa20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23faa24:	ea94 0f0c 	teqne	r4, ip
 23faa28:	ea95 0f0c 	teqne	r5, ip
 23faa2c:	f000 f8de 	bleq	23fabec <__aeabi_dmul+0x1dc>
 23faa30:	442c      	add	r4, r5
 23faa32:	ea81 0603 	eor.w	r6, r1, r3
 23faa36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23faa3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23faa3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23faa42:	bf18      	it	ne
 23faa44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23faa48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23faa4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23faa50:	d038      	beq.n	23faac4 <__aeabi_dmul+0xb4>
 23faa52:	fba0 ce02 	umull	ip, lr, r0, r2
 23faa56:	f04f 0500 	mov.w	r5, #0
 23faa5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23faa5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23faa62:	fbe0 e503 	umlal	lr, r5, r0, r3
 23faa66:	f04f 0600 	mov.w	r6, #0
 23faa6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23faa6e:	f09c 0f00 	teq	ip, #0
 23faa72:	bf18      	it	ne
 23faa74:	f04e 0e01 	orrne.w	lr, lr, #1
 23faa78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23faa7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23faa80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23faa84:	d204      	bcs.n	23faa90 <__aeabi_dmul+0x80>
 23faa86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23faa8a:	416d      	adcs	r5, r5
 23faa8c:	eb46 0606 	adc.w	r6, r6, r6
 23faa90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23faa94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23faa98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23faa9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23faaa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23faaa4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23faaa8:	bf88      	it	hi
 23faaaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23faaae:	d81e      	bhi.n	23faaee <__aeabi_dmul+0xde>
 23faab0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23faab4:	bf08      	it	eq
 23faab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23faaba:	f150 0000 	adcs.w	r0, r0, #0
 23faabe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23faac2:	bd70      	pop	{r4, r5, r6, pc}
 23faac4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23faac8:	ea46 0101 	orr.w	r1, r6, r1
 23faacc:	ea40 0002 	orr.w	r0, r0, r2
 23faad0:	ea81 0103 	eor.w	r1, r1, r3
 23faad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23faad8:	bfc2      	ittt	gt
 23faada:	ebd4 050c 	rsbsgt	r5, r4, ip
 23faade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23faae2:	bd70      	popgt	{r4, r5, r6, pc}
 23faae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23faae8:	f04f 0e00 	mov.w	lr, #0
 23faaec:	3c01      	subs	r4, #1
 23faaee:	f300 80ab 	bgt.w	23fac48 <__aeabi_dmul+0x238>
 23faaf2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23faaf6:	bfde      	ittt	le
 23faaf8:	2000      	movle	r0, #0
 23faafa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23faafe:	bd70      	pople	{r4, r5, r6, pc}
 23fab00:	f1c4 0400 	rsb	r4, r4, #0
 23fab04:	3c20      	subs	r4, #32
 23fab06:	da35      	bge.n	23fab74 <__aeabi_dmul+0x164>
 23fab08:	340c      	adds	r4, #12
 23fab0a:	dc1b      	bgt.n	23fab44 <__aeabi_dmul+0x134>
 23fab0c:	f104 0414 	add.w	r4, r4, #20
 23fab10:	f1c4 0520 	rsb	r5, r4, #32
 23fab14:	fa00 f305 	lsl.w	r3, r0, r5
 23fab18:	fa20 f004 	lsr.w	r0, r0, r4
 23fab1c:	fa01 f205 	lsl.w	r2, r1, r5
 23fab20:	ea40 0002 	orr.w	r0, r0, r2
 23fab24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fab28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fab2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fab30:	fa21 f604 	lsr.w	r6, r1, r4
 23fab34:	eb42 0106 	adc.w	r1, r2, r6
 23fab38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fab3c:	bf08      	it	eq
 23fab3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fab42:	bd70      	pop	{r4, r5, r6, pc}
 23fab44:	f1c4 040c 	rsb	r4, r4, #12
 23fab48:	f1c4 0520 	rsb	r5, r4, #32
 23fab4c:	fa00 f304 	lsl.w	r3, r0, r4
 23fab50:	fa20 f005 	lsr.w	r0, r0, r5
 23fab54:	fa01 f204 	lsl.w	r2, r1, r4
 23fab58:	ea40 0002 	orr.w	r0, r0, r2
 23fab5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fab60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fab64:	f141 0100 	adc.w	r1, r1, #0
 23fab68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fab6c:	bf08      	it	eq
 23fab6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fab72:	bd70      	pop	{r4, r5, r6, pc}
 23fab74:	f1c4 0520 	rsb	r5, r4, #32
 23fab78:	fa00 f205 	lsl.w	r2, r0, r5
 23fab7c:	ea4e 0e02 	orr.w	lr, lr, r2
 23fab80:	fa20 f304 	lsr.w	r3, r0, r4
 23fab84:	fa01 f205 	lsl.w	r2, r1, r5
 23fab88:	ea43 0302 	orr.w	r3, r3, r2
 23fab8c:	fa21 f004 	lsr.w	r0, r1, r4
 23fab90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fab94:	fa21 f204 	lsr.w	r2, r1, r4
 23fab98:	ea20 0002 	bic.w	r0, r0, r2
 23fab9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23faba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23faba4:	bf08      	it	eq
 23faba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fabaa:	bd70      	pop	{r4, r5, r6, pc}
 23fabac:	f094 0f00 	teq	r4, #0
 23fabb0:	d10f      	bne.n	23fabd2 <__aeabi_dmul+0x1c2>
 23fabb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fabb6:	0040      	lsls	r0, r0, #1
 23fabb8:	eb41 0101 	adc.w	r1, r1, r1
 23fabbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fabc0:	bf08      	it	eq
 23fabc2:	3c01      	subeq	r4, #1
 23fabc4:	d0f7      	beq.n	23fabb6 <__aeabi_dmul+0x1a6>
 23fabc6:	ea41 0106 	orr.w	r1, r1, r6
 23fabca:	f095 0f00 	teq	r5, #0
 23fabce:	bf18      	it	ne
 23fabd0:	4770      	bxne	lr
 23fabd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fabd6:	0052      	lsls	r2, r2, #1
 23fabd8:	eb43 0303 	adc.w	r3, r3, r3
 23fabdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fabe0:	bf08      	it	eq
 23fabe2:	3d01      	subeq	r5, #1
 23fabe4:	d0f7      	beq.n	23fabd6 <__aeabi_dmul+0x1c6>
 23fabe6:	ea43 0306 	orr.w	r3, r3, r6
 23fabea:	4770      	bx	lr
 23fabec:	ea94 0f0c 	teq	r4, ip
 23fabf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fabf4:	bf18      	it	ne
 23fabf6:	ea95 0f0c 	teqne	r5, ip
 23fabfa:	d00c      	beq.n	23fac16 <__aeabi_dmul+0x206>
 23fabfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fac00:	bf18      	it	ne
 23fac02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fac06:	d1d1      	bne.n	23fabac <__aeabi_dmul+0x19c>
 23fac08:	ea81 0103 	eor.w	r1, r1, r3
 23fac0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fac10:	f04f 0000 	mov.w	r0, #0
 23fac14:	bd70      	pop	{r4, r5, r6, pc}
 23fac16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fac1a:	bf06      	itte	eq
 23fac1c:	4610      	moveq	r0, r2
 23fac1e:	4619      	moveq	r1, r3
 23fac20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fac24:	d019      	beq.n	23fac5a <__aeabi_dmul+0x24a>
 23fac26:	ea94 0f0c 	teq	r4, ip
 23fac2a:	d102      	bne.n	23fac32 <__aeabi_dmul+0x222>
 23fac2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fac30:	d113      	bne.n	23fac5a <__aeabi_dmul+0x24a>
 23fac32:	ea95 0f0c 	teq	r5, ip
 23fac36:	d105      	bne.n	23fac44 <__aeabi_dmul+0x234>
 23fac38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fac3c:	bf1c      	itt	ne
 23fac3e:	4610      	movne	r0, r2
 23fac40:	4619      	movne	r1, r3
 23fac42:	d10a      	bne.n	23fac5a <__aeabi_dmul+0x24a>
 23fac44:	ea81 0103 	eor.w	r1, r1, r3
 23fac48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fac4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fac50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fac54:	f04f 0000 	mov.w	r0, #0
 23fac58:	bd70      	pop	{r4, r5, r6, pc}
 23fac5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fac5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fac62:	bd70      	pop	{r4, r5, r6, pc}

023fac64 <__aeabi_ddiv>:
 23fac64:	b570      	push	{r4, r5, r6, lr}
 23fac66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fac6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fac6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fac72:	bf1d      	ittte	ne
 23fac74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fac78:	ea94 0f0c 	teqne	r4, ip
 23fac7c:	ea95 0f0c 	teqne	r5, ip
 23fac80:	f000 f8a7 	bleq	23fadd2 <__aeabi_ddiv+0x16e>
 23fac84:	eba4 0405 	sub.w	r4, r4, r5
 23fac88:	ea81 0e03 	eor.w	lr, r1, r3
 23fac8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fac90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fac94:	f000 8088 	beq.w	23fada8 <__aeabi_ddiv+0x144>
 23fac98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fac9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23faca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23faca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23faca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23facac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23facb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23facb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23facb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23facbc:	429d      	cmp	r5, r3
 23facbe:	bf08      	it	eq
 23facc0:	4296      	cmpeq	r6, r2
 23facc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23facc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23facca:	d202      	bcs.n	23facd2 <__aeabi_ddiv+0x6e>
 23faccc:	085b      	lsrs	r3, r3, #1
 23facce:	ea4f 0232 	mov.w	r2, r2, rrx
 23facd2:	1ab6      	subs	r6, r6, r2
 23facd4:	eb65 0503 	sbc.w	r5, r5, r3
 23facd8:	085b      	lsrs	r3, r3, #1
 23facda:	ea4f 0232 	mov.w	r2, r2, rrx
 23facde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23face2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23face6:	ebb6 0e02 	subs.w	lr, r6, r2
 23facea:	eb75 0e03 	sbcs.w	lr, r5, r3
 23facee:	bf22      	ittt	cs
 23facf0:	1ab6      	subcs	r6, r6, r2
 23facf2:	4675      	movcs	r5, lr
 23facf4:	ea40 000c 	orrcs.w	r0, r0, ip
 23facf8:	085b      	lsrs	r3, r3, #1
 23facfa:	ea4f 0232 	mov.w	r2, r2, rrx
 23facfe:	ebb6 0e02 	subs.w	lr, r6, r2
 23fad02:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fad06:	bf22      	ittt	cs
 23fad08:	1ab6      	subcs	r6, r6, r2
 23fad0a:	4675      	movcs	r5, lr
 23fad0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fad10:	085b      	lsrs	r3, r3, #1
 23fad12:	ea4f 0232 	mov.w	r2, r2, rrx
 23fad16:	ebb6 0e02 	subs.w	lr, r6, r2
 23fad1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fad1e:	bf22      	ittt	cs
 23fad20:	1ab6      	subcs	r6, r6, r2
 23fad22:	4675      	movcs	r5, lr
 23fad24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fad28:	085b      	lsrs	r3, r3, #1
 23fad2a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fad2e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fad32:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fad36:	bf22      	ittt	cs
 23fad38:	1ab6      	subcs	r6, r6, r2
 23fad3a:	4675      	movcs	r5, lr
 23fad3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fad40:	ea55 0e06 	orrs.w	lr, r5, r6
 23fad44:	d018      	beq.n	23fad78 <__aeabi_ddiv+0x114>
 23fad46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fad4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fad4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fad52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fad56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fad5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fad5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fad62:	d1c0      	bne.n	23face6 <__aeabi_ddiv+0x82>
 23fad64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fad68:	d10b      	bne.n	23fad82 <__aeabi_ddiv+0x11e>
 23fad6a:	ea41 0100 	orr.w	r1, r1, r0
 23fad6e:	f04f 0000 	mov.w	r0, #0
 23fad72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fad76:	e7b6      	b.n	23face6 <__aeabi_ddiv+0x82>
 23fad78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fad7c:	bf04      	itt	eq
 23fad7e:	4301      	orreq	r1, r0
 23fad80:	2000      	moveq	r0, #0
 23fad82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fad86:	bf88      	it	hi
 23fad88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fad8c:	f63f aeaf 	bhi.w	23faaee <__aeabi_dmul+0xde>
 23fad90:	ebb5 0c03 	subs.w	ip, r5, r3
 23fad94:	bf04      	itt	eq
 23fad96:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fad9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fad9e:	f150 0000 	adcs.w	r0, r0, #0
 23fada2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fada6:	bd70      	pop	{r4, r5, r6, pc}
 23fada8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fadac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fadb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fadb4:	bfc2      	ittt	gt
 23fadb6:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fadba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fadbe:	bd70      	popgt	{r4, r5, r6, pc}
 23fadc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fadc4:	f04f 0e00 	mov.w	lr, #0
 23fadc8:	3c01      	subs	r4, #1
 23fadca:	e690      	b.n	23faaee <__aeabi_dmul+0xde>
 23fadcc:	ea45 0e06 	orr.w	lr, r5, r6
 23fadd0:	e68d      	b.n	23faaee <__aeabi_dmul+0xde>
 23fadd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fadd6:	ea94 0f0c 	teq	r4, ip
 23fadda:	bf08      	it	eq
 23faddc:	ea95 0f0c 	teqeq	r5, ip
 23fade0:	f43f af3b 	beq.w	23fac5a <__aeabi_dmul+0x24a>
 23fade4:	ea94 0f0c 	teq	r4, ip
 23fade8:	d10a      	bne.n	23fae00 <__aeabi_ddiv+0x19c>
 23fadea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fadee:	f47f af34 	bne.w	23fac5a <__aeabi_dmul+0x24a>
 23fadf2:	ea95 0f0c 	teq	r5, ip
 23fadf6:	f47f af25 	bne.w	23fac44 <__aeabi_dmul+0x234>
 23fadfa:	4610      	mov	r0, r2
 23fadfc:	4619      	mov	r1, r3
 23fadfe:	e72c      	b.n	23fac5a <__aeabi_dmul+0x24a>
 23fae00:	ea95 0f0c 	teq	r5, ip
 23fae04:	d106      	bne.n	23fae14 <__aeabi_ddiv+0x1b0>
 23fae06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fae0a:	f43f aefd 	beq.w	23fac08 <__aeabi_dmul+0x1f8>
 23fae0e:	4610      	mov	r0, r2
 23fae10:	4619      	mov	r1, r3
 23fae12:	e722      	b.n	23fac5a <__aeabi_dmul+0x24a>
 23fae14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fae18:	bf18      	it	ne
 23fae1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fae1e:	f47f aec5 	bne.w	23fabac <__aeabi_dmul+0x19c>
 23fae22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fae26:	f47f af0d 	bne.w	23fac44 <__aeabi_dmul+0x234>
 23fae2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fae2e:	f47f aeeb 	bne.w	23fac08 <__aeabi_dmul+0x1f8>
 23fae32:	e712      	b.n	23fac5a <__aeabi_dmul+0x24a>

023fae34 <__aeabi_d2f>:
 23fae34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fae38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fae3c:	bf24      	itt	cs
 23fae3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fae42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fae46:	d90d      	bls.n	23fae64 <__aeabi_d2f+0x30>
 23fae48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fae4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fae50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fae54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fae58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fae5c:	bf08      	it	eq
 23fae5e:	f020 0001 	biceq.w	r0, r0, #1
 23fae62:	4770      	bx	lr
 23fae64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fae68:	d121      	bne.n	23faeae <__aeabi_d2f+0x7a>
 23fae6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fae6e:	bfbc      	itt	lt
 23fae70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fae74:	4770      	bxlt	lr
 23fae76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fae7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fae7e:	f1c2 0218 	rsb	r2, r2, #24
 23fae82:	f1c2 0c20 	rsb	ip, r2, #32
 23fae86:	fa10 f30c 	lsls.w	r3, r0, ip
 23fae8a:	fa20 f002 	lsr.w	r0, r0, r2
 23fae8e:	bf18      	it	ne
 23fae90:	f040 0001 	orrne.w	r0, r0, #1
 23fae94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fae98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fae9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 23faea0:	ea40 000c 	orr.w	r0, r0, ip
 23faea4:	fa23 f302 	lsr.w	r3, r3, r2
 23faea8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23faeac:	e7cc      	b.n	23fae48 <__aeabi_d2f+0x14>
 23faeae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23faeb2:	d107      	bne.n	23faec4 <__aeabi_d2f+0x90>
 23faeb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23faeb8:	bf1e      	ittt	ne
 23faeba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23faebe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23faec2:	4770      	bxne	lr
 23faec4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23faec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23faecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23faed0:	4770      	bx	lr
 23faed2:	bf00      	nop

023faed4 <strcmp>:
 23faed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 23faed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 23faedc:	2a01      	cmp	r2, #1
 23faede:	bf28      	it	cs
 23faee0:	429a      	cmpcs	r2, r3
 23faee2:	d0f7      	beq.n	23faed4 <strcmp>
 23faee4:	1ad0      	subs	r0, r2, r3
 23faee6:	4770      	bx	lr

023faee8 <strlen>:
 23faee8:	4603      	mov	r3, r0
 23faeea:	f813 2b01 	ldrb.w	r2, [r3], #1
 23faeee:	2a00      	cmp	r2, #0
 23faef0:	d1fb      	bne.n	23faeea <strlen+0x2>
 23faef2:	1a18      	subs	r0, r3, r0
 23faef4:	3801      	subs	r0, #1
 23faef6:	4770      	bx	lr

023faef8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23faef8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23faefa:	f003 febb 	bl	23fec74 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23faefe:	2500      	movs	r5, #0
 23faf00:	4e05      	ldr	r6, [pc, #20]	; (23faf18 <module_user_init+0x20>)
 23faf02:	4c06      	ldr	r4, [pc, #24]	; (23faf1c <module_user_init+0x24>)
 23faf04:	1ba4      	subs	r4, r4, r6
 23faf06:	08a4      	lsrs	r4, r4, #2
 23faf08:	42ac      	cmp	r4, r5
 23faf0a:	d100      	bne.n	23faf0e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23faf0c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23faf0e:	f856 3b04 	ldr.w	r3, [r6], #4
 23faf12:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23faf14:	3501      	adds	r5, #1
 23faf16:	e7f7      	b.n	23faf08 <module_user_init+0x10>
 23faf18:	023fffd0 	.word	0x023fffd0
 23faf1c:	023ffff4 	.word	0x023ffff4

023faf20 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23faf20:	f000 b9aa 	b.w	23fb278 <setup>

023faf24 <module_user_loop>:
}

void module_user_loop() {
 23faf24:	b508      	push	{r3, lr}
    loop();
 23faf26:	f000 f9d7 	bl	23fb2d8 <loop>
    _post_loop();
}
 23faf2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23faf2e:	f003 be59 	b.w	23febe4 <_post_loop>

023faf32 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23faf32:	f001 bf1d 	b.w	23fcd70 <malloc>

023faf36 <_Znaj>:
 23faf36:	f001 bf1b 	b.w	23fcd70 <malloc>

023faf3a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23faf3a:	f001 bf27 	b.w	23fcd8c <free>
	...

023faf40 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23faf40:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23faf42:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23faf44:	4a02      	ldr	r2, [pc, #8]	; (23faf50 <__cxa_pure_virtual+0x10>)
 23faf46:	4903      	ldr	r1, [pc, #12]	; (23faf54 <__cxa_pure_virtual+0x14>)
 23faf48:	f001 fdde 	bl	23fcb08 <panic_>
  while (1);
 23faf4c:	e7fe      	b.n	23faf4c <__cxa_pure_virtual+0xc>
 23faf4e:	bf00      	nop
 23faf50:	023fc5c9 	.word	0x023fc5c9
 23faf54:	023ff3b0 	.word	0x023ff3b0

023faf58 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23faf58:	7800      	ldrb	r0, [r0, #0]
 23faf5a:	fab0 f080 	clz	r0, r0
 23faf5e:	0940      	lsrs	r0, r0, #5
 23faf60:	4770      	bx	lr

023faf62 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23faf62:	2301      	movs	r3, #1
 23faf64:	7003      	strb	r3, [r0, #0]
 23faf66:	4770      	bx	lr

023faf68 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23faf68:	4770      	bx	lr

023faf6a <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 23faf6a:	6943      	ldr	r3, [r0, #20]
 23faf6c:	b113      	cbz	r3, 23faf74 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23faf6e:	6983      	ldr	r3, [r0, #24]
 23faf70:	300c      	adds	r0, #12
 23faf72:	4718      	bx	r3
            callback();
        }
    }
 23faf74:	4770      	bx	lr

023faf76 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 23faf76:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 23faf78:	2100      	movs	r1, #0
 23faf7a:	4604      	mov	r4, r0
 23faf7c:	4608      	mov	r0, r1
 23faf7e:	f001 fa89 	bl	23fc494 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 23faf82:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 23faf84:	4620      	mov	r0, r4
 23faf86:	a901      	add	r1, sp, #4
            void* id = nullptr;
 23faf88:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 23faf8a:	f001 faad 	bl	23fc4e8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 23faf8e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 23faf90:	b10c      	cbz	r4, 23faf96 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 23faf92:	2301      	movs	r3, #1
 23faf94:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 23faf96:	2100      	movs	r1, #0
 23faf98:	2001      	movs	r0, #1
 23faf9a:	f001 fa7b 	bl	23fc494 <os_thread_scheduling>
            }
        }
        if (t) {
 23faf9e:	b12c      	cbz	r4, 23fafac <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 23fafa0:	6823      	ldr	r3, [r4, #0]
 23fafa2:	4620      	mov	r0, r4
 23fafa4:	689b      	ldr	r3, [r3, #8]
 23fafa6:	4798      	blx	r3
            t->running = false;
 23fafa8:	2300      	movs	r3, #0
 23fafaa:	7123      	strb	r3, [r4, #4]
        }
    }
 23fafac:	b002      	add	sp, #8
 23fafae:	bd10      	pop	{r4, pc}

023fafb0 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23fafb0:	2a01      	cmp	r2, #1
 23fafb2:	d102      	bne.n	23fafba <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fafb4:	6001      	str	r1, [r0, #0]
      }
 23fafb6:	2000      	movs	r0, #0
 23fafb8:	4770      	bx	lr
	  switch (__op)
 23fafba:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23fafbc:	bf04      	itt	eq
 23fafbe:	680b      	ldreq	r3, [r1, #0]
 23fafc0:	6003      	streq	r3, [r0, #0]
	      break;
 23fafc2:	e7f8      	b.n	23fafb6 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023fafc4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fafc4:	6803      	ldr	r3, [r0, #0]
 23fafc6:	4718      	bx	r3

023fafc8 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 23fafc8:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 23fafca:	6880      	ldr	r0, [r0, #8]
 23fafcc:	b130      	cbz	r0, 23fafdc <_ZN5Timer4stopEj.isra.0+0x14>
 23fafce:	2300      	movs	r3, #0
 23fafd0:	e9cd 1300 	strd	r1, r3, [sp]
 23fafd4:	461a      	mov	r2, r3
 23fafd6:	2102      	movs	r1, #2
 23fafd8:	f001 fa94 	bl	23fc504 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 23fafdc:	b003      	add	sp, #12
 23fafde:	f85d fb04 	ldr.w	pc, [sp], #4

023fafe2 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
 23fafe2:	b530      	push	{r4, r5, lr}
 23fafe4:	4605      	mov	r5, r0
 23fafe6:	b085      	sub	sp, #20
 23fafe8:	460c      	mov	r4, r1
        stop(fromISR);
 23fafea:	4611      	mov	r1, r2
 23fafec:	9203      	str	r2, [sp, #12]
 23fafee:	f7ff ffeb 	bl	23fafc8 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 23faff2:	68a8      	ldr	r0, [r5, #8]
 23faff4:	b130      	cbz	r0, 23fb004 <_ZN5Timer6_startEjb.isra.0+0x22>
 23faff6:	2300      	movs	r3, #0
 23faff8:	9a03      	ldr	r2, [sp, #12]
 23faffa:	4619      	mov	r1, r3
 23faffc:	e9cd 4300 	strd	r4, r3, [sp]
 23fb000:	f001 fa80 	bl	23fc504 <os_timer_change>
    }
 23fb004:	b005      	add	sp, #20
 23fb006:	bd30      	pop	{r4, r5, pc}

023fb008 <_Z10sampleDatav>:
        Log.info("FAILED TO SET GAIN: %d", gainRet);
    }  
}

void sampleData()
{
 23fb008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb00c:	ed2d 8b02 	vpush	{d8}
    voltageADC = analogRead(voltagePIN); //read ADC values
 23fb010:	4b35      	ldr	r3, [pc, #212]	; (23fb0e8 <_Z10sampleDatav+0xe0>)
 23fb012:	4d36      	ldr	r5, [pc, #216]	; (23fb0ec <_Z10sampleDatav+0xe4>)
 23fb014:	8818      	ldrh	r0, [r3, #0]
 23fb016:	f003 feda 	bl	23fedce <analogRead>
    currentADC = analogRead(currentPIN);
 23fb01a:	4b35      	ldr	r3, [pc, #212]	; (23fb0f0 <_Z10sampleDatav+0xe8>)
    voltageADC = analogRead(voltagePIN); //read ADC values
 23fb01c:	6028      	str	r0, [r5, #0]
    currentADC = analogRead(currentPIN);
 23fb01e:	8818      	ldrh	r0, [r3, #0]
 23fb020:	f003 fed5 	bl	23fedce <analogRead>
    payloadBuffer[0][sampleIndex] = voltageADC;
 23fb024:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 23fb120 <_Z10sampleDatav+0x118>
    currentADC = analogRead(currentPIN);
 23fb028:	4b32      	ldr	r3, [pc, #200]	; (23fb0f4 <_Z10sampleDatav+0xec>)
    payloadBuffer[0][sampleIndex] = voltageADC;
 23fb02a:	682a      	ldr	r2, [r5, #0]
 23fb02c:	f8d8 4000 	ldr.w	r4, [r8]
    currentADC = analogRead(currentPIN);
 23fb030:	6018      	str	r0, [r3, #0]
    payloadBuffer[0][sampleIndex] = voltageADC;
 23fb032:	4b31      	ldr	r3, [pc, #196]	; (23fb0f8 <_Z10sampleDatav+0xf0>)
    payloadBuffer[1][sampleIndex] = currentADC;
    sampleIndex++;

    //offsetCurrent = offsetCurrent + ((currentADC - offsetCurrent) / 4096);
    filteredCurrent = currentADC - 2048;
 23fb034:	4d31      	ldr	r5, [pc, #196]	; (23fb0fc <_Z10sampleDatav+0xf4>)
    payloadBuffer[0][sampleIndex] = voltageADC;
 23fb036:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    payloadBuffer[1][sampleIndex] = currentADC;
 23fb03a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 23fb03e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    sampleIndex++;
 23fb042:	3401      	adds	r4, #1
    filteredCurrent = currentADC - 2048;
 23fb044:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
    sampleIndex++;
 23fb048:	f8c8 4000 	str.w	r4, [r8]
    filteredCurrent = currentADC - 2048;
 23fb04c:	f7ff fc76 	bl	23fa93c <__aeabi_i2d>
 23fb050:	4602      	mov	r2, r0
 23fb052:	460b      	mov	r3, r1
 23fb054:	e9c5 2300 	strd	r2, r3, [r5]
    squareCurrent = filteredCurrent * filteredCurrent;
 23fb058:	f7ff fcda 	bl	23faa10 <__aeabi_dmul>
 23fb05c:	4606      	mov	r6, r0
 23fb05e:	460f      	mov	r7, r1
 23fb060:	4b27      	ldr	r3, [pc, #156]	; (23fb100 <_Z10sampleDatav+0xf8>)
    sumCurrent += squareCurrent;
 23fb062:	4d28      	ldr	r5, [pc, #160]	; (23fb104 <_Z10sampleDatav+0xfc>)
    squareCurrent = filteredCurrent * filteredCurrent;
 23fb064:	e9c3 6700 	strd	r6, r7, [r3]
    sumCurrent += squareCurrent;
 23fb068:	6828      	ldr	r0, [r5, #0]
 23fb06a:	f7ff fc79 	bl	23fa960 <__aeabi_f2d>
 23fb06e:	4632      	mov	r2, r6
 23fb070:	463b      	mov	r3, r7
 23fb072:	f7ff fb17 	bl	23fa6a4 <__adddf3>
 23fb076:	f7ff fedd 	bl	23fae34 <__aeabi_d2f>

    if(sampleIndex == NUM_SAMPLES)  //we are done sampling for this event
 23fb07a:	2c50      	cmp	r4, #80	; 0x50
    sumCurrent += squareCurrent;
 23fb07c:	6028      	str	r0, [r5, #0]
    if(sampleIndex == NUM_SAMPLES)  //we are done sampling for this event
 23fb07e:	d12e      	bne.n	23fb0de <_Z10sampleDatav+0xd6>
    {
        sendData = true;
 23fb080:	2201      	movs	r2, #1
 23fb082:	4b21      	ldr	r3, [pc, #132]	; (23fb108 <_Z10sampleDatav+0x100>)
        sampleIndex = 0;
        sample.stop();  
 23fb084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
        sendData = true;
 23fb088:	701a      	strb	r2, [r3, #0]
        sampleIndex = 0;
 23fb08a:	2300      	movs	r3, #0
        sample.stop();  
 23fb08c:	481f      	ldr	r0, [pc, #124]	; (23fb10c <_Z10sampleDatav+0x104>)
        sampleIndex = 0;
 23fb08e:	f8c8 3000 	str.w	r3, [r8]
        sample.stop();  
 23fb092:	f7ff ff99 	bl	23fafc8 <_ZN5Timer4stopEj.isra.0>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 23fb096:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23fb110 <_Z10sampleDatav+0x108>
        rmsCurrent = sqrt(sumCurrent / NUM_SAMPLES);
 23fb09a:	ed95 0a00 	vldr	s0, [r5]
 23fb09e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 23fb0a2:	f003 ffa9 	bl	23feff8 <sqrtf>
        rmsCurrent -= 8;
 23fb0a6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
        if(rmsCurrent < 0)
 23fb0aa:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 23fb114 <_Z10sampleDatav+0x10c>
        rmsCurrent -= 8;
 23fb0ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 23fb0b2:	eeb4 0ac8 	vcmpe.f32	s0, s16
 23fb0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            rmsCurrent = 0;
        }
        rmsCurrent *= CURRENT_CAL;
 23fb0ba:	bf54      	ite	pl
 23fb0bc:	ee10 0a10 	vmovpl	r0, s0
 23fb0c0:	ee18 0a10 	vmovmi	r0, s16
 23fb0c4:	f7ff fc4c 	bl	23fa960 <__aeabi_f2d>
 23fb0c8:	4b13      	ldr	r3, [pc, #76]	; (23fb118 <_Z10sampleDatav+0x110>)
 23fb0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb0ce:	f7ff fc9f 	bl	23faa10 <__aeabi_dmul>
 23fb0d2:	f7ff feaf 	bl	23fae34 <__aeabi_d2f>
        sumCurrent = 0;
 23fb0d6:	ed85 8a00 	vstr	s16, [r5]
        rmsCurrent *= CURRENT_CAL;
 23fb0da:	4b10      	ldr	r3, [pc, #64]	; (23fb11c <_Z10sampleDatav+0x114>)
 23fb0dc:	6018      	str	r0, [r3, #0]
    }
}
 23fb0de:	ecbd 8b02 	vpop	{d8}
 23fb0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb0e6:	bf00      	nop
 23fb0e8:	1007a9c8 	.word	0x1007a9c8
 23fb0ec:	1007ae4c 	.word	0x1007ae4c
 23fb0f0:	1007a9c0 	.word	0x1007a9c0
 23fb0f4:	1007aa50 	.word	0x1007aa50
 23fb0f8:	1007aa90 	.word	0x1007aa90
 23fb0fc:	1007aa60 	.word	0x1007aa60
 23fb100:	1007ad58 	.word	0x1007ad58
 23fb104:	1007ad60 	.word	0x1007ad60
 23fb108:	1007ad54 	.word	0x1007ad54
 23fb10c:	1007ad24 	.word	0x1007ad24
 23fb110:	42a00000 	.word	0x42a00000
 23fb114:	00000000 	.word	0x00000000
 23fb118:	1007a9b8 	.word	0x1007a9b8
 23fb11c:	1007ad20 	.word	0x1007ad20
 23fb120:	1007ad40 	.word	0x1007ad40

023fb124 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fb124:	b510      	push	{r4, lr}
 23fb126:	4604      	mov	r4, r0
 23fb128:	4b09      	ldr	r3, [pc, #36]	; (23fb150 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fb12a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fb12c:	f002 fb68 	bl	23fd800 <_ZN5spark10LogManager8instanceEv>
 23fb130:	4621      	mov	r1, r4
 23fb132:	f002 fd9f 	bl	23fdc74 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fb136:	f003 fcc5 	bl	23feac4 <_Z16_fetch_usbserialv>
 23fb13a:	f003 fcb7 	bl	23feaac <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fb13e:	4620      	mov	r0, r4
 23fb140:	4b04      	ldr	r3, [pc, #16]	; (23fb154 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fb142:	f840 3b04 	str.w	r3, [r0], #4
 23fb146:	f002 fc31 	bl	23fd9ac <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fb14a:	4620      	mov	r0, r4
 23fb14c:	bd10      	pop	{r4, pc}
 23fb14e:	bf00      	nop
 23fb150:	023ff45c 	.word	0x023ff45c
 23fb154:	023ff444 	.word	0x023ff444

023fb158 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fb158:	b510      	push	{r4, lr}
 23fb15a:	4604      	mov	r4, r0
    }
 23fb15c:	f7ff ffe2 	bl	23fb124 <_ZN5spark16SerialLogHandlerD1Ev>
 23fb160:	4620      	mov	r0, r4
 23fb162:	2124      	movs	r1, #36	; 0x24
 23fb164:	f7ff fee9 	bl	23faf3a <_ZdlPvj>
 23fb168:	4620      	mov	r0, r4
 23fb16a:	bd10      	pop	{r4, pc}

023fb16c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fb16c:	b510      	push	{r4, lr}
      if (_M_manager)
 23fb16e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fb170:	4604      	mov	r4, r0
      if (_M_manager)
 23fb172:	b113      	cbz	r3, 23fb17a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fb174:	2203      	movs	r2, #3
 23fb176:	4601      	mov	r1, r0
 23fb178:	4798      	blx	r3
    }
 23fb17a:	4620      	mov	r0, r4
 23fb17c:	bd10      	pop	{r4, pc}
	...

023fb180 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 23fb180:	b538      	push	{r3, r4, r5, lr}
 23fb182:	4b0f      	ldr	r3, [pc, #60]	; (23fb1c0 <_ZN5TimerD1Ev+0x40>)
 23fb184:	4604      	mov	r4, r0
 23fb186:	6003      	str	r3, [r0, #0]
        if (handle) {
 23fb188:	6883      	ldr	r3, [r0, #8]
 23fb18a:	b19b      	cbz	r3, 23fb1b4 <_ZN5TimerD1Ev+0x34>
            stop();
 23fb18c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fb190:	f7ff ff1a 	bl	23fafc8 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
 23fb194:	2100      	movs	r1, #0
 23fb196:	68a0      	ldr	r0, [r4, #8]
 23fb198:	f001 f9fa 	bl	23fc590 <os_timer_set_id>
            while (running) {
 23fb19c:	7923      	ldrb	r3, [r4, #4]
 23fb19e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 23fb1a2:	b113      	cbz	r3, 23fb1aa <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
 23fb1a4:	f001 f968 	bl	23fc478 <os_thread_yield>
            while (running) {
 23fb1a8:	e7f8      	b.n	23fb19c <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
 23fb1aa:	4629      	mov	r1, r5
 23fb1ac:	68a0      	ldr	r0, [r4, #8]
 23fb1ae:	f001 f98d 	bl	23fc4cc <os_timer_destroy>
            handle = nullptr;
 23fb1b2:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 23fb1b4:	f104 000c 	add.w	r0, r4, #12
 23fb1b8:	f7ff ffd8 	bl	23fb16c <_ZNSt14_Function_baseD1Ev>
    }
 23fb1bc:	4620      	mov	r0, r4
 23fb1be:	bd38      	pop	{r3, r4, r5, pc}
 23fb1c0:	023ff430 	.word	0x023ff430

023fb1c4 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 23fb1c4:	b510      	push	{r4, lr}
 23fb1c6:	4604      	mov	r4, r0
    }
 23fb1c8:	f7ff ffda 	bl	23fb180 <_ZN5TimerD1Ev>
 23fb1cc:	4620      	mov	r0, r4
 23fb1ce:	211c      	movs	r1, #28
 23fb1d0:	f7ff feb3 	bl	23faf3a <_ZdlPvj>
 23fb1d4:	4620      	mov	r0, r4
 23fb1d6:	bd10      	pop	{r4, pc}

023fb1d8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fb1d8:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fb1da:	f04f 0c20 	mov.w	ip, #32
 23fb1de:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fb1e0:	b500      	push	{lr}
 23fb1e2:	b08c      	sub	sp, #48	; 0x30
 23fb1e4:	aa0d      	add	r2, sp, #52	; 0x34
 23fb1e6:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fb1ea:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb1ee:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fb1f2:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb1f4:	6801      	ldr	r1, [r0, #0]
 23fb1f6:	aa04      	add	r2, sp, #16
 23fb1f8:	201e      	movs	r0, #30
 23fb1fa:	f001 fc93 	bl	23fcb24 <log_message_v>
}
 23fb1fe:	b00c      	add	sp, #48	; 0x30
 23fb200:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb204:	b003      	add	sp, #12
 23fb206:	4770      	bx	lr

023fb208 <_Z7setGainv>:
{
 23fb208:	b510      	push	{r4, lr}
    Wire.beginTransmission(0x2f);
 23fb20a:	f003 fe0d 	bl	23fee28 <_Z19__fetch_global_Wirev>
 23fb20e:	212f      	movs	r1, #47	; 0x2f
 23fb210:	f001 ff14 	bl	23fd03c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(0x00);
 23fb214:	f003 fe08 	bl	23fee28 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23fb218:	6803      	ldr	r3, [r0, #0]
 23fb21a:	2100      	movs	r1, #0
 23fb21c:	689b      	ldr	r3, [r3, #8]
 23fb21e:	4798      	blx	r3
    Wire.write(GAIN_VALUE);
 23fb220:	f003 fe02 	bl	23fee28 <_Z19__fetch_global_Wirev>
 23fb224:	6803      	ldr	r3, [r0, #0]
 23fb226:	21f5      	movs	r1, #245	; 0xf5
 23fb228:	689b      	ldr	r3, [r3, #8]
 23fb22a:	4798      	blx	r3
    Wire.endTransmission();
 23fb22c:	f003 fdfc 	bl	23fee28 <_Z19__fetch_global_Wirev>
 23fb230:	f001 ff0b 	bl	23fd04a <_ZN7TwoWire15endTransmissionEv>
    delay(5);
 23fb234:	2005      	movs	r0, #5
 23fb236:	f001 fdfd 	bl	23fce34 <delay>
    Wire.requestFrom(0x2f,1);
 23fb23a:	f003 fdf5 	bl	23fee28 <_Z19__fetch_global_Wirev>
 23fb23e:	212f      	movs	r1, #47	; 0x2f
 23fb240:	2201      	movs	r2, #1
 23fb242:	f001 fef4 	bl	23fd02e <_ZN7TwoWire11requestFromEhj>
    gainRet = Wire.read();
 23fb246:	f003 fdef 	bl	23fee28 <_Z19__fetch_global_Wirev>
 23fb24a:	6803      	ldr	r3, [r0, #0]
 23fb24c:	695b      	ldr	r3, [r3, #20]
 23fb24e:	4798      	blx	r3
 23fb250:	4604      	mov	r4, r0
    Wire.endTransmission(); 
 23fb252:	f003 fde9 	bl	23fee28 <_Z19__fetch_global_Wirev>
 23fb256:	f001 fef8 	bl	23fd04a <_ZN7TwoWire15endTransmissionEv>
    if(gainRet == GAIN_VALUE)
 23fb25a:	b2e2      	uxtb	r2, r4
 23fb25c:	2af5      	cmp	r2, #245	; 0xf5
        Log.info("SUCCESS SETTING GAIN: %d", gainRet);
 23fb25e:	bf0c      	ite	eq
 23fb260:	4902      	ldreq	r1, [pc, #8]	; (23fb26c <_Z7setGainv+0x64>)
        Log.info("FAILED TO SET GAIN: %d", gainRet);
 23fb262:	4903      	ldrne	r1, [pc, #12]	; (23fb270 <_Z7setGainv+0x68>)
 23fb264:	4803      	ldr	r0, [pc, #12]	; (23fb274 <_Z7setGainv+0x6c>)
 23fb266:	f7ff ffb7 	bl	23fb1d8 <_ZNK5spark6Logger4infoEPKcz>
}
 23fb26a:	bd10      	pop	{r4, pc}
 23fb26c:	023ff3c5 	.word	0x023ff3c5
 23fb270:	023ff3de 	.word	0x023ff3de
 23fb274:	1007ae74 	.word	0x1007ae74

023fb278 <setup>:

void setup() {
 23fb278:	b508      	push	{r3, lr}
    pinMode(redLED, OUTPUT);
 23fb27a:	4b12      	ldr	r3, [pc, #72]	; (23fb2c4 <setup+0x4c>)
 23fb27c:	2101      	movs	r1, #1
 23fb27e:	8818      	ldrh	r0, [r3, #0]
 23fb280:	f003 fd68 	bl	23fed54 <pinMode>
    Serial.begin(9600);
 23fb284:	f003 fc1e 	bl	23feac4 <_Z16_fetch_usbserialv>
 23fb288:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb28c:	f003 fc0a 	bl	23feaa4 <_ZN9USBSerial5beginEl>
    Log.info("OLED FeatherWing test");
 23fb290:	490d      	ldr	r1, [pc, #52]	; (23fb2c8 <setup+0x50>)
 23fb292:	480e      	ldr	r0, [pc, #56]	; (23fb2cc <setup+0x54>)
 23fb294:	f7ff ffa0 	bl	23fb1d8 <_ZNK5spark6Logger4infoEPKcz>
    debouncer.attach(BUTTON_C, INPUT_PULLUP);
 23fb298:	2202      	movs	r2, #2
 23fb29a:	480d      	ldr	r0, [pc, #52]	; (23fb2d0 <setup+0x58>)
 23fb29c:	4611      	mov	r1, r2
 23fb29e:	f001 f8ab 	bl	23fc3f8 <_ZN8Debounce6attachEi7PinMode>
    debouncer.interval(10); 
 23fb2a2:	210a      	movs	r1, #10
 23fb2a4:	480a      	ldr	r0, [pc, #40]	; (23fb2d0 <setup+0x58>)
 23fb2a6:	f001 f8b4 	bl	23fc412 <_ZN8Debounce8intervalEt>
    //Particle.connect();
    //ui.begin();
    delay(5);
 23fb2aa:	2005      	movs	r0, #5
 23fb2ac:	f001 fdc2 	bl	23fce34 <delay>
    setGain();
 23fb2b0:	f7ff ffaa 	bl	23fb208 <_Z7setGainv>
    sample.start();
}
 23fb2b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool start(unsigned block=default_wait) { return _start(block, false); }
 23fb2b8:	2200      	movs	r2, #0
 23fb2ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fb2be:	4805      	ldr	r0, [pc, #20]	; (23fb2d4 <setup+0x5c>)
 23fb2c0:	f7ff be8f 	b.w	23fafe2 <_ZN5Timer6_startEjb.isra.0>
 23fb2c4:	1007a9c4 	.word	0x1007a9c4
 23fb2c8:	023ff3f5 	.word	0x023ff3f5
 23fb2cc:	1007ae74 	.word	0x1007ae74
 23fb2d0:	1007aa54 	.word	0x1007aa54
 23fb2d4:	1007ad24 	.word	0x1007ad24

023fb2d8 <loop>:
    bool retval = false;
    //retval = Particle.publish("edge/ingest/blender", data_in, PRIVATE);  //manually set appliance label here
    return retval;
}

void loop() {
 23fb2d8:	b538      	push	{r3, r4, r5, lr}
 
    static unsigned long now = millis();
 23fb2da:	4d25      	ldr	r5, [pc, #148]	; (23fb370 <loop+0x98>)
 23fb2dc:	e8d5 3f8f 	ldab	r3, [r5]
 23fb2e0:	f013 0f01 	tst.w	r3, #1
 23fb2e4:	4c23      	ldr	r4, [pc, #140]	; (23fb374 <loop+0x9c>)
 23fb2e6:	d109      	bne.n	23fb2fc <loop+0x24>
 23fb2e8:	4628      	mov	r0, r5
 23fb2ea:	f7ff fe35 	bl	23faf58 <__cxa_guard_acquire>
 23fb2ee:	b128      	cbz	r0, 23fb2fc <loop+0x24>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fb2f0:	f001 f978 	bl	23fc5e4 <HAL_Timer_Get_Milli_Seconds>
 23fb2f4:	6020      	str	r0, [r4, #0]
 23fb2f6:	4628      	mov	r0, r5
 23fb2f8:	f7ff fe33 	bl	23faf62 <__cxa_guard_release>
    static bool state = false;
    static bool gatherData = true;
    int buttonState = 1;

    digitalWrite(redLED, LOW);
 23fb2fc:	4b1e      	ldr	r3, [pc, #120]	; (23fb378 <loop+0xa0>)
 23fb2fe:	2100      	movs	r1, #0
 23fb300:	8818      	ldrh	r0, [r3, #0]
 23fb302:	f003 fd38 	bl	23fed76 <digitalWrite>
    debouncer.update();
 23fb306:	481d      	ldr	r0, [pc, #116]	; (23fb37c <loop+0xa4>)
 23fb308:	f001 f885 	bl	23fc416 <_ZN8Debounce6updateEv>

    //ui.drawAll(53,62,71, false);
    //delay(1000);
    //ui.cloudIsConnected(); 
    //ui.anomalyAlert();
    delay(1000);
 23fb30c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fb310:	f001 fd90 	bl	23fce34 <delay>
        //     writer.name("fan").value(0);
        //     writer.name("lamp").value(1);
        //     writer.name("anomaly").value(0);
        // writer.endObject();
        //Particle.publish("datacake/states", buf);
        instPower = 120 * rmsCurrent;
 23fb314:	4b1a      	ldr	r3, [pc, #104]	; (23fb380 <loop+0xa8>)
 23fb316:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23fb384 <loop+0xac>
 23fb31a:	ed93 7a00 	vldr	s14, [r3]
 23fb31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 23fb322:	4d19      	ldr	r5, [pc, #100]	; (23fb388 <loop+0xb0>)
        Log.info("RMS Current: %f", rmsCurrent);
 23fb324:	ee17 0a10 	vmov	r0, s14
        instPower = 120 * rmsCurrent;
 23fb328:	edc5 7a00 	vstr	s15, [r5]
        Log.info("RMS Current: %f", rmsCurrent);
 23fb32c:	f7ff fb18 	bl	23fa960 <__aeabi_f2d>
 23fb330:	4602      	mov	r2, r0
 23fb332:	460b      	mov	r3, r1
 23fb334:	4815      	ldr	r0, [pc, #84]	; (23fb38c <loop+0xb4>)
 23fb336:	4916      	ldr	r1, [pc, #88]	; (23fb390 <loop+0xb8>)
 23fb338:	f7ff ff4e 	bl	23fb1d8 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("Power: %f", instPower);
 23fb33c:	6828      	ldr	r0, [r5, #0]
 23fb33e:	f7ff fb0f 	bl	23fa960 <__aeabi_f2d>
 23fb342:	460b      	mov	r3, r1
 23fb344:	4602      	mov	r2, r0
 23fb346:	4913      	ldr	r1, [pc, #76]	; (23fb394 <loop+0xbc>)
 23fb348:	4810      	ldr	r0, [pc, #64]	; (23fb38c <loop+0xb4>)
 23fb34a:	f7ff ff45 	bl	23fb1d8 <_ZNK5spark6Logger4infoEPKcz>
 23fb34e:	f001 f949 	bl	23fc5e4 <HAL_Timer_Get_Milli_Seconds>
        //Log.info("sum Current: %f", sumCurrent);
        //delay(3000);
        // if(gatherData)
        // {
            if (millis() - now > SAMPLE_PERIOD) {
 23fb352:	6823      	ldr	r3, [r4, #0]
 23fb354:	1ac0      	subs	r0, r0, r3
 23fb356:	2832      	cmp	r0, #50	; 0x32
 23fb358:	d908      	bls.n	23fb36c <loop+0x94>
 23fb35a:	2200      	movs	r2, #0
 23fb35c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23fb360:	480d      	ldr	r0, [pc, #52]	; (23fb398 <loop+0xc0>)
 23fb362:	f7ff fe3e 	bl	23fafe2 <_ZN5Timer6_startEjb.isra.0>
 23fb366:	f001 f93d 	bl	23fc5e4 <HAL_Timer_Get_Milli_Seconds>
                //state = !state;
                //ui.setBlenderState(state ? ElementState::ON : ElementState::OFF);
                //Log.info("Change Blender state: %s", state ? "ON" : "OFF");

                sample.start();
                now = millis();
 23fb36a:	6020      	str	r0, [r4, #0]
            
            //     sendData = false;
            // }
        //}
    //}// end if connected
}
 23fb36c:	bd38      	pop	{r3, r4, r5, pc}
 23fb36e:	bf00      	nop
 23fb370:	1007aa48 	.word	0x1007aa48
 23fb374:	1007aa4c 	.word	0x1007aa4c
 23fb378:	1007a9c4 	.word	0x1007a9c4
 23fb37c:	1007aa54 	.word	0x1007aa54
 23fb380:	1007ad20 	.word	0x1007ad20
 23fb384:	42f00000 	.word	0x42f00000
 23fb388:	1007aa68 	.word	0x1007aa68
 23fb38c:	1007ae74 	.word	0x1007ae74
 23fb390:	023ff40b 	.word	0x023ff40b
 23fb394:	023ff41b 	.word	0x023ff41b
 23fb398:	1007ad24 	.word	0x1007ad24

023fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb39c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fb39e:	2614      	movs	r6, #20
 23fb3a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb3a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb3a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb3aa:	42ae      	cmp	r6, r5
 23fb3ac:	d004      	beq.n	23fb3b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fb3ae:	4628      	mov	r0, r5
 23fb3b0:	f003 fa07 	bl	23fe7c2 <_ZN6StringD1Ev>
 23fb3b4:	3514      	adds	r5, #20
 23fb3b6:	e7f8      	b.n	23fb3aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fb3b8:	6820      	ldr	r0, [r4, #0]
 23fb3ba:	f001 fce7 	bl	23fcd8c <free>
    AllocatorT::free(data_);
}
 23fb3be:	4620      	mov	r0, r4
 23fb3c0:	bd70      	pop	{r4, r5, r6, pc}

023fb3c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fb3c2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb3c6:	4604      	mov	r4, r0
 23fb3c8:	460d      	mov	r5, r1
 23fb3ca:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb3cc:	d916      	bls.n	23fb3fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fb3ce:	4290      	cmp	r0, r2
 23fb3d0:	d215      	bcs.n	23fb3fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fb3d2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fb3d6:	1a75      	subs	r5, r6, r1
 23fb3d8:	f1a1 0714 	sub.w	r7, r1, #20
 23fb3dc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb3de:	42b7      	cmp	r7, r6
 23fb3e0:	d01c      	beq.n	23fb41c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fb3e2:	b12c      	cbz	r4, 23fb3f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fb3e4:	4631      	mov	r1, r6
 23fb3e6:	4620      	mov	r0, r4
 23fb3e8:	f003 fa68 	bl	23fe8bc <_ZN6StringC1EOS_>
 23fb3ec:	7c33      	ldrb	r3, [r6, #16]
 23fb3ee:	7423      	strb	r3, [r4, #16]
 23fb3f0:	4630      	mov	r0, r6
 23fb3f2:	f003 f9e6 	bl	23fe7c2 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb3f6:	3e14      	subs	r6, #20
 23fb3f8:	3c14      	subs	r4, #20
 23fb3fa:	e7f0      	b.n	23fb3de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fb3fc:	d00e      	beq.n	23fb41c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fb3fe:	42b5      	cmp	r5, r6
 23fb400:	d00c      	beq.n	23fb41c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fb402:	b12c      	cbz	r4, 23fb410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fb404:	4629      	mov	r1, r5
 23fb406:	4620      	mov	r0, r4
 23fb408:	f003 fa58 	bl	23fe8bc <_ZN6StringC1EOS_>
 23fb40c:	7c2b      	ldrb	r3, [r5, #16]
 23fb40e:	7423      	strb	r3, [r4, #16]
 23fb410:	4628      	mov	r0, r5
 23fb412:	f003 f9d6 	bl	23fe7c2 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb416:	3514      	adds	r5, #20
 23fb418:	3414      	adds	r4, #20
 23fb41a:	e7f0      	b.n	23fb3fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fb41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fb41e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fb424:	e9c0 3300 	strd	r3, r3, [r0]
 23fb428:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb42a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb42c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb42e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb430:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb432:	dd24      	ble.n	23fb47e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fb434:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fb438:	fb08 f007 	mul.w	r0, r8, r7
 23fb43c:	f001 fc98 	bl	23fcd70 <malloc>
            if (!d) {
 23fb440:	4605      	mov	r5, r0
 23fb442:	b1e0      	cbz	r0, 23fb47e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fb444:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fb448:	fb08 1202 	mla	r2, r8, r2, r1
 23fb44c:	f7ff ffb9 	bl	23fb3c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fb450:	6820      	ldr	r0, [r4, #0]
 23fb452:	f001 fc9b 	bl	23fcd8c <free>
        data_ = d;
 23fb456:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fb458:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb45a:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fb45e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fb462:	45b8      	cmp	r8, r7
 23fb464:	d009      	beq.n	23fb47a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fb466:	4639      	mov	r1, r7
 23fb468:	4628      	mov	r0, r5
 23fb46a:	f003 fa41 	bl	23fe8f0 <_ZN6StringC1ERKS_>
 23fb46e:	7c3b      	ldrb	r3, [r7, #16]
 23fb470:	3514      	adds	r5, #20
 23fb472:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fb476:	3714      	adds	r7, #20
 23fb478:	e7f3      	b.n	23fb462 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fb47a:	6873      	ldr	r3, [r6, #4]
 23fb47c:	6063      	str	r3, [r4, #4]
}
 23fb47e:	4620      	mov	r0, r4
 23fb480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb484 <_GLOBAL__sub_I_logHandler>:
 23fb484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
 23fb488:	2500      	movs	r5, #0
 23fb48a:	b091      	sub	sp, #68	; 0x44
SYSTEM_THREAD(ENABLED);
 23fb48c:	2100      	movs	r1, #0
 23fb48e:	2001      	movs	r0, #1
 23fb490:	f001 fb8e 	bl	23fcbb0 <system_thread_set_state>
 23fb494:	e9cd 5503 	strd	r5, r5, [sp, #12]
 23fb498:	9505      	str	r5, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
 23fb49a:	f003 fb13 	bl	23feac4 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fb49e:	4f37      	ldr	r7, [pc, #220]	; (23fb57c <_GLOBAL__sub_I_logHandler+0xf8>)
 23fb4a0:	4680      	mov	r8, r0
 23fb4a2:	46b9      	mov	r9, r7
        stream_(&stream) {
 23fb4a4:	ae09      	add	r6, sp, #36	; 0x24
 23fb4a6:	a903      	add	r1, sp, #12
 23fb4a8:	a806      	add	r0, sp, #24
 23fb4aa:	f7ff ffb8 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb4ae:	a906      	add	r1, sp, #24
 23fb4b0:	4630      	mov	r0, r6
 23fb4b2:	f7ff ffb4 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb4b6:	4b32      	ldr	r3, [pc, #200]	; (23fb580 <_GLOBAL__sub_I_logHandler+0xfc>)
 23fb4b8:	ac0c      	add	r4, sp, #48	; 0x30
 23fb4ba:	f849 3b04 	str.w	r3, [r9], #4
 23fb4be:	4631      	mov	r1, r6
 23fb4c0:	4620      	mov	r0, r4
 23fb4c2:	f7ff ffac 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb4c6:	4622      	mov	r2, r4
 23fb4c8:	211e      	movs	r1, #30
 23fb4ca:	4648      	mov	r0, r9
 23fb4cc:	f002 fcb4 	bl	23fde38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb4d0:	4620      	mov	r0, r4
 23fb4d2:	f7ff ff63 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb4d6:	4630      	mov	r0, r6
 23fb4d8:	f7ff ff60 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb4dc:	4b29      	ldr	r3, [pc, #164]	; (23fb584 <_GLOBAL__sub_I_logHandler+0x100>)
 23fb4de:	a806      	add	r0, sp, #24
 23fb4e0:	603b      	str	r3, [r7, #0]
 23fb4e2:	f8c7 8020 	str.w	r8, [r7, #32]
 23fb4e6:	f7ff ff59 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb4ea:	4b27      	ldr	r3, [pc, #156]	; (23fb588 <_GLOBAL__sub_I_logHandler+0x104>)
 23fb4ec:	603b      	str	r3, [r7, #0]
        Serial.begin();
 23fb4ee:	f003 fae9 	bl	23feac4 <_Z16_fetch_usbserialv>
 23fb4f2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb4f6:	f003 fad5 	bl	23feaa4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fb4fa:	f002 f981 	bl	23fd800 <_ZN5spark10LogManager8instanceEv>
 23fb4fe:	4639      	mov	r1, r7
 23fb500:	f002 fb72 	bl	23fdbe8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23fb504:	a803      	add	r0, sp, #12
 23fb506:	f7ff ff49 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
String payloadString;
 23fb50a:	4920      	ldr	r1, [pc, #128]	; (23fb58c <_GLOBAL__sub_I_logHandler+0x108>)
 23fb50c:	4820      	ldr	r0, [pc, #128]	; (23fb590 <_GLOBAL__sub_I_logHandler+0x10c>)
 23fb50e:	f003 f9a3 	bl	23fe858 <_ZN6StringC1EPK19__FlashStringHelper>
String sampleString;
 23fb512:	491e      	ldr	r1, [pc, #120]	; (23fb58c <_GLOBAL__sub_I_logHandler+0x108>)
 23fb514:	481f      	ldr	r0, [pc, #124]	; (23fb594 <_GLOBAL__sub_I_logHandler+0x110>)
 23fb516:	f003 f99f 	bl	23fe858 <_ZN6StringC1EPK19__FlashStringHelper>
UIDisplay ui;
 23fb51a:	481f      	ldr	r0, [pc, #124]	; (23fb598 <_GLOBAL__sub_I_logHandler+0x114>)
 23fb51c:	f000 f84c 	bl	23fb5b8 <_ZN9UIDisplayC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fb520:	4b1e      	ldr	r3, [pc, #120]	; (23fb59c <_GLOBAL__sub_I_logHandler+0x118>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 23fb522:	4a1f      	ldr	r2, [pc, #124]	; (23fb5a0 <_GLOBAL__sub_I_logHandler+0x11c>)
 23fb524:	930c      	str	r3, [sp, #48]	; 0x30
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb526:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fb52a:	4b1e      	ldr	r3, [pc, #120]	; (23fb5a4 <_GLOBAL__sub_I_logHandler+0x120>)
 23fb52c:	e886 0003 	stmia.w	r6, {r0, r1}
 23fb530:	601a      	str	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb532:	f103 020c 	add.w	r2, r3, #12
 23fb536:	e892 0003 	ldmia.w	r2, {r0, r1}
 23fb53a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fb53e:	e896 0003 	ldmia.w	r6, {r0, r1}
 23fb542:	e882 0003 	stmia.w	r2, {r0, r1}
 23fb546:	4a18      	ldr	r2, [pc, #96]	; (23fb5a8 <_GLOBAL__sub_I_logHandler+0x124>)
 23fb548:	711d      	strb	r5, [r3, #4]
 23fb54a:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fb54c:	699a      	ldr	r2, [r3, #24]
 23fb54e:	609d      	str	r5, [r3, #8]
 23fb550:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 23fb552:	4a16      	ldr	r2, [pc, #88]	; (23fb5ac <_GLOBAL__sub_I_logHandler+0x128>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 23fb554:	2101      	movs	r1, #1
 23fb556:	619a      	str	r2, [r3, #24]
 23fb558:	f103 0008 	add.w	r0, r3, #8
 23fb55c:	4a14      	ldr	r2, [pc, #80]	; (23fb5b0 <_GLOBAL__sub_I_logHandler+0x12c>)
 23fb55e:	e9cd 5500 	strd	r5, r5, [sp]
      __a = _GLIBCXX_MOVE(__b);
 23fb562:	950e      	str	r5, [sp, #56]	; 0x38
 23fb564:	f000 ffa4 	bl	23fc4b0 <os_timer_create>
    class function<_Res(_ArgTypes...)>
 23fb568:	4620      	mov	r0, r4
 23fb56a:	f7ff fdff 	bl	23fb16c <_ZNSt14_Function_baseD1Ev>
Debounce debouncer = Debounce(); 
 23fb56e:	4811      	ldr	r0, [pc, #68]	; (23fb5b4 <_GLOBAL__sub_I_logHandler+0x130>)
}
 23fb570:	b011      	add	sp, #68	; 0x44
 23fb572:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
Debounce debouncer = Debounce(); 
 23fb576:	f000 bf2b 	b.w	23fc3d0 <_ZN8DebounceC1Ev>
 23fb57a:	bf00      	nop
 23fb57c:	1007aa6c 	.word	0x1007aa6c
 23fb580:	023ff444 	.word	0x023ff444
 23fb584:	023ffd08 	.word	0x023ffd08
 23fb588:	023ff45c 	.word	0x023ff45c
 23fb58c:	023ffcd3 	.word	0x023ffcd3
 23fb590:	1007ad10 	.word	0x1007ad10
 23fb594:	1007ad44 	.word	0x1007ad44
 23fb598:	1007ad64 	.word	0x1007ad64
 23fb59c:	023fb009 	.word	0x023fb009
 23fb5a0:	023ff430 	.word	0x023ff430
 23fb5a4:	1007ad24 	.word	0x1007ad24
 23fb5a8:	023fafb1 	.word	0x023fafb1
 23fb5ac:	023fafc5 	.word	0x023fafc5
 23fb5b0:	023faf77 	.word	0x023faf77
 23fb5b4:	1007aa54 	.word	0x1007aa54

023fb5b8 <_ZN9UIDisplayC1Ev>:
#include "icons.h"
#include "Org_01.h"

char dispTimes[16];

UIDisplay::UIDisplay() 
 23fb5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fb5ba:	4604      	mov	r4, r0
    : _display(64, 128, &Wire), 
 23fb5bc:	f003 fc34 	bl	23fee28 <_Z19__fetch_global_Wirev>
      lampElement(Bitmaps::lamp, 0, 0), 
      blenderElement(Bitmaps::blender, 0, 28), 
      fridgeElement(Bitmaps::fridge, 0, 56), 
      fanElement(Bitmaps::fan, 0, 84) {}
 23fb5c0:	4a15      	ldr	r2, [pc, #84]	; (23fb618 <_ZN9UIDisplayC1Ev+0x60>)
 23fb5c2:	4916      	ldr	r1, [pc, #88]	; (23fb61c <_ZN9UIDisplayC1Ev+0x64>)
    : _display(64, 128, &Wire), 
 23fb5c4:	4603      	mov	r3, r0
      fanElement(Bitmaps::fan, 0, 84) {}
 23fb5c6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 23fb5ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fb5ce:	2140      	movs	r1, #64	; 0x40
 23fb5d0:	9200      	str	r2, [sp, #0]
 23fb5d2:	4620      	mov	r0, r4
 23fb5d4:	2280      	movs	r2, #128	; 0x80
 23fb5d6:	f000 fe19 	bl	23fc20c <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
 23fb5da:	2300      	movs	r3, #0
 23fb5dc:	4910      	ldr	r1, [pc, #64]	; (23fb620 <_ZN9UIDisplayC1Ev+0x68>)
 23fb5de:	461a      	mov	r2, r3
 23fb5e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 23fb5e4:	f000 f824 	bl	23fb630 <_ZN9UIElementC1EPKhii>
 23fb5e8:	231c      	movs	r3, #28
 23fb5ea:	2200      	movs	r2, #0
 23fb5ec:	490d      	ldr	r1, [pc, #52]	; (23fb624 <_ZN9UIDisplayC1Ev+0x6c>)
 23fb5ee:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 23fb5f2:	f000 f81d 	bl	23fb630 <_ZN9UIElementC1EPKhii>
 23fb5f6:	2338      	movs	r3, #56	; 0x38
 23fb5f8:	2200      	movs	r2, #0
 23fb5fa:	490b      	ldr	r1, [pc, #44]	; (23fb628 <_ZN9UIDisplayC1Ev+0x70>)
 23fb5fc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 23fb600:	f000 f816 	bl	23fb630 <_ZN9UIElementC1EPKhii>
 23fb604:	2354      	movs	r3, #84	; 0x54
 23fb606:	2200      	movs	r2, #0
 23fb608:	4908      	ldr	r1, [pc, #32]	; (23fb62c <_ZN9UIDisplayC1Ev+0x74>)
 23fb60a:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 23fb60e:	f000 f80f 	bl	23fb630 <_ZN9UIElementC1EPKhii>
 23fb612:	4620      	mov	r0, r4
 23fb614:	b004      	add	sp, #16
 23fb616:	bd10      	pop	{r4, pc}
 23fb618:	00061a80 	.word	0x00061a80
 23fb61c:	000186a0 	.word	0x000186a0
 23fb620:	023ff4b4 	.word	0x023ff4b4
 23fb624:	023ff544 	.word	0x023ff544
 23fb628:	023ff4fc 	.word	0x023ff4fc
 23fb62c:	023ff46c 	.word	0x023ff46c

023fb630 <_ZN9UIElementC1EPKhii>:
#include "UIElement.h"
#include "Org_01.h"

UIElement::UIElement(const uint8_t *iconBitmap, int x, int y) 
    : icon(iconBitmap), posX(x), posY(y), state(OFF) {}
 23fb630:	e9c0 1200 	strd	r1, r2, [r0]
 23fb634:	6083      	str	r3, [r0, #8]
 23fb636:	2240      	movs	r2, #64	; 0x40
 23fb638:	2318      	movs	r3, #24
 23fb63a:	2122      	movs	r1, #34	; 0x22
 23fb63c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 23fb640:	231b      	movs	r3, #27
 23fb642:	e9c0 1305 	strd	r1, r3, [r0, #20]
 23fb646:	2311      	movs	r3, #17
 23fb648:	61c3      	str	r3, [r0, #28]
 23fb64a:	2301      	movs	r3, #1
UIElement::UIElement(const uint8_t *iconBitmap, int x, int y) 
 23fb64c:	b510      	push	{r4, lr}
    : icon(iconBitmap), posX(x), posY(y), state(OFF) {}
 23fb64e:	f880 3020 	strb.w	r3, [r0, #32]
 23fb652:	bd10      	pop	{r4, pc}

023fb654 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23fb654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fb658:	461f      	mov	r7, r3
 23fb65a:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23fb65e:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23fb660:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23fb662:	4432      	add	r2, r6
 23fb664:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23fb666:	4604      	mov	r4, r0
 23fb668:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23fb66a:	d902      	bls.n	23fb672 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23fb66c:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 23fb66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23fb672:	7801      	ldrb	r1, [r0, #0]
 23fb674:	6840      	ldr	r0, [r0, #4]
 23fb676:	f001 fcdd 	bl	23fd034 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fb67a:	b97e      	cbnz	r6, 23fb69c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23fb67c:	6860      	ldr	r0, [r4, #4]
 23fb67e:	462a      	mov	r2, r5
 23fb680:	6803      	ldr	r3, [r0, #0]
 23fb682:	4641      	mov	r1, r8
 23fb684:	68db      	ldr	r3, [r3, #12]
 23fb686:	4798      	blx	r3
 23fb688:	4285      	cmp	r5, r0
 23fb68a:	d1ef      	bne.n	23fb66c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23fb68c:	4639      	mov	r1, r7
 23fb68e:	6860      	ldr	r0, [r4, #4]
 23fb690:	f001 fcd7 	bl	23fd042 <_ZN7TwoWire15endTransmissionEh>
 23fb694:	fab0 f080 	clz	r0, r0
 23fb698:	0940      	lsrs	r0, r0, #5
 23fb69a:	e7e8      	b.n	23fb66e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fb69c:	f1b9 0f00 	cmp.w	r9, #0
 23fb6a0:	d0ec      	beq.n	23fb67c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23fb6a2:	6860      	ldr	r0, [r4, #4]
 23fb6a4:	4632      	mov	r2, r6
 23fb6a6:	6803      	ldr	r3, [r0, #0]
 23fb6a8:	4649      	mov	r1, r9
 23fb6aa:	68db      	ldr	r3, [r3, #12]
 23fb6ac:	4798      	blx	r3
 23fb6ae:	4286      	cmp	r6, r0
 23fb6b0:	d1dc      	bne.n	23fb66c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23fb6b2:	e7e3      	b.n	23fb67c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023fb6b4 <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
 23fb6b4:	b508      	push	{r3, lr}
	  setSpeed(speed);
 23fb6b6:	6840      	ldr	r0, [r0, #4]
 23fb6b8:	f001 fc8c 	bl	23fcfd4 <_ZN7TwoWire8setSpeedEm>

#else
  (void)desiredclk;
  return false;
#endif
}
 23fb6bc:	2001      	movs	r0, #1
 23fb6be:	bd08      	pop	{r3, pc}

023fb6c0 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 23fb6c0:	b510      	push	{r4, lr}
 23fb6c2:	4604      	mov	r4, r0
  if (_spiSetting)
 23fb6c4:	6840      	ldr	r0, [r0, #4]
 23fb6c6:	b110      	cbz	r0, 23fb6ce <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 23fb6c8:	6803      	ldr	r3, [r0, #0]
 23fb6ca:	689b      	ldr	r3, [r3, #8]
 23fb6cc:	4798      	blx	r3
}
 23fb6ce:	4620      	mov	r0, r4
 23fb6d0:	bd10      	pop	{r4, pc}
	...

023fb6d4 <_ZN18Adafruit_SPIDevice8transferEPhj>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23fb6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb6d8:	4604      	mov	r4, r0
  //
  // HARDWARE SPI
  //
  if (_spi) {
 23fb6da:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23fb6dc:	460d      	mov	r5, r1
 23fb6de:	b085      	sub	sp, #20
  if (_spi) {
 23fb6e0:	b140      	cbz	r0, 23fb6f4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
#ifdef BUSIO_HAS_HW_SPI
#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, nullptr);
 23fb6e2:	2300      	movs	r3, #0
 23fb6e4:	9300      	str	r3, [sp, #0]
 23fb6e6:	4613      	mov	r3, r2
 23fb6e8:	460a      	mov	r2, r1
 23fb6ea:	f003 f857 	bl	23fe79c <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 23fb6ee:	b005      	add	sp, #20
 23fb6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 23fb6f4:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fb6f6:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 23fb6f8:	2b00      	cmp	r3, #0
 23fb6fa:	bf0c      	ite	eq
 23fb6fc:	f04f 0b01 	moveq.w	fp, #1
 23fb700:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23fb704:	780b      	ldrb	r3, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fb706:	4f44      	ldr	r7, [pc, #272]	; (23fb818 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23fb708:	ea1b 0f03 	tst.w	fp, r3
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fb70c:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23fb710:	bf0c      	ite	eq
 23fb712:	f04f 0901 	moveq.w	r9, #1
 23fb716:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23fb71a:	188b      	adds	r3, r1, r2
 23fb71c:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 23fb71e:	9303      	str	r3, [sp, #12]
 23fb720:	9b03      	ldr	r3, [sp, #12]
 23fb722:	42ab      	cmp	r3, r5
 23fb724:	d0e3      	beq.n	23fb6ee <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 23fb726:	465e      	mov	r6, fp
    uint8_t reply = 0;
 23fb728:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 23fb72c:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 23fb730:	b117      	cbz	r7, 23fb738 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fb732:	4638      	mov	r0, r7
 23fb734:	f000 ff48 	bl	23fc5c8 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 23fb738:	7b63      	ldrb	r3, [r4, #13]
 23fb73a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 23fb73e:	d141      	bne.n	23fb7c4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23fb740:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23fb744:	1c5a      	adds	r2, r3, #1
 23fb746:	d00f      	beq.n	23fb768 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 23fb748:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23fb74c:	bf14      	ite	ne
 23fb74e:	2301      	movne	r3, #1
 23fb750:	2300      	moveq	r3, #0
 23fb752:	454b      	cmp	r3, r9
 23fb754:	d008      	beq.n	23fb768 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort |= mosiPinMask;
 23fb756:	6963      	ldr	r3, [r4, #20]
 23fb758:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb75a:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 23fb75c:	2900      	cmp	r1, #0
 23fb75e:	d02c      	beq.n	23fb7ba <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 23fb760:	f04f 0901 	mov.w	r9, #1
 23fb764:	4302      	orrs	r2, r0
 23fb766:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 23fb768:	69a1      	ldr	r1, [r4, #24]
 23fb76a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fb76c:	680a      	ldr	r2, [r1, #0]
 23fb76e:	4313      	orrs	r3, r2
 23fb770:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23fb772:	b117      	cbz	r7, 23fb77a <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 23fb774:	4638      	mov	r0, r7
 23fb776:	f000 ff27 	bl	23fc5c8 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 23fb77a:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23fb77e:	3301      	adds	r3, #1
 23fb780:	d006      	beq.n	23fb790 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 23fb782:	69e3      	ldr	r3, [r4, #28]
 23fb784:	681a      	ldr	r2, [r3, #0]
 23fb786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23fb788:	421a      	tst	r2, r3
            reply |= b;
 23fb78a:	bf18      	it	ne
 23fb78c:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 23fb790:	69a1      	ldr	r1, [r4, #24]
 23fb792:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fb794:	680a      	ldr	r2, [r1, #0]
 23fb796:	ea22 0303 	bic.w	r3, r2, r3
 23fb79a:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 23fb79c:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23fb7a0:	3301      	adds	r3, #1
        buffer[i] = reply;
 23fb7a2:	bf18      	it	ne
 23fb7a4:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 23fb7a8:	7b23      	ldrb	r3, [r4, #12]
 23fb7aa:	2b00      	cmp	r3, #0
 23fb7ac:	d132      	bne.n	23fb814 <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 23fb7ae:	0076      	lsls	r6, r6, #1
 23fb7b0:	b2f6      	uxtb	r6, r6
 23fb7b2:	2e00      	cmp	r6, #0
 23fb7b4:	d1bc      	bne.n	23fb730 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 23fb7b6:	3501      	adds	r5, #1
 23fb7b8:	e7b2      	b.n	23fb720 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 23fb7ba:	ea22 0200 	bic.w	r2, r2, r0
 23fb7be:	4689      	mov	r9, r1
 23fb7c0:	601a      	str	r2, [r3, #0]
 23fb7c2:	e7d1      	b.n	23fb768 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 23fb7c4:	69a1      	ldr	r1, [r4, #24]
 23fb7c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fb7c8:	680a      	ldr	r2, [r1, #0]
 23fb7ca:	4313      	orrs	r3, r2
 23fb7cc:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23fb7ce:	b117      	cbz	r7, 23fb7d6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 23fb7d0:	4638      	mov	r0, r7
 23fb7d2:	f000 fef9 	bl	23fc5c8 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 23fb7d6:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23fb7da:	3301      	adds	r3, #1
 23fb7dc:	d008      	beq.n	23fb7f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort |= mosiPinMask;
 23fb7de:	6963      	ldr	r3, [r4, #20]
 23fb7e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23fb7e2:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 23fb7e4:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 23fb7e8:	bf14      	ite	ne
 23fb7ea:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 23fb7ec:	438a      	biceq	r2, r1
 23fb7ee:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 23fb7f0:	69a1      	ldr	r1, [r4, #24]
 23fb7f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fb7f4:	680a      	ldr	r2, [r1, #0]
 23fb7f6:	ea22 0303 	bic.w	r3, r2, r3
 23fb7fa:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 23fb7fc:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23fb800:	3301      	adds	r3, #1
 23fb802:	d0cb      	beq.n	23fb79c <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 23fb804:	69e3      	ldr	r3, [r4, #28]
 23fb806:	681a      	ldr	r2, [r3, #0]
 23fb808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23fb80a:	421a      	tst	r2, r3
            reply |= b;
 23fb80c:	bf18      	it	ne
 23fb80e:	ea46 0808 	orrne.w	r8, r6, r8
 23fb812:	e7c3      	b.n	23fb79c <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 23fb814:	0876      	lsrs	r6, r6, #1
 23fb816:	e7cc      	b.n	23fb7b2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 23fb818:	0007a120 	.word	0x0007a120

023fb81c <_ZN18Adafruit_SPIDevice8transferEh>:
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 23fb81c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 23fb81e:	2201      	movs	r2, #1
  uint8_t data = send;
 23fb820:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 23fb824:	f10d 0107 	add.w	r1, sp, #7
 23fb828:	f7ff ff54 	bl	23fb6d4 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 23fb82c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23fb830:	b003      	add	sp, #12
 23fb832:	f85d fb04 	ldr.w	pc, [sp], #4

023fb836 <_ZN18Adafruit_SPIDevice16beginTransactionEv>:
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
 23fb836:	6803      	ldr	r3, [r0, #0]
 23fb838:	b11b      	cbz	r3, 23fb842 <_ZN18Adafruit_SPIDevice16beginTransactionEv+0xc>
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
 23fb83a:	6841      	ldr	r1, [r0, #4]
 23fb83c:	4618      	mov	r0, r3
 23fb83e:	f002 bf3f 	b.w	23fe6c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
#endif
  }
}
 23fb842:	4770      	bx	lr

023fb844 <_ZN18Adafruit_SPIDevice14endTransactionEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 */
void Adafruit_SPIDevice::endTransaction(void) {
  if (_spi) {
 23fb844:	6800      	ldr	r0, [r0, #0]
 23fb846:	b108      	cbz	r0, 23fb84c <_ZN18Adafruit_SPIDevice14endTransactionEv+0x8>
#ifdef BUSIO_HAS_HW_SPI
    _spi->endTransaction();
 23fb848:	f002 bf20 	b.w	23fe68c <_ZN8SPIClass14endTransactionEv>
#endif
  }
}
 23fb84c:	4770      	bx	lr

023fb84e <_ZN18Adafruit_SPIDevice13setChipSelectEi>:
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
 23fb84e:	f990 000e 	ldrsb.w	r0, [r0, #14]
 23fb852:	1c43      	adds	r3, r0, #1
 23fb854:	d003      	beq.n	23fb85e <_ZN18Adafruit_SPIDevice13setChipSelectEi+0x10>
    digitalWrite(_cs, value);
 23fb856:	b2c9      	uxtb	r1, r1
 23fb858:	b280      	uxth	r0, r0
 23fb85a:	f003 ba8c 	b.w	23fed76 <digitalWrite>
  }
}
 23fb85e:	4770      	bx	lr

023fb860 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>:
 *    @brief  Write a buffer or two to the SPI device, with transaction
 * management.
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
 23fb860:	b510      	push	{r4, lr}
 23fb862:	4604      	mov	r4, r0
  beginTransaction();
 23fb864:	f7ff ffe7 	bl	23fb836 <_ZN18Adafruit_SPIDevice16beginTransactionEv>
  setChipSelect(LOW);
 23fb868:	4620      	mov	r0, r4
}
 23fb86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setChipSelect(LOW);
 23fb86e:	2100      	movs	r1, #0
 23fb870:	f7ff bfed 	b.w	23fb84e <_ZN18Adafruit_SPIDevice13setChipSelectEi>

023fb874 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
 23fb874:	b510      	push	{r4, lr}
 23fb876:	4604      	mov	r4, r0
  setChipSelect(HIGH);
 23fb878:	2101      	movs	r1, #1
 23fb87a:	f7ff ffe8 	bl	23fb84e <_ZN18Adafruit_SPIDevice13setChipSelectEi>
  endTransaction();
 23fb87e:	4620      	mov	r0, r4
}
 23fb880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  endTransaction();
 23fb884:	f7ff bfde 	b.w	23fb844 <_ZN18Adafruit_SPIDevice14endTransactionEv>

023fb888 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23fb888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb88c:	461c      	mov	r4, r3
 23fb88e:	4606      	mov	r6, r0
 23fb890:	460d      	mov	r5, r1
 23fb892:	4617      	mov	r7, r2
  beginTransactionWithAssertingCS();
 23fb894:	f7ff ffe4 	bl	23fb860 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
 23fb898:	9b06      	ldr	r3, [sp, #24]
 23fb89a:	eb04 0803 	add.w	r8, r4, r3
 23fb89e:	4544      	cmp	r4, r8
 23fb8a0:	d108      	bne.n	23fb8b4 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x2c>
 23fb8a2:	442f      	add	r7, r5
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
 23fb8a4:	42bd      	cmp	r5, r7
 23fb8a6:	d00b      	beq.n	23fb8c0 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x38>
      transfer(buffer[i]);
 23fb8a8:	4630      	mov	r0, r6
 23fb8aa:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fb8ae:	f7ff ffb5 	bl	23fb81c <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < len; i++) {
 23fb8b2:	e7f7      	b.n	23fb8a4 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x1c>
      transfer(prefix_buffer[i]);
 23fb8b4:	4630      	mov	r0, r6
 23fb8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fb8ba:	f7ff ffaf 	bl	23fb81c <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < prefix_len; i++) {
 23fb8be:	e7ee      	b.n	23fb89e <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x16>
    }
  }
  endTransactionWithDeassertingCS();
 23fb8c0:	4630      	mov	r0, r6
 23fb8c2:	f7ff ffd7 	bl	23fb874 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23fb8c6:	2001      	movs	r0, #1
 23fb8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb8cc <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 23fb8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb8d0:	461f      	mov	r7, r3
 23fb8d2:	b085      	sub	sp, #20
 23fb8d4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fb8d8:	eba7 0a01 	sub.w	sl, r7, r1
 23fb8dc:	eba8 0902 	sub.w	r9, r8, r2
 23fb8e0:	f1b9 0f00 	cmp.w	r9, #0
 23fb8e4:	bfb8      	it	lt
 23fb8e6:	f1c9 0900 	rsblt	r9, r9, #0
 23fb8ea:	f1ba 0f00 	cmp.w	sl, #0
 23fb8ee:	bfb8      	it	lt
 23fb8f0:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23fb8f4:	45d1      	cmp	r9, sl
                             uint16_t color) {
 23fb8f6:	4683      	mov	fp, r0
 23fb8f8:	460c      	mov	r4, r1
 23fb8fa:	4615      	mov	r5, r2
 23fb8fc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23fb900:	dd04      	ble.n	23fb90c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23fb902:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 23fb904:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 23fb906:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 23fb908:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
 23fb90a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23fb90c:	42bc      	cmp	r4, r7
 23fb90e:	dd05      	ble.n	23fb91c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23fb910:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 23fb912:	4645      	mov	r5, r8
 23fb914:	4690      	mov	r8, r2
  if (x0 > x1) {
 23fb916:	4622      	mov	r2, r4
 23fb918:	463c      	mov	r4, r7
 23fb91a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23fb91c:	1b3e      	subs	r6, r7, r4
 23fb91e:	b2b2      	uxth	r2, r6
 23fb920:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23fb922:	eba8 0205 	sub.w	r2, r8, r5
 23fb926:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fb92a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23fb92e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fb932:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23fb936:	4545      	cmp	r5, r8
 23fb938:	bfb4      	ite	lt
 23fb93a:	2201      	movlt	r2, #1
 23fb93c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
 23fb940:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23fb942:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23fb944:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 23fb946:	42bc      	cmp	r4, r7
 23fb948:	dc1c      	bgt.n	23fb984 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
 23fb94a:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23fb94e:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 23fb950:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23fb954:	bfc7      	ittee	gt
 23fb956:	4629      	movgt	r1, r5
 23fb958:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 23fb95a:	462a      	movle	r2, r5
 23fb95c:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 23fb95e:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 23fb960:	4658      	mov	r0, fp
 23fb962:	47c0      	blx	r8
    }
    err -= dy;
 23fb964:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 23fb966:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23fb968:	1ab6      	subs	r6, r6, r2
 23fb96a:	b2b1      	uxth	r1, r6
 23fb96c:	b236      	sxth	r6, r6
    if (err < 0) {
 23fb96e:	2e00      	cmp	r6, #0
 23fb970:	da05      	bge.n	23fb97e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
 23fb972:	9a02      	ldr	r2, [sp, #8]
 23fb974:	4415      	add	r5, r2
      err += dx;
 23fb976:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23fb978:	b22d      	sxth	r5, r5
      err += dx;
 23fb97a:	1856      	adds	r6, r2, r1
 23fb97c:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 23fb97e:	3401      	adds	r4, #1
 23fb980:	b224      	sxth	r4, r4
 23fb982:	e7e0      	b.n	23fb946 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
 23fb984:	b005      	add	sp, #20
 23fb986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb98a <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 23fb98a:	4770      	bx	lr

023fb98c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fb98c:	b410      	push	{r4}
  drawPixel(x, y, color);
 23fb98e:	6804      	ldr	r4, [r0, #0]
 23fb990:	6924      	ldr	r4, [r4, #16]
 23fb992:	46a4      	mov	ip, r4
}
 23fb994:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 23fb998:	4760      	bx	ip

023fb99a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 23fb99a:	b430      	push	{r4, r5}
 23fb99c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 23fb9a0:	6804      	ldr	r4, [r0, #0]
 23fb9a2:	9502      	str	r5, [sp, #8]
 23fb9a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fb9a6:	46a4      	mov	ip, r4
}
 23fb9a8:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 23fb9aa:	4760      	bx	ip

023fb9ac <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 23fb9ac:	b430      	push	{r4, r5}
 23fb9ae:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 23fb9b2:	6804      	ldr	r4, [r0, #0]
 23fb9b4:	9502      	str	r5, [sp, #8]
 23fb9b6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fb9b8:	46a4      	mov	ip, r4
}
 23fb9ba:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 23fb9bc:	4760      	bx	ip

023fb9be <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 23fb9be:	b470      	push	{r4, r5, r6}
 23fb9c0:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fb9c4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 23fb9c8:	6804      	ldr	r4, [r0, #0]
 23fb9ca:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fb9ce:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fb9d0:	46a4      	mov	ip, r4
}
 23fb9d2:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 23fb9d4:	4760      	bx	ip

023fb9d6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 23fb9d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb9da:	461c      	mov	r4, r3
 23fb9dc:	4616      	mov	r6, r2
 23fb9de:	4605      	mov	r5, r0
 23fb9e0:	460f      	mov	r7, r1
  startWrite();
 23fb9e2:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 23fb9e4:	3c01      	subs	r4, #1
                                 uint16_t color) {
 23fb9e6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23fb9ea:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 23fb9ec:	4434      	add	r4, r6
  startWrite();
 23fb9ee:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 23fb9f0:	b224      	sxth	r4, r4
 23fb9f2:	682b      	ldr	r3, [r5, #0]
 23fb9f4:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb9f8:	9400      	str	r4, [sp, #0]
 23fb9fa:	4628      	mov	r0, r5
 23fb9fc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fb9fe:	4632      	mov	r2, r6
 23fba00:	463b      	mov	r3, r7
 23fba02:	4639      	mov	r1, r7
 23fba04:	47a0      	blx	r4
  endWrite();
 23fba06:	4628      	mov	r0, r5
 23fba08:	682b      	ldr	r3, [r5, #0]
 23fba0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fba0c:	b002      	add	sp, #8
 23fba0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23fba12:	4718      	bx	r3

023fba14 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 23fba14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fba18:	4617      	mov	r7, r2
 23fba1a:	4604      	mov	r4, r0
 23fba1c:	461d      	mov	r5, r3
 23fba1e:	460e      	mov	r6, r1
  startWrite();
 23fba20:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 23fba22:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23fba26:	695b      	ldr	r3, [r3, #20]
 23fba28:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 23fba2a:	e9cd 7800 	strd	r7, r8, [sp]
 23fba2e:	6822      	ldr	r2, [r4, #0]
 23fba30:	1e6b      	subs	r3, r5, #1
 23fba32:	4433      	add	r3, r6
 23fba34:	4620      	mov	r0, r4
 23fba36:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fba38:	4631      	mov	r1, r6
 23fba3a:	463a      	mov	r2, r7
 23fba3c:	b21b      	sxth	r3, r3
 23fba3e:	47a8      	blx	r5
  endWrite();
 23fba40:	4620      	mov	r0, r4
 23fba42:	6823      	ldr	r3, [r4, #0]
 23fba44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fba46:	b002      	add	sp, #8
 23fba48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23fba4c:	4718      	bx	r3

023fba4e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23fba4e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fba52:	461e      	mov	r6, r3
  startWrite();
 23fba54:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23fba56:	460c      	mov	r4, r1
  startWrite();
 23fba58:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23fba5a:	4605      	mov	r5, r0
 23fba5c:	4617      	mov	r7, r2
 23fba5e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fba62:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23fba66:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 23fba68:	4426      	add	r6, r4
 23fba6a:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
 23fba6c:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
 23fba6e:	da0b      	bge.n	23fba88 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 23fba70:	f8cd 8000 	str.w	r8, [sp]
 23fba74:	4621      	mov	r1, r4
 23fba76:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fba7a:	463a      	mov	r2, r7
 23fba7c:	464b      	mov	r3, r9
 23fba7e:	4628      	mov	r0, r5
 23fba80:	3401      	adds	r4, #1
 23fba82:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 23fba84:	b224      	sxth	r4, r4
 23fba86:	e7f0      	b.n	23fba6a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 23fba88:	4628      	mov	r0, r5
 23fba8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fba8c:	b002      	add	sp, #8
 23fba8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fba92:	4718      	bx	r3

023fba94 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fba94:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23fba96:	9101      	str	r1, [sp, #4]
 23fba98:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fba9c:	6802      	ldr	r2, [r0, #0]
 23fba9e:	9100      	str	r1, [sp, #0]
 23fbaa0:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fbaa2:	2200      	movs	r2, #0
 23fbaa4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbaa8:	4611      	mov	r1, r2
 23fbaaa:	47a0      	blx	r4
}
 23fbaac:	b002      	add	sp, #8
 23fbaae:	bd10      	pop	{r4, pc}

023fbab0 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 23fbab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
 23fbab4:	4299      	cmp	r1, r3
                            uint16_t color) {
 23fbab6:	4616      	mov	r6, r2
 23fbab8:	4680      	mov	r8, r0
 23fbaba:	460d      	mov	r5, r1
 23fbabc:	461c      	mov	r4, r3
 23fbabe:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fbac2:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fbac6:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 23fbac8:	d112      	bne.n	23fbaf0 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 23fbaca:	42be      	cmp	r6, r7
 23fbacc:	bfc2      	ittt	gt
 23fbace:	4633      	movgt	r3, r6
 23fbad0:	463e      	movgt	r6, r7
 23fbad2:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fbad4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fbad8:	1c7b      	adds	r3, r7, #1
 23fbada:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23fbadc:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fbade:	4632      	mov	r2, r6
 23fbae0:	4629      	mov	r1, r5
 23fbae2:	4640      	mov	r0, r8
 23fbae4:	46a4      	mov	ip, r4
 23fbae6:	b21b      	sxth	r3, r3
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 23fbae8:	b003      	add	sp, #12
 23fbaea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fbaee:	4760      	bx	ip
  } else if (y0 == y1) {
 23fbaf0:	42be      	cmp	r6, r7
 23fbaf2:	d10a      	bne.n	23fbb0a <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 23fbaf4:	4299      	cmp	r1, r3
 23fbaf6:	bfc2      	ittt	gt
 23fbaf8:	460b      	movgt	r3, r1
 23fbafa:	4625      	movgt	r5, r4
 23fbafc:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fbafe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fbb02:	1c63      	adds	r3, r4, #1
 23fbb04:	1b5b      	subs	r3, r3, r5
 23fbb06:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fbb08:	e7e9      	b.n	23fbade <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 23fbb0a:	6953      	ldr	r3, [r2, #20]
 23fbb0c:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 23fbb0e:	e9cd 7900 	strd	r7, r9, [sp]
 23fbb12:	f8d8 3000 	ldr.w	r3, [r8]
 23fbb16:	4640      	mov	r0, r8
 23fbb18:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23fbb1a:	4632      	mov	r2, r6
 23fbb1c:	4623      	mov	r3, r4
 23fbb1e:	4629      	mov	r1, r5
 23fbb20:	47b8      	blx	r7
    endWrite();
 23fbb22:	4640      	mov	r0, r8
 23fbb24:	f8d8 3000 	ldr.w	r3, [r8]
 23fbb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbb2a:	b003      	add	sp, #12
 23fbb2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 23fbb30:	4718      	bx	r3

023fbb32 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23fbb32:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fbb36:	4604      	mov	r4, r0
 23fbb38:	460f      	mov	r7, r1
 23fbb3a:	4616      	mov	r6, r2
 23fbb3c:	461d      	mov	r5, r3
  startWrite();
 23fbb3e:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23fbb40:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23fbb44:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23fbb46:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 23fbb4a:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 23fbb4c:	6823      	ldr	r3, [r4, #0]
 23fbb4e:	f8cd 8000 	str.w	r8, [sp]
 23fbb52:	4632      	mov	r2, r6
 23fbb54:	4639      	mov	r1, r7
 23fbb56:	4620      	mov	r0, r4
 23fbb58:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fbb5c:	462b      	mov	r3, r5
 23fbb5e:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 23fbb60:	6823      	ldr	r3, [r4, #0]
 23fbb62:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23fbb66:	f8cd 8000 	str.w	r8, [sp]
 23fbb6a:	4432      	add	r2, r6
 23fbb6c:	4639      	mov	r1, r7
 23fbb6e:	4620      	mov	r0, r4
 23fbb70:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fbb74:	b212      	sxth	r2, r2
 23fbb76:	462b      	mov	r3, r5
 23fbb78:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 23fbb7a:	6823      	ldr	r3, [r4, #0]
 23fbb7c:	f8cd 8000 	str.w	r8, [sp]
 23fbb80:	4632      	mov	r2, r6
 23fbb82:	4639      	mov	r1, r7
 23fbb84:	4620      	mov	r0, r4
 23fbb86:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fbb8a:	464b      	mov	r3, r9
 23fbb8c:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 23fbb8e:	1e6b      	subs	r3, r5, #1
 23fbb90:	19d9      	adds	r1, r3, r7
 23fbb92:	6823      	ldr	r3, [r4, #0]
 23fbb94:	f8cd 8000 	str.w	r8, [sp]
 23fbb98:	4620      	mov	r0, r4
 23fbb9a:	6a1d      	ldr	r5, [r3, #32]
 23fbb9c:	4632      	mov	r2, r6
 23fbb9e:	464b      	mov	r3, r9
 23fbba0:	b209      	sxth	r1, r1
 23fbba2:	47a8      	blx	r5
  endWrite();
 23fbba4:	4620      	mov	r0, r4
 23fbba6:	6823      	ldr	r3, [r4, #0]
 23fbba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbbaa:	b002      	add	sp, #8
 23fbbac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fbbb0:	4718      	bx	r3

023fbbb2 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 23fbbb2:	4770      	bx	lr

023fbbb4 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 23fbbb4:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 23fbbb8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 23fbbbc:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 23fbbbe:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch (rotation) {
 23fbbc2:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 23fbbc4:	bf59      	ittee	pl
 23fbbc6:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 23fbbc8:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 23fbbca:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 23fbbcc:	81c3      	strhmi	r3, [r0, #14]
}
 23fbbce:	4770      	bx	lr

023fbbd0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23fbbd0:	b530      	push	{r4, r5, lr}
 23fbbd2:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 23fbbd4:	2400      	movs	r4, #0
  _width = WIDTH;
 23fbbd6:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 23fbbd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23fbbdc:	4d05      	ldr	r5, [pc, #20]	; (23fbbf4 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fbbde:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 23fbbe0:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 23fbbe2:	4a05      	ldr	r2, [pc, #20]	; (23fbbf8 <_ZN12Adafruit_GFXC1Ess+0x28>)
 23fbbe4:	6044      	str	r4, [r0, #4]
 23fbbe6:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23fbbea:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 23fbbec:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 23fbbee:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 23fbbf0:	6204      	str	r4, [r0, #32]
}
 23fbbf2:	bd30      	pop	{r4, r5, pc}
 23fbbf4:	023ffa94 	.word	0x023ffa94
 23fbbf8:	01000101 	.word	0x01000101

023fbbfc <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 23fbbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbc00:	ed2d 8b02 	vpush	{d8}
 23fbc04:	b091      	sub	sp, #68	; 0x44
 23fbc06:	4616      	mov	r6, r2
 23fbc08:	461f      	mov	r7, r3
  if (!gfxFont) { // 'Classic' built-in font
 23fbc0a:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 23fbc0c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23fbc10:	4683      	mov	fp, r0
 23fbc12:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23fbc16:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23fbc1a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23fbc1e:	9103      	str	r1, [sp, #12]
 23fbc20:	9304      	str	r3, [sp, #16]
  if (!gfxFont) { // 'Classic' built-in font
 23fbc22:	2a00      	cmp	r2, #0
 23fbc24:	f040 80c5 	bne.w	23fbdb2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
 23fbc28:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbc2c:	428b      	cmp	r3, r1
 23fbc2e:	f340 814c 	ble.w	23fbeca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23fbc32:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fbc36:	42b3      	cmp	r3, r6
 23fbc38:	f340 8147 	ble.w	23fbeca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23fbc3c:	2306      	movs	r3, #6
 23fbc3e:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 23fbc42:	2b00      	cmp	r3, #0
 23fbc44:	f340 8141 	ble.w	23fbeca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 23fbc48:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23fbc4c:	2b00      	cmp	r3, #0
 23fbc4e:	f340 813c 	ble.w	23fbeca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
 23fbc52:	7f03      	ldrb	r3, [r0, #28]
 23fbc54:	b91b      	cbnz	r3, 23fbc5e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23fbc56:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 23fbc58:	bf84      	itt	hi
 23fbc5a:	3701      	addhi	r7, #1
 23fbc5c:	b2ff      	uxtbhi	r7, r7
    startWrite();
 23fbc5e:	f8db 3000 	ldr.w	r3, [fp]
 23fbc62:	4658      	mov	r0, fp
 23fbc64:	695b      	ldr	r3, [r3, #20]
 23fbc66:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbc68:	2205      	movs	r2, #5
 23fbc6a:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23fbc6c:	2200      	movs	r2, #0
 23fbc6e:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbc70:	4a98      	ldr	r2, [pc, #608]	; (23fbed4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fbc72:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fbc76:	18d3      	adds	r3, r2, r3
 23fbc78:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
 23fbc7a:	b2b3      	uxth	r3, r6
 23fbc7c:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbc7e:	9a05      	ldr	r2, [sp, #20]
 23fbc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fbc82:	fb02 f905 	mul.w	r9, r2, r5
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbc86:	5c9b      	ldrb	r3, [r3, r2]
 23fbc88:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fbc8a:	b2ab      	uxth	r3, r5
 23fbc8c:	930b      	str	r3, [sp, #44]	; 0x2c
 23fbc8e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fbc92:	9308      	str	r3, [sp, #32]
 23fbc94:	9b03      	ldr	r3, [sp, #12]
 23fbc96:	fa19 f983 	uxtah	r9, r9, r3
 23fbc9a:	fa0f f389 	sxth.w	r3, r9
 23fbc9e:	ee08 3a10 	vmov	s16, r3
 23fbca2:	2308      	movs	r3, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23fbca4:	f04f 0900 	mov.w	r9, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fbca8:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
 23fbcaa:	9b03      	ldr	r3, [sp, #12]
 23fbcac:	eb02 0a03 	add.w	sl, r2, r3
 23fbcb0:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
 23fbcb4:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
 23fbcb6:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
 23fbcba:	07d2      	lsls	r2, r2, #31
 23fbcbc:	d552      	bpl.n	23fbd64 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
 23fbcbe:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23fbcc0:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23fbcc4:	d13e      	bne.n	23fbd44 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fbcc6:	2c01      	cmp	r4, #1
 23fbcc8:	d13c      	bne.n	23fbd44 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
 23fbcca:	699b      	ldr	r3, [r3, #24]
 23fbccc:	9906      	ldr	r1, [sp, #24]
 23fbcce:	461f      	mov	r7, r3
 23fbcd0:	9b04      	ldr	r3, [sp, #16]
 23fbcd2:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 23fbcd4:	4651      	mov	r1, sl
 23fbcd6:	4658      	mov	r0, fp
 23fbcd8:	b212      	sxth	r2, r2
 23fbcda:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23fbcdc:	f109 0301 	add.w	r3, r9, #1
 23fbce0:	fa4f f983 	sxtb.w	r9, r3
 23fbce4:	9b07      	ldr	r3, [sp, #28]
 23fbce6:	085b      	lsrs	r3, r3, #1
 23fbce8:	9307      	str	r3, [sp, #28]
 23fbcea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fbcec:	3b01      	subs	r3, #1
 23fbcee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fbcf2:	930a      	str	r3, [sp, #40]	; 0x28
 23fbcf4:	d1de      	bne.n	23fbcb4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23fbcf6:	9f05      	ldr	r7, [sp, #20]
 23fbcf8:	3701      	adds	r7, #1
 23fbcfa:	b27b      	sxtb	r3, r7
 23fbcfc:	9305      	str	r3, [sp, #20]
 23fbcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fbd00:	3b01      	subs	r3, #1
 23fbd02:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fbd06:	9309      	str	r3, [sp, #36]	; 0x24
 23fbd08:	d1b9      	bne.n	23fbc7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
 23fbd0a:	9b04      	ldr	r3, [sp, #16]
 23fbd0c:	4543      	cmp	r3, r8
 23fbd0e:	d00f      	beq.n	23fbd30 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
 23fbd10:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
 23fbd12:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
 23fbd16:	d13b      	bne.n	23fbd90 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fbd18:	2c01      	cmp	r4, #1
 23fbd1a:	d139      	bne.n	23fbd90 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
 23fbd1c:	9908      	ldr	r1, [sp, #32]
 23fbd1e:	f8cd 8000 	str.w	r8, [sp]
 23fbd22:	3105      	adds	r1, #5
 23fbd24:	6a1c      	ldr	r4, [r3, #32]
 23fbd26:	4632      	mov	r2, r6
 23fbd28:	2308      	movs	r3, #8
 23fbd2a:	4658      	mov	r0, fp
 23fbd2c:	b209      	sxth	r1, r1
 23fbd2e:	47a0      	blx	r4
    endWrite();
 23fbd30:	4658      	mov	r0, fp
 23fbd32:	f8db 3000 	ldr.w	r3, [fp]
 23fbd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbd38:	b011      	add	sp, #68	; 0x44
 23fbd3a:	ecbd 8b02 	vpop	{d8}
 23fbd3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23fbd42:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 23fbd44:	fb14 f202 	smulbb	r2, r4, r2
 23fbd48:	9906      	ldr	r1, [sp, #24]
 23fbd4a:	440a      	add	r2, r1
 23fbd4c:	9904      	ldr	r1, [sp, #16]
 23fbd4e:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fbd50:	9400      	str	r4, [sp, #0]
 23fbd52:	69db      	ldr	r3, [r3, #28]
 23fbd54:	ee18 1a10 	vmov	r1, s16
 23fbd58:	461f      	mov	r7, r3
 23fbd5a:	4658      	mov	r0, fp
 23fbd5c:	462b      	mov	r3, r5
 23fbd5e:	b212      	sxth	r2, r2
 23fbd60:	47b8      	blx	r7
 23fbd62:	e7bb      	b.n	23fbcdc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
 23fbd64:	9a04      	ldr	r2, [sp, #16]
 23fbd66:	4542      	cmp	r2, r8
 23fbd68:	d0b8      	beq.n	23fbcdc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
 23fbd6a:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23fbd6c:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23fbd70:	d107      	bne.n	23fbd82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fbd72:	2c01      	cmp	r4, #1
 23fbd74:	d105      	bne.n	23fbd82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
 23fbd76:	699b      	ldr	r3, [r3, #24]
 23fbd78:	9906      	ldr	r1, [sp, #24]
 23fbd7a:	461f      	mov	r7, r3
 23fbd7c:	440a      	add	r2, r1
 23fbd7e:	4643      	mov	r3, r8
 23fbd80:	e7a8      	b.n	23fbcd4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fbd82:	fb14 f202 	smulbb	r2, r4, r2
 23fbd86:	9906      	ldr	r1, [sp, #24]
 23fbd88:	f8cd 8004 	str.w	r8, [sp, #4]
 23fbd8c:	440a      	add	r2, r1
 23fbd8e:	e7df      	b.n	23fbd50 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 23fbd90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fbd92:	00e4      	lsls	r4, r4, #3
 23fbd94:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fbd98:	9a08      	ldr	r2, [sp, #32]
 23fbd9a:	f8cd 8004 	str.w	r8, [sp, #4]
 23fbd9e:	440a      	add	r2, r1
 23fbda0:	4611      	mov	r1, r2
 23fbda2:	9400      	str	r4, [sp, #0]
 23fbda4:	69dc      	ldr	r4, [r3, #28]
 23fbda6:	4632      	mov	r2, r6
 23fbda8:	462b      	mov	r3, r5
 23fbdaa:	4658      	mov	r0, fp
 23fbdac:	b209      	sxth	r1, r1
 23fbdae:	47a0      	blx	r4
    endWrite();
 23fbdb0:	e7be      	b.n	23fbd30 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fbdb2:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 23fbdb4:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fbdb6:	1aff      	subs	r7, r7, r3
  return gfxFont->bitmap;
 23fbdb8:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 23fbdba:	b2ff      	uxtb	r7, r7
  return gfxFont->bitmap;
 23fbdbc:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fbdbe:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
  return gfxFont->glyph + c;
 23fbdc2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fbdc6:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23fbdc8:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 23fbdca:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23fbdcc:	9209      	str	r2, [sp, #36]	; 0x24
 23fbdce:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 23fbdd0:	f993 a006 	ldrsb.w	sl, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23fbdd4:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 23fbdd6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fbdda:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
 23fbddc:	d801      	bhi.n	23fbde2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fbdde:	2c01      	cmp	r4, #1
 23fbde0:	d957      	bls.n	23fbe92 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
 23fbde2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fbde6:	9308      	str	r3, [sp, #32]
      yo16 = yo;
 23fbde8:	fa0f f38a 	sxth.w	r3, sl
 23fbdec:	9307      	str	r3, [sp, #28]
    uint8_t xx, yy, bits = 0, bit = 0;
 23fbdee:	f04f 0800 	mov.w	r8, #0
 23fbdf2:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
 23fbdf4:	4647      	mov	r7, r8
    startWrite();
 23fbdf6:	f8db 3000 	ldr.w	r3, [fp]
 23fbdfa:	4658      	mov	r0, fp
 23fbdfc:	695b      	ldr	r3, [r3, #20]
 23fbdfe:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23fbe00:	b2b3      	uxth	r3, r6
 23fbe02:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
 23fbe04:	fa1a f386 	uxtah	r3, sl, r6
 23fbe08:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 23fbe0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fbe0c:	429f      	cmp	r7, r3
 23fbe0e:	d28f      	bcs.n	23fbd30 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23fbe10:	9b07      	ldr	r3, [sp, #28]
 23fbe12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23fbe14:	443b      	add	r3, r7
 23fbe16:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
 23fbe1a:	2200      	movs	r2, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23fbe1c:	b21b      	sxth	r3, r3
 23fbe1e:	ee08 3a10 	vmov	s16, r3
 23fbe22:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
 23fbe24:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
 23fbe26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23fbe28:	eb02 0a07 	add.w	sl, r2, r7
 23fbe2c:	fa0f fa8a 	sxth.w	sl, sl
      for (xx = 0; xx < w; xx++) {
 23fbe30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fbe32:	9905      	ldr	r1, [sp, #20]
 23fbe34:	4291      	cmp	r1, r2
 23fbe36:	d241      	bcs.n	23fbebc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
 23fbe38:	1c5a      	adds	r2, r3, #1
 23fbe3a:	b2d2      	uxtb	r2, r2
 23fbe3c:	075b      	lsls	r3, r3, #29
 23fbe3e:	920d      	str	r2, [sp, #52]	; 0x34
 23fbe40:	d107      	bne.n	23fbe52 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
 23fbe42:	9b06      	ldr	r3, [sp, #24]
 23fbe44:	9906      	ldr	r1, [sp, #24]
 23fbe46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fbe48:	3301      	adds	r3, #1
 23fbe4a:	b29b      	uxth	r3, r3
 23fbe4c:	f812 9001 	ldrb.w	r9, [r2, r1]
 23fbe50:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 23fbe52:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fbe56:	d012      	beq.n	23fbe7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
 23fbe58:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
 23fbe5a:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23fbe5e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
 23fbe62:	d11a      	bne.n	23fbe9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23fbe64:	2c01      	cmp	r4, #1
 23fbe66:	d118      	bne.n	23fbe9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
 23fbe68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fbe6a:	699b      	ldr	r3, [r3, #24]
 23fbe6c:	4411      	add	r1, r2
 23fbe6e:	9a05      	ldr	r2, [sp, #20]
 23fbe70:	461e      	mov	r6, r3
 23fbe72:	4411      	add	r1, r2
 23fbe74:	4658      	mov	r0, fp
 23fbe76:	4652      	mov	r2, sl
 23fbe78:	9b04      	ldr	r3, [sp, #16]
 23fbe7a:	b209      	sxth	r1, r1
 23fbe7c:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
 23fbe7e:	9e05      	ldr	r6, [sp, #20]
        bits <<= 1;
 23fbe80:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 23fbe84:	3601      	adds	r6, #1
 23fbe86:	b2f3      	uxtb	r3, r6
 23fbe88:	9305      	str	r3, [sp, #20]
        bits <<= 1;
 23fbe8a:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
 23fbe8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
 23fbe90:	e7ce      	b.n	23fbe30 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
 23fbe92:	2300      	movs	r3, #0
 23fbe94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23fbe98:	e7a9      	b.n	23fbdee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23fbe9a:	9805      	ldr	r0, [sp, #20]
 23fbe9c:	9a08      	ldr	r2, [sp, #32]
 23fbe9e:	4402      	add	r2, r0
 23fbea0:	fb02 1105 	mla	r1, r2, r5, r1
 23fbea4:	9a04      	ldr	r2, [sp, #16]
 23fbea6:	4658      	mov	r0, fp
 23fbea8:	e9cd 4200 	strd	r4, r2, [sp]
 23fbeac:	69db      	ldr	r3, [r3, #28]
 23fbeae:	ee18 2a10 	vmov	r2, s16
 23fbeb2:	461e      	mov	r6, r3
 23fbeb4:	b209      	sxth	r1, r1
 23fbeb6:	462b      	mov	r3, r5
 23fbeb8:	47b0      	blx	r6
 23fbeba:	e7e0      	b.n	23fbe7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23fbebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
 23fbebe:	3701      	adds	r7, #1
 23fbec0:	4498      	add	r8, r3
 23fbec2:	fa5f f888 	uxtb.w	r8, r8
 23fbec6:	b2ff      	uxtb	r7, r7
 23fbec8:	e79f      	b.n	23fbe0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23fbeca:	b011      	add	sp, #68	; 0x44
 23fbecc:	ecbd 8b02 	vpop	{d8}
 23fbed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbed4:	023ff58c 	.word	0x023ff58c

023fbed8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fbed8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 23fbeda:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23fbedc:	4604      	mov	r4, r0
 23fbede:	460b      	mov	r3, r1
 23fbee0:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 23fbee2:	2a00      	cmp	r2, #0
 23fbee4:	d134      	bne.n	23fbf50 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 23fbee6:	290a      	cmp	r1, #10
 23fbee8:	d108      	bne.n	23fbefc <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 23fbeea:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 23fbeec:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23fbeee:	7e42      	ldrb	r2, [r0, #25]
 23fbef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 23fbef4:	8263      	strh	r3, [r4, #18]
}
 23fbef6:	2001      	movs	r0, #1
 23fbef8:	b005      	add	sp, #20
 23fbefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 23fbefc:	290d      	cmp	r1, #13
 23fbefe:	d0fa      	beq.n	23fbef6 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fbf00:	7ee1      	ldrb	r1, [r4, #27]
 23fbf02:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23fbf04:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fbf06:	b171      	cbz	r1, 23fbf26 <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fbf08:	2106      	movs	r1, #6
 23fbf0a:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fbf0e:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fbf12:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fbf16:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
 23fbf18:	bfc1      	itttt	gt
 23fbf1a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 23fbf1e:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 23fbf20:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fbf24:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23fbf26:	8ae2      	ldrh	r2, [r4, #22]
 23fbf28:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fbf2c:	9201      	str	r2, [sp, #4]
 23fbf2e:	8aa2      	ldrh	r2, [r4, #20]
 23fbf30:	4620      	mov	r0, r4
 23fbf32:	9200      	str	r2, [sp, #0]
 23fbf34:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fbf38:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fbf3c:	f7ff fe5e 	bl	23fbbfc <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 23fbf40:	7e23      	ldrb	r3, [r4, #24]
 23fbf42:	8a22      	ldrh	r2, [r4, #16]
 23fbf44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fbf48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 23fbf4c:	8223      	strh	r3, [r4, #16]
 23fbf4e:	e7d2      	b.n	23fbef6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 23fbf50:	290a      	cmp	r1, #10
 23fbf52:	d107      	bne.n	23fbf64 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 23fbf54:	2300      	movs	r3, #0
 23fbf56:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fbf58:	7e41      	ldrb	r1, [r0, #25]
 23fbf5a:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
 23fbf5c:	8a43      	ldrh	r3, [r0, #18]
 23fbf5e:	fb01 3302 	mla	r3, r1, r2, r3
 23fbf62:	e7c7      	b.n	23fbef4 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 23fbf64:	290d      	cmp	r1, #13
 23fbf66:	d0c6      	beq.n	23fbef6 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 23fbf68:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fbf6a:	42a9      	cmp	r1, r5
 23fbf6c:	d3c3      	bcc.n	23fbef6 <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fbf6e:	7a91      	ldrb	r1, [r2, #10]
 23fbf70:	4299      	cmp	r1, r3
 23fbf72:	d3c0      	bcc.n	23fbef6 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 23fbf74:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 23fbf76:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 23fbf78:	b2ed      	uxtb	r5, r5
 23fbf7a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 23fbf7e:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fbf80:	b328      	cbz	r0, 23fbfce <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fbf82:	78e9      	ldrb	r1, [r5, #3]
 23fbf84:	b319      	cbz	r1, 23fbfce <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fbf86:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fbf88:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23fbf8a:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fbf8c:	b191      	cbz	r1, 23fbfb4 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fbf8e:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fbf92:	4408      	add	r0, r1
 23fbf94:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fbf98:	fb06 1100 	mla	r1, r6, r0, r1
 23fbf9c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fbfa0:	4281      	cmp	r1, r0
 23fbfa2:	dd07      	ble.n	23fbfb4 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 23fbfa4:	2000      	movs	r0, #0
 23fbfa6:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23fbfa8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fbfac:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 23fbfae:	fb02 1207 	mla	r2, r2, r7, r1
 23fbfb2:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23fbfb4:	8ae2      	ldrh	r2, [r4, #22]
 23fbfb6:	4620      	mov	r0, r4
 23fbfb8:	9201      	str	r2, [sp, #4]
 23fbfba:	8aa2      	ldrh	r2, [r4, #20]
 23fbfbc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fbfc0:	9200      	str	r2, [sp, #0]
 23fbfc2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fbfc6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fbfca:	f7ff fe17 	bl	23fbbfc <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fbfce:	7929      	ldrb	r1, [r5, #4]
 23fbfd0:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 23fbfd2:	8a23      	ldrh	r3, [r4, #16]
 23fbfd4:	fb01 3302 	mla	r3, r1, r2, r3
 23fbfd8:	e7b8      	b.n	23fbf4c <_ZN12Adafruit_GFX5writeEh+0x74>

023fbfda <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23fbfda:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fbfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23fbfde:	db66      	blt.n	23fc0ae <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
 23fbfe0:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fbfe4:	428c      	cmp	r4, r1
 23fbfe6:	dd62      	ble.n	23fc0ae <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
 23fbfe8:	2a00      	cmp	r2, #0
 23fbfea:	db60      	blt.n	23fc0ae <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
 23fbfec:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fbff0:	4294      	cmp	r4, r2
 23fbff2:	dd5c      	ble.n	23fc0ae <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 23fbff4:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 23fbff6:	2c02      	cmp	r4, #2
 23fbff8:	d05a      	beq.n	23fc0b0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
 23fbffa:	2c03      	cmp	r4, #3
 23fbffc:	d061      	beq.n	23fc0c2 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
 23fbffe:	2c01      	cmp	r4, #1
 23fc000:	d104      	bne.n	23fc00c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
 23fc002:	43d2      	mvns	r2, r2
 23fc004:	8904      	ldrh	r4, [r0, #8]
 23fc006:	4414      	add	r4, r2
      break;
 23fc008:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 23fc00a:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
 23fc00c:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
 23fc010:	428c      	cmp	r4, r1
 23fc012:	bfa8      	it	ge
 23fc014:	460c      	movge	r4, r1
 23fc016:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
 23fc018:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 23fc01c:	4294      	cmp	r4, r2
 23fc01e:	bfa8      	it	ge
 23fc020:	4614      	movge	r4, r2
 23fc022:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
 23fc024:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
 23fc028:	428c      	cmp	r4, r1
 23fc02a:	bfb8      	it	lt
 23fc02c:	460c      	movlt	r4, r1
 23fc02e:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
 23fc030:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 23fc034:	4294      	cmp	r4, r2
 23fc036:	bfb8      	it	lt
 23fc038:	4614      	movlt	r4, r2
 23fc03a:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
 23fc03c:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 23fc040:	2c01      	cmp	r4, #1
 23fc042:	d116      	bne.n	23fc072 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
 23fc044:	2b01      	cmp	r3, #1
 23fc046:	d042      	beq.n	23fc0ce <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
 23fc048:	2b02      	cmp	r3, #2
 23fc04a:	d051      	beq.n	23fc0f0 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
 23fc04c:	b98b      	cbnz	r3, 23fc072 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 23fc04e:	4614      	mov	r4, r2
 23fc050:	2a00      	cmp	r2, #0
 23fc052:	8905      	ldrh	r5, [r0, #8]
 23fc054:	bfb8      	it	lt
 23fc056:	1dd4      	addlt	r4, r2, #7
 23fc058:	10e4      	asrs	r4, r4, #3
 23fc05a:	fb14 1405 	smlabb	r4, r4, r5, r1
 23fc05e:	2501      	movs	r5, #1
 23fc060:	6b47      	ldr	r7, [r0, #52]	; 0x34
 23fc062:	f002 0607 	and.w	r6, r2, #7
 23fc066:	fa05 f606 	lsl.w	r6, r5, r6
 23fc06a:	5d3d      	ldrb	r5, [r7, r4]
 23fc06c:	ea25 0506 	bic.w	r5, r5, r6
 23fc070:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
 23fc072:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
 23fc076:	2c04      	cmp	r4, #4
 23fc078:	d119      	bne.n	23fc0ae <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
 23fc07a:	8904      	ldrh	r4, [r0, #8]
 23fc07c:	fb14 f202 	smulbb	r2, r4, r2
 23fc080:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 23fc084:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
 23fc088:	f342 024f 	sbfx	r2, r2, #1, #16
 23fc08c:	eb02 0264 	add.w	r2, r2, r4, asr #1
 23fc090:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
 23fc092:	07c9      	lsls	r1, r1, #31
        uint8_t t = pixelptr[0] & 0x0F;
 23fc094:	5ca0      	ldrb	r0, [r4, r2]
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
 23fc096:	bf4b      	itete	mi
 23fc098:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
 23fc09c:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
 23fc0a0:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
 23fc0a4:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
 23fc0a8:	bf48      	it	mi
 23fc0aa:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
 23fc0ac:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
 23fc0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 23fc0b0:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 23fc0b2:	8904      	ldrh	r4, [r0, #8]
 23fc0b4:	3c01      	subs	r4, #1
 23fc0b6:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 23fc0b8:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 23fc0ba:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 23fc0bc:	4422      	add	r2, r4
 23fc0be:	b212      	sxth	r2, r2
      break;
 23fc0c0:	e7a4      	b.n	23fc00c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 23fc0c2:	8944      	ldrh	r4, [r0, #10]
 23fc0c4:	3c01      	subs	r4, #1
 23fc0c6:	1a64      	subs	r4, r4, r1
      break;
 23fc0c8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 23fc0ca:	b222      	sxth	r2, r4
      break;
 23fc0cc:	e79e      	b.n	23fc00c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 23fc0ce:	4614      	mov	r4, r2
 23fc0d0:	2a00      	cmp	r2, #0
 23fc0d2:	8905      	ldrh	r5, [r0, #8]
 23fc0d4:	bfb8      	it	lt
 23fc0d6:	1dd4      	addlt	r4, r2, #7
 23fc0d8:	10e4      	asrs	r4, r4, #3
 23fc0da:	fb14 1405 	smlabb	r4, r4, r5, r1
 23fc0de:	2501      	movs	r5, #1
 23fc0e0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23fc0e2:	f002 0707 	and.w	r7, r2, #7
 23fc0e6:	40bd      	lsls	r5, r7
 23fc0e8:	5d37      	ldrb	r7, [r6, r4]
 23fc0ea:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23fc0ec:	5535      	strb	r5, [r6, r4]
        break;
 23fc0ee:	e7c0      	b.n	23fc072 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23fc0f0:	4614      	mov	r4, r2
 23fc0f2:	2a00      	cmp	r2, #0
 23fc0f4:	8905      	ldrh	r5, [r0, #8]
 23fc0f6:	bfb8      	it	lt
 23fc0f8:	1dd4      	addlt	r4, r2, #7
 23fc0fa:	10e4      	asrs	r4, r4, #3
 23fc0fc:	fb14 1405 	smlabb	r4, r4, r5, r1
 23fc100:	2501      	movs	r5, #1
 23fc102:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23fc104:	f002 0707 	and.w	r7, r2, #7
 23fc108:	40bd      	lsls	r5, r7
 23fc10a:	5d37      	ldrb	r7, [r6, r4]
 23fc10c:	407d      	eors	r5, r7
 23fc10e:	e7ed      	b.n	23fc0ec <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

023fc110 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
 23fc110:	b538      	push	{r3, r4, r5, lr}
 23fc112:	460d      	mov	r5, r1
 23fc114:	4611      	mov	r1, r2
 23fc116:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 23fc118:	b21a      	sxth	r2, r3
 23fc11a:	b209      	sxth	r1, r1
 23fc11c:	f7ff fd58 	bl	23fbbd0 <_ZN12Adafruit_GFXC1Ess>
 23fc120:	4b0b      	ldr	r3, [pc, #44]	; (23fc150 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
 23fc122:	9a06      	ldr	r2, [sp, #24]
 23fc124:	6023      	str	r3, [r4, #0]
 23fc126:	2300      	movs	r3, #0
 23fc128:	62e2      	str	r2, [r4, #44]	; 0x2c
 23fc12a:	9a07      	ldr	r2, [sp, #28]
 23fc12c:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 23fc130:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 23fc134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fc138:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 23fc13c:	f99d 3014 	ldrsb.w	r3, [sp, #20]
}
 23fc140:	4620      	mov	r0, r4
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 23fc142:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
 23fc144:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
 23fc146:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
 23fc14a:	6523      	str	r3, [r4, #80]	; 0x50
}
 23fc14c:	bd38      	pop	{r3, r4, r5, pc}
 23fc14e:	bf00      	nop
 23fc150:	023ffaec 	.word	0x023ffaec

023fc154 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
 23fc154:	b538      	push	{r3, r4, r5, lr}
 23fc156:	4b0c      	ldr	r3, [pc, #48]	; (23fc188 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
 23fc158:	4604      	mov	r4, r0
 23fc15a:	6003      	str	r3, [r0, #0]
  if (buffer) {
 23fc15c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23fc15e:	b118      	cbz	r0, 23fc168 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
 23fc160:	f000 fe14 	bl	23fcd8c <free>
    buffer = NULL;
 23fc164:	2300      	movs	r3, #0
 23fc166:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
 23fc168:	6a65      	ldr	r5, [r4, #36]	; 0x24
 23fc16a:	b135      	cbz	r5, 23fc17a <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
 23fc16c:	4628      	mov	r0, r5
 23fc16e:	f7ff faa7 	bl	23fb6c0 <_ZN18Adafruit_SPIDeviceD1Ev>
 23fc172:	2138      	movs	r1, #56	; 0x38
 23fc174:	4628      	mov	r0, r5
 23fc176:	f7fe fee0 	bl	23faf3a <_ZdlPvj>
  if (i2c_dev)
 23fc17a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23fc17c:	b110      	cbz	r0, 23fc184 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
 23fc17e:	2110      	movs	r1, #16
 23fc180:	f7fe fedb 	bl	23faf3a <_ZdlPvj>
}
 23fc184:	4620      	mov	r0, r4
 23fc186:	bd38      	pop	{r3, r4, r5, pc}
 23fc188:	023ffaec 	.word	0x023ffaec

023fc18c <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 23fc18c:	b530      	push	{r4, r5, lr}
  if (i2c_dev) {                // I2C
 23fc18e:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
 23fc190:	b087      	sub	sp, #28
 23fc192:	4604      	mov	r4, r0
 23fc194:	f88d 100f 	strb.w	r1, [sp, #15]
  if (i2c_dev) {                // I2C
 23fc198:	b17d      	cbz	r5, 23fc1ba <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 23fc19a:	2300      	movs	r3, #0
 23fc19c:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
 23fc19e:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
 23fc1a2:	f88d 3014 	strb.w	r3, [sp, #20]
 23fc1a6:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
 23fc1aa:	2301      	movs	r3, #1
 23fc1ac:	2202      	movs	r2, #2
 23fc1ae:	4628      	mov	r0, r5
 23fc1b0:	a905      	add	r1, sp, #20
 23fc1b2:	f7ff fa4f 	bl	23fb654 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23fc1b6:	b007      	add	sp, #28
 23fc1b8:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
 23fc1ba:	4629      	mov	r1, r5
 23fc1bc:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 23fc1c0:	f002 fdd9 	bl	23fed76 <digitalWrite>
    spi_dev->write(&c, 1);
 23fc1c4:	462b      	mov	r3, r5
 23fc1c6:	2201      	movs	r2, #1
 23fc1c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc1ca:	9500      	str	r5, [sp, #0]
 23fc1cc:	f10d 010f 	add.w	r1, sp, #15
 23fc1d0:	f7ff fb5a 	bl	23fb888 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
}
 23fc1d4:	e7ef      	b.n	23fc1b6 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

023fc1d6 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
 23fc1d6:	2900      	cmp	r1, #0
 23fc1d8:	bf14      	ite	ne
 23fc1da:	21a7      	movne	r1, #167	; 0xa7
 23fc1dc:	21a6      	moveq	r1, #166	; 0xa6
 23fc1de:	f7ff bfd5 	b.w	23fc18c <_ZN17Adafruit_GrayOLED12oled_commandEh>
	...

023fc1e4 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
 23fc1e4:	b510      	push	{r4, lr}
 23fc1e6:	4604      	mov	r4, r0
 23fc1e8:	4b02      	ldr	r3, [pc, #8]	; (23fc1f4 <_ZN15Adafruit_SH1107D1Ev+0x10>)
 23fc1ea:	6003      	str	r3, [r0, #0]
 23fc1ec:	f000 f8e6 	bl	23fc3bc <_ZN15Adafruit_SH110XD1Ev>
 23fc1f0:	4620      	mov	r0, r4
 23fc1f2:	bd10      	pop	{r4, pc}
 23fc1f4:	023ffb48 	.word	0x023ffb48

023fc1f8 <_ZN15Adafruit_SH1107D0Ev>:
 23fc1f8:	b510      	push	{r4, lr}
 23fc1fa:	4604      	mov	r4, r0
 23fc1fc:	f7ff fff2 	bl	23fc1e4 <_ZN15Adafruit_SH1107D1Ev>
 23fc200:	4620      	mov	r0, r4
 23fc202:	2158      	movs	r1, #88	; 0x58
 23fc204:	f7fe fe99 	bl	23faf3a <_ZdlPvj>
 23fc208:	4620      	mov	r0, r4
 23fc20a:	bd10      	pop	{r4, pc}

023fc20c <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
 23fc20c:	b530      	push	{r4, r5, lr}
 23fc20e:	4604      	mov	r4, r0
 23fc210:	b085      	sub	sp, #20
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
 23fc212:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fc214:	9502      	str	r5, [sp, #8]
 23fc216:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fc218:	9501      	str	r5, [sp, #4]
 23fc21a:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 23fc21e:	9500      	str	r5, [sp, #0]
 23fc220:	f000 f8b2 	bl	23fc388 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
 23fc224:	4620      	mov	r0, r4
 23fc226:	4b02      	ldr	r3, [pc, #8]	; (23fc230 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
 23fc228:	6023      	str	r3, [r4, #0]
 23fc22a:	b005      	add	sp, #20
 23fc22c:	bd30      	pop	{r4, r5, pc}
 23fc22e:	bf00      	nop
 23fc230:	023ffb48 	.word	0x023ffb48

023fc234 <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
 23fc234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc238:	b089      	sub	sp, #36	; 0x24
 23fc23a:	4604      	mov	r4, r0
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
 23fc23c:	f000 f91c 	bl	23fc478 <os_thread_yield>
  // 32-byte transfer condition below.
  yield();

  // uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
  uint8_t *ptr = buffer;
  uint8_t dc_byte = 0x40;
 23fc240:	2340      	movs	r3, #64	; 0x40
 23fc242:	f88d 301b 	strb.w	r3, [sp, #27]
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fc246:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
 23fc24a:	f9b4 503a 	ldrsh.w	r5, [r4, #58]	; 0x3a
  uint8_t bytes_per_page = WIDTH;
 23fc24e:	f894 a008 	ldrb.w	sl, [r4, #8]
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fc252:	1dda      	adds	r2, r3, #7
  //  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 23fc254:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fc258:	bf48      	it	mi
 23fc25a:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t first_page = window_y1 / 8;
 23fc25e:	2d00      	cmp	r5, #0
 23fc260:	bfb8      	it	lt
 23fc262:	3507      	addlt	r5, #7
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
 23fc264:	45d0      	cmp	r8, sl
 23fc266:	bf28      	it	cs
 23fc268:	46d0      	movcs	r8, sl
  uint8_t pages = ((HEIGHT + 7) / 8);
 23fc26a:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 23fc26e:	9303      	str	r3, [sp, #12]
  uint8_t first_page = window_y1 / 8;
 23fc270:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
 23fc274:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 23fc278:	fb05 8b0a 	mla	fp, r5, sl, r8
 23fc27c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fc280:	f10a 0201 	add.w	r2, sl, #1
 23fc284:	fa52 f383 	uxtab	r3, r2, r3
 23fc288:	9304      	str	r3, [sp, #16]
  for (uint8_t p = first_page; p < pages; p++) {
 23fc28a:	9b03      	ldr	r3, [sp, #12]
 23fc28c:	429d      	cmp	r5, r3
 23fc28e:	d271      	bcs.n	23fc374 <_ZN15Adafruit_SH110X7displayEv+0x140>
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fc290:	9b04      	ldr	r3, [sp, #16]
 23fc292:	8926      	ldrh	r6, [r4, #8]
    if (i2c_dev) { // I2C
      uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;

      uint8_t cmd[] = {
          0x00, (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fc294:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fc298:	1b9e      	subs	r6, r3, r6
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fc29a:	4442      	add	r2, r8
    ptr += page_start;
 23fc29c:	6b67      	ldr	r7, [r4, #52]	; 0x34
    if (i2c_dev) { // I2C
 23fc29e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fc2a0:	ea4f 1c22 	mov.w	ip, r2, asr #4
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fc2a4:	eba6 0608 	sub.w	r6, r6, r8
 23fc2a8:	f1a5 0150 	sub.w	r1, r5, #80	; 0x50
    ptr += page_start;
 23fc2ac:	445f      	add	r7, fp
    bytes_remaining -= (WIDTH - 1) - page_end;
 23fc2ae:	b2f6      	uxtb	r6, r6
    if (i2c_dev) { // I2C
 23fc2b0:	b2c9      	uxtb	r1, r1
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
 23fc2b2:	f10c 0c10 	add.w	ip, ip, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fc2b6:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
 23fc2ba:	2b00      	cmp	r3, #0
 23fc2bc:	d03a      	beq.n	23fc334 <_ZN15Adafruit_SH110X7displayEv+0x100>
      uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
 23fc2be:	68d8      	ldr	r0, [r3, #12]
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fc2c0:	f88d 101d 	strb.w	r1, [sp, #29]
      uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
 23fc2c4:	3801      	subs	r0, #1
 23fc2c6:	fa1f f980 	uxth.w	r9, r0
      uint8_t cmd[] = {
 23fc2ca:	f04f 0000 	mov.w	r0, #0

      // Set high speed clk
      i2c_dev->setSpeed(i2c_preclk);
 23fc2ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      uint8_t cmd[] = {
 23fc2d0:	f88d 001c 	strb.w	r0, [sp, #28]
      i2c_dev->setSpeed(i2c_preclk);
 23fc2d4:	4618      	mov	r0, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fc2d6:	f88d c01e 	strb.w	ip, [sp, #30]
 23fc2da:	f88d 201f 	strb.w	r2, [sp, #31]
      i2c_dev->setSpeed(i2c_preclk);
 23fc2de:	f7ff f9e9 	bl	23fb6b4 <_ZN18Adafruit_I2CDevice8setSpeedEm>

      i2c_dev->write(cmd, 4);
 23fc2e2:	2300      	movs	r3, #0
 23fc2e4:	2204      	movs	r2, #4
 23fc2e6:	e9cd 3300 	strd	r3, r3, [sp]
 23fc2ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23fc2ec:	2301      	movs	r3, #1
 23fc2ee:	a907      	add	r1, sp, #28
 23fc2f0:	f7ff f9b0 	bl	23fb654 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

      while (bytes_remaining) {
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 23fc2f4:	fa5f f989 	uxtb.w	r9, r9
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 23fc2f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
 23fc2fa:	b1a6      	cbz	r6, 23fc326 <_ZN15Adafruit_SH110X7displayEv+0xf2>
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 23fc2fc:	2301      	movs	r3, #1
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
 23fc2fe:	45b1      	cmp	r9, r6
 23fc300:	464a      	mov	r2, r9
 23fc302:	bf28      	it	cs
 23fc304:	4632      	movcs	r2, r6
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
 23fc306:	9301      	str	r3, [sp, #4]
 23fc308:	f10d 031b 	add.w	r3, sp, #27
 23fc30c:	4639      	mov	r1, r7
 23fc30e:	9300      	str	r3, [sp, #0]
 23fc310:	2301      	movs	r3, #1
 23fc312:	9205      	str	r2, [sp, #20]
 23fc314:	f7ff f99e 	bl	23fb654 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
 23fc318:	9a05      	ldr	r2, [sp, #20]
        bytes_remaining -= to_write;
 23fc31a:	1ab6      	subs	r6, r6, r2
        ptr += to_write;
 23fc31c:	4417      	add	r7, r2
        bytes_remaining -= to_write;
 23fc31e:	b2f6      	uxtb	r6, r6
 23fc320:	f000 f8aa 	bl	23fc478 <os_thread_yield>
#endif // PLATFORM_THREADING
}
 23fc324:	e7e8      	b.n	23fc2f8 <_ZN15Adafruit_SH110X7displayEv+0xc4>
        yield();
      }

      // Set low speed clk
      i2c_dev->setSpeed(i2c_postclk);
 23fc326:	6b21      	ldr	r1, [r4, #48]	; 0x30
 23fc328:	f7ff f9c4 	bl	23fb6b4 <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
 23fc32c:	3501      	adds	r5, #1
 23fc32e:	b2ed      	uxtb	r5, r5
 23fc330:	44d3      	add	fp, sl
 23fc332:	e7aa      	b.n	23fc28a <_ZN15Adafruit_SH110X7displayEv+0x56>
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};

      digitalWrite(dcPin, LOW);
 23fc334:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fc338:	f88d 101c 	strb.w	r1, [sp, #28]
      digitalWrite(dcPin, LOW);
 23fc33c:	4619      	mov	r1, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
 23fc33e:	f88d c01d 	strb.w	ip, [sp, #29]
 23fc342:	f88d 201e 	strb.w	r2, [sp, #30]
      digitalWrite(dcPin, LOW);
 23fc346:	9305      	str	r3, [sp, #20]
 23fc348:	f002 fd15 	bl	23fed76 <digitalWrite>
      spi_dev->write(cmd, 3);
 23fc34c:	9b05      	ldr	r3, [sp, #20]
 23fc34e:	2203      	movs	r2, #3
 23fc350:	9300      	str	r3, [sp, #0]
 23fc352:	a907      	add	r1, sp, #28
 23fc354:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc356:	f7ff fa97 	bl	23fb888 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
      digitalWrite(dcPin, HIGH);
 23fc35a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 23fc35e:	2101      	movs	r1, #1
 23fc360:	f002 fd09 	bl	23fed76 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
 23fc364:	9b05      	ldr	r3, [sp, #20]
 23fc366:	4632      	mov	r2, r6
 23fc368:	4639      	mov	r1, r7
 23fc36a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc36c:	9300      	str	r3, [sp, #0]
 23fc36e:	f7ff fa8b 	bl	23fb888 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
 23fc372:	e7db      	b.n	23fc32c <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
 23fc374:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 23fc378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fc37c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
 23fc380:	b009      	add	sp, #36	; 0x24
 23fc382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

023fc388 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
 23fc388:	b530      	push	{r4, r5, lr}
 23fc38a:	4604      	mov	r4, r0
 23fc38c:	b085      	sub	sp, #20
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
 23fc38e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fc390:	9503      	str	r5, [sp, #12]
 23fc392:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fc394:	9502      	str	r5, [sp, #8]
 23fc396:	f99d 5020 	ldrsb.w	r5, [sp, #32]
 23fc39a:	e9cd 3500 	strd	r3, r5, [sp]
 23fc39e:	4613      	mov	r3, r2
 23fc3a0:	460a      	mov	r2, r1
 23fc3a2:	2101      	movs	r1, #1
 23fc3a4:	f7ff feb4 	bl	23fc110 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
 23fc3a8:	4b03      	ldr	r3, [pc, #12]	; (23fc3b8 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
 23fc3aa:	4620      	mov	r0, r4
 23fc3ac:	6023      	str	r3, [r4, #0]
 23fc3ae:	2300      	movs	r3, #0
 23fc3b0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 23fc3b4:	b005      	add	sp, #20
 23fc3b6:	bd30      	pop	{r4, r5, pc}
 23fc3b8:	023ffba4 	.word	0x023ffba4

023fc3bc <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
 23fc3bc:	b510      	push	{r4, lr}
 23fc3be:	4604      	mov	r4, r0
 23fc3c0:	4b02      	ldr	r3, [pc, #8]	; (23fc3cc <_ZN15Adafruit_SH110XD1Ev+0x10>)
 23fc3c2:	6003      	str	r3, [r0, #0]
 23fc3c4:	f7ff fec6 	bl	23fc154 <_ZN17Adafruit_GrayOLEDD1Ev>
 23fc3c8:	4620      	mov	r0, r4
 23fc3ca:	bd10      	pop	{r4, pc}
 23fc3cc:	023ffba4 	.word	0x023ffba4

023fc3d0 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
 23fc3d0:	2100      	movs	r1, #0
 23fc3d2:	220a      	movs	r2, #10
 23fc3d4:	e9c0 1200 	strd	r1, r2, [r0]
{}
 23fc3d8:	4770      	bx	lr

023fc3da <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
 23fc3da:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
 23fc3dc:	b510      	push	{r4, lr}
 23fc3de:	4604      	mov	r4, r0
    this->pin = pin;
 23fc3e0:	71c1      	strb	r1, [r0, #7]
    state = 0;
 23fc3e2:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
 23fc3e4:	b288      	uxth	r0, r1
 23fc3e6:	f002 fcdf 	bl	23feda8 <digitalRead>
 23fc3ea:	b108      	cbz	r0, 23fc3f0 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
 23fc3ec:	2303      	movs	r3, #3
 23fc3ee:	71a3      	strb	r3, [r4, #6]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fc3f0:	f000 f8f8 	bl	23fc5e4 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
 23fc3f4:	6020      	str	r0, [r4, #0]
#endif
}
 23fc3f6:	bd10      	pop	{r4, pc}

023fc3f8 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
 23fc3f8:	b538      	push	{r3, r4, r5, lr}
 23fc3fa:	460c      	mov	r4, r1
 23fc3fc:	4605      	mov	r5, r0
  pinMode(pin, mode);
 23fc3fe:	4611      	mov	r1, r2
 23fc400:	b2a0      	uxth	r0, r4
 23fc402:	f002 fca7 	bl	23fed54 <pinMode>
  
  this->attach(pin);
 23fc406:	4621      	mov	r1, r4
 23fc408:	4628      	mov	r0, r5
}
 23fc40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
 23fc40e:	f7ff bfe4 	b.w	23fc3da <_ZN8Debounce6attachEi>

023fc412 <_ZN8Debounce8intervalEt>:

void Debounce::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
 23fc412:	8081      	strh	r1, [r0, #4]
}
 23fc414:	4770      	bx	lr

023fc416 <_ZN8Debounce6updateEv>:

bool Debounce::update()
{
 23fc416:	b538      	push	{r3, r4, r5, lr}
 23fc418:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
 23fc41a:	79c0      	ldrb	r0, [r0, #7]
 23fc41c:	f002 fcc4 	bl	23feda8 <digitalRead>
 23fc420:	3800      	subs	r0, #0
 23fc422:	bf18      	it	ne
 23fc424:	2001      	movne	r0, #1
    state &= ~_BV(STATE_CHANGED);
 23fc426:	79a5      	ldrb	r5, [r4, #6]
 23fc428:	f025 0308 	bic.w	r3, r5, #8

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
 23fc42c:	f3c5 0540 	ubfx	r5, r5, #1, #1
 23fc430:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
 23fc432:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
 23fc434:	d00a      	beq.n	23fc44c <_ZN8Debounce6updateEv+0x36>
 23fc436:	f000 f8d5 	bl	23fc5e4 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
 23fc43a:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
 23fc43c:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
 23fc43e:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
 23fc442:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
 23fc444:	79a0      	ldrb	r0, [r4, #6]
#endif
}
 23fc446:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 23fc44a:	bd38      	pop	{r3, r4, r5, pc}
 23fc44c:	f000 f8ca 	bl	23fc5e4 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
 23fc450:	6823      	ldr	r3, [r4, #0]
 23fc452:	1ac0      	subs	r0, r0, r3
 23fc454:	88a3      	ldrh	r3, [r4, #4]
 23fc456:	4298      	cmp	r0, r3
 23fc458:	d3f4      	bcc.n	23fc444 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
 23fc45a:	79a3      	ldrb	r3, [r4, #6]
 23fc45c:	f003 0301 	and.w	r3, r3, #1
 23fc460:	42ab      	cmp	r3, r5
 23fc462:	d0ef      	beq.n	23fc444 <_ZN8Debounce6updateEv+0x2e>
 23fc464:	f000 f8be 	bl	23fc5e4 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
 23fc468:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
 23fc46a:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
 23fc46c:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
 23fc470:	f043 0308 	orr.w	r3, r3, #8
 23fc474:	e7e5      	b.n	23fc442 <_ZN8Debounce6updateEv+0x2c>
	...

023fc478 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 23fc478:	b509      	push	{r0, r3, lr}
 23fc47a:	4804      	ldr	r0, [pc, #16]	; (23fc48c <os_thread_yield+0x14>)
 23fc47c:	6800      	ldr	r0, [r0, #0]
 23fc47e:	4b04      	ldr	r3, [pc, #16]	; (23fc490 <os_thread_yield+0x18>)
 23fc480:	4403      	add	r3, r0
 23fc482:	681b      	ldr	r3, [r3, #0]
 23fc484:	68db      	ldr	r3, [r3, #12]
 23fc486:	9302      	str	r3, [sp, #8]
 23fc488:	bd09      	pop	{r0, r3, pc}
 23fc48a:	0000      	.short	0x0000
 23fc48c:	1007a9b0 	.word	0x1007a9b0
 23fc490:	00000030 	.word	0x00000030

023fc494 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 23fc494:	b509      	push	{r0, r3, lr}
 23fc496:	4804      	ldr	r0, [pc, #16]	; (23fc4a8 <os_thread_scheduling+0x14>)
 23fc498:	6800      	ldr	r0, [r0, #0]
 23fc49a:	4b04      	ldr	r3, [pc, #16]	; (23fc4ac <os_thread_scheduling+0x18>)
 23fc49c:	4403      	add	r3, r0
 23fc49e:	681b      	ldr	r3, [r3, #0]
 23fc4a0:	69db      	ldr	r3, [r3, #28]
 23fc4a2:	9302      	str	r3, [sp, #8]
 23fc4a4:	bd09      	pop	{r0, r3, pc}
 23fc4a6:	0000      	.short	0x0000
 23fc4a8:	1007a9b0 	.word	0x1007a9b0
 23fc4ac:	00000030 	.word	0x00000030

023fc4b0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 23fc4b0:	b509      	push	{r0, r3, lr}
 23fc4b2:	4804      	ldr	r0, [pc, #16]	; (23fc4c4 <os_timer_create+0x14>)
 23fc4b4:	6800      	ldr	r0, [r0, #0]
 23fc4b6:	4b04      	ldr	r3, [pc, #16]	; (23fc4c8 <os_timer_create+0x18>)
 23fc4b8:	4403      	add	r3, r0
 23fc4ba:	681b      	ldr	r3, [r3, #0]
 23fc4bc:	6a1b      	ldr	r3, [r3, #32]
 23fc4be:	9302      	str	r3, [sp, #8]
 23fc4c0:	bd09      	pop	{r0, r3, pc}
 23fc4c2:	0000      	.short	0x0000
 23fc4c4:	1007a9b0 	.word	0x1007a9b0
 23fc4c8:	00000030 	.word	0x00000030

023fc4cc <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 23fc4cc:	b509      	push	{r0, r3, lr}
 23fc4ce:	4804      	ldr	r0, [pc, #16]	; (23fc4e0 <os_timer_destroy+0x14>)
 23fc4d0:	6800      	ldr	r0, [r0, #0]
 23fc4d2:	4b04      	ldr	r3, [pc, #16]	; (23fc4e4 <os_timer_destroy+0x18>)
 23fc4d4:	4403      	add	r3, r0
 23fc4d6:	681b      	ldr	r3, [r3, #0]
 23fc4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc4da:	9302      	str	r3, [sp, #8]
 23fc4dc:	bd09      	pop	{r0, r3, pc}
 23fc4de:	0000      	.short	0x0000
 23fc4e0:	1007a9b0 	.word	0x1007a9b0
 23fc4e4:	00000030 	.word	0x00000030

023fc4e8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 23fc4e8:	b509      	push	{r0, r3, lr}
 23fc4ea:	4804      	ldr	r0, [pc, #16]	; (23fc4fc <os_timer_get_id+0x14>)
 23fc4ec:	6800      	ldr	r0, [r0, #0]
 23fc4ee:	4b04      	ldr	r3, [pc, #16]	; (23fc500 <os_timer_get_id+0x18>)
 23fc4f0:	4403      	add	r3, r0
 23fc4f2:	681b      	ldr	r3, [r3, #0]
 23fc4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc4f6:	9302      	str	r3, [sp, #8]
 23fc4f8:	bd09      	pop	{r0, r3, pc}
 23fc4fa:	0000      	.short	0x0000
 23fc4fc:	1007a9b0 	.word	0x1007a9b0
 23fc500:	00000030 	.word	0x00000030

023fc504 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 23fc504:	b509      	push	{r0, r3, lr}
 23fc506:	4804      	ldr	r0, [pc, #16]	; (23fc518 <os_timer_change+0x14>)
 23fc508:	6800      	ldr	r0, [r0, #0]
 23fc50a:	4b04      	ldr	r3, [pc, #16]	; (23fc51c <os_timer_change+0x18>)
 23fc50c:	4403      	add	r3, r0
 23fc50e:	681b      	ldr	r3, [r3, #0]
 23fc510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc512:	9302      	str	r3, [sp, #8]
 23fc514:	bd09      	pop	{r0, r3, pc}
 23fc516:	0000      	.short	0x0000
 23fc518:	1007a9b0 	.word	0x1007a9b0
 23fc51c:	00000030 	.word	0x00000030

023fc520 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc520:	b509      	push	{r0, r3, lr}
 23fc522:	4804      	ldr	r0, [pc, #16]	; (23fc534 <os_mutex_recursive_create+0x14>)
 23fc524:	6800      	ldr	r0, [r0, #0]
 23fc526:	4b04      	ldr	r3, [pc, #16]	; (23fc538 <os_mutex_recursive_create+0x18>)
 23fc528:	4403      	add	r3, r0
 23fc52a:	681b      	ldr	r3, [r3, #0]
 23fc52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc52e:	9302      	str	r3, [sp, #8]
 23fc530:	bd09      	pop	{r0, r3, pc}
 23fc532:	0000      	.short	0x0000
 23fc534:	1007a9b0 	.word	0x1007a9b0
 23fc538:	00000030 	.word	0x00000030

023fc53c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc53c:	b509      	push	{r0, r3, lr}
 23fc53e:	4804      	ldr	r0, [pc, #16]	; (23fc550 <os_mutex_recursive_destroy+0x14>)
 23fc540:	6800      	ldr	r0, [r0, #0]
 23fc542:	4b04      	ldr	r3, [pc, #16]	; (23fc554 <os_mutex_recursive_destroy+0x18>)
 23fc544:	4403      	add	r3, r0
 23fc546:	681b      	ldr	r3, [r3, #0]
 23fc548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc54a:	9302      	str	r3, [sp, #8]
 23fc54c:	bd09      	pop	{r0, r3, pc}
 23fc54e:	0000      	.short	0x0000
 23fc550:	1007a9b0 	.word	0x1007a9b0
 23fc554:	00000030 	.word	0x00000030

023fc558 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc558:	b509      	push	{r0, r3, lr}
 23fc55a:	4804      	ldr	r0, [pc, #16]	; (23fc56c <os_mutex_recursive_lock+0x14>)
 23fc55c:	6800      	ldr	r0, [r0, #0]
 23fc55e:	4b04      	ldr	r3, [pc, #16]	; (23fc570 <os_mutex_recursive_lock+0x18>)
 23fc560:	4403      	add	r3, r0
 23fc562:	681b      	ldr	r3, [r3, #0]
 23fc564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc566:	9302      	str	r3, [sp, #8]
 23fc568:	bd09      	pop	{r0, r3, pc}
 23fc56a:	0000      	.short	0x0000
 23fc56c:	1007a9b0 	.word	0x1007a9b0
 23fc570:	00000030 	.word	0x00000030

023fc574 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc574:	b509      	push	{r0, r3, lr}
 23fc576:	4804      	ldr	r0, [pc, #16]	; (23fc588 <os_mutex_recursive_unlock+0x14>)
 23fc578:	6800      	ldr	r0, [r0, #0]
 23fc57a:	4b04      	ldr	r3, [pc, #16]	; (23fc58c <os_mutex_recursive_unlock+0x18>)
 23fc57c:	4403      	add	r3, r0
 23fc57e:	681b      	ldr	r3, [r3, #0]
 23fc580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc582:	9302      	str	r3, [sp, #8]
 23fc584:	bd09      	pop	{r0, r3, pc}
 23fc586:	0000      	.short	0x0000
 23fc588:	1007a9b0 	.word	0x1007a9b0
 23fc58c:	00000030 	.word	0x00000030

023fc590 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 23fc590:	b509      	push	{r0, r3, lr}
 23fc592:	4804      	ldr	r0, [pc, #16]	; (23fc5a4 <os_timer_set_id+0x14>)
 23fc594:	6800      	ldr	r0, [r0, #0]
 23fc596:	4b04      	ldr	r3, [pc, #16]	; (23fc5a8 <os_timer_set_id+0x18>)
 23fc598:	4403      	add	r3, r0
 23fc59a:	681b      	ldr	r3, [r3, #0]
 23fc59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc59e:	9302      	str	r3, [sp, #8]
 23fc5a0:	bd09      	pop	{r0, r3, pc}
 23fc5a2:	0000      	.short	0x0000
 23fc5a4:	1007a9b0 	.word	0x1007a9b0
 23fc5a8:	00000030 	.word	0x00000030

023fc5ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc5ac:	b509      	push	{r0, r3, lr}
 23fc5ae:	4804      	ldr	r0, [pc, #16]	; (23fc5c0 <HAL_RNG_GetRandomNumber+0x14>)
 23fc5b0:	6800      	ldr	r0, [r0, #0]
 23fc5b2:	4b04      	ldr	r3, [pc, #16]	; (23fc5c4 <HAL_RNG_GetRandomNumber+0x18>)
 23fc5b4:	4403      	add	r3, r0
 23fc5b6:	681b      	ldr	r3, [r3, #0]
 23fc5b8:	685b      	ldr	r3, [r3, #4]
 23fc5ba:	9302      	str	r3, [sp, #8]
 23fc5bc:	bd09      	pop	{r0, r3, pc}
 23fc5be:	0000      	.short	0x0000
 23fc5c0:	1007a9b0 	.word	0x1007a9b0
 23fc5c4:	00000000 	.word	0x00000000

023fc5c8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc5c8:	b509      	push	{r0, r3, lr}
 23fc5ca:	4804      	ldr	r0, [pc, #16]	; (23fc5dc <HAL_Delay_Microseconds+0x14>)
 23fc5cc:	6800      	ldr	r0, [r0, #0]
 23fc5ce:	4b04      	ldr	r3, [pc, #16]	; (23fc5e0 <HAL_Delay_Microseconds+0x18>)
 23fc5d0:	4403      	add	r3, r0
 23fc5d2:	681b      	ldr	r3, [r3, #0]
 23fc5d4:	68db      	ldr	r3, [r3, #12]
 23fc5d6:	9302      	str	r3, [sp, #8]
 23fc5d8:	bd09      	pop	{r0, r3, pc}
 23fc5da:	0000      	.short	0x0000
 23fc5dc:	1007a9b0 	.word	0x1007a9b0
 23fc5e0:	00000000 	.word	0x00000000

023fc5e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc5e4:	b509      	push	{r0, r3, lr}
 23fc5e6:	4804      	ldr	r0, [pc, #16]	; (23fc5f8 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc5e8:	6800      	ldr	r0, [r0, #0]
 23fc5ea:	4b04      	ldr	r3, [pc, #16]	; (23fc5fc <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc5ec:	4403      	add	r3, r0
 23fc5ee:	681b      	ldr	r3, [r3, #0]
 23fc5f0:	695b      	ldr	r3, [r3, #20]
 23fc5f2:	9302      	str	r3, [sp, #8]
 23fc5f4:	bd09      	pop	{r0, r3, pc}
 23fc5f6:	0000      	.short	0x0000
 23fc5f8:	1007a9b0 	.word	0x1007a9b0
 23fc5fc:	00000000 	.word	0x00000000

023fc600 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fc600:	b509      	push	{r0, r3, lr}
 23fc602:	4804      	ldr	r0, [pc, #16]	; (23fc614 <hal_pin_validate_function+0x14>)
 23fc604:	6800      	ldr	r0, [r0, #0]
 23fc606:	4b04      	ldr	r3, [pc, #16]	; (23fc618 <hal_pin_validate_function+0x18>)
 23fc608:	4403      	add	r3, r0
 23fc60a:	681b      	ldr	r3, [r3, #0]
 23fc60c:	685b      	ldr	r3, [r3, #4]
 23fc60e:	9302      	str	r3, [sp, #8]
 23fc610:	bd09      	pop	{r0, r3, pc}
 23fc612:	0000      	.short	0x0000
 23fc614:	1007a9b0 	.word	0x1007a9b0
 23fc618:	00000014 	.word	0x00000014

023fc61c <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc61c:	b509      	push	{r0, r3, lr}
 23fc61e:	4804      	ldr	r0, [pc, #16]	; (23fc630 <hal_gpio_mode+0x14>)
 23fc620:	6800      	ldr	r0, [r0, #0]
 23fc622:	4b04      	ldr	r3, [pc, #16]	; (23fc634 <hal_gpio_mode+0x18>)
 23fc624:	4403      	add	r3, r0
 23fc626:	681b      	ldr	r3, [r3, #0]
 23fc628:	689b      	ldr	r3, [r3, #8]
 23fc62a:	9302      	str	r3, [sp, #8]
 23fc62c:	bd09      	pop	{r0, r3, pc}
 23fc62e:	0000      	.short	0x0000
 23fc630:	1007a9b0 	.word	0x1007a9b0
 23fc634:	00000014 	.word	0x00000014

023fc638 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc638:	b509      	push	{r0, r3, lr}
 23fc63a:	4804      	ldr	r0, [pc, #16]	; (23fc64c <hal_gpio_get_mode+0x14>)
 23fc63c:	6800      	ldr	r0, [r0, #0]
 23fc63e:	4b04      	ldr	r3, [pc, #16]	; (23fc650 <hal_gpio_get_mode+0x18>)
 23fc640:	4403      	add	r3, r0
 23fc642:	681b      	ldr	r3, [r3, #0]
 23fc644:	68db      	ldr	r3, [r3, #12]
 23fc646:	9302      	str	r3, [sp, #8]
 23fc648:	bd09      	pop	{r0, r3, pc}
 23fc64a:	0000      	.short	0x0000
 23fc64c:	1007a9b0 	.word	0x1007a9b0
 23fc650:	00000014 	.word	0x00000014

023fc654 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc654:	b509      	push	{r0, r3, lr}
 23fc656:	4804      	ldr	r0, [pc, #16]	; (23fc668 <hal_gpio_write+0x14>)
 23fc658:	6800      	ldr	r0, [r0, #0]
 23fc65a:	4b04      	ldr	r3, [pc, #16]	; (23fc66c <hal_gpio_write+0x18>)
 23fc65c:	4403      	add	r3, r0
 23fc65e:	681b      	ldr	r3, [r3, #0]
 23fc660:	691b      	ldr	r3, [r3, #16]
 23fc662:	9302      	str	r3, [sp, #8]
 23fc664:	bd09      	pop	{r0, r3, pc}
 23fc666:	0000      	.short	0x0000
 23fc668:	1007a9b0 	.word	0x1007a9b0
 23fc66c:	00000014 	.word	0x00000014

023fc670 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23fc670:	b509      	push	{r0, r3, lr}
 23fc672:	4804      	ldr	r0, [pc, #16]	; (23fc684 <hal_gpio_read+0x14>)
 23fc674:	6800      	ldr	r0, [r0, #0]
 23fc676:	4b04      	ldr	r3, [pc, #16]	; (23fc688 <hal_gpio_read+0x18>)
 23fc678:	4403      	add	r3, r0
 23fc67a:	681b      	ldr	r3, [r3, #0]
 23fc67c:	695b      	ldr	r3, [r3, #20]
 23fc67e:	9302      	str	r3, [sp, #8]
 23fc680:	bd09      	pop	{r0, r3, pc}
 23fc682:	0000      	.short	0x0000
 23fc684:	1007a9b0 	.word	0x1007a9b0
 23fc688:	00000014 	.word	0x00000014

023fc68c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fc68c:	b509      	push	{r0, r3, lr}
 23fc68e:	4804      	ldr	r0, [pc, #16]	; (23fc6a0 <hal_adc_read+0x14>)
 23fc690:	6800      	ldr	r0, [r0, #0]
 23fc692:	4b04      	ldr	r3, [pc, #16]	; (23fc6a4 <hal_adc_read+0x18>)
 23fc694:	4403      	add	r3, r0
 23fc696:	681b      	ldr	r3, [r3, #0]
 23fc698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc69a:	9302      	str	r3, [sp, #8]
 23fc69c:	bd09      	pop	{r0, r3, pc}
 23fc69e:	0000      	.short	0x0000
 23fc6a0:	1007a9b0 	.word	0x1007a9b0
 23fc6a4:	00000014 	.word	0x00000014

023fc6a8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fc6a8:	b509      	push	{r0, r3, lr}
 23fc6aa:	4804      	ldr	r0, [pc, #16]	; (23fc6bc <hal_i2c_set_speed+0x14>)
 23fc6ac:	6800      	ldr	r0, [r0, #0]
 23fc6ae:	4b04      	ldr	r3, [pc, #16]	; (23fc6c0 <hal_i2c_set_speed+0x18>)
 23fc6b0:	4403      	add	r3, r0
 23fc6b2:	681b      	ldr	r3, [r3, #0]
 23fc6b4:	681b      	ldr	r3, [r3, #0]
 23fc6b6:	9302      	str	r3, [sp, #8]
 23fc6b8:	bd09      	pop	{r0, r3, pc}
 23fc6ba:	0000      	.short	0x0000
 23fc6bc:	1007a9b0 	.word	0x1007a9b0
 23fc6c0:	00000010 	.word	0x00000010

023fc6c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fc6c4:	b509      	push	{r0, r3, lr}
 23fc6c6:	4804      	ldr	r0, [pc, #16]	; (23fc6d8 <hal_i2c_begin_transmission+0x14>)
 23fc6c8:	6800      	ldr	r0, [r0, #0]
 23fc6ca:	4b04      	ldr	r3, [pc, #16]	; (23fc6dc <hal_i2c_begin_transmission+0x18>)
 23fc6cc:	4403      	add	r3, r0
 23fc6ce:	681b      	ldr	r3, [r3, #0]
 23fc6d0:	699b      	ldr	r3, [r3, #24]
 23fc6d2:	9302      	str	r3, [sp, #8]
 23fc6d4:	bd09      	pop	{r0, r3, pc}
 23fc6d6:	0000      	.short	0x0000
 23fc6d8:	1007a9b0 	.word	0x1007a9b0
 23fc6dc:	00000010 	.word	0x00000010

023fc6e0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fc6e0:	b509      	push	{r0, r3, lr}
 23fc6e2:	4804      	ldr	r0, [pc, #16]	; (23fc6f4 <hal_i2c_end_transmission+0x14>)
 23fc6e4:	6800      	ldr	r0, [r0, #0]
 23fc6e6:	4b04      	ldr	r3, [pc, #16]	; (23fc6f8 <hal_i2c_end_transmission+0x18>)
 23fc6e8:	4403      	add	r3, r0
 23fc6ea:	681b      	ldr	r3, [r3, #0]
 23fc6ec:	69db      	ldr	r3, [r3, #28]
 23fc6ee:	9302      	str	r3, [sp, #8]
 23fc6f0:	bd09      	pop	{r0, r3, pc}
 23fc6f2:	0000      	.short	0x0000
 23fc6f4:	1007a9b0 	.word	0x1007a9b0
 23fc6f8:	00000010 	.word	0x00000010

023fc6fc <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc6fc:	b509      	push	{r0, r3, lr}
 23fc6fe:	4804      	ldr	r0, [pc, #16]	; (23fc710 <hal_i2c_write+0x14>)
 23fc700:	6800      	ldr	r0, [r0, #0]
 23fc702:	4b04      	ldr	r3, [pc, #16]	; (23fc714 <hal_i2c_write+0x18>)
 23fc704:	4403      	add	r3, r0
 23fc706:	681b      	ldr	r3, [r3, #0]
 23fc708:	6a1b      	ldr	r3, [r3, #32]
 23fc70a:	9302      	str	r3, [sp, #8]
 23fc70c:	bd09      	pop	{r0, r3, pc}
 23fc70e:	0000      	.short	0x0000
 23fc710:	1007a9b0 	.word	0x1007a9b0
 23fc714:	00000010 	.word	0x00000010

023fc718 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc718:	b509      	push	{r0, r3, lr}
 23fc71a:	4804      	ldr	r0, [pc, #16]	; (23fc72c <hal_i2c_available+0x14>)
 23fc71c:	6800      	ldr	r0, [r0, #0]
 23fc71e:	4b04      	ldr	r3, [pc, #16]	; (23fc730 <hal_i2c_available+0x18>)
 23fc720:	4403      	add	r3, r0
 23fc722:	681b      	ldr	r3, [r3, #0]
 23fc724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc726:	9302      	str	r3, [sp, #8]
 23fc728:	bd09      	pop	{r0, r3, pc}
 23fc72a:	0000      	.short	0x0000
 23fc72c:	1007a9b0 	.word	0x1007a9b0
 23fc730:	00000010 	.word	0x00000010

023fc734 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc734:	b509      	push	{r0, r3, lr}
 23fc736:	4804      	ldr	r0, [pc, #16]	; (23fc748 <hal_i2c_read+0x14>)
 23fc738:	6800      	ldr	r0, [r0, #0]
 23fc73a:	4b04      	ldr	r3, [pc, #16]	; (23fc74c <hal_i2c_read+0x18>)
 23fc73c:	4403      	add	r3, r0
 23fc73e:	681b      	ldr	r3, [r3, #0]
 23fc740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc742:	9302      	str	r3, [sp, #8]
 23fc744:	bd09      	pop	{r0, r3, pc}
 23fc746:	0000      	.short	0x0000
 23fc748:	1007a9b0 	.word	0x1007a9b0
 23fc74c:	00000010 	.word	0x00000010

023fc750 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc750:	b509      	push	{r0, r3, lr}
 23fc752:	4804      	ldr	r0, [pc, #16]	; (23fc764 <hal_i2c_peek+0x14>)
 23fc754:	6800      	ldr	r0, [r0, #0]
 23fc756:	4b04      	ldr	r3, [pc, #16]	; (23fc768 <hal_i2c_peek+0x18>)
 23fc758:	4403      	add	r3, r0
 23fc75a:	681b      	ldr	r3, [r3, #0]
 23fc75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc75e:	9302      	str	r3, [sp, #8]
 23fc760:	bd09      	pop	{r0, r3, pc}
 23fc762:	0000      	.short	0x0000
 23fc764:	1007a9b0 	.word	0x1007a9b0
 23fc768:	00000010 	.word	0x00000010

023fc76c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc76c:	b509      	push	{r0, r3, lr}
 23fc76e:	4804      	ldr	r0, [pc, #16]	; (23fc780 <hal_i2c_flush+0x14>)
 23fc770:	6800      	ldr	r0, [r0, #0]
 23fc772:	4b04      	ldr	r3, [pc, #16]	; (23fc784 <hal_i2c_flush+0x18>)
 23fc774:	4403      	add	r3, r0
 23fc776:	681b      	ldr	r3, [r3, #0]
 23fc778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc77a:	9302      	str	r3, [sp, #8]
 23fc77c:	bd09      	pop	{r0, r3, pc}
 23fc77e:	0000      	.short	0x0000
 23fc780:	1007a9b0 	.word	0x1007a9b0
 23fc784:	00000010 	.word	0x00000010

023fc788 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc788:	b509      	push	{r0, r3, lr}
 23fc78a:	4804      	ldr	r0, [pc, #16]	; (23fc79c <hal_i2c_is_enabled+0x14>)
 23fc78c:	6800      	ldr	r0, [r0, #0]
 23fc78e:	4b04      	ldr	r3, [pc, #16]	; (23fc7a0 <hal_i2c_is_enabled+0x18>)
 23fc790:	4403      	add	r3, r0
 23fc792:	681b      	ldr	r3, [r3, #0]
 23fc794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc796:	9302      	str	r3, [sp, #8]
 23fc798:	bd09      	pop	{r0, r3, pc}
 23fc79a:	0000      	.short	0x0000
 23fc79c:	1007a9b0 	.word	0x1007a9b0
 23fc7a0:	00000010 	.word	0x00000010

023fc7a4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc7a4:	b509      	push	{r0, r3, lr}
 23fc7a6:	4804      	ldr	r0, [pc, #16]	; (23fc7b8 <hal_i2c_init+0x14>)
 23fc7a8:	6800      	ldr	r0, [r0, #0]
 23fc7aa:	4b04      	ldr	r3, [pc, #16]	; (23fc7bc <hal_i2c_init+0x18>)
 23fc7ac:	4403      	add	r3, r0
 23fc7ae:	681b      	ldr	r3, [r3, #0]
 23fc7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc7b2:	9302      	str	r3, [sp, #8]
 23fc7b4:	bd09      	pop	{r0, r3, pc}
 23fc7b6:	0000      	.short	0x0000
 23fc7b8:	1007a9b0 	.word	0x1007a9b0
 23fc7bc:	00000010 	.word	0x00000010

023fc7c0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fc7c0:	b509      	push	{r0, r3, lr}
 23fc7c2:	4804      	ldr	r0, [pc, #16]	; (23fc7d4 <hal_i2c_request_ex+0x14>)
 23fc7c4:	6800      	ldr	r0, [r0, #0]
 23fc7c6:	4b04      	ldr	r3, [pc, #16]	; (23fc7d8 <hal_i2c_request_ex+0x18>)
 23fc7c8:	4403      	add	r3, r0
 23fc7ca:	681b      	ldr	r3, [r3, #0]
 23fc7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc7ce:	9302      	str	r3, [sp, #8]
 23fc7d0:	bd09      	pop	{r0, r3, pc}
 23fc7d2:	0000      	.short	0x0000
 23fc7d4:	1007a9b0 	.word	0x1007a9b0
 23fc7d8:	00000010 	.word	0x00000010

023fc7dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc7dc:	b509      	push	{r0, r3, lr}
 23fc7de:	4804      	ldr	r0, [pc, #16]	; (23fc7f0 <inet_inet_ntop+0x14>)
 23fc7e0:	6800      	ldr	r0, [r0, #0]
 23fc7e2:	4b04      	ldr	r3, [pc, #16]	; (23fc7f4 <inet_inet_ntop+0x18>)
 23fc7e4:	4403      	add	r3, r0
 23fc7e6:	681b      	ldr	r3, [r3, #0]
 23fc7e8:	695b      	ldr	r3, [r3, #20]
 23fc7ea:	9302      	str	r3, [sp, #8]
 23fc7ec:	bd09      	pop	{r0, r3, pc}
 23fc7ee:	0000      	.short	0x0000
 23fc7f0:	1007a9b0 	.word	0x1007a9b0
 23fc7f4:	0000004c 	.word	0x0000004c

023fc7f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc7f8:	b509      	push	{r0, r3, lr}
 23fc7fa:	4804      	ldr	r0, [pc, #16]	; (23fc80c <netdb_freeaddrinfo+0x14>)
 23fc7fc:	6800      	ldr	r0, [r0, #0]
 23fc7fe:	4b04      	ldr	r3, [pc, #16]	; (23fc810 <netdb_freeaddrinfo+0x18>)
 23fc800:	4403      	add	r3, r0
 23fc802:	681b      	ldr	r3, [r3, #0]
 23fc804:	689b      	ldr	r3, [r3, #8]
 23fc806:	9302      	str	r3, [sp, #8]
 23fc808:	bd09      	pop	{r0, r3, pc}
 23fc80a:	0000      	.short	0x0000
 23fc80c:	1007a9b0 	.word	0x1007a9b0
 23fc810:	00000050 	.word	0x00000050

023fc814 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc814:	b509      	push	{r0, r3, lr}
 23fc816:	4804      	ldr	r0, [pc, #16]	; (23fc828 <netdb_getaddrinfo+0x14>)
 23fc818:	6800      	ldr	r0, [r0, #0]
 23fc81a:	4b04      	ldr	r3, [pc, #16]	; (23fc82c <netdb_getaddrinfo+0x18>)
 23fc81c:	4403      	add	r3, r0
 23fc81e:	681b      	ldr	r3, [r3, #0]
 23fc820:	68db      	ldr	r3, [r3, #12]
 23fc822:	9302      	str	r3, [sp, #8]
 23fc824:	bd09      	pop	{r0, r3, pc}
 23fc826:	0000      	.short	0x0000
 23fc828:	1007a9b0 	.word	0x1007a9b0
 23fc82c:	00000050 	.word	0x00000050

023fc830 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc830:	b509      	push	{r0, r3, lr}
 23fc832:	4804      	ldr	r0, [pc, #16]	; (23fc844 <hal_spi_init+0x14>)
 23fc834:	6800      	ldr	r0, [r0, #0]
 23fc836:	4b04      	ldr	r3, [pc, #16]	; (23fc848 <hal_spi_init+0x18>)
 23fc838:	4403      	add	r3, r0
 23fc83a:	681b      	ldr	r3, [r3, #0]
 23fc83c:	69db      	ldr	r3, [r3, #28]
 23fc83e:	9302      	str	r3, [sp, #8]
 23fc840:	bd09      	pop	{r0, r3, pc}
 23fc842:	0000      	.short	0x0000
 23fc844:	1007a9b0 	.word	0x1007a9b0
 23fc848:	00000018 	.word	0x00000018

023fc84c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc84c:	b509      	push	{r0, r3, lr}
 23fc84e:	4804      	ldr	r0, [pc, #16]	; (23fc860 <hal_spi_is_enabled+0x14>)
 23fc850:	6800      	ldr	r0, [r0, #0]
 23fc852:	4b04      	ldr	r3, [pc, #16]	; (23fc864 <hal_spi_is_enabled+0x18>)
 23fc854:	4403      	add	r3, r0
 23fc856:	681b      	ldr	r3, [r3, #0]
 23fc858:	6a1b      	ldr	r3, [r3, #32]
 23fc85a:	9302      	str	r3, [sp, #8]
 23fc85c:	bd09      	pop	{r0, r3, pc}
 23fc85e:	0000      	.short	0x0000
 23fc860:	1007a9b0 	.word	0x1007a9b0
 23fc864:	00000018 	.word	0x00000018

023fc868 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fc868:	b509      	push	{r0, r3, lr}
 23fc86a:	4804      	ldr	r0, [pc, #16]	; (23fc87c <hal_spi_info+0x14>)
 23fc86c:	6800      	ldr	r0, [r0, #0]
 23fc86e:	4b04      	ldr	r3, [pc, #16]	; (23fc880 <hal_spi_info+0x18>)
 23fc870:	4403      	add	r3, r0
 23fc872:	681b      	ldr	r3, [r3, #0]
 23fc874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc876:	9302      	str	r3, [sp, #8]
 23fc878:	bd09      	pop	{r0, r3, pc}
 23fc87a:	0000      	.short	0x0000
 23fc87c:	1007a9b0 	.word	0x1007a9b0
 23fc880:	00000018 	.word	0x00000018

023fc884 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fc884:	b509      	push	{r0, r3, lr}
 23fc886:	4804      	ldr	r0, [pc, #16]	; (23fc898 <hal_spi_transfer_dma+0x14>)
 23fc888:	6800      	ldr	r0, [r0, #0]
 23fc88a:	4b04      	ldr	r3, [pc, #16]	; (23fc89c <hal_spi_transfer_dma+0x18>)
 23fc88c:	4403      	add	r3, r0
 23fc88e:	681b      	ldr	r3, [r3, #0]
 23fc890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc892:	9302      	str	r3, [sp, #8]
 23fc894:	bd09      	pop	{r0, r3, pc}
 23fc896:	0000      	.short	0x0000
 23fc898:	1007a9b0 	.word	0x1007a9b0
 23fc89c:	00000018 	.word	0x00000018

023fc8a0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fc8a0:	b509      	push	{r0, r3, lr}
 23fc8a2:	4804      	ldr	r0, [pc, #16]	; (23fc8b4 <hal_spi_transfer_dma_status+0x14>)
 23fc8a4:	6800      	ldr	r0, [r0, #0]
 23fc8a6:	4b04      	ldr	r3, [pc, #16]	; (23fc8b8 <hal_spi_transfer_dma_status+0x18>)
 23fc8a8:	4403      	add	r3, r0
 23fc8aa:	681b      	ldr	r3, [r3, #0]
 23fc8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fc8ae:	9302      	str	r3, [sp, #8]
 23fc8b0:	bd09      	pop	{r0, r3, pc}
 23fc8b2:	0000      	.short	0x0000
 23fc8b4:	1007a9b0 	.word	0x1007a9b0
 23fc8b8:	00000018 	.word	0x00000018

023fc8bc <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fc8bc:	b509      	push	{r0, r3, lr}
 23fc8be:	4804      	ldr	r0, [pc, #16]	; (23fc8d0 <hal_spi_set_settings+0x14>)
 23fc8c0:	6800      	ldr	r0, [r0, #0]
 23fc8c2:	4b04      	ldr	r3, [pc, #16]	; (23fc8d4 <hal_spi_set_settings+0x18>)
 23fc8c4:	4403      	add	r3, r0
 23fc8c6:	681b      	ldr	r3, [r3, #0]
 23fc8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc8ca:	9302      	str	r3, [sp, #8]
 23fc8cc:	bd09      	pop	{r0, r3, pc}
 23fc8ce:	0000      	.short	0x0000
 23fc8d0:	1007a9b0 	.word	0x1007a9b0
 23fc8d4:	00000018 	.word	0x00000018

023fc8d8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fc8d8:	b509      	push	{r0, r3, lr}
 23fc8da:	4804      	ldr	r0, [pc, #16]	; (23fc8ec <hal_spi_acquire+0x14>)
 23fc8dc:	6800      	ldr	r0, [r0, #0]
 23fc8de:	4b04      	ldr	r3, [pc, #16]	; (23fc8f0 <hal_spi_acquire+0x18>)
 23fc8e0:	4403      	add	r3, r0
 23fc8e2:	681b      	ldr	r3, [r3, #0]
 23fc8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc8e6:	9302      	str	r3, [sp, #8]
 23fc8e8:	bd09      	pop	{r0, r3, pc}
 23fc8ea:	0000      	.short	0x0000
 23fc8ec:	1007a9b0 	.word	0x1007a9b0
 23fc8f0:	00000018 	.word	0x00000018

023fc8f4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fc8f4:	b509      	push	{r0, r3, lr}
 23fc8f6:	4804      	ldr	r0, [pc, #16]	; (23fc908 <hal_spi_release+0x14>)
 23fc8f8:	6800      	ldr	r0, [r0, #0]
 23fc8fa:	4b04      	ldr	r3, [pc, #16]	; (23fc90c <hal_spi_release+0x18>)
 23fc8fc:	4403      	add	r3, r0
 23fc8fe:	681b      	ldr	r3, [r3, #0]
 23fc900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc902:	9302      	str	r3, [sp, #8]
 23fc904:	bd09      	pop	{r0, r3, pc}
 23fc906:	0000      	.short	0x0000
 23fc908:	1007a9b0 	.word	0x1007a9b0
 23fc90c:	00000018 	.word	0x00000018

023fc910 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fc910:	b509      	push	{r0, r3, lr}
 23fc912:	4804      	ldr	r0, [pc, #16]	; (23fc924 <hal_usart_end+0x14>)
 23fc914:	6800      	ldr	r0, [r0, #0]
 23fc916:	4b04      	ldr	r3, [pc, #16]	; (23fc928 <hal_usart_end+0x18>)
 23fc918:	4403      	add	r3, r0
 23fc91a:	681b      	ldr	r3, [r3, #0]
 23fc91c:	689b      	ldr	r3, [r3, #8]
 23fc91e:	9302      	str	r3, [sp, #8]
 23fc920:	bd09      	pop	{r0, r3, pc}
 23fc922:	0000      	.short	0x0000
 23fc924:	1007a9b0 	.word	0x1007a9b0
 23fc928:	00000024 	.word	0x00000024

023fc92c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc92c:	b509      	push	{r0, r3, lr}
 23fc92e:	4804      	ldr	r0, [pc, #16]	; (23fc940 <hal_usart_write+0x14>)
 23fc930:	6800      	ldr	r0, [r0, #0]
 23fc932:	4b04      	ldr	r3, [pc, #16]	; (23fc944 <hal_usart_write+0x18>)
 23fc934:	4403      	add	r3, r0
 23fc936:	681b      	ldr	r3, [r3, #0]
 23fc938:	68db      	ldr	r3, [r3, #12]
 23fc93a:	9302      	str	r3, [sp, #8]
 23fc93c:	bd09      	pop	{r0, r3, pc}
 23fc93e:	0000      	.short	0x0000
 23fc940:	1007a9b0 	.word	0x1007a9b0
 23fc944:	00000024 	.word	0x00000024

023fc948 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc948:	b509      	push	{r0, r3, lr}
 23fc94a:	4804      	ldr	r0, [pc, #16]	; (23fc95c <hal_usart_available+0x14>)
 23fc94c:	6800      	ldr	r0, [r0, #0]
 23fc94e:	4b04      	ldr	r3, [pc, #16]	; (23fc960 <hal_usart_available+0x18>)
 23fc950:	4403      	add	r3, r0
 23fc952:	681b      	ldr	r3, [r3, #0]
 23fc954:	691b      	ldr	r3, [r3, #16]
 23fc956:	9302      	str	r3, [sp, #8]
 23fc958:	bd09      	pop	{r0, r3, pc}
 23fc95a:	0000      	.short	0x0000
 23fc95c:	1007a9b0 	.word	0x1007a9b0
 23fc960:	00000024 	.word	0x00000024

023fc964 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc964:	b509      	push	{r0, r3, lr}
 23fc966:	4804      	ldr	r0, [pc, #16]	; (23fc978 <hal_usart_read+0x14>)
 23fc968:	6800      	ldr	r0, [r0, #0]
 23fc96a:	4b04      	ldr	r3, [pc, #16]	; (23fc97c <hal_usart_read+0x18>)
 23fc96c:	4403      	add	r3, r0
 23fc96e:	681b      	ldr	r3, [r3, #0]
 23fc970:	695b      	ldr	r3, [r3, #20]
 23fc972:	9302      	str	r3, [sp, #8]
 23fc974:	bd09      	pop	{r0, r3, pc}
 23fc976:	0000      	.short	0x0000
 23fc978:	1007a9b0 	.word	0x1007a9b0
 23fc97c:	00000024 	.word	0x00000024

023fc980 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc980:	b509      	push	{r0, r3, lr}
 23fc982:	4804      	ldr	r0, [pc, #16]	; (23fc994 <hal_usart_peek+0x14>)
 23fc984:	6800      	ldr	r0, [r0, #0]
 23fc986:	4b04      	ldr	r3, [pc, #16]	; (23fc998 <hal_usart_peek+0x18>)
 23fc988:	4403      	add	r3, r0
 23fc98a:	681b      	ldr	r3, [r3, #0]
 23fc98c:	699b      	ldr	r3, [r3, #24]
 23fc98e:	9302      	str	r3, [sp, #8]
 23fc990:	bd09      	pop	{r0, r3, pc}
 23fc992:	0000      	.short	0x0000
 23fc994:	1007a9b0 	.word	0x1007a9b0
 23fc998:	00000024 	.word	0x00000024

023fc99c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc99c:	b509      	push	{r0, r3, lr}
 23fc99e:	4804      	ldr	r0, [pc, #16]	; (23fc9b0 <hal_usart_flush+0x14>)
 23fc9a0:	6800      	ldr	r0, [r0, #0]
 23fc9a2:	4b04      	ldr	r3, [pc, #16]	; (23fc9b4 <hal_usart_flush+0x18>)
 23fc9a4:	4403      	add	r3, r0
 23fc9a6:	681b      	ldr	r3, [r3, #0]
 23fc9a8:	69db      	ldr	r3, [r3, #28]
 23fc9aa:	9302      	str	r3, [sp, #8]
 23fc9ac:	bd09      	pop	{r0, r3, pc}
 23fc9ae:	0000      	.short	0x0000
 23fc9b0:	1007a9b0 	.word	0x1007a9b0
 23fc9b4:	00000024 	.word	0x00000024

023fc9b8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc9b8:	b509      	push	{r0, r3, lr}
 23fc9ba:	4804      	ldr	r0, [pc, #16]	; (23fc9cc <hal_usart_is_enabled+0x14>)
 23fc9bc:	6800      	ldr	r0, [r0, #0]
 23fc9be:	4b04      	ldr	r3, [pc, #16]	; (23fc9d0 <hal_usart_is_enabled+0x18>)
 23fc9c0:	4403      	add	r3, r0
 23fc9c2:	681b      	ldr	r3, [r3, #0]
 23fc9c4:	6a1b      	ldr	r3, [r3, #32]
 23fc9c6:	9302      	str	r3, [sp, #8]
 23fc9c8:	bd09      	pop	{r0, r3, pc}
 23fc9ca:	0000      	.short	0x0000
 23fc9cc:	1007a9b0 	.word	0x1007a9b0
 23fc9d0:	00000024 	.word	0x00000024

023fc9d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc9d4:	b509      	push	{r0, r3, lr}
 23fc9d6:	4804      	ldr	r0, [pc, #16]	; (23fc9e8 <hal_usart_available_data_for_write+0x14>)
 23fc9d8:	6800      	ldr	r0, [r0, #0]
 23fc9da:	4b04      	ldr	r3, [pc, #16]	; (23fc9ec <hal_usart_available_data_for_write+0x18>)
 23fc9dc:	4403      	add	r3, r0
 23fc9de:	681b      	ldr	r3, [r3, #0]
 23fc9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc9e2:	9302      	str	r3, [sp, #8]
 23fc9e4:	bd09      	pop	{r0, r3, pc}
 23fc9e6:	0000      	.short	0x0000
 23fc9e8:	1007a9b0 	.word	0x1007a9b0
 23fc9ec:	00000024 	.word	0x00000024

023fc9f0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fc9f0:	b509      	push	{r0, r3, lr}
 23fc9f2:	4804      	ldr	r0, [pc, #16]	; (23fca04 <hal_usart_begin_config+0x14>)
 23fc9f4:	6800      	ldr	r0, [r0, #0]
 23fc9f6:	4b04      	ldr	r3, [pc, #16]	; (23fca08 <hal_usart_begin_config+0x18>)
 23fc9f8:	4403      	add	r3, r0
 23fc9fa:	681b      	ldr	r3, [r3, #0]
 23fc9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc9fe:	9302      	str	r3, [sp, #8]
 23fca00:	bd09      	pop	{r0, r3, pc}
 23fca02:	0000      	.short	0x0000
 23fca04:	1007a9b0 	.word	0x1007a9b0
 23fca08:	00000024 	.word	0x00000024

023fca0c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fca0c:	b509      	push	{r0, r3, lr}
 23fca0e:	4804      	ldr	r0, [pc, #16]	; (23fca20 <hal_usart_init_ex+0x14>)
 23fca10:	6800      	ldr	r0, [r0, #0]
 23fca12:	4b04      	ldr	r3, [pc, #16]	; (23fca24 <hal_usart_init_ex+0x18>)
 23fca14:	4403      	add	r3, r0
 23fca16:	681b      	ldr	r3, [r3, #0]
 23fca18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fca1a:	9302      	str	r3, [sp, #8]
 23fca1c:	bd09      	pop	{r0, r3, pc}
 23fca1e:	0000      	.short	0x0000
 23fca20:	1007a9b0 	.word	0x1007a9b0
 23fca24:	00000024 	.word	0x00000024

023fca28 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fca28:	b509      	push	{r0, r3, lr}
 23fca2a:	4804      	ldr	r0, [pc, #16]	; (23fca3c <HAL_USB_USART_Init+0x14>)
 23fca2c:	6800      	ldr	r0, [r0, #0]
 23fca2e:	4b04      	ldr	r3, [pc, #16]	; (23fca40 <HAL_USB_USART_Init+0x18>)
 23fca30:	4403      	add	r3, r0
 23fca32:	681b      	ldr	r3, [r3, #0]
 23fca34:	681b      	ldr	r3, [r3, #0]
 23fca36:	9302      	str	r3, [sp, #8]
 23fca38:	bd09      	pop	{r0, r3, pc}
 23fca3a:	0000      	.short	0x0000
 23fca3c:	1007a9b0 	.word	0x1007a9b0
 23fca40:	00000034 	.word	0x00000034

023fca44 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fca44:	b509      	push	{r0, r3, lr}
 23fca46:	4804      	ldr	r0, [pc, #16]	; (23fca58 <HAL_USB_USART_Begin+0x14>)
 23fca48:	6800      	ldr	r0, [r0, #0]
 23fca4a:	4b04      	ldr	r3, [pc, #16]	; (23fca5c <HAL_USB_USART_Begin+0x18>)
 23fca4c:	4403      	add	r3, r0
 23fca4e:	681b      	ldr	r3, [r3, #0]
 23fca50:	685b      	ldr	r3, [r3, #4]
 23fca52:	9302      	str	r3, [sp, #8]
 23fca54:	bd09      	pop	{r0, r3, pc}
 23fca56:	0000      	.short	0x0000
 23fca58:	1007a9b0 	.word	0x1007a9b0
 23fca5c:	00000034 	.word	0x00000034

023fca60 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fca60:	b509      	push	{r0, r3, lr}
 23fca62:	4804      	ldr	r0, [pc, #16]	; (23fca74 <HAL_USB_USART_End+0x14>)
 23fca64:	6800      	ldr	r0, [r0, #0]
 23fca66:	4b04      	ldr	r3, [pc, #16]	; (23fca78 <HAL_USB_USART_End+0x18>)
 23fca68:	4403      	add	r3, r0
 23fca6a:	681b      	ldr	r3, [r3, #0]
 23fca6c:	689b      	ldr	r3, [r3, #8]
 23fca6e:	9302      	str	r3, [sp, #8]
 23fca70:	bd09      	pop	{r0, r3, pc}
 23fca72:	0000      	.short	0x0000
 23fca74:	1007a9b0 	.word	0x1007a9b0
 23fca78:	00000034 	.word	0x00000034

023fca7c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fca7c:	b509      	push	{r0, r3, lr}
 23fca7e:	4804      	ldr	r0, [pc, #16]	; (23fca90 <HAL_USB_USART_Available_Data+0x14>)
 23fca80:	6800      	ldr	r0, [r0, #0]
 23fca82:	4b04      	ldr	r3, [pc, #16]	; (23fca94 <HAL_USB_USART_Available_Data+0x18>)
 23fca84:	4403      	add	r3, r0
 23fca86:	681b      	ldr	r3, [r3, #0]
 23fca88:	691b      	ldr	r3, [r3, #16]
 23fca8a:	9302      	str	r3, [sp, #8]
 23fca8c:	bd09      	pop	{r0, r3, pc}
 23fca8e:	0000      	.short	0x0000
 23fca90:	1007a9b0 	.word	0x1007a9b0
 23fca94:	00000034 	.word	0x00000034

023fca98 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fca98:	b509      	push	{r0, r3, lr}
 23fca9a:	4804      	ldr	r0, [pc, #16]	; (23fcaac <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fca9c:	6800      	ldr	r0, [r0, #0]
 23fca9e:	4b04      	ldr	r3, [pc, #16]	; (23fcab0 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fcaa0:	4403      	add	r3, r0
 23fcaa2:	681b      	ldr	r3, [r3, #0]
 23fcaa4:	695b      	ldr	r3, [r3, #20]
 23fcaa6:	9302      	str	r3, [sp, #8]
 23fcaa8:	bd09      	pop	{r0, r3, pc}
 23fcaaa:	0000      	.short	0x0000
 23fcaac:	1007a9b0 	.word	0x1007a9b0
 23fcab0:	00000034 	.word	0x00000034

023fcab4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fcab4:	b509      	push	{r0, r3, lr}
 23fcab6:	4804      	ldr	r0, [pc, #16]	; (23fcac8 <HAL_USB_USART_Receive_Data+0x14>)
 23fcab8:	6800      	ldr	r0, [r0, #0]
 23fcaba:	4b04      	ldr	r3, [pc, #16]	; (23fcacc <HAL_USB_USART_Receive_Data+0x18>)
 23fcabc:	4403      	add	r3, r0
 23fcabe:	681b      	ldr	r3, [r3, #0]
 23fcac0:	699b      	ldr	r3, [r3, #24]
 23fcac2:	9302      	str	r3, [sp, #8]
 23fcac4:	bd09      	pop	{r0, r3, pc}
 23fcac6:	0000      	.short	0x0000
 23fcac8:	1007a9b0 	.word	0x1007a9b0
 23fcacc:	00000034 	.word	0x00000034

023fcad0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fcad0:	b509      	push	{r0, r3, lr}
 23fcad2:	4804      	ldr	r0, [pc, #16]	; (23fcae4 <HAL_USB_USART_Send_Data+0x14>)
 23fcad4:	6800      	ldr	r0, [r0, #0]
 23fcad6:	4b04      	ldr	r3, [pc, #16]	; (23fcae8 <HAL_USB_USART_Send_Data+0x18>)
 23fcad8:	4403      	add	r3, r0
 23fcada:	681b      	ldr	r3, [r3, #0]
 23fcadc:	69db      	ldr	r3, [r3, #28]
 23fcade:	9302      	str	r3, [sp, #8]
 23fcae0:	bd09      	pop	{r0, r3, pc}
 23fcae2:	0000      	.short	0x0000
 23fcae4:	1007a9b0 	.word	0x1007a9b0
 23fcae8:	00000034 	.word	0x00000034

023fcaec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fcaec:	b509      	push	{r0, r3, lr}
 23fcaee:	4804      	ldr	r0, [pc, #16]	; (23fcb00 <HAL_USB_USART_Flush_Data+0x14>)
 23fcaf0:	6800      	ldr	r0, [r0, #0]
 23fcaf2:	4b04      	ldr	r3, [pc, #16]	; (23fcb04 <HAL_USB_USART_Flush_Data+0x18>)
 23fcaf4:	4403      	add	r3, r0
 23fcaf6:	681b      	ldr	r3, [r3, #0]
 23fcaf8:	6a1b      	ldr	r3, [r3, #32]
 23fcafa:	9302      	str	r3, [sp, #8]
 23fcafc:	bd09      	pop	{r0, r3, pc}
 23fcafe:	0000      	.short	0x0000
 23fcb00:	1007a9b0 	.word	0x1007a9b0
 23fcb04:	00000034 	.word	0x00000034

023fcb08 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fcb08:	b509      	push	{r0, r3, lr}
 23fcb0a:	4804      	ldr	r0, [pc, #16]	; (23fcb1c <panic_+0x14>)
 23fcb0c:	6800      	ldr	r0, [r0, #0]
 23fcb0e:	4b04      	ldr	r3, [pc, #16]	; (23fcb20 <panic_+0x18>)
 23fcb10:	4403      	add	r3, r0
 23fcb12:	681b      	ldr	r3, [r3, #0]
 23fcb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcb16:	9302      	str	r3, [sp, #8]
 23fcb18:	bd09      	pop	{r0, r3, pc}
 23fcb1a:	0000      	.short	0x0000
 23fcb1c:	1007a9b0 	.word	0x1007a9b0
 23fcb20:	00000048 	.word	0x00000048

023fcb24 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fcb24:	b509      	push	{r0, r3, lr}
 23fcb26:	4804      	ldr	r0, [pc, #16]	; (23fcb38 <log_message_v+0x14>)
 23fcb28:	6800      	ldr	r0, [r0, #0]
 23fcb2a:	4b04      	ldr	r3, [pc, #16]	; (23fcb3c <log_message_v+0x18>)
 23fcb2c:	4403      	add	r3, r0
 23fcb2e:	681b      	ldr	r3, [r3, #0]
 23fcb30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcb32:	9302      	str	r3, [sp, #8]
 23fcb34:	bd09      	pop	{r0, r3, pc}
 23fcb36:	0000      	.short	0x0000
 23fcb38:	1007a9b0 	.word	0x1007a9b0
 23fcb3c:	00000048 	.word	0x00000048

023fcb40 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fcb40:	b509      	push	{r0, r3, lr}
 23fcb42:	4804      	ldr	r0, [pc, #16]	; (23fcb54 <log_level_name+0x14>)
 23fcb44:	6800      	ldr	r0, [r0, #0]
 23fcb46:	4b04      	ldr	r3, [pc, #16]	; (23fcb58 <log_level_name+0x18>)
 23fcb48:	4403      	add	r3, r0
 23fcb4a:	681b      	ldr	r3, [r3, #0]
 23fcb4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fcb4e:	9302      	str	r3, [sp, #8]
 23fcb50:	bd09      	pop	{r0, r3, pc}
 23fcb52:	0000      	.short	0x0000
 23fcb54:	1007a9b0 	.word	0x1007a9b0
 23fcb58:	00000048 	.word	0x00000048

023fcb5c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fcb5c:	b509      	push	{r0, r3, lr}
 23fcb5e:	4804      	ldr	r0, [pc, #16]	; (23fcb70 <log_set_callbacks+0x14>)
 23fcb60:	6800      	ldr	r0, [r0, #0]
 23fcb62:	4b04      	ldr	r3, [pc, #16]	; (23fcb74 <log_set_callbacks+0x18>)
 23fcb64:	4403      	add	r3, r0
 23fcb66:	681b      	ldr	r3, [r3, #0]
 23fcb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fcb6a:	9302      	str	r3, [sp, #8]
 23fcb6c:	bd09      	pop	{r0, r3, pc}
 23fcb6e:	0000      	.short	0x0000
 23fcb70:	1007a9b0 	.word	0x1007a9b0
 23fcb74:	00000048 	.word	0x00000048

023fcb78 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fcb78:	b509      	push	{r0, r3, lr}
 23fcb7a:	4804      	ldr	r0, [pc, #16]	; (23fcb8c <set_system_mode+0x14>)
 23fcb7c:	6800      	ldr	r0, [r0, #0]
 23fcb7e:	4b04      	ldr	r3, [pc, #16]	; (23fcb90 <set_system_mode+0x18>)
 23fcb80:	4403      	add	r3, r0
 23fcb82:	681b      	ldr	r3, [r3, #0]
 23fcb84:	685b      	ldr	r3, [r3, #4]
 23fcb86:	9302      	str	r3, [sp, #8]
 23fcb88:	bd09      	pop	{r0, r3, pc}
 23fcb8a:	0000      	.short	0x0000
 23fcb8c:	1007a9b0 	.word	0x1007a9b0
 23fcb90:	00000008 	.word	0x00000008

023fcb94 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fcb94:	b509      	push	{r0, r3, lr}
 23fcb96:	4804      	ldr	r0, [pc, #16]	; (23fcba8 <system_delay_ms+0x14>)
 23fcb98:	6800      	ldr	r0, [r0, #0]
 23fcb9a:	4b04      	ldr	r3, [pc, #16]	; (23fcbac <system_delay_ms+0x18>)
 23fcb9c:	4403      	add	r3, r0
 23fcb9e:	681b      	ldr	r3, [r3, #0]
 23fcba0:	695b      	ldr	r3, [r3, #20]
 23fcba2:	9302      	str	r3, [sp, #8]
 23fcba4:	bd09      	pop	{r0, r3, pc}
 23fcba6:	0000      	.short	0x0000
 23fcba8:	1007a9b0 	.word	0x1007a9b0
 23fcbac:	00000008 	.word	0x00000008

023fcbb0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fcbb0:	b509      	push	{r0, r3, lr}
 23fcbb2:	4804      	ldr	r0, [pc, #16]	; (23fcbc4 <system_thread_set_state+0x14>)
 23fcbb4:	6800      	ldr	r0, [r0, #0]
 23fcbb6:	4b04      	ldr	r3, [pc, #16]	; (23fcbc8 <system_thread_set_state+0x18>)
 23fcbb8:	4403      	add	r3, r0
 23fcbba:	681b      	ldr	r3, [r3, #0]
 23fcbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcbbe:	9302      	str	r3, [sp, #8]
 23fcbc0:	bd09      	pop	{r0, r3, pc}
 23fcbc2:	0000      	.short	0x0000
 23fcbc4:	1007a9b0 	.word	0x1007a9b0
 23fcbc8:	00000008 	.word	0x00000008

023fcbcc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fcbcc:	b509      	push	{r0, r3, lr}
 23fcbce:	4804      	ldr	r0, [pc, #16]	; (23fcbe0 <system_ctrl_set_app_request_handler+0x14>)
 23fcbd0:	6800      	ldr	r0, [r0, #0]
 23fcbd2:	4b04      	ldr	r3, [pc, #16]	; (23fcbe4 <system_ctrl_set_app_request_handler+0x18>)
 23fcbd4:	4403      	add	r3, r0
 23fcbd6:	681b      	ldr	r3, [r3, #0]
 23fcbd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fcbdc:	9302      	str	r3, [sp, #8]
 23fcbde:	bd09      	pop	{r0, r3, pc}
 23fcbe0:	1007a9b0 	.word	0x1007a9b0
 23fcbe4:	00000008 	.word	0x00000008

023fcbe8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fcbe8:	b509      	push	{r0, r3, lr}
 23fcbea:	4804      	ldr	r0, [pc, #16]	; (23fcbfc <system_ctrl_set_result+0x14>)
 23fcbec:	6800      	ldr	r0, [r0, #0]
 23fcbee:	4b04      	ldr	r3, [pc, #16]	; (23fcc00 <system_ctrl_set_result+0x18>)
 23fcbf0:	4403      	add	r3, r0
 23fcbf2:	681b      	ldr	r3, [r3, #0]
 23fcbf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fcbf8:	9302      	str	r3, [sp, #8]
 23fcbfa:	bd09      	pop	{r0, r3, pc}
 23fcbfc:	1007a9b0 	.word	0x1007a9b0
 23fcc00:	00000008 	.word	0x00000008

023fcc04 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fcc04:	b509      	push	{r0, r3, lr}
 23fcc06:	4804      	ldr	r0, [pc, #16]	; (23fcc18 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fcc08:	6800      	ldr	r0, [r0, #0]
 23fcc0a:	4b04      	ldr	r3, [pc, #16]	; (23fcc1c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fcc0c:	4403      	add	r3, r0
 23fcc0e:	681b      	ldr	r3, [r3, #0]
 23fcc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcc12:	9302      	str	r3, [sp, #8]
 23fcc14:	bd09      	pop	{r0, r3, pc}
 23fcc16:	0000      	.short	0x0000
 23fcc18:	1007a9b0 	.word	0x1007a9b0
 23fcc1c:	0000002c 	.word	0x0000002c

023fcc20 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcc20:	b509      	push	{r0, r3, lr}
 23fcc22:	4804      	ldr	r0, [pc, #16]	; (23fcc34 <network_connect+0x14>)
 23fcc24:	6800      	ldr	r0, [r0, #0]
 23fcc26:	4b04      	ldr	r3, [pc, #16]	; (23fcc38 <network_connect+0x18>)
 23fcc28:	4403      	add	r3, r0
 23fcc2a:	681b      	ldr	r3, [r3, #0]
 23fcc2c:	685b      	ldr	r3, [r3, #4]
 23fcc2e:	9302      	str	r3, [sp, #8]
 23fcc30:	bd09      	pop	{r0, r3, pc}
 23fcc32:	0000      	.short	0x0000
 23fcc34:	1007a9b0 	.word	0x1007a9b0
 23fcc38:	00000028 	.word	0x00000028

023fcc3c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fcc3c:	b509      	push	{r0, r3, lr}
 23fcc3e:	4804      	ldr	r0, [pc, #16]	; (23fcc50 <network_connecting+0x14>)
 23fcc40:	6800      	ldr	r0, [r0, #0]
 23fcc42:	4b04      	ldr	r3, [pc, #16]	; (23fcc54 <network_connecting+0x18>)
 23fcc44:	4403      	add	r3, r0
 23fcc46:	681b      	ldr	r3, [r3, #0]
 23fcc48:	689b      	ldr	r3, [r3, #8]
 23fcc4a:	9302      	str	r3, [sp, #8]
 23fcc4c:	bd09      	pop	{r0, r3, pc}
 23fcc4e:	0000      	.short	0x0000
 23fcc50:	1007a9b0 	.word	0x1007a9b0
 23fcc54:	00000028 	.word	0x00000028

023fcc58 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fcc58:	b509      	push	{r0, r3, lr}
 23fcc5a:	4804      	ldr	r0, [pc, #16]	; (23fcc6c <network_disconnect+0x14>)
 23fcc5c:	6800      	ldr	r0, [r0, #0]
 23fcc5e:	4b04      	ldr	r3, [pc, #16]	; (23fcc70 <network_disconnect+0x18>)
 23fcc60:	4403      	add	r3, r0
 23fcc62:	681b      	ldr	r3, [r3, #0]
 23fcc64:	68db      	ldr	r3, [r3, #12]
 23fcc66:	9302      	str	r3, [sp, #8]
 23fcc68:	bd09      	pop	{r0, r3, pc}
 23fcc6a:	0000      	.short	0x0000
 23fcc6c:	1007a9b0 	.word	0x1007a9b0
 23fcc70:	00000028 	.word	0x00000028

023fcc74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fcc74:	b509      	push	{r0, r3, lr}
 23fcc76:	4804      	ldr	r0, [pc, #16]	; (23fcc88 <network_ready+0x14>)
 23fcc78:	6800      	ldr	r0, [r0, #0]
 23fcc7a:	4b04      	ldr	r3, [pc, #16]	; (23fcc8c <network_ready+0x18>)
 23fcc7c:	4403      	add	r3, r0
 23fcc7e:	681b      	ldr	r3, [r3, #0]
 23fcc80:	691b      	ldr	r3, [r3, #16]
 23fcc82:	9302      	str	r3, [sp, #8]
 23fcc84:	bd09      	pop	{r0, r3, pc}
 23fcc86:	0000      	.short	0x0000
 23fcc88:	1007a9b0 	.word	0x1007a9b0
 23fcc8c:	00000028 	.word	0x00000028

023fcc90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcc90:	b509      	push	{r0, r3, lr}
 23fcc92:	4804      	ldr	r0, [pc, #16]	; (23fcca4 <network_on+0x14>)
 23fcc94:	6800      	ldr	r0, [r0, #0]
 23fcc96:	4b04      	ldr	r3, [pc, #16]	; (23fcca8 <network_on+0x18>)
 23fcc98:	4403      	add	r3, r0
 23fcc9a:	681b      	ldr	r3, [r3, #0]
 23fcc9c:	695b      	ldr	r3, [r3, #20]
 23fcc9e:	9302      	str	r3, [sp, #8]
 23fcca0:	bd09      	pop	{r0, r3, pc}
 23fcca2:	0000      	.short	0x0000
 23fcca4:	1007a9b0 	.word	0x1007a9b0
 23fcca8:	00000028 	.word	0x00000028

023fccac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fccac:	b509      	push	{r0, r3, lr}
 23fccae:	4804      	ldr	r0, [pc, #16]	; (23fccc0 <network_off+0x14>)
 23fccb0:	6800      	ldr	r0, [r0, #0]
 23fccb2:	4b04      	ldr	r3, [pc, #16]	; (23fccc4 <network_off+0x18>)
 23fccb4:	4403      	add	r3, r0
 23fccb6:	681b      	ldr	r3, [r3, #0]
 23fccb8:	699b      	ldr	r3, [r3, #24]
 23fccba:	9302      	str	r3, [sp, #8]
 23fccbc:	bd09      	pop	{r0, r3, pc}
 23fccbe:	0000      	.short	0x0000
 23fccc0:	1007a9b0 	.word	0x1007a9b0
 23fccc4:	00000028 	.word	0x00000028

023fccc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fccc8:	b509      	push	{r0, r3, lr}
 23fccca:	4804      	ldr	r0, [pc, #16]	; (23fccdc <network_listen+0x14>)
 23fcccc:	6800      	ldr	r0, [r0, #0]
 23fccce:	4b04      	ldr	r3, [pc, #16]	; (23fcce0 <network_listen+0x18>)
 23fccd0:	4403      	add	r3, r0
 23fccd2:	681b      	ldr	r3, [r3, #0]
 23fccd4:	69db      	ldr	r3, [r3, #28]
 23fccd6:	9302      	str	r3, [sp, #8]
 23fccd8:	bd09      	pop	{r0, r3, pc}
 23fccda:	0000      	.short	0x0000
 23fccdc:	1007a9b0 	.word	0x1007a9b0
 23fcce0:	00000028 	.word	0x00000028

023fcce4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fcce4:	b509      	push	{r0, r3, lr}
 23fcce6:	4804      	ldr	r0, [pc, #16]	; (23fccf8 <network_listening+0x14>)
 23fcce8:	6800      	ldr	r0, [r0, #0]
 23fccea:	4b04      	ldr	r3, [pc, #16]	; (23fccfc <network_listening+0x18>)
 23fccec:	4403      	add	r3, r0
 23fccee:	681b      	ldr	r3, [r3, #0]
 23fccf0:	6a1b      	ldr	r3, [r3, #32]
 23fccf2:	9302      	str	r3, [sp, #8]
 23fccf4:	bd09      	pop	{r0, r3, pc}
 23fccf6:	0000      	.short	0x0000
 23fccf8:	1007a9b0 	.word	0x1007a9b0
 23fccfc:	00000028 	.word	0x00000028

023fcd00 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fcd00:	b509      	push	{r0, r3, lr}
 23fcd02:	4804      	ldr	r0, [pc, #16]	; (23fcd14 <network_set_listen_timeout+0x14>)
 23fcd04:	6800      	ldr	r0, [r0, #0]
 23fcd06:	4b04      	ldr	r3, [pc, #16]	; (23fcd18 <network_set_listen_timeout+0x18>)
 23fcd08:	4403      	add	r3, r0
 23fcd0a:	681b      	ldr	r3, [r3, #0]
 23fcd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcd0e:	9302      	str	r3, [sp, #8]
 23fcd10:	bd09      	pop	{r0, r3, pc}
 23fcd12:	0000      	.short	0x0000
 23fcd14:	1007a9b0 	.word	0x1007a9b0
 23fcd18:	00000028 	.word	0x00000028

023fcd1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fcd1c:	b509      	push	{r0, r3, lr}
 23fcd1e:	4804      	ldr	r0, [pc, #16]	; (23fcd30 <network_get_listen_timeout+0x14>)
 23fcd20:	6800      	ldr	r0, [r0, #0]
 23fcd22:	4b04      	ldr	r3, [pc, #16]	; (23fcd34 <network_get_listen_timeout+0x18>)
 23fcd24:	4403      	add	r3, r0
 23fcd26:	681b      	ldr	r3, [r3, #0]
 23fcd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcd2a:	9302      	str	r3, [sp, #8]
 23fcd2c:	bd09      	pop	{r0, r3, pc}
 23fcd2e:	0000      	.short	0x0000
 23fcd30:	1007a9b0 	.word	0x1007a9b0
 23fcd34:	00000028 	.word	0x00000028

023fcd38 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fcd38:	b509      	push	{r0, r3, lr}
 23fcd3a:	4804      	ldr	r0, [pc, #16]	; (23fcd4c <network_is_on+0x14>)
 23fcd3c:	6800      	ldr	r0, [r0, #0]
 23fcd3e:	4b04      	ldr	r3, [pc, #16]	; (23fcd50 <network_is_on+0x18>)
 23fcd40:	4403      	add	r3, r0
 23fcd42:	681b      	ldr	r3, [r3, #0]
 23fcd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcd46:	9302      	str	r3, [sp, #8]
 23fcd48:	bd09      	pop	{r0, r3, pc}
 23fcd4a:	0000      	.short	0x0000
 23fcd4c:	1007a9b0 	.word	0x1007a9b0
 23fcd50:	00000028 	.word	0x00000028

023fcd54 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fcd54:	b509      	push	{r0, r3, lr}
 23fcd56:	4804      	ldr	r0, [pc, #16]	; (23fcd68 <network_is_off+0x14>)
 23fcd58:	6800      	ldr	r0, [r0, #0]
 23fcd5a:	4b04      	ldr	r3, [pc, #16]	; (23fcd6c <network_is_off+0x18>)
 23fcd5c:	4403      	add	r3, r0
 23fcd5e:	681b      	ldr	r3, [r3, #0]
 23fcd60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcd62:	9302      	str	r3, [sp, #8]
 23fcd64:	bd09      	pop	{r0, r3, pc}
 23fcd66:	0000      	.short	0x0000
 23fcd68:	1007a9b0 	.word	0x1007a9b0
 23fcd6c:	00000028 	.word	0x00000028

023fcd70 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fcd70:	b509      	push	{r0, r3, lr}
 23fcd72:	4804      	ldr	r0, [pc, #16]	; (23fcd84 <malloc+0x14>)
 23fcd74:	6800      	ldr	r0, [r0, #0]
 23fcd76:	4b04      	ldr	r3, [pc, #16]	; (23fcd88 <malloc+0x18>)
 23fcd78:	4403      	add	r3, r0
 23fcd7a:	681b      	ldr	r3, [r3, #0]
 23fcd7c:	681b      	ldr	r3, [r3, #0]
 23fcd7e:	9302      	str	r3, [sp, #8]
 23fcd80:	bd09      	pop	{r0, r3, pc}
 23fcd82:	0000      	.short	0x0000
 23fcd84:	1007a9b0 	.word	0x1007a9b0
 23fcd88:	00000004 	.word	0x00000004

023fcd8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fcd8c:	b509      	push	{r0, r3, lr}
 23fcd8e:	4804      	ldr	r0, [pc, #16]	; (23fcda0 <free+0x14>)
 23fcd90:	6800      	ldr	r0, [r0, #0]
 23fcd92:	4b04      	ldr	r3, [pc, #16]	; (23fcda4 <free+0x18>)
 23fcd94:	4403      	add	r3, r0
 23fcd96:	681b      	ldr	r3, [r3, #0]
 23fcd98:	685b      	ldr	r3, [r3, #4]
 23fcd9a:	9302      	str	r3, [sp, #8]
 23fcd9c:	bd09      	pop	{r0, r3, pc}
 23fcd9e:	0000      	.short	0x0000
 23fcda0:	1007a9b0 	.word	0x1007a9b0
 23fcda4:	00000004 	.word	0x00000004

023fcda8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fcda8:	b509      	push	{r0, r3, lr}
 23fcdaa:	4804      	ldr	r0, [pc, #16]	; (23fcdbc <realloc+0x14>)
 23fcdac:	6800      	ldr	r0, [r0, #0]
 23fcdae:	4b04      	ldr	r3, [pc, #16]	; (23fcdc0 <realloc+0x18>)
 23fcdb0:	4403      	add	r3, r0
 23fcdb2:	681b      	ldr	r3, [r3, #0]
 23fcdb4:	689b      	ldr	r3, [r3, #8]
 23fcdb6:	9302      	str	r3, [sp, #8]
 23fcdb8:	bd09      	pop	{r0, r3, pc}
 23fcdba:	0000      	.short	0x0000
 23fcdbc:	1007a9b0 	.word	0x1007a9b0
 23fcdc0:	00000004 	.word	0x00000004

023fcdc4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fcdc4:	b509      	push	{r0, r3, lr}
 23fcdc6:	4804      	ldr	r0, [pc, #16]	; (23fcdd8 <vsnprintf+0x14>)
 23fcdc8:	6800      	ldr	r0, [r0, #0]
 23fcdca:	4b04      	ldr	r3, [pc, #16]	; (23fcddc <vsnprintf+0x18>)
 23fcdcc:	4403      	add	r3, r0
 23fcdce:	681b      	ldr	r3, [r3, #0]
 23fcdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcdd2:	9302      	str	r3, [sp, #8]
 23fcdd4:	bd09      	pop	{r0, r3, pc}
 23fcdd6:	0000      	.short	0x0000
 23fcdd8:	1007a9b0 	.word	0x1007a9b0
 23fcddc:	00000004 	.word	0x00000004

023fcde0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fcde0:	b509      	push	{r0, r3, lr}
 23fcde2:	4804      	ldr	r0, [pc, #16]	; (23fcdf4 <__errno+0x14>)
 23fcde4:	6800      	ldr	r0, [r0, #0]
 23fcde6:	4b04      	ldr	r3, [pc, #16]	; (23fcdf8 <__errno+0x18>)
 23fcde8:	4403      	add	r3, r0
 23fcdea:	681b      	ldr	r3, [r3, #0]
 23fcdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcdee:	9302      	str	r3, [sp, #8]
 23fcdf0:	bd09      	pop	{r0, r3, pc}
 23fcdf2:	0000      	.short	0x0000
 23fcdf4:	1007a9b0 	.word	0x1007a9b0
 23fcdf8:	00000004 	.word	0x00000004

023fcdfc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fcdfc:	b509      	push	{r0, r3, lr}
 23fcdfe:	4804      	ldr	r0, [pc, #16]	; (23fce10 <__assert_func+0x14>)
 23fce00:	6800      	ldr	r0, [r0, #0]
 23fce02:	4b04      	ldr	r3, [pc, #16]	; (23fce14 <__assert_func+0x18>)
 23fce04:	4403      	add	r3, r0
 23fce06:	681b      	ldr	r3, [r3, #0]
 23fce08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fce0a:	9302      	str	r3, [sp, #8]
 23fce0c:	bd09      	pop	{r0, r3, pc}
 23fce0e:	0000      	.short	0x0000
 23fce10:	1007a9b0 	.word	0x1007a9b0
 23fce14:	00000004 	.word	0x00000004

023fce18 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fce18:	b509      	push	{r0, r3, lr}
 23fce1a:	4804      	ldr	r0, [pc, #16]	; (23fce2c <newlib_impure_ptr_callback+0x14>)
 23fce1c:	6800      	ldr	r0, [r0, #0]
 23fce1e:	4b04      	ldr	r3, [pc, #16]	; (23fce30 <newlib_impure_ptr_callback+0x18>)
 23fce20:	4403      	add	r3, r0
 23fce22:	681b      	ldr	r3, [r3, #0]
 23fce24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fce26:	9302      	str	r3, [sp, #8]
 23fce28:	bd09      	pop	{r0, r3, pc}
 23fce2a:	0000      	.short	0x0000
 23fce2c:	1007a9b0 	.word	0x1007a9b0
 23fce30:	00000004 	.word	0x00000004

023fce34 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fce34:	2100      	movs	r1, #0
 23fce36:	f7ff bead 	b.w	23fcb94 <system_delay_ms>

023fce3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fce3a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fce3c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fce3e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fce40:	b17c      	cbz	r4, 23fce62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fce42:	6863      	ldr	r3, [r4, #4]
 23fce44:	3b01      	subs	r3, #1
 23fce46:	6063      	str	r3, [r4, #4]
 23fce48:	b95b      	cbnz	r3, 23fce62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fce4a:	6823      	ldr	r3, [r4, #0]
 23fce4c:	4620      	mov	r0, r4
 23fce4e:	689b      	ldr	r3, [r3, #8]
 23fce50:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fce52:	68a3      	ldr	r3, [r4, #8]
 23fce54:	3b01      	subs	r3, #1
 23fce56:	60a3      	str	r3, [r4, #8]
 23fce58:	b91b      	cbnz	r3, 23fce62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fce5a:	6823      	ldr	r3, [r4, #0]
 23fce5c:	4620      	mov	r0, r4
 23fce5e:	68db      	ldr	r3, [r3, #12]
 23fce60:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fce62:	4628      	mov	r0, r5
 23fce64:	bd38      	pop	{r3, r4, r5, pc}

023fce66 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fce66:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fce68:	6843      	ldr	r3, [r0, #4]
    {
 23fce6a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fce6c:	3b01      	subs	r3, #1
 23fce6e:	6043      	str	r3, [r0, #4]
 23fce70:	b963      	cbnz	r3, 23fce8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fce72:	6803      	ldr	r3, [r0, #0]
 23fce74:	689b      	ldr	r3, [r3, #8]
 23fce76:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fce78:	68a3      	ldr	r3, [r4, #8]
 23fce7a:	3b01      	subs	r3, #1
 23fce7c:	60a3      	str	r3, [r4, #8]
 23fce7e:	b92b      	cbnz	r3, 23fce8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fce80:	6823      	ldr	r3, [r4, #0]
 23fce82:	4620      	mov	r0, r4
    }
 23fce84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fce88:	68db      	ldr	r3, [r3, #12]
 23fce8a:	4718      	bx	r3
    }
 23fce8c:	bd10      	pop	{r4, pc}

023fce8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fce8e:	b570      	push	{r4, r5, r6, lr}
 23fce90:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fce92:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fce96:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fce9a:	42ae      	cmp	r6, r5
 23fce9c:	d004      	beq.n	23fcea8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fce9e:	4628      	mov	r0, r5
 23fcea0:	f001 fc8f 	bl	23fe7c2 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fcea4:	3510      	adds	r5, #16
 23fcea6:	e7f8      	b.n	23fce9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fcea8:	6820      	ldr	r0, [r4, #0]
 23fceaa:	f7ff ff6f 	bl	23fcd8c <free>
    AllocatorT::free(data_);
}
 23fceae:	4620      	mov	r0, r4
 23fceb0:	bd70      	pop	{r4, r5, r6, pc}
	...

023fceb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fceb4:	2300      	movs	r3, #0
 23fceb6:	4802      	ldr	r0, [pc, #8]	; (23fcec0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fceb8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fceba:	f7ff bb31 	b.w	23fc520 <os_mutex_recursive_create>
 23fcebe:	bf00      	nop
 23fcec0:	1007ae5c 	.word	0x1007ae5c

023fcec4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcec4:	2200      	movs	r2, #0
 23fcec6:	6840      	ldr	r0, [r0, #4]
 23fcec8:	4611      	mov	r1, r2
 23fceca:	f7ff bf0b 	b.w	23fcce4 <network_listening>

023fcece <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcece:	2200      	movs	r2, #0
 23fced0:	6840      	ldr	r0, [r0, #4]
 23fced2:	4611      	mov	r1, r2
 23fced4:	f7ff bf22 	b.w	23fcd1c <network_get_listen_timeout>

023fced8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fced8:	2200      	movs	r2, #0
 23fceda:	6840      	ldr	r0, [r0, #4]
 23fcedc:	f7ff bf10 	b.w	23fcd00 <network_set_listen_timeout>

023fcee0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fcee0:	2200      	movs	r2, #0
 23fcee2:	6840      	ldr	r0, [r0, #4]
 23fcee4:	f081 0101 	eor.w	r1, r1, #1
 23fcee8:	f7ff beee 	b.w	23fccc8 <network_listen>

023fceec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fceec:	2300      	movs	r3, #0
 23fceee:	6840      	ldr	r0, [r0, #4]
 23fcef0:	461a      	mov	r2, r3
 23fcef2:	4619      	mov	r1, r3
 23fcef4:	f7ff beda 	b.w	23fccac <network_off>

023fcef8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fcef8:	2300      	movs	r3, #0
 23fcefa:	6840      	ldr	r0, [r0, #4]
 23fcefc:	461a      	mov	r2, r3
 23fcefe:	4619      	mov	r1, r3
 23fcf00:	f7ff bec6 	b.w	23fcc90 <network_on>

023fcf04 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fcf04:	2200      	movs	r2, #0
 23fcf06:	6840      	ldr	r0, [r0, #4]
 23fcf08:	4611      	mov	r1, r2
 23fcf0a:	f7ff beb3 	b.w	23fcc74 <network_ready>

023fcf0e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fcf0e:	2200      	movs	r2, #0
 23fcf10:	6840      	ldr	r0, [r0, #4]
 23fcf12:	4611      	mov	r1, r2
 23fcf14:	f7ff be92 	b.w	23fcc3c <network_connecting>

023fcf18 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fcf18:	2200      	movs	r2, #0
 23fcf1a:	2102      	movs	r1, #2
 23fcf1c:	6840      	ldr	r0, [r0, #4]
 23fcf1e:	f7ff be9b 	b.w	23fcc58 <network_disconnect>

023fcf22 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fcf22:	2300      	movs	r3, #0
 23fcf24:	6840      	ldr	r0, [r0, #4]
 23fcf26:	461a      	mov	r2, r3
 23fcf28:	f7ff be7a 	b.w	23fcc20 <network_connect>

023fcf2c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fcf2c:	2203      	movs	r2, #3
 23fcf2e:	4b02      	ldr	r3, [pc, #8]	; (23fcf38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fcf30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fcf32:	4a02      	ldr	r2, [pc, #8]	; (23fcf3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fcf34:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fcf36:	4770      	bx	lr
 23fcf38:	1007ae60 	.word	0x1007ae60
 23fcf3c:	023ffc00 	.word	0x023ffc00

023fcf40 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fcf40:	4770      	bx	lr

023fcf42 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fcf42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcf44:	4606      	mov	r6, r0
 23fcf46:	4615      	mov	r5, r2
 23fcf48:	460c      	mov	r4, r1
 23fcf4a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fcf4c:	42bc      	cmp	r4, r7
 23fcf4e:	d006      	beq.n	23fcf5e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fcf50:	6833      	ldr	r3, [r6, #0]
 23fcf52:	4630      	mov	r0, r6
 23fcf54:	689b      	ldr	r3, [r3, #8]
 23fcf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fcf5a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fcf5c:	e7f6      	b.n	23fcf4c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fcf5e:	4628      	mov	r0, r5
 23fcf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcf62 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fcf62:	2200      	movs	r2, #0
 23fcf64:	7c00      	ldrb	r0, [r0, #16]
 23fcf66:	f7ff bbc9 	b.w	23fc6fc <hal_i2c_write>

023fcf6a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fcf6a:	2100      	movs	r1, #0
 23fcf6c:	7c00      	ldrb	r0, [r0, #16]
 23fcf6e:	f7ff bbd3 	b.w	23fc718 <hal_i2c_available>

023fcf72 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fcf72:	2100      	movs	r1, #0
 23fcf74:	7c00      	ldrb	r0, [r0, #16]
 23fcf76:	f7ff bbdd 	b.w	23fc734 <hal_i2c_read>

023fcf7a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fcf7a:	2100      	movs	r1, #0
 23fcf7c:	7c00      	ldrb	r0, [r0, #16]
 23fcf7e:	f7ff bbe7 	b.w	23fc750 <hal_i2c_peek>

023fcf82 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fcf82:	2100      	movs	r1, #0
 23fcf84:	7c00      	ldrb	r0, [r0, #16]
 23fcf86:	f7ff bbf1 	b.w	23fc76c <hal_i2c_flush>

023fcf8a <_ZN7TwoWireD0Ev>:
 23fcf8a:	b510      	push	{r4, lr}
 23fcf8c:	4604      	mov	r4, r0
 23fcf8e:	2114      	movs	r1, #20
 23fcf90:	f7fd ffd3 	bl	23faf3a <_ZdlPvj>
 23fcf94:	4620      	mov	r0, r4
 23fcf96:	bd10      	pop	{r4, pc}

023fcf98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fcf98:	b538      	push	{r3, r4, r5, lr}
 23fcf9a:	4604      	mov	r4, r0
 23fcf9c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fcf9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fcfa2:	2200      	movs	r2, #0
 23fcfa4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fcfa8:	4b09      	ldr	r3, [pc, #36]	; (23fcfd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fcfaa:	4608      	mov	r0, r1
  _i2c = i2c;
 23fcfac:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fcfae:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fcfb0:	4629      	mov	r1, r5
 23fcfb2:	f7ff fbf7 	bl	23fc7a4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fcfb6:	30bf      	adds	r0, #191	; 0xbf
 23fcfb8:	d108      	bne.n	23fcfcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fcfba:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fcfbc:	07db      	lsls	r3, r3, #31
 23fcfbe:	d505      	bpl.n	23fcfcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fcfc0:	6868      	ldr	r0, [r5, #4]
 23fcfc2:	f7ff fee3 	bl	23fcd8c <free>
    free(conf.tx_buffer);
 23fcfc6:	68e8      	ldr	r0, [r5, #12]
 23fcfc8:	f7ff fee0 	bl	23fcd8c <free>
}
 23fcfcc:	4620      	mov	r0, r4
 23fcfce:	bd38      	pop	{r3, r4, r5, pc}
 23fcfd0:	023ffc3c 	.word	0x023ffc3c

023fcfd4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fcfd4:	2200      	movs	r2, #0
 23fcfd6:	7c00      	ldrb	r0, [r0, #16]
 23fcfd8:	f7ff bb66 	b.w	23fc6a8 <hal_i2c_set_speed>

023fcfdc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fcfdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fcfde:	2200      	movs	r2, #0
 23fcfe0:	2314      	movs	r3, #20
 23fcfe2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fcfe6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fcfea:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fcfec:	7c00      	ldrb	r0, [r0, #16]
 23fcfee:	f88d 3008 	strb.w	r3, [sp, #8]
 23fcff2:	684b      	ldr	r3, [r1, #4]
 23fcff4:	9303      	str	r3, [sp, #12]
 23fcff6:	68cb      	ldr	r3, [r1, #12]
 23fcff8:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fcffa:	7a0b      	ldrb	r3, [r1, #8]
 23fcffc:	a901      	add	r1, sp, #4
 23fcffe:	9305      	str	r3, [sp, #20]
 23fd000:	f7ff fbde 	bl	23fc7c0 <hal_i2c_request_ex>
}
 23fd004:	b007      	add	sp, #28
 23fd006:	f85d fb04 	ldr.w	pc, [sp], #4

023fd00a <_ZN7TwoWire11requestFromEhjh>:
{
 23fd00a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fd00c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fd00e:	f88d 1000 	strb.w	r1, [sp]
 23fd012:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fd016:	bf18      	it	ne
 23fd018:	2301      	movne	r3, #1
 23fd01a:	9103      	str	r1, [sp, #12]
 23fd01c:	4669      	mov	r1, sp
    size_ = size;
 23fd01e:	9201      	str	r2, [sp, #4]
 23fd020:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd024:	f7ff ffda 	bl	23fcfdc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fd028:	b005      	add	sp, #20
 23fd02a:	f85d fb04 	ldr.w	pc, [sp], #4

023fd02e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fd02e:	2301      	movs	r3, #1
 23fd030:	f7ff bfeb 	b.w	23fd00a <_ZN7TwoWire11requestFromEhjh>

023fd034 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fd034:	2200      	movs	r2, #0
 23fd036:	7c00      	ldrb	r0, [r0, #16]
 23fd038:	f7ff bb44 	b.w	23fc6c4 <hal_i2c_begin_transmission>

023fd03c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23fd03c:	b2c9      	uxtb	r1, r1
 23fd03e:	f7ff bff9 	b.w	23fd034 <_ZN7TwoWire17beginTransmissionEh>

023fd042 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fd042:	2200      	movs	r2, #0
 23fd044:	7c00      	ldrb	r0, [r0, #16]
 23fd046:	f7ff bb4b 	b.w	23fc6e0 <hal_i2c_end_transmission>

023fd04a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fd04a:	2101      	movs	r1, #1
 23fd04c:	f7ff bff9 	b.w	23fd042 <_ZN7TwoWire15endTransmissionEh>

023fd050 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd050:	4770      	bx	lr

023fd052 <_ZN9IPAddressD0Ev>:
 23fd052:	b510      	push	{r4, lr}
 23fd054:	4604      	mov	r4, r0
 23fd056:	2118      	movs	r1, #24
 23fd058:	f7fd ff6f 	bl	23faf3a <_ZdlPvj>
 23fd05c:	4620      	mov	r0, r4
 23fd05e:	bd10      	pop	{r4, pc}

023fd060 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd060:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd062:	7d03      	ldrb	r3, [r0, #20]
{
 23fd064:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd066:	2b06      	cmp	r3, #6
 23fd068:	f04f 0400 	mov.w	r4, #0
{
 23fd06c:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd06e:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd072:	d012      	beq.n	23fd09a <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd074:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd078:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd07c:	220a      	movs	r2, #10
 23fd07e:	4630      	mov	r0, r6
 23fd080:	f001 facf 	bl	23fe622 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd084:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd086:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd088:	d019      	beq.n	23fd0be <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd08a:	2c00      	cmp	r4, #0
 23fd08c:	d0f4      	beq.n	23fd078 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd08e:	212e      	movs	r1, #46	; 0x2e
 23fd090:	4630      	mov	r0, r6
 23fd092:	f001 fac3 	bl	23fe61c <_ZN5Print5printEc>
 23fd096:	4404      	add	r4, r0
 23fd098:	e7ee      	b.n	23fd078 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd09a:	232f      	movs	r3, #47	; 0x2f
 23fd09c:	466a      	mov	r2, sp
 23fd09e:	4639      	mov	r1, r7
 23fd0a0:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd0a2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd0a6:	f7ff fb99 	bl	23fc7dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd0aa:	4668      	mov	r0, sp
 23fd0ac:	f7fd ff1c 	bl	23faee8 <strlen>
 23fd0b0:	6833      	ldr	r3, [r6, #0]
 23fd0b2:	4602      	mov	r2, r0
 23fd0b4:	4669      	mov	r1, sp
 23fd0b6:	4630      	mov	r0, r6
 23fd0b8:	68db      	ldr	r3, [r3, #12]
 23fd0ba:	4798      	blx	r3
 23fd0bc:	4604      	mov	r4, r0
    }
    return n;
}
 23fd0be:	4620      	mov	r0, r4
 23fd0c0:	b00d      	add	sp, #52	; 0x34
 23fd0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd0c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd0c4:	b510      	push	{r4, lr}
 23fd0c6:	4604      	mov	r4, r0
 23fd0c8:	4b04      	ldr	r3, [pc, #16]	; (23fd0dc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd0ca:	2211      	movs	r2, #17
 23fd0cc:	2100      	movs	r1, #0
 23fd0ce:	f840 3b04 	str.w	r3, [r0], #4
 23fd0d2:	f001 fff2 	bl	23ff0ba <memset>
}
 23fd0d6:	4620      	mov	r0, r4
 23fd0d8:	bd10      	pop	{r4, pc}
 23fd0da:	bf00      	nop
 23fd0dc:	023ffc64 	.word	0x023ffc64

023fd0e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd0e0:	4603      	mov	r3, r0
 23fd0e2:	4a07      	ldr	r2, [pc, #28]	; (23fd100 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd0e4:	b510      	push	{r4, lr}
 23fd0e6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd0ea:	f101 0210 	add.w	r2, r1, #16
 23fd0ee:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd0f2:	4291      	cmp	r1, r2
 23fd0f4:	f843 4b04 	str.w	r4, [r3], #4
 23fd0f8:	d1f9      	bne.n	23fd0ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd0fa:	780a      	ldrb	r2, [r1, #0]
 23fd0fc:	701a      	strb	r2, [r3, #0]
}
 23fd0fe:	bd10      	pop	{r4, pc}
 23fd100:	023ffc64 	.word	0x023ffc64

023fd104 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd104:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd106:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd10a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd10e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd112:	2304      	movs	r3, #4
 23fd114:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd118:	6041      	str	r1, [r0, #4]
 23fd11a:	7503      	strb	r3, [r0, #20]
}
 23fd11c:	bd10      	pop	{r4, pc}
	...

023fd120 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd120:	b507      	push	{r0, r1, r2, lr}
 23fd122:	4b06      	ldr	r3, [pc, #24]	; (23fd13c <_ZN9IPAddressC1EPKh+0x1c>)
 23fd124:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd126:	78cb      	ldrb	r3, [r1, #3]
 23fd128:	9300      	str	r3, [sp, #0]
 23fd12a:	788b      	ldrb	r3, [r1, #2]
 23fd12c:	784a      	ldrb	r2, [r1, #1]
 23fd12e:	7809      	ldrb	r1, [r1, #0]
 23fd130:	f7ff ffe8 	bl	23fd104 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd134:	b003      	add	sp, #12
 23fd136:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd13a:	bf00      	nop
 23fd13c:	023ffc64 	.word	0x023ffc64

023fd140 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fd140:	2201      	movs	r2, #1
 23fd142:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fd146:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fd14a:	4618      	mov	r0, r3
 23fd14c:	2901      	cmp	r1, #1
 23fd14e:	d108      	bne.n	23fd162 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fd150:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fd154:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fd158:	3a01      	subs	r2, #1
 23fd15a:	f103 0310 	add.w	r3, r3, #16
 23fd15e:	d1f2      	bne.n	23fd146 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fd160:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fd162:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fd164:	bf04      	itt	eq
 23fd166:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fd16a:	1852      	addeq	r2, r2, r1
 23fd16c:	e7f4      	b.n	23fd158 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fd16e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd16e:	b40e      	push	{r1, r2, r3}
 23fd170:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd172:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd174:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd176:	af00      	add	r7, sp, #0
 23fd178:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fd17c:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd180:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd182:	462b      	mov	r3, r5
 23fd184:	1878      	adds	r0, r7, r1
 23fd186:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd188:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd18a:	f7ff fe1b 	bl	23fcdc4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fd18e:	280f      	cmp	r0, #15
 23fd190:	687a      	ldr	r2, [r7, #4]
 23fd192:	d91a      	bls.n	23fd1ca <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fd194:	f100 0308 	add.w	r3, r0, #8
 23fd198:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fd19c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fd19e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1a2:	1c41      	adds	r1, r0, #1
 23fd1a4:	462b      	mov	r3, r5
 23fd1a6:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd1a8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd1aa:	f7ff fe0b 	bl	23fcdc4 <vsnprintf>
        if (n > 0) {
 23fd1ae:	1e02      	subs	r2, r0, #0
 23fd1b0:	dd04      	ble.n	23fd1bc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fd1b2:	6823      	ldr	r3, [r4, #0]
 23fd1b4:	4669      	mov	r1, sp
 23fd1b6:	4620      	mov	r0, r4
 23fd1b8:	689b      	ldr	r3, [r3, #8]
 23fd1ba:	4798      	blx	r3
 23fd1bc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fd1be:	3720      	adds	r7, #32
 23fd1c0:	46bd      	mov	sp, r7
 23fd1c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd1c6:	b003      	add	sp, #12
 23fd1c8:	4770      	bx	lr
    } else if (n > 0) {
 23fd1ca:	2800      	cmp	r0, #0
 23fd1cc:	d0f7      	beq.n	23fd1be <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fd1ce:	6823      	ldr	r3, [r4, #0]
 23fd1d0:	4602      	mov	r2, r0
 23fd1d2:	689b      	ldr	r3, [r3, #8]
 23fd1d4:	4620      	mov	r0, r4
 23fd1d6:	f107 0110 	add.w	r1, r7, #16
 23fd1da:	4798      	blx	r3
}
 23fd1dc:	e7ef      	b.n	23fd1be <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fd1de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd1de:	b538      	push	{r3, r4, r5, lr}
 23fd1e0:	680b      	ldr	r3, [r1, #0]
 23fd1e2:	4604      	mov	r4, r0
 23fd1e4:	6003      	str	r3, [r0, #0]
 23fd1e6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fd1e8:	6843      	ldr	r3, [r0, #4]
 23fd1ea:	429d      	cmp	r5, r3
 23fd1ec:	d008      	beq.n	23fd200 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fd1ee:	b115      	cbz	r5, 23fd1f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fd1f0:	686b      	ldr	r3, [r5, #4]
 23fd1f2:	3301      	adds	r3, #1
 23fd1f4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fd1f6:	6860      	ldr	r0, [r4, #4]
 23fd1f8:	b108      	cbz	r0, 23fd1fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fd1fa:	f7ff fe34 	bl	23fce66 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fd1fe:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd200:	bd38      	pop	{r3, r4, r5, pc}

023fd202 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fd202:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd204:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fd206:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd20a:	2201      	movs	r2, #1
 23fd20c:	689b      	ldr	r3, [r3, #8]
 23fd20e:	f10d 0107 	add.w	r1, sp, #7
 23fd212:	4798      	blx	r3
}
 23fd214:	b003      	add	sp, #12
 23fd216:	f85d fb04 	ldr.w	pc, [sp], #4

023fd21a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd21a:	460b      	mov	r3, r1
 23fd21c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fd21e:	2200      	movs	r2, #0
 23fd220:	b510      	push	{r4, lr}
 23fd222:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd224:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fd228:	6083      	str	r3, [r0, #8]
    if (t) {
 23fd22a:	b90b      	cbnz	r3, 23fd230 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fd22c:	4620      	mov	r0, r4
 23fd22e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fd230:	f7ff ffd5 	bl	23fd1de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fd234:	e7fa      	b.n	23fd22c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fd236 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fd236:	6883      	ldr	r3, [r0, #8]
 23fd238:	b1eb      	cbz	r3, 23fd276 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fd23a:	781a      	ldrb	r2, [r3, #0]
 23fd23c:	2a03      	cmp	r2, #3
 23fd23e:	d81a      	bhi.n	23fd276 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fd240:	e8df f002 	tbb	[pc, r2]
 23fd244:	1b021704 	.word	0x1b021704
 23fd248:	2005      	movs	r0, #5
 23fd24a:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fd24c:	6802      	ldr	r2, [r0, #0]
 23fd24e:	685b      	ldr	r3, [r3, #4]
 23fd250:	6852      	ldr	r2, [r2, #4]
 23fd252:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fd254:	282d      	cmp	r0, #45	; 0x2d
 23fd256:	d012      	beq.n	23fd27e <_ZNK5spark9JSONValue4typeEv+0x48>
 23fd258:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fd25c:	2b09      	cmp	r3, #9
 23fd25e:	d90e      	bls.n	23fd27e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fd260:	2874      	cmp	r0, #116	; 0x74
 23fd262:	d00e      	beq.n	23fd282 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fd264:	2866      	cmp	r0, #102	; 0x66
 23fd266:	d00c      	beq.n	23fd282 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fd268:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fd26c:	4258      	negs	r0, r3
 23fd26e:	4158      	adcs	r0, r3
 23fd270:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fd272:	2006      	movs	r0, #6
 23fd274:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fd276:	2000      	movs	r0, #0
 23fd278:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fd27a:	2004      	movs	r0, #4
 23fd27c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fd27e:	2003      	movs	r0, #3
 23fd280:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fd282:	2002      	movs	r0, #2
}
 23fd284:	4770      	bx	lr

023fd286 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fd286:	b510      	push	{r4, lr}
 23fd288:	4604      	mov	r4, r0
    switch (type()) {
 23fd28a:	f7ff ffd4 	bl	23fd236 <_ZNK5spark9JSONValue4typeEv>
 23fd28e:	2802      	cmp	r0, #2
 23fd290:	d00e      	beq.n	23fd2b0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fd292:	1ec3      	subs	r3, r0, #3
 23fd294:	b2db      	uxtb	r3, r3
 23fd296:	2b01      	cmp	r3, #1
 23fd298:	d814      	bhi.n	23fd2c4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fd29a:	6822      	ldr	r2, [r4, #0]
 23fd29c:	68a3      	ldr	r3, [r4, #8]
 23fd29e:	6850      	ldr	r0, [r2, #4]
 23fd2a0:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fd2a2:	220a      	movs	r2, #10
}
 23fd2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fd2a8:	2100      	movs	r1, #0
 23fd2aa:	4418      	add	r0, r3
 23fd2ac:	f002 b806 	b.w	23ff2bc <strtol>
        const char* const s = d_->json + t_->start;
 23fd2b0:	6822      	ldr	r2, [r4, #0]
 23fd2b2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fd2b4:	6852      	ldr	r2, [r2, #4]
 23fd2b6:	685b      	ldr	r3, [r3, #4]
 23fd2b8:	5cd0      	ldrb	r0, [r2, r3]
 23fd2ba:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fd2be:	4258      	negs	r0, r3
 23fd2c0:	4158      	adcs	r0, r3
}
 23fd2c2:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fd2c4:	2000      	movs	r0, #0
 23fd2c6:	e7fc      	b.n	23fd2c2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fd2c8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd2c8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd2ca:	2300      	movs	r3, #0
 23fd2cc:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd2ce:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fd2d2:	480e      	ldr	r0, [pc, #56]	; (23fd30c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fd2d4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fd2d8:	b1a9      	cbz	r1, 23fd306 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fd2da:	780b      	ldrb	r3, [r1, #0]
 23fd2dc:	2b03      	cmp	r3, #3
 23fd2de:	d006      	beq.n	23fd2ee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fd2e0:	b98b      	cbnz	r3, 23fd306 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fd2e2:	6813      	ldr	r3, [r2, #0]
 23fd2e4:	6858      	ldr	r0, [r3, #4]
 23fd2e6:	684b      	ldr	r3, [r1, #4]
 23fd2e8:	5cc3      	ldrb	r3, [r0, r3]
 23fd2ea:	2b6e      	cmp	r3, #110	; 0x6e
 23fd2ec:	d007      	beq.n	23fd2fe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fd2ee:	6813      	ldr	r3, [r2, #0]
 23fd2f0:	684d      	ldr	r5, [r1, #4]
 23fd2f2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fd2f4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fd2f6:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fd2f8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fd2fa:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fd2fc:	60e3      	str	r3, [r4, #12]
 23fd2fe:	4611      	mov	r1, r2
 23fd300:	4620      	mov	r0, r4
 23fd302:	f7ff ff6c 	bl	23fd1de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd306:	4620      	mov	r0, r4
 23fd308:	bd38      	pop	{r3, r4, r5, pc}
 23fd30a:	bf00      	nop
 23fd30c:	023ffcd3 	.word	0x023ffcd3

023fd310 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd310:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd312:	2500      	movs	r5, #0
 23fd314:	460b      	mov	r3, r1
 23fd316:	4604      	mov	r4, r0
 23fd318:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd31a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fd31e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fd322:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fd326:	b14b      	cbz	r3, 23fd33c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fd328:	781a      	ldrb	r2, [r3, #0]
 23fd32a:	2a01      	cmp	r2, #1
 23fd32c:	d106      	bne.n	23fd33c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fd32e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fd332:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fd334:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fd336:	6143      	str	r3, [r0, #20]
 23fd338:	f7ff ff51 	bl	23fd1de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd33c:	4620      	mov	r0, r4
 23fd33e:	bd38      	pop	{r3, r4, r5, pc}

023fd340 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fd340:	b510      	push	{r4, lr}
    if (!n_) {
 23fd342:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fd344:	4604      	mov	r4, r0
    if (!n_) {
 23fd346:	b163      	cbz	r3, 23fd362 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fd348:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fd34a:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fd34c:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fd34e:	3010      	adds	r0, #16
 23fd350:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fd352:	6120      	str	r0, [r4, #16]
    --n_;
 23fd354:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fd356:	b113      	cbz	r3, 23fd35e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fd358:	f7ff fef2 	bl	23fd140 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fd35c:	60a0      	str	r0, [r4, #8]
    return true;
 23fd35e:	2001      	movs	r0, #1
 23fd360:	e000      	b.n	23fd364 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fd362:	4618      	mov	r0, r3
}
 23fd364:	bd10      	pop	{r4, pc}

023fd366 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd366:	b510      	push	{r4, lr}
    write('}');
 23fd368:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd36a:	4604      	mov	r4, r0
    write('}');
 23fd36c:	f7ff ff49 	bl	23fd202 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fd370:	2301      	movs	r3, #1
}
 23fd372:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd374:	7123      	strb	r3, [r4, #4]
}
 23fd376:	bd10      	pop	{r4, pc}

023fd378 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fd378:	b508      	push	{r3, lr}
    switch (state_) {
 23fd37a:	7903      	ldrb	r3, [r0, #4]
 23fd37c:	2b01      	cmp	r3, #1
 23fd37e:	d002      	beq.n	23fd386 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fd380:	2b02      	cmp	r3, #2
 23fd382:	d004      	beq.n	23fd38e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fd384:	bd08      	pop	{r3, pc}
        write(',');
 23fd386:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fd388:	f7ff ff3b 	bl	23fd202 <_ZN5spark10JSONWriter5writeEc>
}
 23fd38c:	e7fa      	b.n	23fd384 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fd38e:	213a      	movs	r1, #58	; 0x3a
 23fd390:	e7fa      	b.n	23fd388 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fd392 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fd392:	b510      	push	{r4, lr}
 23fd394:	4604      	mov	r4, r0
    writeSeparator();
 23fd396:	f7ff ffef 	bl	23fd378 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fd39a:	4620      	mov	r0, r4
 23fd39c:	217b      	movs	r1, #123	; 0x7b
 23fd39e:	f7ff ff30 	bl	23fd202 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fd3a2:	2300      	movs	r3, #0
}
 23fd3a4:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fd3a6:	7123      	strb	r3, [r4, #4]
}
 23fd3a8:	bd10      	pop	{r4, pc}
	...

023fd3ac <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fd3ac:	b513      	push	{r0, r1, r4, lr}
 23fd3ae:	4604      	mov	r4, r0
 23fd3b0:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd3b2:	f7ff ffe1 	bl	23fd378 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fd3b6:	6823      	ldr	r3, [r4, #0]
 23fd3b8:	4620      	mov	r0, r4
 23fd3ba:	68db      	ldr	r3, [r3, #12]
 23fd3bc:	9a01      	ldr	r2, [sp, #4]
 23fd3be:	4903      	ldr	r1, [pc, #12]	; (23fd3cc <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fd3c0:	4798      	blx	r3
    state_ = NEXT;
 23fd3c2:	2301      	movs	r3, #1
}
 23fd3c4:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd3c6:	7123      	strb	r3, [r4, #4]
}
 23fd3c8:	b002      	add	sp, #8
 23fd3ca:	bd10      	pop	{r4, pc}
 23fd3cc:	023ff3db 	.word	0x023ff3db

023fd3d0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fd3d0:	b513      	push	{r0, r1, r4, lr}
 23fd3d2:	4604      	mov	r4, r0
 23fd3d4:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd3d6:	f7ff ffcf 	bl	23fd378 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fd3da:	6823      	ldr	r3, [r4, #0]
 23fd3dc:	4620      	mov	r0, r4
 23fd3de:	68db      	ldr	r3, [r3, #12]
 23fd3e0:	9a01      	ldr	r2, [sp, #4]
 23fd3e2:	4903      	ldr	r1, [pc, #12]	; (23fd3f0 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fd3e4:	4798      	blx	r3
    state_ = NEXT;
 23fd3e6:	2301      	movs	r3, #1
}
 23fd3e8:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd3ea:	7123      	strb	r3, [r4, #4]
}
 23fd3ec:	b002      	add	sp, #8
 23fd3ee:	bd10      	pop	{r4, pc}
 23fd3f0:	023ffc70 	.word	0x023ffc70

023fd3f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd3f8:	460d      	mov	r5, r1
 23fd3fa:	4690      	mov	r8, r2
    write('"');
 23fd3fc:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd3fe:	4604      	mov	r4, r0
 23fd400:	462f      	mov	r7, r5
    write('"');
 23fd402:	f7ff fefe 	bl	23fd202 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fd406:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fd4ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fd40a:	44a8      	add	r8, r5
    while (s != end) {
 23fd40c:	4547      	cmp	r7, r8
 23fd40e:	46ba      	mov	sl, r7
 23fd410:	d03d      	beq.n	23fd48e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fd412:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fd416:	2e22      	cmp	r6, #34	; 0x22
 23fd418:	d006      	beq.n	23fd428 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd41a:	2e5c      	cmp	r6, #92	; 0x5c
 23fd41c:	d004      	beq.n	23fd428 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd41e:	4630      	mov	r0, r6
 23fd420:	f001 fe1c 	bl	23ff05c <isprint>
 23fd424:	2800      	cmp	r0, #0
 23fd426:	d1f1      	bne.n	23fd40c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fd428:	6823      	ldr	r3, [r4, #0]
 23fd42a:	4629      	mov	r1, r5
 23fd42c:	4620      	mov	r0, r4
 23fd42e:	689b      	ldr	r3, [r3, #8]
 23fd430:	ebaa 0205 	sub.w	r2, sl, r5
 23fd434:	4798      	blx	r3
            write('\\');
 23fd436:	215c      	movs	r1, #92	; 0x5c
 23fd438:	4620      	mov	r0, r4
 23fd43a:	f7ff fee2 	bl	23fd202 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fd43e:	2e0d      	cmp	r6, #13
 23fd440:	d80a      	bhi.n	23fd458 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fd442:	2e07      	cmp	r6, #7
 23fd444:	d91c      	bls.n	23fd480 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd446:	f1a6 0308 	sub.w	r3, r6, #8
 23fd44a:	2b05      	cmp	r3, #5
 23fd44c:	d818      	bhi.n	23fd480 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd44e:	e8df f003 	tbb	[pc, r3]
 23fd452:	0f0d      	.short	0x0f0d
 23fd454:	15131711 	.word	0x15131711
 23fd458:	2e22      	cmp	r6, #34	; 0x22
 23fd45a:	d001      	beq.n	23fd460 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fd45c:	2e5c      	cmp	r6, #92	; 0x5c
 23fd45e:	d10f      	bne.n	23fd480 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fd460:	4631      	mov	r1, r6
                write('b');
 23fd462:	4620      	mov	r0, r4
 23fd464:	f7ff fecd 	bl	23fd202 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fd468:	463d      	mov	r5, r7
    while (s != end) {
 23fd46a:	e7cf      	b.n	23fd40c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fd46c:	2162      	movs	r1, #98	; 0x62
 23fd46e:	e7f8      	b.n	23fd462 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fd470:	2174      	movs	r1, #116	; 0x74
 23fd472:	e7f6      	b.n	23fd462 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fd474:	216e      	movs	r1, #110	; 0x6e
 23fd476:	e7f4      	b.n	23fd462 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fd478:	2166      	movs	r1, #102	; 0x66
 23fd47a:	e7f2      	b.n	23fd462 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fd47c:	2172      	movs	r1, #114	; 0x72
 23fd47e:	e7f0      	b.n	23fd462 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fd480:	6823      	ldr	r3, [r4, #0]
 23fd482:	4632      	mov	r2, r6
 23fd484:	4649      	mov	r1, r9
 23fd486:	4620      	mov	r0, r4
 23fd488:	68db      	ldr	r3, [r3, #12]
 23fd48a:	4798      	blx	r3
                break;
 23fd48c:	e7ec      	b.n	23fd468 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fd48e:	42bd      	cmp	r5, r7
 23fd490:	d005      	beq.n	23fd49e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fd492:	6823      	ldr	r3, [r4, #0]
 23fd494:	4629      	mov	r1, r5
 23fd496:	4620      	mov	r0, r4
 23fd498:	689b      	ldr	r3, [r3, #8]
 23fd49a:	1b7a      	subs	r2, r7, r5
 23fd49c:	4798      	blx	r3
    }
    write('"');
 23fd49e:	2122      	movs	r1, #34	; 0x22
 23fd4a0:	4620      	mov	r0, r4
 23fd4a2:	f7ff feae 	bl	23fd202 <_ZN5spark10JSONWriter5writeEc>
}
 23fd4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd4aa:	bf00      	nop
 23fd4ac:	023ffc73 	.word	0x023ffc73

023fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fd4b0:	b513      	push	{r0, r1, r4, lr}
 23fd4b2:	4604      	mov	r4, r0
 23fd4b4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd4b8:	f7ff ff5e 	bl	23fd378 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fd4bc:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd4c0:	4620      	mov	r0, r4
 23fd4c2:	f7ff ff97 	bl	23fd3f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fd4c6:	2302      	movs	r3, #2
}
 23fd4c8:	4620      	mov	r0, r4
    state_ = VALUE;
 23fd4ca:	7123      	strb	r3, [r4, #4]
}
 23fd4cc:	b002      	add	sp, #8
 23fd4ce:	bd10      	pop	{r4, pc}

023fd4d0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fd4d0:	b513      	push	{r0, r1, r4, lr}
 23fd4d2:	4604      	mov	r4, r0
 23fd4d4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd4d8:	f7ff ff4e 	bl	23fd378 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fd4dc:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd4e0:	4620      	mov	r0, r4
 23fd4e2:	f7ff ff87 	bl	23fd3f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fd4e6:	2301      	movs	r3, #1
}
 23fd4e8:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd4ea:	7123      	strb	r3, [r4, #4]
}
 23fd4ec:	b002      	add	sp, #8
 23fd4ee:	bd10      	pop	{r4, pc}

023fd4f0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fd4f0:	6880      	ldr	r0, [r0, #8]
 23fd4f2:	6803      	ldr	r3, [r0, #0]
 23fd4f4:	68db      	ldr	r3, [r3, #12]
 23fd4f6:	4718      	bx	r3

023fd4f8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd4f8:	4770      	bx	lr

023fd4fa <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fd4fa:	4608      	mov	r0, r1
 23fd4fc:	b111      	cbz	r1, 23fd504 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fd4fe:	680b      	ldr	r3, [r1, #0]
 23fd500:	685b      	ldr	r3, [r3, #4]
 23fd502:	4718      	bx	r3
}
 23fd504:	4770      	bx	lr

023fd506 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fd506:	4770      	bx	lr

023fd508 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd508:	4770      	bx	lr

023fd50a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fd50a:	4770      	bx	lr

023fd50c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd50c:	4770      	bx	lr

023fd50e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fd50e:	b538      	push	{r3, r4, r5, lr}
 23fd510:	4604      	mov	r4, r0
 23fd512:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fd514:	6800      	ldr	r0, [r0, #0]
 23fd516:	212e      	movs	r1, #46	; 0x2e
 23fd518:	f001 fe13 	bl	23ff142 <strchrnul>
    size = s - category;
 23fd51c:	6823      	ldr	r3, [r4, #0]
 23fd51e:	1ac3      	subs	r3, r0, r3
 23fd520:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd522:	b123      	cbz	r3, 23fd52e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd524:	7803      	ldrb	r3, [r0, #0]
 23fd526:	b103      	cbz	r3, 23fd52a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd528:	3001      	adds	r0, #1
 23fd52a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd52c:	6020      	str	r0, [r4, #0]
}
 23fd52e:	4618      	mov	r0, r3
 23fd530:	bd38      	pop	{r3, r4, r5, pc}

023fd532 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd532:	b510      	push	{r4, lr}
 23fd534:	4604      	mov	r4, r0
 23fd536:	210c      	movs	r1, #12
 23fd538:	f7fd fcff 	bl	23faf3a <_ZdlPvj>
 23fd53c:	4620      	mov	r0, r4
 23fd53e:	bd10      	pop	{r4, pc}

023fd540 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd540:	b510      	push	{r4, lr}
 23fd542:	4604      	mov	r4, r0
 23fd544:	2104      	movs	r1, #4
 23fd546:	f7fd fcf8 	bl	23faf3a <_ZdlPvj>
 23fd54a:	4620      	mov	r0, r4
 23fd54c:	bd10      	pop	{r4, pc}

023fd54e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd54e:	b510      	push	{r4, lr}
 23fd550:	4604      	mov	r4, r0
 23fd552:	2104      	movs	r1, #4
 23fd554:	f7fd fcf1 	bl	23faf3a <_ZdlPvj>
 23fd558:	4620      	mov	r0, r4
 23fd55a:	bd10      	pop	{r4, pc}

023fd55c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd55c:	f7fe bffc 	b.w	23fc558 <os_mutex_recursive_lock>

023fd560 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd560:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd562:	f7fd fcb7 	bl	23faed4 <strcmp>
}
 23fd566:	fab0 f080 	clz	r0, r0
 23fd56a:	0940      	lsrs	r0, r0, #5
 23fd56c:	bd08      	pop	{r3, pc}

023fd56e <__tcf_1>:
 23fd56e:	4770      	bx	lr

023fd570 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd570:	b510      	push	{r4, lr}
 23fd572:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd574:	f001 faa6 	bl	23feac4 <_Z16_fetch_usbserialv>
 23fd578:	4284      	cmp	r4, r0
 23fd57a:	d105      	bne.n	23fd588 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd57c:	f001 faa2 	bl	23feac4 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd584:	f001 ba92 	b.w	23feaac <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd588:	f001 fca2 	bl	23feed0 <_Z22__fetch_global_Serial1v>
 23fd58c:	4284      	cmp	r4, r0
 23fd58e:	d105      	bne.n	23fd59c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd590:	f001 fc9e 	bl	23feed0 <_Z22__fetch_global_Serial1v>
}
 23fd594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd598:	f001 ba2b 	b.w	23fe9f2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd59c:	b12c      	cbz	r4, 23fd5aa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd59e:	6823      	ldr	r3, [r4, #0]
 23fd5a0:	4620      	mov	r0, r4
}
 23fd5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd5a6:	685b      	ldr	r3, [r3, #4]
 23fd5a8:	4718      	bx	r3
 23fd5aa:	bd10      	pop	{r4, pc}

023fd5ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd5ac:	680b      	ldr	r3, [r1, #0]
 23fd5ae:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd5b0:	684b      	ldr	r3, [r1, #4]
 23fd5b2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd5b4:	b113      	cbz	r3, 23fd5bc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd5b6:	685a      	ldr	r2, [r3, #4]
 23fd5b8:	3201      	adds	r2, #1
 23fd5ba:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd5bc:	4770      	bx	lr

023fd5be <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd5be:	b513      	push	{r0, r1, r4, lr}
 23fd5c0:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd5c2:	4608      	mov	r0, r1
 23fd5c4:	9101      	str	r1, [sp, #4]
 23fd5c6:	f7fd fc8f 	bl	23faee8 <strlen>
 23fd5ca:	4602      	mov	r2, r0
 23fd5cc:	4620      	mov	r0, r4
 23fd5ce:	9901      	ldr	r1, [sp, #4]
}
 23fd5d0:	b002      	add	sp, #8
 23fd5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd5d6:	f7ff bf7b 	b.w	23fd4d0 <_ZN5spark10JSONWriter5valueEPKcj>

023fd5da <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd5da:	b513      	push	{r0, r1, r4, lr}
 23fd5dc:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd5de:	4608      	mov	r0, r1
 23fd5e0:	9101      	str	r1, [sp, #4]
 23fd5e2:	f7fd fc81 	bl	23faee8 <strlen>
 23fd5e6:	4602      	mov	r2, r0
 23fd5e8:	4620      	mov	r0, r4
 23fd5ea:	6823      	ldr	r3, [r4, #0]
 23fd5ec:	9901      	ldr	r1, [sp, #4]
 23fd5ee:	68db      	ldr	r3, [r3, #12]
}
 23fd5f0:	b002      	add	sp, #8
 23fd5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd5f6:	4718      	bx	r3

023fd5f8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd5f8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd5fa:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd5fc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd600:	2201      	movs	r2, #1
 23fd602:	68db      	ldr	r3, [r3, #12]
 23fd604:	f10d 0107 	add.w	r1, sp, #7
 23fd608:	4798      	blx	r3
}
 23fd60a:	b003      	add	sp, #12
 23fd60c:	f85d fb04 	ldr.w	pc, [sp], #4

023fd610 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd610:	680a      	ldr	r2, [r1, #0]
 23fd612:	b510      	push	{r4, lr}
 23fd614:	6002      	str	r2, [r0, #0]
 23fd616:	684a      	ldr	r2, [r1, #4]
 23fd618:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd61a:	2200      	movs	r2, #0
 23fd61c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd620:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd622:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd624:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd626:	6084      	str	r4, [r0, #8]
 23fd628:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd62a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd62c:	60c4      	str	r4, [r0, #12]
 23fd62e:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd630:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd632:	6104      	str	r4, [r0, #16]
 23fd634:	bd10      	pop	{r4, pc}
	...

023fd638 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd63c:	f04f 0a14 	mov.w	sl, #20
 23fd640:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd644:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd646:	4645      	mov	r5, r8
 23fd648:	fb0a f404 	mul.w	r4, sl, r4
 23fd64c:	9300      	str	r3, [sp, #0]
 23fd64e:	4b17      	ldr	r3, [pc, #92]	; (23fd6ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd650:	10a4      	asrs	r4, r4, #2
 23fd652:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd654:	2c00      	cmp	r4, #0
 23fd656:	dd21      	ble.n	23fd69c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd658:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd65a:	fb0a f006 	mul.w	r0, sl, r6
 23fd65e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd662:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd666:	463a      	mov	r2, r7
 23fd668:	455f      	cmp	r7, fp
 23fd66a:	bf28      	it	cs
 23fd66c:	465a      	movcs	r2, fp
 23fd66e:	5828      	ldr	r0, [r5, r0]
 23fd670:	9101      	str	r1, [sp, #4]
 23fd672:	f001 fd78 	bl	23ff166 <strncmp>
                if (cmp == 0) {
 23fd676:	2800      	cmp	r0, #0
 23fd678:	f04f 0301 	mov.w	r3, #1
 23fd67c:	9901      	ldr	r1, [sp, #4]
 23fd67e:	d10b      	bne.n	23fd698 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd680:	455f      	cmp	r7, fp
 23fd682:	d103      	bne.n	23fd68c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd684:	9a00      	ldr	r2, [sp, #0]
 23fd686:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd688:	4634      	mov	r4, r6
 23fd68a:	e7e3      	b.n	23fd654 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd68c:	d9fc      	bls.n	23fd688 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd68e:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd690:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd694:	3e01      	subs	r6, #1
 23fd696:	e7f7      	b.n	23fd688 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd698:	dbf9      	blt.n	23fd68e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd69a:	e7f5      	b.n	23fd688 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd69c:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd6a0:	4802      	ldr	r0, [pc, #8]	; (23fd6ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd6a2:	10ad      	asrs	r5, r5, #2
 23fd6a4:	4368      	muls	r0, r5
 23fd6a6:	b003      	add	sp, #12
 23fd6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd6ac:	cccccccd 	.word	0xcccccccd

023fd6b0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd6b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd6b2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd6b4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd6b6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd6b8:	b303      	cbz	r3, 23fd6fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd6ba:	b1f9      	cbz	r1, 23fd6fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd6bc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd6be:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd6c2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd6c4:	a903      	add	r1, sp, #12
 23fd6c6:	a801      	add	r0, sp, #4
 23fd6c8:	f7ff ff21 	bl	23fd50e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd6cc:	4601      	mov	r1, r0
 23fd6ce:	b1a8      	cbz	r0, 23fd6fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd6d0:	f10d 030b 	add.w	r3, sp, #11
 23fd6d4:	4620      	mov	r0, r4
 23fd6d6:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd6d8:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd6dc:	f7ff ffac 	bl	23fd638 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd6e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd6e4:	b153      	cbz	r3, 23fd6fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd6e6:	6823      	ldr	r3, [r4, #0]
 23fd6e8:	2414      	movs	r4, #20
 23fd6ea:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd6ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd6f2:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd6f4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd6f6:	bfa8      	it	ge
 23fd6f8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd6fa:	e7e3      	b.n	23fd6c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd6fc:	4628      	mov	r0, r5
 23fd6fe:	b004      	add	sp, #16
 23fd700:	bd70      	pop	{r4, r5, r6, pc}

023fd702 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd702:	b40e      	push	{r1, r2, r3}
 23fd704:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd706:	b08c      	sub	sp, #48	; 0x30
 23fd708:	af00      	add	r7, sp, #0
 23fd70a:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd70e:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd712:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd714:	462b      	mov	r3, r5
 23fd716:	2120      	movs	r1, #32
 23fd718:	f107 0010 	add.w	r0, r7, #16
 23fd71c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd71e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd720:	f7ff fb50 	bl	23fcdc4 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd724:	281f      	cmp	r0, #31
 23fd726:	687a      	ldr	r2, [r7, #4]
 23fd728:	d91a      	bls.n	23fd760 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd72a:	f100 0308 	add.w	r3, r0, #8
 23fd72e:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd732:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd734:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd738:	1c41      	adds	r1, r0, #1
 23fd73a:	462b      	mov	r3, r5
 23fd73c:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd73e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd740:	f7ff fb40 	bl	23fcdc4 <vsnprintf>
        if (n > 0) {
 23fd744:	1e02      	subs	r2, r0, #0
 23fd746:	dd04      	ble.n	23fd752 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd748:	6823      	ldr	r3, [r4, #0]
 23fd74a:	4669      	mov	r1, sp
 23fd74c:	4620      	mov	r0, r4
 23fd74e:	68db      	ldr	r3, [r3, #12]
 23fd750:	4798      	blx	r3
 23fd752:	46b5      	mov	sp, r6
}
 23fd754:	3730      	adds	r7, #48	; 0x30
 23fd756:	46bd      	mov	sp, r7
 23fd758:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd75c:	b003      	add	sp, #12
 23fd75e:	4770      	bx	lr
    } else if (n > 0) {
 23fd760:	2800      	cmp	r0, #0
 23fd762:	d0f7      	beq.n	23fd754 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd764:	6823      	ldr	r3, [r4, #0]
 23fd766:	4602      	mov	r2, r0
 23fd768:	68db      	ldr	r3, [r3, #12]
 23fd76a:	4620      	mov	r0, r4
 23fd76c:	f107 0110 	add.w	r1, r7, #16
 23fd770:	4798      	blx	r3
}
 23fd772:	e7ef      	b.n	23fd754 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd774 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd774:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd776:	4c08      	ldr	r4, [pc, #32]	; (23fd798 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd778:	e8d4 3f8f 	ldab	r3, [r4]
 23fd77c:	07db      	lsls	r3, r3, #31
 23fd77e:	d409      	bmi.n	23fd794 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd780:	4620      	mov	r0, r4
 23fd782:	f7fd fbe9 	bl	23faf58 <__cxa_guard_acquire>
 23fd786:	b128      	cbz	r0, 23fd794 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd788:	4620      	mov	r0, r4
 23fd78a:	f7fd fbea 	bl	23faf62 <__cxa_guard_release>
 23fd78e:	4803      	ldr	r0, [pc, #12]	; (23fd79c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd790:	f001 fc5e 	bl	23ff050 <atexit>
}
 23fd794:	4802      	ldr	r0, [pc, #8]	; (23fd7a0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd796:	bd10      	pop	{r4, pc}
 23fd798:	1007ae6c 	.word	0x1007ae6c
 23fd79c:	023fd507 	.word	0x023fd507
 23fd7a0:	1007a9cc 	.word	0x1007a9cc

023fd7a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd7a4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd7a6:	4c08      	ldr	r4, [pc, #32]	; (23fd7c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd7a8:	e8d4 3f8f 	ldab	r3, [r4]
 23fd7ac:	07db      	lsls	r3, r3, #31
 23fd7ae:	d409      	bmi.n	23fd7c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd7b0:	4620      	mov	r0, r4
 23fd7b2:	f7fd fbd1 	bl	23faf58 <__cxa_guard_acquire>
 23fd7b6:	b128      	cbz	r0, 23fd7c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd7b8:	4620      	mov	r0, r4
 23fd7ba:	f7fd fbd2 	bl	23faf62 <__cxa_guard_release>
 23fd7be:	4803      	ldr	r0, [pc, #12]	; (23fd7cc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd7c0:	f001 fc46 	bl	23ff050 <atexit>
    return &factory;
}
 23fd7c4:	4802      	ldr	r0, [pc, #8]	; (23fd7d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd7c6:	bd10      	pop	{r4, pc}
 23fd7c8:	1007ae70 	.word	0x1007ae70
 23fd7cc:	023fd56f 	.word	0x023fd56f
 23fd7d0:	1007a9d0 	.word	0x1007a9d0

023fd7d4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd7d4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd7d6:	2500      	movs	r5, #0
 23fd7d8:	4604      	mov	r4, r0
 23fd7da:	e9c0 5500 	strd	r5, r5, [r0]
 23fd7de:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd7e2:	6085      	str	r5, [r0, #8]
 23fd7e4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd7e6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd7ea:	f7fe fe99 	bl	23fc520 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd7ee:	f7ff ffc1 	bl	23fd774 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd7f2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd7f4:	f7ff ffd6 	bl	23fd7a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd7f8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd7fa:	6220      	str	r0, [r4, #32]
}
 23fd7fc:	4620      	mov	r0, r4
 23fd7fe:	bd38      	pop	{r3, r4, r5, pc}

023fd800 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd800:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd802:	4c0a      	ldr	r4, [pc, #40]	; (23fd82c <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd804:	e8d4 3f8f 	ldab	r3, [r4]
 23fd808:	07db      	lsls	r3, r3, #31
 23fd80a:	d40c      	bmi.n	23fd826 <_ZN5spark10LogManager8instanceEv+0x26>
 23fd80c:	4620      	mov	r0, r4
 23fd80e:	f7fd fba3 	bl	23faf58 <__cxa_guard_acquire>
 23fd812:	b140      	cbz	r0, 23fd826 <_ZN5spark10LogManager8instanceEv+0x26>
 23fd814:	4806      	ldr	r0, [pc, #24]	; (23fd830 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd816:	f7ff ffdd 	bl	23fd7d4 <_ZN5spark10LogManagerC1Ev>
 23fd81a:	4620      	mov	r0, r4
 23fd81c:	f7fd fba1 	bl	23faf62 <__cxa_guard_release>
 23fd820:	4804      	ldr	r0, [pc, #16]	; (23fd834 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd822:	f001 fc15 	bl	23ff050 <atexit>
    return &mgr;
}
 23fd826:	4802      	ldr	r0, [pc, #8]	; (23fd830 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd828:	bd10      	pop	{r4, pc}
 23fd82a:	bf00      	nop
 23fd82c:	1007ae68 	.word	0x1007ae68
 23fd830:	1007ae78 	.word	0x1007ae78
 23fd834:	023fdd51 	.word	0x023fdd51

023fd838 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd838:	2300      	movs	r3, #0
 23fd83a:	4a02      	ldr	r2, [pc, #8]	; (23fd844 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd83c:	4902      	ldr	r1, [pc, #8]	; (23fd848 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd83e:	4803      	ldr	r0, [pc, #12]	; (23fd84c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd840:	f7ff b98c 	b.w	23fcb5c <log_set_callbacks>
 23fd844:	023fdb39 	.word	0x023fdb39
 23fd848:	023fdac5 	.word	0x023fdac5
 23fd84c:	023fda45 	.word	0x023fda45

023fd850 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd850:	2300      	movs	r3, #0
 23fd852:	461a      	mov	r2, r3
 23fd854:	4619      	mov	r1, r3
 23fd856:	4618      	mov	r0, r3
 23fd858:	f7ff b980 	b.w	23fcb5c <log_set_callbacks>

023fd85c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd85e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd860:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd862:	4668      	mov	r0, sp
 23fd864:	f7ff fea2 	bl	23fd5ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd868:	466a      	mov	r2, sp
 23fd86a:	4629      	mov	r1, r5
 23fd86c:	4620      	mov	r0, r4
 23fd86e:	f7ff fd4f 	bl	23fd310 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fd872:	a801      	add	r0, sp, #4
 23fd874:	f7ff fae1 	bl	23fce3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd878:	4620      	mov	r0, r4
 23fd87a:	b003      	add	sp, #12
 23fd87c:	bd30      	pop	{r4, r5, pc}

023fd87e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd87e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd880:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd882:	68cd      	ldr	r5, [r1, #12]
 23fd884:	4668      	mov	r0, sp
 23fd886:	f7ff fe91 	bl	23fd5ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd88a:	466a      	mov	r2, sp
 23fd88c:	4629      	mov	r1, r5
 23fd88e:	4620      	mov	r0, r4
 23fd890:	f7ff fd1a 	bl	23fd2c8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd894:	a801      	add	r0, sp, #4
 23fd896:	f7ff fad0 	bl	23fce3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd89a:	4620      	mov	r0, r4
 23fd89c:	b003      	add	sp, #12
 23fd89e:	bd30      	pop	{r4, r5, pc}

023fd8a0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd8a2:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd8a4:	690d      	ldr	r5, [r1, #16]
 23fd8a6:	4668      	mov	r0, sp
 23fd8a8:	f7ff fe80 	bl	23fd5ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd8ac:	466a      	mov	r2, sp
 23fd8ae:	4629      	mov	r1, r5
 23fd8b0:	4620      	mov	r0, r4
 23fd8b2:	f7ff fcb2 	bl	23fd21a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd8b6:	a801      	add	r0, sp, #4
 23fd8b8:	f7ff fabf 	bl	23fce3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd8bc:	4620      	mov	r0, r4
 23fd8be:	b003      	add	sp, #12
 23fd8c0:	bd30      	pop	{r4, r5, pc}
	...

023fd8c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd8c4:	b570      	push	{r4, r5, r6, lr}
 23fd8c6:	b08a      	sub	sp, #40	; 0x28
 23fd8c8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd8ca:	4601      	mov	r1, r0
 23fd8cc:	a804      	add	r0, sp, #16
 23fd8ce:	f7ff ffc5 	bl	23fd85c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd8d2:	4e14      	ldr	r6, [pc, #80]	; (23fd924 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd8d4:	a804      	add	r0, sp, #16
 23fd8d6:	f7ff fd33 	bl	23fd340 <_ZN5spark18JSONObjectIterator4nextEv>
 23fd8da:	b1e8      	cbz	r0, 23fd918 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd8dc:	4668      	mov	r0, sp
 23fd8de:	a904      	add	r1, sp, #16
 23fd8e0:	f7ff ffcd 	bl	23fd87e <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd8e4:	4631      	mov	r1, r6
 23fd8e6:	9802      	ldr	r0, [sp, #8]
 23fd8e8:	f7ff fe3a 	bl	23fd560 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd8ec:	4604      	mov	r4, r0
 23fd8ee:	b110      	cbz	r0, 23fd8f6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd8f0:	1e2c      	subs	r4, r5, #0
 23fd8f2:	bf18      	it	ne
 23fd8f4:	2401      	movne	r4, #1
 23fd8f6:	a801      	add	r0, sp, #4
 23fd8f8:	f7ff fa9f 	bl	23fce3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd8fc:	2c00      	cmp	r4, #0
 23fd8fe:	d0e9      	beq.n	23fd8d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd900:	4668      	mov	r0, sp
 23fd902:	a904      	add	r1, sp, #16
 23fd904:	f7ff ffcc 	bl	23fd8a0 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd908:	4668      	mov	r0, sp
 23fd90a:	f7ff fcbc 	bl	23fd286 <_ZNK5spark9JSONValue5toIntEv>
 23fd90e:	6028      	str	r0, [r5, #0]
 23fd910:	a801      	add	r0, sp, #4
 23fd912:	f7ff fa92 	bl	23fce3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd916:	e7dd      	b.n	23fd8d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd918:	a805      	add	r0, sp, #20
 23fd91a:	f7ff fa8e 	bl	23fce3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd91e:	b00a      	add	sp, #40	; 0x28
 23fd920:	bd70      	pop	{r4, r5, r6, pc}
 23fd922:	bf00      	nop
 23fd924:	023ffc79 	.word	0x023ffc79

023fd928 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd92a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd92c:	4913      	ldr	r1, [pc, #76]	; (23fd97c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd92e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd930:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd932:	f7fd facf 	bl	23faed4 <strcmp>
 23fd936:	b950      	cbnz	r0, 23fd94e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd938:	f001 f8c4 	bl	23feac4 <_Z16_fetch_usbserialv>
 23fd93c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd940:	f001 f8b0 	bl	23feaa4 <_ZN9USBSerial5beginEl>
}
 23fd944:	b003      	add	sp, #12
 23fd946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd94a:	f001 b8bb 	b.w	23feac4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd94e:	4620      	mov	r0, r4
 23fd950:	490b      	ldr	r1, [pc, #44]	; (23fd980 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd952:	f7fd fabf 	bl	23faed4 <strcmp>
 23fd956:	b978      	cbnz	r0, 23fd978 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd958:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd95c:	a901      	add	r1, sp, #4
 23fd95e:	4628      	mov	r0, r5
        int baud = 9600;
 23fd960:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd962:	f7ff ffaf 	bl	23fd8c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd966:	f001 fab3 	bl	23feed0 <_Z22__fetch_global_Serial1v>
 23fd96a:	9901      	ldr	r1, [sp, #4]
 23fd96c:	f001 f83e 	bl	23fe9ec <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fd970:	f001 faae 	bl	23feed0 <_Z22__fetch_global_Serial1v>
}
 23fd974:	b003      	add	sp, #12
 23fd976:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fd978:	2000      	movs	r0, #0
 23fd97a:	e7fb      	b.n	23fd974 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fd97c:	023ffc7e 	.word	0x023ffc7e
 23fd980:	023ffc85 	.word	0x023ffc85

023fd984 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd984:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd986:	2614      	movs	r6, #20
 23fd988:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd98c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd98e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd992:	42ae      	cmp	r6, r5
 23fd994:	d005      	beq.n	23fd9a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fd996:	f105 0008 	add.w	r0, r5, #8
 23fd99a:	f7ff fff3 	bl	23fd984 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd99e:	3514      	adds	r5, #20
 23fd9a0:	e7f7      	b.n	23fd992 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd9a2:	6820      	ldr	r0, [r4, #0]
 23fd9a4:	f7ff f9f2 	bl	23fcd8c <free>
}
 23fd9a8:	4620      	mov	r0, r4
 23fd9aa:	bd70      	pop	{r4, r5, r6, pc}

023fd9ac <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fd9ac:	b510      	push	{r4, lr}
 23fd9ae:	4604      	mov	r4, r0
 23fd9b0:	300c      	adds	r0, #12
 23fd9b2:	f7ff ffe7 	bl	23fd984 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd9b6:	4620      	mov	r0, r4
 23fd9b8:	f7ff fa69 	bl	23fce8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd9bc:	4620      	mov	r0, r4
 23fd9be:	bd10      	pop	{r4, pc}

023fd9c0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fd9c0:	b510      	push	{r4, lr}
 23fd9c2:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fd9c4:	4b03      	ldr	r3, [pc, #12]	; (23fd9d4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fd9c6:	f840 3b04 	str.w	r3, [r0], #4
 23fd9ca:	f7ff ffef 	bl	23fd9ac <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fd9ce:	4620      	mov	r0, r4
 23fd9d0:	bd10      	pop	{r4, pc}
 23fd9d2:	bf00      	nop
 23fd9d4:	023ff444 	.word	0x023ff444

023fd9d8 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fd9d8:	b510      	push	{r4, lr}
 23fd9da:	4604      	mov	r4, r0
 23fd9dc:	f7ff fff0 	bl	23fd9c0 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd9e0:	4620      	mov	r0, r4
 23fd9e2:	2124      	movs	r1, #36	; 0x24
 23fd9e4:	f7fd faa9 	bl	23faf3a <_ZdlPvj>
 23fd9e8:	4620      	mov	r0, r4
 23fd9ea:	bd10      	pop	{r4, pc}

023fd9ec <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fd9ec:	b510      	push	{r4, lr}
 23fd9ee:	4604      	mov	r4, r0
 23fd9f0:	4b02      	ldr	r3, [pc, #8]	; (23fd9fc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fd9f2:	6003      	str	r3, [r0, #0]
 23fd9f4:	f7ff ffe4 	bl	23fd9c0 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd9f8:	4620      	mov	r0, r4
 23fd9fa:	bd10      	pop	{r4, pc}
 23fd9fc:	023ffd20 	.word	0x023ffd20

023fda00 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fda00:	b510      	push	{r4, lr}
 23fda02:	4604      	mov	r4, r0
 23fda04:	f7ff fff2 	bl	23fd9ec <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fda08:	4620      	mov	r0, r4
 23fda0a:	2124      	movs	r1, #36	; 0x24
 23fda0c:	f7fd fa95 	bl	23faf3a <_ZdlPvj>
 23fda10:	4620      	mov	r0, r4
 23fda12:	bd10      	pop	{r4, pc}

023fda14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fda14:	2200      	movs	r2, #0
 23fda16:	e9c0 2200 	strd	r2, r2, [r0]
 23fda1a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fda1c:	b510      	push	{r4, lr}
 23fda1e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda20:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fda22:	6004      	str	r4, [r0, #0]
 23fda24:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda26:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fda28:	6044      	str	r4, [r0, #4]
 23fda2a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda2c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fda2e:	6084      	str	r4, [r0, #8]
}
 23fda30:	bd10      	pop	{r4, pc}

023fda32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fda32:	b510      	push	{r4, lr}
 23fda34:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fda36:	6803      	ldr	r3, [r0, #0]
 23fda38:	6818      	ldr	r0, [r3, #0]
 23fda3a:	f7fe fd9b 	bl	23fc574 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fda3e:	4620      	mov	r0, r4
 23fda40:	bd10      	pop	{r4, pc}
	...

023fda44 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fda44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fda48:	b087      	sub	sp, #28
 23fda4a:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fda4c:	4b1c      	ldr	r3, [pc, #112]	; (23fdac0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fda4e:	4680      	mov	r8, r0
 23fda50:	685b      	ldr	r3, [r3, #4]
 23fda52:	4689      	mov	r9, r1
 23fda54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fda58:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fda5a:	b96b      	cbnz	r3, 23fda78 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fda5c:	f7ff fed0 	bl	23fd800 <_ZN5spark10LogManager8instanceEv>
 23fda60:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fda62:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fda66:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fda68:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fda6a:	f7ff fd77 	bl	23fd55c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fda6e:	7b23      	ldrb	r3, [r4, #12]
 23fda70:	b12b      	cbz	r3, 23fda7e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fda72:	a805      	add	r0, sp, #20
 23fda74:	f7ff ffdd 	bl	23fda32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fda78:	b007      	add	sp, #28
 23fda7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fda7e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fda80:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fda84:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fda86:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fda8a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fda8e:	45aa      	cmp	sl, r5
 23fda90:	d012      	beq.n	23fdab8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fda92:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fda96:	4631      	mov	r1, r6
 23fda98:	1d38      	adds	r0, r7, #4
 23fda9a:	f7ff fe09 	bl	23fd6b0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fda9e:	4581      	cmp	r9, r0
 23fdaa0:	d3f5      	bcc.n	23fda8e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fdaa2:	9a03      	ldr	r2, [sp, #12]
 23fdaa4:	683b      	ldr	r3, [r7, #0]
 23fdaa6:	9200      	str	r2, [sp, #0]
 23fdaa8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fdaac:	464a      	mov	r2, r9
 23fdaae:	4633      	mov	r3, r6
 23fdab0:	4641      	mov	r1, r8
 23fdab2:	4638      	mov	r0, r7
 23fdab4:	47d8      	blx	fp
 23fdab6:	e7ea      	b.n	23fda8e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fdab8:	2300      	movs	r3, #0
 23fdaba:	7323      	strb	r3, [r4, #12]
 23fdabc:	e7d9      	b.n	23fda72 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fdabe:	bf00      	nop
 23fdac0:	e000ed00 	.word	0xe000ed00

023fdac4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fdac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdac8:	469b      	mov	fp, r3
 23fdaca:	4b1a      	ldr	r3, [pc, #104]	; (23fdb34 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fdacc:	4680      	mov	r8, r0
 23fdace:	685b      	ldr	r3, [r3, #4]
 23fdad0:	4689      	mov	r9, r1
 23fdad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdad6:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fdad8:	b96b      	cbnz	r3, 23fdaf6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fdada:	f7ff fe91 	bl	23fd800 <_ZN5spark10LogManager8instanceEv>
 23fdade:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdae0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdae4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdae6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdae8:	f7ff fd38 	bl	23fd55c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fdaec:	7b23      	ldrb	r3, [r4, #12]
 23fdaee:	b12b      	cbz	r3, 23fdafc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fdaf0:	a801      	add	r0, sp, #4
 23fdaf2:	f7ff ff9e 	bl	23fda32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdaf6:	b003      	add	sp, #12
 23fdaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fdafc:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fdafe:	b2f6      	uxtb	r6, r6
 23fdb00:	7323      	strb	r3, [r4, #12]
 23fdb02:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdb06:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdb0a:	4555      	cmp	r5, sl
 23fdb0c:	d00e      	beq.n	23fdb2c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fdb0e:	f855 7b04 	ldr.w	r7, [r5], #4
 23fdb12:	4659      	mov	r1, fp
 23fdb14:	1d38      	adds	r0, r7, #4
 23fdb16:	f7ff fdcb 	bl	23fd6b0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdb1a:	4286      	cmp	r6, r0
 23fdb1c:	d3f5      	bcc.n	23fdb0a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fdb1e:	683b      	ldr	r3, [r7, #0]
 23fdb20:	464a      	mov	r2, r9
 23fdb22:	4641      	mov	r1, r8
 23fdb24:	4638      	mov	r0, r7
 23fdb26:	68db      	ldr	r3, [r3, #12]
 23fdb28:	4798      	blx	r3
 23fdb2a:	e7ee      	b.n	23fdb0a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fdb2c:	2300      	movs	r3, #0
 23fdb2e:	7323      	strb	r3, [r4, #12]
 23fdb30:	e7de      	b.n	23fdaf0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fdb32:	bf00      	nop
 23fdb34:	e000ed00 	.word	0xe000ed00

023fdb38 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fdb38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fdb3c:	4b16      	ldr	r3, [pc, #88]	; (23fdb98 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fdb3e:	4605      	mov	r5, r0
 23fdb40:	685b      	ldr	r3, [r3, #4]
 23fdb42:	460f      	mov	r7, r1
 23fdb44:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fdb48:	bb1b      	cbnz	r3, 23fdb92 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fdb4a:	f7ff fe59 	bl	23fd800 <_ZN5spark10LogManager8instanceEv>
 23fdb4e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdb50:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdb54:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdb56:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdb58:	f7ff fd00 	bl	23fd55c <_ZN14RecursiveMutex4lockEv.isra.0>
 23fdb5c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fdb60:	2446      	movs	r4, #70	; 0x46
 23fdb62:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdb66:	45b0      	cmp	r8, r6
 23fdb68:	d109      	bne.n	23fdb7e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fdb6a:	a801      	add	r0, sp, #4
 23fdb6c:	f7ff ff61 	bl	23fda32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fdb70:	42a5      	cmp	r5, r4
 23fdb72:	bfb4      	ite	lt
 23fdb74:	2000      	movlt	r0, #0
 23fdb76:	2001      	movge	r0, #1
}
 23fdb78:	b002      	add	sp, #8
 23fdb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fdb7e:	f856 0b04 	ldr.w	r0, [r6], #4
 23fdb82:	4639      	mov	r1, r7
 23fdb84:	3004      	adds	r0, #4
 23fdb86:	f7ff fd93 	bl	23fd6b0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fdb8a:	4284      	cmp	r4, r0
 23fdb8c:	bfa8      	it	ge
 23fdb8e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fdb90:	e7e9      	b.n	23fdb66 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fdb92:	2000      	movs	r0, #0
 23fdb94:	e7f0      	b.n	23fdb78 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fdb96:	bf00      	nop
 23fdb98:	e000ed00 	.word	0xe000ed00

023fdb9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdb9e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fdba2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdba4:	4604      	mov	r4, r0
 23fdba6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdba8:	db0d      	blt.n	23fdbc6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fdbaa:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fdbac:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fdbae:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fdbb0:	dd04      	ble.n	23fdbbc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fdbb2:	00b9      	lsls	r1, r7, #2
 23fdbb4:	f7ff f8f8 	bl	23fcda8 <realloc>
            if (!d) {
 23fdbb8:	b918      	cbnz	r0, 23fdbc2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fdbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fdbbc:	f7ff f8e6 	bl	23fcd8c <free>
        T* d = nullptr;
 23fdbc0:	2000      	movs	r0, #0
        data_ = d;
 23fdbc2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fdbc4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fdbc6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fdbc8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fdbca:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fdbce:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdbd0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fdbd4:	1d08      	adds	r0, r1, #4
 23fdbd6:	f001 fa56 	bl	23ff086 <memmove>
    new(p) T(std::move(value));
 23fdbda:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fdbde:	6863      	ldr	r3, [r4, #4]
    return true;
 23fdbe0:	2001      	movs	r0, #1
    ++size_;
 23fdbe2:	3301      	adds	r3, #1
 23fdbe4:	6063      	str	r3, [r4, #4]
    return true;
 23fdbe6:	e7e8      	b.n	23fdbba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fdbe8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdbe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdbea:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdbec:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdbf0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdbf2:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdbf4:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fdbf6:	f7ff fcb1 	bl	23fd55c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fdbfa:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fdbfe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fdc02:	4293      	cmp	r3, r2
 23fdc04:	4619      	mov	r1, r3
 23fdc06:	d00a      	beq.n	23fdc1e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fdc08:	6809      	ldr	r1, [r1, #0]
 23fdc0a:	3304      	adds	r3, #4
 23fdc0c:	42a9      	cmp	r1, r5
 23fdc0e:	d1f8      	bne.n	23fdc02 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fdc10:	a801      	add	r0, sp, #4
 23fdc12:	f7ff ff0e 	bl	23fda32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdc16:	2500      	movs	r5, #0
}
 23fdc18:	4628      	mov	r0, r5
 23fdc1a:	b003      	add	sp, #12
 23fdc1c:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fdc1e:	4629      	mov	r1, r5
 23fdc20:	4620      	mov	r0, r4
 23fdc22:	f7ff ffbb 	bl	23fdb9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fdc26:	4605      	mov	r5, r0
 23fdc28:	2800      	cmp	r0, #0
 23fdc2a:	d0f1      	beq.n	23fdc10 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fdc2c:	6863      	ldr	r3, [r4, #4]
 23fdc2e:	2b01      	cmp	r3, #1
 23fdc30:	d101      	bne.n	23fdc36 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fdc32:	f7ff fe01 	bl	23fd838 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdc36:	a801      	add	r0, sp, #4
 23fdc38:	f7ff fefb 	bl	23fda32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdc3c:	e7ec      	b.n	23fdc18 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fdc3e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fdc3e:	460b      	mov	r3, r1
 23fdc40:	b570      	push	{r4, r5, r6, lr}
 23fdc42:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fdc44:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fdc48:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fdc4c:	4282      	cmp	r2, r0
 23fdc4e:	d00f      	beq.n	23fdc70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fdc50:	4601      	mov	r1, r0
            if (*p == value) {
 23fdc52:	681d      	ldr	r5, [r3, #0]
 23fdc54:	f851 6b04 	ldr.w	r6, [r1], #4
 23fdc58:	42ae      	cmp	r6, r5
 23fdc5a:	d107      	bne.n	23fdc6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdc5c:	1a52      	subs	r2, r2, r1
 23fdc5e:	f001 fa12 	bl	23ff086 <memmove>
    return true;
 23fdc62:	2001      	movs	r0, #1
    --size_;
 23fdc64:	6863      	ldr	r3, [r4, #4]
 23fdc66:	3b01      	subs	r3, #1
 23fdc68:	6063      	str	r3, [r4, #4]
}
 23fdc6a:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fdc6c:	4608      	mov	r0, r1
 23fdc6e:	e7ed      	b.n	23fdc4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fdc70:	2000      	movs	r0, #0
 23fdc72:	e7fa      	b.n	23fdc6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fdc74 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdc74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fdc76:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdc78:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdc7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdc7e:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdc80:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fdc82:	f7ff fc6b 	bl	23fd55c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fdc86:	4620      	mov	r0, r4
 23fdc88:	a901      	add	r1, sp, #4
 23fdc8a:	f7ff ffd8 	bl	23fdc3e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fdc8e:	b118      	cbz	r0, 23fdc98 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fdc90:	6863      	ldr	r3, [r4, #4]
 23fdc92:	b90b      	cbnz	r3, 23fdc98 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fdc94:	f7ff fddc 	bl	23fd850 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdc98:	a803      	add	r0, sp, #12
 23fdc9a:	f7ff feca 	bl	23fda32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdc9e:	b004      	add	sp, #16
 23fdca0:	bd10      	pop	{r4, pc}

023fdca2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fdca2:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fdca4:	b570      	push	{r4, r5, r6, lr}
 23fdca6:	4604      	mov	r4, r0
 23fdca8:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fdcac:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdcb0:	42ae      	cmp	r6, r5
 23fdcb2:	d015      	beq.n	23fdce0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fdcb4:	4620      	mov	r0, r4
 23fdcb6:	f105 0110 	add.w	r1, r5, #16
 23fdcba:	f7ff ffc0 	bl	23fdc3e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fdcbe:	6863      	ldr	r3, [r4, #4]
 23fdcc0:	b90b      	cbnz	r3, 23fdcc6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fdcc2:	f7ff fdc5 	bl	23fd850 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fdcc6:	69e0      	ldr	r0, [r4, #28]
 23fdcc8:	6929      	ldr	r1, [r5, #16]
 23fdcca:	6803      	ldr	r3, [r0, #0]
 23fdccc:	68db      	ldr	r3, [r3, #12]
 23fdcce:	4798      	blx	r3
        if (h.stream) {
 23fdcd0:	6969      	ldr	r1, [r5, #20]
 23fdcd2:	b119      	cbz	r1, 23fdcdc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fdcd4:	6a20      	ldr	r0, [r4, #32]
 23fdcd6:	6803      	ldr	r3, [r0, #0]
 23fdcd8:	68db      	ldr	r3, [r3, #12]
 23fdcda:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdcdc:	3518      	adds	r5, #24
 23fdcde:	e7e7      	b.n	23fdcb0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fdce0:	2618      	movs	r6, #24
 23fdce2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdce6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdcea:	42ae      	cmp	r6, r5
 23fdcec:	d004      	beq.n	23fdcf8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fdcee:	4628      	mov	r0, r5
 23fdcf0:	f000 fd67 	bl	23fe7c2 <_ZN6StringD1Ev>
 23fdcf4:	3518      	adds	r5, #24
 23fdcf6:	e7f8      	b.n	23fdcea <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fdcf8:	2300      	movs	r3, #0
 23fdcfa:	6163      	str	r3, [r4, #20]
}
 23fdcfc:	bd70      	pop	{r4, r5, r6, pc}

023fdcfe <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fdcfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fdd00:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fdd02:	f7ff fda5 	bl	23fd850 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdd06:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fdd0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdd0c:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdd0e:	f7ff fc25 	bl	23fd55c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fdd12:	4620      	mov	r0, r4
 23fdd14:	f7ff ffc5 	bl	23fdca2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fdd18:	a801      	add	r0, sp, #4
 23fdd1a:	f7ff fe8a 	bl	23fda32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fdd1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fdd20:	b108      	cbz	r0, 23fdd26 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fdd22:	f7fe fc0b 	bl	23fc53c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fdd26:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdd2a:	2618      	movs	r6, #24
 23fdd2c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdd30:	42ae      	cmp	r6, r5
 23fdd32:	d004      	beq.n	23fdd3e <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fdd34:	4628      	mov	r0, r5
 23fdd36:	f000 fd44 	bl	23fe7c2 <_ZN6StringD1Ev>
 23fdd3a:	3518      	adds	r5, #24
 23fdd3c:	e7f8      	b.n	23fdd30 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fdd3e:	6920      	ldr	r0, [r4, #16]
 23fdd40:	f7ff f824 	bl	23fcd8c <free>
 23fdd44:	6820      	ldr	r0, [r4, #0]
 23fdd46:	f7ff f821 	bl	23fcd8c <free>
}
 23fdd4a:	4620      	mov	r0, r4
 23fdd4c:	b002      	add	sp, #8
 23fdd4e:	bd70      	pop	{r4, r5, r6, pc}

023fdd50 <__tcf_2>:
    static LogManager mgr;
 23fdd50:	4801      	ldr	r0, [pc, #4]	; (23fdd58 <__tcf_2+0x8>)
 23fdd52:	f7ff bfd4 	b.w	23fdcfe <_ZN5spark10LogManagerD1Ev>
 23fdd56:	bf00      	nop
 23fdd58:	1007ae78 	.word	0x1007ae78

023fdd5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fdd5c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fdd5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdd60:	4604      	mov	r4, r0
 23fdd62:	460d      	mov	r5, r1
 23fdd64:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fdd66:	d915      	bls.n	23fdd94 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fdd68:	4290      	cmp	r0, r2
 23fdd6a:	d214      	bcs.n	23fdd96 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fdd6c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fdd70:	1a75      	subs	r5, r6, r1
 23fdd72:	f1a1 0714 	sub.w	r7, r1, #20
 23fdd76:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fdd78:	42b7      	cmp	r7, r6
 23fdd7a:	d01a      	beq.n	23fddb2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fdd7c:	b11c      	cbz	r4, 23fdd86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fdd7e:	4631      	mov	r1, r6
 23fdd80:	4620      	mov	r0, r4
 23fdd82:	f7ff fc45 	bl	23fd610 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fdd86:	f106 0008 	add.w	r0, r6, #8
 23fdd8a:	f7ff fdfb 	bl	23fd984 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fdd8e:	3e14      	subs	r6, #20
 23fdd90:	3c14      	subs	r4, #20
 23fdd92:	e7f1      	b.n	23fdd78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fdd94:	d00d      	beq.n	23fddb2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fdd96:	42b5      	cmp	r5, r6
 23fdd98:	d00b      	beq.n	23fddb2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fdd9a:	b11c      	cbz	r4, 23fdda4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fdd9c:	4629      	mov	r1, r5
 23fdd9e:	4620      	mov	r0, r4
 23fdda0:	f7ff fc36 	bl	23fd610 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fdda4:	f105 0008 	add.w	r0, r5, #8
 23fdda8:	f7ff fdec 	bl	23fd984 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fddac:	3514      	adds	r5, #20
 23fddae:	3414      	adds	r4, #20
 23fddb0:	e7f1      	b.n	23fdd96 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fddb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fddb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fddb4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fddb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fddb8:	4604      	mov	r4, r0
 23fddba:	460d      	mov	r5, r1
 23fddbc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fddbe:	d914      	bls.n	23fddea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fddc0:	4290      	cmp	r0, r2
 23fddc2:	d213      	bcs.n	23fddec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fddc4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fddc8:	1a75      	subs	r5, r6, r1
 23fddca:	f1a1 0710 	sub.w	r7, r1, #16
 23fddce:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fddd0:	42b7      	cmp	r7, r6
 23fddd2:	d018      	beq.n	23fde06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fddd4:	b11c      	cbz	r4, 23fddde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fddd6:	4631      	mov	r1, r6
 23fddd8:	4620      	mov	r0, r4
 23fddda:	f000 fd6f 	bl	23fe8bc <_ZN6StringC1EOS_>
                end->~T();
 23fddde:	4630      	mov	r0, r6
 23fdde0:	f000 fcef 	bl	23fe7c2 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fdde4:	3e10      	subs	r6, #16
 23fdde6:	3c10      	subs	r4, #16
 23fdde8:	e7f2      	b.n	23fddd0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fddea:	d00c      	beq.n	23fde06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fddec:	42b5      	cmp	r5, r6
 23fddee:	d00a      	beq.n	23fde06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fddf0:	b11c      	cbz	r4, 23fddfa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fddf2:	4629      	mov	r1, r5
 23fddf4:	4620      	mov	r0, r4
 23fddf6:	f000 fd61 	bl	23fe8bc <_ZN6StringC1EOS_>
                p->~T();
 23fddfa:	4628      	mov	r0, r5
 23fddfc:	f000 fce1 	bl	23fe7c2 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fde00:	3510      	adds	r5, #16
 23fde02:	3410      	adds	r4, #16
 23fde04:	e7f2      	b.n	23fddec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fde06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fde08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fde08:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fde0a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fde0c:	4605      	mov	r5, r0
        if (n > 0) {
 23fde0e:	dd11      	ble.n	23fde34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fde10:	0130      	lsls	r0, r6, #4
 23fde12:	f7fe ffad 	bl	23fcd70 <malloc>
            if (!d) {
 23fde16:	4604      	mov	r4, r0
 23fde18:	b158      	cbz	r0, 23fde32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fde1a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fde1e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fde22:	f7ff ffc7 	bl	23fddb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fde26:	6828      	ldr	r0, [r5, #0]
 23fde28:	f7fe ffb0 	bl	23fcd8c <free>
        return true;
 23fde2c:	2001      	movs	r0, #1
        data_ = d;
 23fde2e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fde30:	60ae      	str	r6, [r5, #8]
    }
 23fde32:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fde34:	2400      	movs	r4, #0
 23fde36:	e7f6      	b.n	23fde26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fde38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fde38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fde3c:	4690      	mov	r8, r2
        capacity_(0) {
 23fde3e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fde40:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fde42:	b095      	sub	sp, #84	; 0x54
 23fde44:	9103      	str	r1, [sp, #12]
    return size_;
 23fde46:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fde4a:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fde4c:	4299      	cmp	r1, r3
        capacity_(0) {
 23fde4e:	e9c0 3300 	strd	r3, r3, [r0]
 23fde52:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fde56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fde5a:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fde5e:	7602      	strb	r2, [r0, #24]
 23fde60:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fde62:	dc23      	bgt.n	23fdeac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fde64:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fde68:	2314      	movs	r3, #20
 23fde6a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fde6e:	42af      	cmp	r7, r5
 23fde70:	d03b      	beq.n	23fdeea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fde72:	4629      	mov	r1, r5
 23fde74:	a80b      	add	r0, sp, #44	; 0x2c
 23fde76:	f000 fd21 	bl	23fe8bc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fde7a:	a90b      	add	r1, sp, #44	; 0x2c
 23fde7c:	a80f      	add	r0, sp, #60	; 0x3c
 23fde7e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fde80:	f000 fd1c 	bl	23fe8bc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fde84:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fde88:	4299      	cmp	r1, r3
 23fde8a:	da1b      	bge.n	23fdec4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fde8c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fde8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fde90:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fde94:	4631      	mov	r1, r6
 23fde96:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fde9a:	f106 0010 	add.w	r0, r6, #16
 23fde9e:	f7ff ff89 	bl	23fddb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fdea2:	b9ee      	cbnz	r6, 23fdee0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fdea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdea6:	3301      	adds	r3, #1
 23fdea8:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fdeaa:	e011      	b.n	23fded0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fdeac:	a808      	add	r0, sp, #32
 23fdeae:	f7ff ffab 	bl	23fde08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdeb2:	2800      	cmp	r0, #0
 23fdeb4:	d1d6      	bne.n	23fde64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fdeb6:	a808      	add	r0, sp, #32
 23fdeb8:	f7fe ffe9 	bl	23fce8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdebc:	4620      	mov	r0, r4
 23fdebe:	b015      	add	sp, #84	; 0x54
 23fdec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdec4:	3101      	adds	r1, #1
 23fdec6:	a808      	add	r0, sp, #32
 23fdec8:	f7ff ff9e 	bl	23fde08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdecc:	2800      	cmp	r0, #0
 23fdece:	d1dd      	bne.n	23fde8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fded0:	a80f      	add	r0, sp, #60	; 0x3c
 23fded2:	f000 fc76 	bl	23fe7c2 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fded6:	a80b      	add	r0, sp, #44	; 0x2c
 23fded8:	f000 fc73 	bl	23fe7c2 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fdedc:	3514      	adds	r5, #20
 23fdede:	e7c6      	b.n	23fde6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fdee0:	4630      	mov	r0, r6
 23fdee2:	a90f      	add	r1, sp, #60	; 0x3c
 23fdee4:	f000 fcea 	bl	23fe8bc <_ZN6StringC1EOS_>
 23fdee8:	e7dc      	b.n	23fdea4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fdeea:	2600      	movs	r6, #0
 23fdeec:	f04f 0914 	mov.w	r9, #20
 23fdef0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fdef4:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fdef6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fdefa:	429e      	cmp	r6, r3
 23fdefc:	da7c      	bge.n	23fdff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fdefe:	0133      	lsls	r3, r6, #4
 23fdf00:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fdf02:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fdf04:	b90b      	cbnz	r3, 23fdf0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fdf06:	3601      	adds	r6, #1
 23fdf08:	e7f5      	b.n	23fdef6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fdf0a:	2300      	movs	r3, #0
 23fdf0c:	9307      	str	r3, [sp, #28]
 23fdf0e:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fdf12:	ad0b      	add	r5, sp, #44	; 0x2c
 23fdf14:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fdf16:	a907      	add	r1, sp, #28
 23fdf18:	a806      	add	r0, sp, #24
 23fdf1a:	f7ff faf8 	bl	23fd50e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdf1e:	4682      	mov	sl, r0
 23fdf20:	2800      	cmp	r0, #0
 23fdf22:	d0f0      	beq.n	23fdf06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fdf24:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdf28:	4601      	mov	r1, r0
            bool found = false;
 23fdf2a:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdf2e:	4628      	mov	r0, r5
 23fdf30:	9a07      	ldr	r2, [sp, #28]
 23fdf32:	f10d 0317 	add.w	r3, sp, #23
 23fdf36:	f7ff fb7f 	bl	23fd638 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdf3a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdf3e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdf40:	2f00      	cmp	r7, #0
 23fdf42:	d14a      	bne.n	23fdfda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fdf44:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fdf48:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fdf4c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fdf50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fdf54:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fdf58:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fdf5c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdf5e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fdf62:	4293      	cmp	r3, r2
 23fdf64:	db17      	blt.n	23fdf96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fdf66:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fdf6a:	f1ba 0f00 	cmp.w	sl, #0
 23fdf6e:	dd30      	ble.n	23fdfd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fdf70:	fb09 f00a 	mul.w	r0, r9, sl
 23fdf74:	f7fe fefc 	bl	23fcd70 <malloc>
            if (!d) {
 23fdf78:	4683      	mov	fp, r0
 23fdf7a:	b360      	cbz	r0, 23fdfd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fdf7c:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fdf80:	fb09 1202 	mla	r2, r9, r2, r1
 23fdf84:	f7ff feea 	bl	23fdd5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fdf88:	6828      	ldr	r0, [r5, #0]
 23fdf8a:	f7fe feff 	bl	23fcd8c <free>
        data_ = d;
 23fdf8e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fdf92:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fdf96:	682b      	ldr	r3, [r5, #0]
 23fdf98:	9a01      	ldr	r2, [sp, #4]
 23fdf9a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fdf9e:	686a      	ldr	r2, [r5, #4]
 23fdfa0:	4651      	mov	r1, sl
 23fdfa2:	fb09 3202 	mla	r2, r9, r2, r3
 23fdfa6:	f10a 0014 	add.w	r0, sl, #20
 23fdfaa:	f7ff fed7 	bl	23fdd5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fdfae:	f1ba 0f00 	cmp.w	sl, #0
 23fdfb2:	d003      	beq.n	23fdfbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fdfb4:	4650      	mov	r0, sl
 23fdfb6:	a90f      	add	r1, sp, #60	; 0x3c
 23fdfb8:	f7ff fb2a 	bl	23fd610 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fdfbc:	686b      	ldr	r3, [r5, #4]
 23fdfbe:	3301      	adds	r3, #1
 23fdfc0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fdfc2:	a811      	add	r0, sp, #68	; 0x44
 23fdfc4:	f7ff fcde 	bl	23fd984 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdfc8:	b13f      	cbz	r7, 23fdfda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fdfca:	a80b      	add	r0, sp, #44	; 0x2c
 23fdfcc:	f7ff fcda 	bl	23fd984 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fdfd0:	e771      	b.n	23fdeb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fdfd2:	46bb      	mov	fp, r7
 23fdfd4:	e7d8      	b.n	23fdf88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdfd6:	2701      	movs	r7, #1
 23fdfd8:	e7f3      	b.n	23fdfc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fdfda:	9b01      	ldr	r3, [sp, #4]
 23fdfdc:	682d      	ldr	r5, [r5, #0]
 23fdfde:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fdfe2:	9b06      	ldr	r3, [sp, #24]
 23fdfe4:	781b      	ldrb	r3, [r3, #0]
 23fdfe6:	b92b      	cbnz	r3, 23fdff4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fdfe8:	f8d8 3000 	ldr.w	r3, [r8]
 23fdfec:	9a02      	ldr	r2, [sp, #8]
 23fdfee:	4413      	add	r3, r2
 23fdff0:	7c1b      	ldrb	r3, [r3, #16]
 23fdff2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fdff4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fdff6:	e78e      	b.n	23fdf16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdff8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdffa:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdffc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdffe:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe000:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe002:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe006:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe008:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe00a:	60a2      	str	r2, [r4, #8]
 23fe00c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe00e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe010:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe012:	60e2      	str	r2, [r4, #12]
 23fe014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe016:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe018:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe01a:	6122      	str	r2, [r4, #16]
 23fe01c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe01e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe020:	9b03      	ldr	r3, [sp, #12]
 23fe022:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe024:	6162      	str	r2, [r4, #20]
 23fe026:	7623      	strb	r3, [r4, #24]
 23fe028:	e7cf      	b.n	23fdfca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe02c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe02e:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe030:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe032:	4617      	mov	r7, r2
 23fe034:	b087      	sub	sp, #28
 23fe036:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe038:	4668      	mov	r0, sp
 23fe03a:	4619      	mov	r1, r3
 23fe03c:	f7fd f9ef 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe040:	4b0b      	ldr	r3, [pc, #44]	; (23fe070 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe042:	4669      	mov	r1, sp
 23fe044:	f846 3b04 	str.w	r3, [r6], #4
 23fe048:	a803      	add	r0, sp, #12
 23fe04a:	f7fd f9e8 	bl	23fb41e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe04e:	4639      	mov	r1, r7
 23fe050:	aa03      	add	r2, sp, #12
 23fe052:	4630      	mov	r0, r6
 23fe054:	f7ff fef0 	bl	23fde38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe058:	a803      	add	r0, sp, #12
 23fe05a:	f7fd f99f 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe05e:	4668      	mov	r0, sp
 23fe060:	f7fd f99c 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe064:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe066:	4b03      	ldr	r3, [pc, #12]	; (23fe074 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe068:	6225      	str	r5, [r4, #32]
 23fe06a:	6023      	str	r3, [r4, #0]
}
 23fe06c:	b007      	add	sp, #28
 23fe06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe070:	023ff444 	.word	0x023ff444
 23fe074:	023ffd08 	.word	0x023ffd08

023fe078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe078:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe07a:	460f      	mov	r7, r1
 23fe07c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe07e:	4638      	mov	r0, r7
 23fe080:	491c      	ldr	r1, [pc, #112]	; (23fe0f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe082:	4616      	mov	r6, r2
 23fe084:	461d      	mov	r5, r3
 23fe086:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe088:	f7fc ff24 	bl	23faed4 <strcmp>
 23fe08c:	b9c0      	cbnz	r0, 23fe0c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe08e:	b1a4      	cbz	r4, 23fe0ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe090:	4629      	mov	r1, r5
 23fe092:	a801      	add	r0, sp, #4
 23fe094:	f7ff fcbe 	bl	23fda14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe098:	2024      	movs	r0, #36	; 0x24
 23fe09a:	4917      	ldr	r1, [pc, #92]	; (23fe0f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe09c:	f000 ffa8 	bl	23feff0 <_ZnwjRKSt9nothrow_t>
 23fe0a0:	4605      	mov	r5, r0
 23fe0a2:	b130      	cbz	r0, 23fe0b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe0a4:	ab01      	add	r3, sp, #4
 23fe0a6:	4632      	mov	r2, r6
 23fe0a8:	4621      	mov	r1, r4
 23fe0aa:	f7ff ffbf 	bl	23fe02c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe0ae:	4b13      	ldr	r3, [pc, #76]	; (23fe0fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe0b0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe0b2:	a801      	add	r0, sp, #4
 23fe0b4:	f7fd f972 	bl	23fb39c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe0b8:	462c      	mov	r4, r5
}
 23fe0ba:	4620      	mov	r0, r4
 23fe0bc:	b005      	add	sp, #20
 23fe0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe0c0:	4638      	mov	r0, r7
 23fe0c2:	490f      	ldr	r1, [pc, #60]	; (23fe100 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe0c4:	f7fc ff06 	bl	23faed4 <strcmp>
 23fe0c8:	b990      	cbnz	r0, 23fe0f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe0ca:	2c00      	cmp	r4, #0
 23fe0cc:	d0f5      	beq.n	23fe0ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe0ce:	4629      	mov	r1, r5
 23fe0d0:	a801      	add	r0, sp, #4
 23fe0d2:	f7ff fc9f 	bl	23fda14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe0d6:	2024      	movs	r0, #36	; 0x24
 23fe0d8:	4907      	ldr	r1, [pc, #28]	; (23fe0f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe0da:	f000 ff89 	bl	23feff0 <_ZnwjRKSt9nothrow_t>
 23fe0de:	4605      	mov	r5, r0
 23fe0e0:	2800      	cmp	r0, #0
 23fe0e2:	d0e6      	beq.n	23fe0b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe0e4:	4632      	mov	r2, r6
 23fe0e6:	4621      	mov	r1, r4
 23fe0e8:	ab01      	add	r3, sp, #4
 23fe0ea:	f7ff ff9f 	bl	23fe02c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe0ee:	e7e0      	b.n	23fe0b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe0f0:	2400      	movs	r4, #0
 23fe0f2:	e7e2      	b.n	23fe0ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe0f4:	023ffc8d 	.word	0x023ffc8d
 23fe0f8:	023ffe5c 	.word	0x023ffe5c
 23fe0fc:	023ffd20 	.word	0x023ffd20
 23fe100:	023ffc91 	.word	0x023ffc91

023fe104 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe104:	4b01      	ldr	r3, [pc, #4]	; (23fe10c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe106:	4a02      	ldr	r2, [pc, #8]	; (23fe110 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe108:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe10a:	4770      	bx	lr
 23fe10c:	1007ae74 	.word	0x1007ae74
 23fe110:	023ffca2 	.word	0x023ffca2

023fe114 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe118:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe11a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe11e:	4604      	mov	r4, r0
 23fe120:	460e      	mov	r6, r1
 23fe122:	4617      	mov	r7, r2
 23fe124:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe126:	f000 fccd 	bl	23feac4 <_Z16_fetch_usbserialv>
 23fe12a:	4581      	cmp	r9, r0
 23fe12c:	d04d      	beq.n	23fe1ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe12e:	792b      	ldrb	r3, [r5, #4]
 23fe130:	0719      	lsls	r1, r3, #28
 23fe132:	d504      	bpl.n	23fe13e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe134:	4620      	mov	r0, r4
 23fe136:	696a      	ldr	r2, [r5, #20]
 23fe138:	4954      	ldr	r1, [pc, #336]	; (23fe28c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe13a:	f7ff fae2 	bl	23fd702 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe13e:	f1b8 0f00 	cmp.w	r8, #0
 23fe142:	d00d      	beq.n	23fe160 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe144:	215b      	movs	r1, #91	; 0x5b
 23fe146:	4620      	mov	r0, r4
 23fe148:	f7ff fa56 	bl	23fd5f8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe14c:	4641      	mov	r1, r8
 23fe14e:	4620      	mov	r0, r4
 23fe150:	f7ff fa43 	bl	23fd5da <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe154:	6823      	ldr	r3, [r4, #0]
 23fe156:	2202      	movs	r2, #2
 23fe158:	4620      	mov	r0, r4
 23fe15a:	68db      	ldr	r3, [r3, #12]
 23fe15c:	494c      	ldr	r1, [pc, #304]	; (23fe290 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe15e:	4798      	blx	r3
    if (attr.has_file) {
 23fe160:	792b      	ldrb	r3, [r5, #4]
 23fe162:	07da      	lsls	r2, r3, #31
 23fe164:	d524      	bpl.n	23fe1b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe166:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe16a:	212f      	movs	r1, #47	; 0x2f
 23fe16c:	4640      	mov	r0, r8
 23fe16e:	f001 f80e 	bl	23ff18e <strrchr>
    if (s1) {
 23fe172:	b108      	cbz	r0, 23fe178 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe174:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe178:	4641      	mov	r1, r8
 23fe17a:	4620      	mov	r0, r4
 23fe17c:	f7ff fa2d 	bl	23fd5da <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe180:	792b      	ldrb	r3, [r5, #4]
 23fe182:	079b      	lsls	r3, r3, #30
 23fe184:	d508      	bpl.n	23fe198 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe186:	213a      	movs	r1, #58	; 0x3a
 23fe188:	4620      	mov	r0, r4
 23fe18a:	f7ff fa35 	bl	23fd5f8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe18e:	4620      	mov	r0, r4
 23fe190:	68ea      	ldr	r2, [r5, #12]
 23fe192:	4940      	ldr	r1, [pc, #256]	; (23fe294 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe194:	f7ff fab5 	bl	23fd702 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe198:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe19a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe19c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe1a0:	4620      	mov	r0, r4
            write(", ", 2);
 23fe1a2:	f04f 0202 	mov.w	r2, #2
 23fe1a6:	68db      	ldr	r3, [r3, #12]
 23fe1a8:	bf14      	ite	ne
 23fe1aa:	493b      	ldrne	r1, [pc, #236]	; (23fe298 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe1ac:	493b      	ldreq	r1, [pc, #236]	; (23fe29c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe1ae:	4798      	blx	r3
    if (attr.has_function) {
 23fe1b0:	792b      	ldrb	r3, [r5, #4]
 23fe1b2:	0758      	lsls	r0, r3, #29
 23fe1b4:	d51d      	bpl.n	23fe1f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe1b6:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe1b8:	460b      	mov	r3, r1
 23fe1ba:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe1bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe1c0:	b160      	cbz	r0, 23fe1dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe1c2:	2820      	cmp	r0, #32
 23fe1c4:	d108      	bne.n	23fe1d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe1c6:	4619      	mov	r1, r3
 23fe1c8:	e7f7      	b.n	23fe1ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe1ca:	4835      	ldr	r0, [pc, #212]	; (23fe2a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe1cc:	f000 f983 	bl	23fe4d6 <_ZN5spark12NetworkClass9listeningEv>
 23fe1d0:	2800      	cmp	r0, #0
 23fe1d2:	d0ac      	beq.n	23fe12e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe1d8:	2828      	cmp	r0, #40	; 0x28
 23fe1da:	d1ee      	bne.n	23fe1ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe1dc:	6823      	ldr	r3, [r4, #0]
 23fe1de:	1a52      	subs	r2, r2, r1
 23fe1e0:	4620      	mov	r0, r4
 23fe1e2:	68db      	ldr	r3, [r3, #12]
 23fe1e4:	4798      	blx	r3
        write("(): ", 4);
 23fe1e6:	6823      	ldr	r3, [r4, #0]
 23fe1e8:	2204      	movs	r2, #4
 23fe1ea:	4620      	mov	r0, r4
 23fe1ec:	68db      	ldr	r3, [r3, #12]
 23fe1ee:	492d      	ldr	r1, [pc, #180]	; (23fe2a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe1f0:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe1f2:	2100      	movs	r1, #0
 23fe1f4:	4638      	mov	r0, r7
 23fe1f6:	f7fe fca3 	bl	23fcb40 <log_level_name>
 23fe1fa:	4601      	mov	r1, r0
    write(s);
 23fe1fc:	4620      	mov	r0, r4
 23fe1fe:	f7ff f9ec 	bl	23fd5da <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe202:	6823      	ldr	r3, [r4, #0]
 23fe204:	2202      	movs	r2, #2
 23fe206:	4620      	mov	r0, r4
 23fe208:	68db      	ldr	r3, [r3, #12]
 23fe20a:	4924      	ldr	r1, [pc, #144]	; (23fe29c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe20c:	4798      	blx	r3
    if (msg) {
 23fe20e:	b11e      	cbz	r6, 23fe218 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe210:	4631      	mov	r1, r6
 23fe212:	4620      	mov	r0, r4
 23fe214:	f7ff f9e1 	bl	23fd5da <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe218:	792b      	ldrb	r3, [r5, #4]
 23fe21a:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe21e:	d02c      	beq.n	23fe27a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe220:	6823      	ldr	r3, [r4, #0]
 23fe222:	4921      	ldr	r1, [pc, #132]	; (23fe2a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe224:	68db      	ldr	r3, [r3, #12]
 23fe226:	2202      	movs	r2, #2
 23fe228:	4620      	mov	r0, r4
 23fe22a:	4798      	blx	r3
        if (attr.has_code) {
 23fe22c:	792b      	ldrb	r3, [r5, #4]
 23fe22e:	06d9      	lsls	r1, r3, #27
 23fe230:	d50a      	bpl.n	23fe248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe232:	6823      	ldr	r3, [r4, #0]
 23fe234:	2207      	movs	r2, #7
 23fe236:	4620      	mov	r0, r4
 23fe238:	491c      	ldr	r1, [pc, #112]	; (23fe2ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe23a:	68db      	ldr	r3, [r3, #12]
 23fe23c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe23e:	4620      	mov	r0, r4
 23fe240:	69aa      	ldr	r2, [r5, #24]
 23fe242:	491b      	ldr	r1, [pc, #108]	; (23fe2b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe244:	f7ff fa5d 	bl	23fd702 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe248:	792b      	ldrb	r3, [r5, #4]
 23fe24a:	069a      	lsls	r2, r3, #26
 23fe24c:	d511      	bpl.n	23fe272 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe24e:	06db      	lsls	r3, r3, #27
 23fe250:	d505      	bpl.n	23fe25e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe252:	6823      	ldr	r3, [r4, #0]
 23fe254:	2202      	movs	r2, #2
 23fe256:	4620      	mov	r0, r4
 23fe258:	68db      	ldr	r3, [r3, #12]
 23fe25a:	490f      	ldr	r1, [pc, #60]	; (23fe298 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe25c:	4798      	blx	r3
            write("details = ", 10);
 23fe25e:	6823      	ldr	r3, [r4, #0]
 23fe260:	4620      	mov	r0, r4
 23fe262:	4914      	ldr	r1, [pc, #80]	; (23fe2b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe264:	220a      	movs	r2, #10
 23fe266:	68db      	ldr	r3, [r3, #12]
 23fe268:	4798      	blx	r3
            write(attr.details);
 23fe26a:	4620      	mov	r0, r4
 23fe26c:	69e9      	ldr	r1, [r5, #28]
 23fe26e:	f7ff f9b4 	bl	23fd5da <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe272:	215d      	movs	r1, #93	; 0x5d
 23fe274:	4620      	mov	r0, r4
 23fe276:	f7ff f9bf 	bl	23fd5f8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe27a:	6823      	ldr	r3, [r4, #0]
 23fe27c:	4620      	mov	r0, r4
}
 23fe27e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe282:	2202      	movs	r2, #2
 23fe284:	68db      	ldr	r3, [r3, #12]
 23fe286:	490c      	ldr	r1, [pc, #48]	; (23fe2b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe288:	4718      	bx	r3
 23fe28a:	bf00      	nop
 23fe28c:	023ffca6 	.word	0x023ffca6
 23fe290:	023ffcad 	.word	0x023ffcad
 23fe294:	023ff3db 	.word	0x023ff3db
 23fe298:	023ffcb0 	.word	0x023ffcb0
 23fe29c:	023ffcb5 	.word	0x023ffcb5
 23fe2a0:	1007aea0 	.word	0x1007aea0
 23fe2a4:	023ffcb3 	.word	0x023ffcb3
 23fe2a8:	023ffcb8 	.word	0x023ffcb8
 23fe2ac:	023ffcbb 	.word	0x023ffcbb
 23fe2b0:	023ffcc3 	.word	0x023ffcc3
 23fe2b4:	023ffcc6 	.word	0x023ffcc6
 23fe2b8:	023ffcd1 	.word	0x023ffcd1

023fe2bc <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe2c0:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe2c2:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe2c4:	460d      	mov	r5, r1
 23fe2c6:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe2c8:	f000 fbfc 	bl	23feac4 <_Z16_fetch_usbserialv>
 23fe2cc:	4287      	cmp	r7, r0
 23fe2ce:	d007      	beq.n	23fe2e0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe2d0:	6a20      	ldr	r0, [r4, #32]
 23fe2d2:	4632      	mov	r2, r6
 23fe2d4:	6803      	ldr	r3, [r0, #0]
 23fe2d6:	4629      	mov	r1, r5
}
 23fe2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe2dc:	68db      	ldr	r3, [r3, #12]
 23fe2de:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe2e0:	4803      	ldr	r0, [pc, #12]	; (23fe2f0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe2e2:	f000 f8f8 	bl	23fe4d6 <_ZN5spark12NetworkClass9listeningEv>
 23fe2e6:	2800      	cmp	r0, #0
 23fe2e8:	d0f2      	beq.n	23fe2d0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe2ee:	bf00      	nop
 23fe2f0:	1007aea0 	.word	0x1007aea0

023fe2f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe2f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe2f8:	b085      	sub	sp, #20
    return stream_;
 23fe2fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe2fe:	4605      	mov	r5, r0
 23fe300:	460f      	mov	r7, r1
 23fe302:	4690      	mov	r8, r2
 23fe304:	461e      	mov	r6, r3
 23fe306:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe308:	f000 fbdc 	bl	23feac4 <_Z16_fetch_usbserialv>
 23fe30c:	4581      	cmp	r9, r0
 23fe30e:	d105      	bne.n	23fe31c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe310:	4849      	ldr	r0, [pc, #292]	; (23fe438 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe312:	f000 f8e0 	bl	23fe4d6 <_ZN5spark12NetworkClass9listeningEv>
 23fe316:	2800      	cmp	r0, #0
 23fe318:	f040 808a 	bne.w	23fe430 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe31c:	f04f 0900 	mov.w	r9, #0
 23fe320:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fe322:	4a46      	ldr	r2, [pc, #280]	; (23fe43c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe324:	a801      	add	r0, sp, #4
 23fe326:	9201      	str	r2, [sp, #4]
 23fe328:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fe32a:	f88d 9008 	strb.w	r9, [sp, #8]
 23fe32e:	f7ff f830 	bl	23fd392 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe332:	4649      	mov	r1, r9
 23fe334:	4640      	mov	r0, r8
 23fe336:	f7fe fc03 	bl	23fcb40 <log_level_name>
 23fe33a:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe33c:	4940      	ldr	r1, [pc, #256]	; (23fe440 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe33e:	2201      	movs	r2, #1
 23fe340:	a801      	add	r0, sp, #4
 23fe342:	f7ff f8b5 	bl	23fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe346:	4641      	mov	r1, r8
 23fe348:	f7ff f939 	bl	23fd5be <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe34c:	b13f      	cbz	r7, 23fe35e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fe34e:	493d      	ldr	r1, [pc, #244]	; (23fe444 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe350:	2201      	movs	r2, #1
 23fe352:	a801      	add	r0, sp, #4
 23fe354:	f7ff f8ac 	bl	23fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe358:	4639      	mov	r1, r7
 23fe35a:	f7ff f930 	bl	23fd5be <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe35e:	b13e      	cbz	r6, 23fe370 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fe360:	4939      	ldr	r1, [pc, #228]	; (23fe448 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe362:	2201      	movs	r2, #1
 23fe364:	a801      	add	r0, sp, #4
 23fe366:	f7ff f8a3 	bl	23fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe36a:	4631      	mov	r1, r6
 23fe36c:	f7ff f927 	bl	23fd5be <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe370:	7923      	ldrb	r3, [r4, #4]
 23fe372:	07df      	lsls	r7, r3, #31
 23fe374:	d50e      	bpl.n	23fe394 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fe376:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe378:	212f      	movs	r1, #47	; 0x2f
 23fe37a:	4630      	mov	r0, r6
 23fe37c:	f000 ff07 	bl	23ff18e <strrchr>
    if (s1) {
 23fe380:	b100      	cbz	r0, 23fe384 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fe382:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe384:	4931      	ldr	r1, [pc, #196]	; (23fe44c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe386:	2201      	movs	r2, #1
 23fe388:	a801      	add	r0, sp, #4
 23fe38a:	f7ff f891 	bl	23fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe38e:	4631      	mov	r1, r6
 23fe390:	f7ff f915 	bl	23fd5be <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe394:	7923      	ldrb	r3, [r4, #4]
 23fe396:	079e      	lsls	r6, r3, #30
 23fe398:	d507      	bpl.n	23fe3aa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fe39a:	492d      	ldr	r1, [pc, #180]	; (23fe450 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe39c:	2202      	movs	r2, #2
 23fe39e:	a801      	add	r0, sp, #4
 23fe3a0:	f7ff f886 	bl	23fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe3a4:	68e1      	ldr	r1, [r4, #12]
 23fe3a6:	f7ff f801 	bl	23fd3ac <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe3aa:	7923      	ldrb	r3, [r4, #4]
 23fe3ac:	0758      	lsls	r0, r3, #29
 23fe3ae:	d514      	bpl.n	23fe3da <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe3b0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe3b2:	4633      	mov	r3, r6
 23fe3b4:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe3b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe3ba:	b12a      	cbz	r2, 23fe3c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fe3bc:	2a20      	cmp	r2, #32
 23fe3be:	d101      	bne.n	23fe3c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fe3c0:	461e      	mov	r6, r3
 23fe3c2:	e7f7      	b.n	23fe3b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fe3c4:	2a28      	cmp	r2, #40	; 0x28
 23fe3c6:	d1f5      	bne.n	23fe3b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fe3c8:	2202      	movs	r2, #2
 23fe3ca:	4922      	ldr	r1, [pc, #136]	; (23fe454 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe3cc:	a801      	add	r0, sp, #4
 23fe3ce:	f7ff f86f 	bl	23fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe3d2:	4631      	mov	r1, r6
 23fe3d4:	1bba      	subs	r2, r7, r6
 23fe3d6:	f7ff f87b 	bl	23fd4d0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe3da:	7923      	ldrb	r3, [r4, #4]
 23fe3dc:	0719      	lsls	r1, r3, #28
 23fe3de:	d507      	bpl.n	23fe3f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fe3e0:	491d      	ldr	r1, [pc, #116]	; (23fe458 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe3e2:	2201      	movs	r2, #1
 23fe3e4:	a801      	add	r0, sp, #4
 23fe3e6:	f7ff f863 	bl	23fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe3ea:	6961      	ldr	r1, [r4, #20]
 23fe3ec:	f7fe fff0 	bl	23fd3d0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe3f0:	7923      	ldrb	r3, [r4, #4]
 23fe3f2:	06da      	lsls	r2, r3, #27
 23fe3f4:	d508      	bpl.n	23fe408 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe3f6:	2204      	movs	r2, #4
 23fe3f8:	4918      	ldr	r1, [pc, #96]	; (23fe45c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe3fa:	eb0d 0002 	add.w	r0, sp, r2
 23fe3fe:	f7ff f857 	bl	23fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe402:	69a1      	ldr	r1, [r4, #24]
 23fe404:	f7fe ffd2 	bl	23fd3ac <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe408:	7923      	ldrb	r3, [r4, #4]
 23fe40a:	069b      	lsls	r3, r3, #26
 23fe40c:	d507      	bpl.n	23fe41e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe40e:	4914      	ldr	r1, [pc, #80]	; (23fe460 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe410:	2206      	movs	r2, #6
 23fe412:	a801      	add	r0, sp, #4
 23fe414:	f7ff f84c 	bl	23fd4b0 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe418:	69e1      	ldr	r1, [r4, #28]
 23fe41a:	f7ff f8d0 	bl	23fd5be <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe41e:	a801      	add	r0, sp, #4
 23fe420:	f7fe ffa1 	bl	23fd366 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe424:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe426:	2202      	movs	r2, #2
 23fe428:	6803      	ldr	r3, [r0, #0]
 23fe42a:	490e      	ldr	r1, [pc, #56]	; (23fe464 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe42c:	68db      	ldr	r3, [r3, #12]
 23fe42e:	4798      	blx	r3
}
 23fe430:	b005      	add	sp, #20
 23fe432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe436:	bf00      	nop
 23fe438:	1007aea0 	.word	0x1007aea0
 23fe43c:	023ffcf0 	.word	0x023ffcf0
 23fe440:	023ffc83 	.word	0x023ffc83
 23fe444:	023ffcd4 	.word	0x023ffcd4
 23fe448:	023ffecb 	.word	0x023ffecb
 23fe44c:	023ff423 	.word	0x023ff423
 23fe450:	023ffcd6 	.word	0x023ffcd6
 23fe454:	023ffcd9 	.word	0x023ffcd9
 23fe458:	023ff409 	.word	0x023ff409
 23fe45c:	023ffcdc 	.word	0x023ffcdc
 23fe460:	023ffce1 	.word	0x023ffce1
 23fe464:	023ffcd1 	.word	0x023ffcd1

023fe468 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe468:	2300      	movs	r3, #0
 23fe46a:	6840      	ldr	r0, [r0, #4]
 23fe46c:	461a      	mov	r2, r3
 23fe46e:	f7fe bbd7 	b.w	23fcc20 <network_connect>

023fe472 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe472:	2200      	movs	r2, #0
 23fe474:	2102      	movs	r1, #2
 23fe476:	6840      	ldr	r0, [r0, #4]
 23fe478:	f7fe bbee 	b.w	23fcc58 <network_disconnect>

023fe47c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe47c:	2200      	movs	r2, #0
 23fe47e:	6840      	ldr	r0, [r0, #4]
 23fe480:	4611      	mov	r1, r2
 23fe482:	f7fe bbdb 	b.w	23fcc3c <network_connecting>

023fe486 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe486:	2200      	movs	r2, #0
 23fe488:	6840      	ldr	r0, [r0, #4]
 23fe48a:	4611      	mov	r1, r2
 23fe48c:	f7fe bbf2 	b.w	23fcc74 <network_ready>

023fe490 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe490:	2300      	movs	r3, #0
 23fe492:	6840      	ldr	r0, [r0, #4]
 23fe494:	461a      	mov	r2, r3
 23fe496:	4619      	mov	r1, r3
 23fe498:	f7fe bbfa 	b.w	23fcc90 <network_on>

023fe49c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe49c:	2300      	movs	r3, #0
 23fe49e:	6840      	ldr	r0, [r0, #4]
 23fe4a0:	461a      	mov	r2, r3
 23fe4a2:	4619      	mov	r1, r3
 23fe4a4:	f7fe bc02 	b.w	23fccac <network_off>

023fe4a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe4a8:	2100      	movs	r1, #0
 23fe4aa:	6840      	ldr	r0, [r0, #4]
 23fe4ac:	f7fe bc44 	b.w	23fcd38 <network_is_on>

023fe4b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe4b0:	2100      	movs	r1, #0
 23fe4b2:	6840      	ldr	r0, [r0, #4]
 23fe4b4:	f7fe bc4e 	b.w	23fcd54 <network_is_off>

023fe4b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe4b8:	2200      	movs	r2, #0
 23fe4ba:	6840      	ldr	r0, [r0, #4]
 23fe4bc:	f081 0101 	eor.w	r1, r1, #1
 23fe4c0:	f7fe bc02 	b.w	23fccc8 <network_listen>

023fe4c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe4c4:	2200      	movs	r2, #0
 23fe4c6:	6840      	ldr	r0, [r0, #4]
 23fe4c8:	f7fe bc1a 	b.w	23fcd00 <network_set_listen_timeout>

023fe4cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe4cc:	2200      	movs	r2, #0
 23fe4ce:	6840      	ldr	r0, [r0, #4]
 23fe4d0:	4611      	mov	r1, r2
 23fe4d2:	f7fe bc23 	b.w	23fcd1c <network_get_listen_timeout>

023fe4d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe4d6:	2200      	movs	r2, #0
 23fe4d8:	6840      	ldr	r0, [r0, #4]
 23fe4da:	4611      	mov	r1, r2
 23fe4dc:	f7fe bc02 	b.w	23fcce4 <network_listening>

023fe4e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe4e4:	b095      	sub	sp, #84	; 0x54
 23fe4e6:	4614      	mov	r4, r2
 23fe4e8:	460d      	mov	r5, r1
 23fe4ea:	4607      	mov	r7, r0
    IPAddress addr;
 23fe4ec:	f7fe fdea 	bl	23fd0c4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe4f0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe4f2:	221c      	movs	r2, #28
 23fe4f4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe4f6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe4f8:	f000 fddf 	bl	23ff0ba <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe4fc:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe4fe:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe500:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe502:	2100      	movs	r1, #0
 23fe504:	466b      	mov	r3, sp
 23fe506:	aa0c      	add	r2, sp, #48	; 0x30
 23fe508:	f7fe f984 	bl	23fc814 <netdb_getaddrinfo>
    if (!r) {
 23fe50c:	4604      	mov	r4, r0
 23fe50e:	2800      	cmp	r0, #0
 23fe510:	d14b      	bne.n	23fe5aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe512:	4602      	mov	r2, r0
 23fe514:	2101      	movs	r1, #1
 23fe516:	6868      	ldr	r0, [r5, #4]
 23fe518:	f7fe fbac 	bl	23fcc74 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe51c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe51e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe520:	4622      	mov	r2, r4
 23fe522:	6868      	ldr	r0, [r5, #4]
 23fe524:	f7fe fba6 	bl	23fcc74 <network_ready>
        bool ok = false;
 23fe528:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe52a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe52c:	9e00      	ldr	r6, [sp, #0]
 23fe52e:	2e00      	cmp	r6, #0
 23fe530:	d03b      	beq.n	23fe5aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe532:	2900      	cmp	r1, #0
 23fe534:	d139      	bne.n	23fe5aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe536:	6873      	ldr	r3, [r6, #4]
 23fe538:	2b02      	cmp	r3, #2
 23fe53a:	d003      	beq.n	23fe544 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe53c:	2b0a      	cmp	r3, #10
 23fe53e:	d011      	beq.n	23fe564 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe540:	69f6      	ldr	r6, [r6, #28]
 23fe542:	e7f4      	b.n	23fe52e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe544:	f1b8 0f00 	cmp.w	r8, #0
 23fe548:	d0fa      	beq.n	23fe540 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe54a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe54c:	a806      	add	r0, sp, #24
 23fe54e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe550:	1d3c      	adds	r4, r7, #4
 23fe552:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe554:	f7fe fde4 	bl	23fd120 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe55a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe55c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe55e:	4641      	mov	r1, r8
 23fe560:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe562:	e7ed      	b.n	23fe540 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe564:	f1b9 0f00 	cmp.w	r9, #0
 23fe568:	d0ea      	beq.n	23fe540 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe56a:	2210      	movs	r2, #16
 23fe56c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe56e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe570:	f000 fda3 	bl	23ff0ba <memset>
                    a.v = 6;
 23fe574:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe576:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe578:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe57c:	f104 0308 	add.w	r3, r4, #8
 23fe580:	3418      	adds	r4, #24
 23fe582:	462a      	mov	r2, r5
 23fe584:	6818      	ldr	r0, [r3, #0]
 23fe586:	6859      	ldr	r1, [r3, #4]
 23fe588:	3308      	adds	r3, #8
 23fe58a:	c203      	stmia	r2!, {r0, r1}
 23fe58c:	42a3      	cmp	r3, r4
 23fe58e:	4615      	mov	r5, r2
 23fe590:	d1f7      	bne.n	23fe582 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe592:	a901      	add	r1, sp, #4
 23fe594:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe596:	1d3c      	adds	r4, r7, #4
 23fe598:	ad07      	add	r5, sp, #28
 23fe59a:	f7fe fda1 	bl	23fd0e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe59e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe5a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe5a2:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe5a4:	4649      	mov	r1, r9
 23fe5a6:	7023      	strb	r3, [r4, #0]
                    break;
 23fe5a8:	e7ca      	b.n	23fe540 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe5aa:	9800      	ldr	r0, [sp, #0]
 23fe5ac:	f7fe f924 	bl	23fc7f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe5b0:	4638      	mov	r0, r7
 23fe5b2:	b015      	add	sp, #84	; 0x54
 23fe5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe5b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe5b8:	4b02      	ldr	r3, [pc, #8]	; (23fe5c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe5ba:	4a03      	ldr	r2, [pc, #12]	; (23fe5c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe5bc:	601a      	str	r2, [r3, #0]
 23fe5be:	2200      	movs	r2, #0
 23fe5c0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe5c2:	4770      	bx	lr
 23fe5c4:	1007aea0 	.word	0x1007aea0
 23fe5c8:	023ffd68 	.word	0x023ffd68

023fe5cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe5ce:	4606      	mov	r6, r0
 23fe5d0:	460d      	mov	r5, r1
  size_t n = 0;
 23fe5d2:	2400      	movs	r4, #0
 23fe5d4:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe5d6:	42bd      	cmp	r5, r7
 23fe5d8:	d00c      	beq.n	23fe5f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe5da:	6833      	ldr	r3, [r6, #0]
 23fe5dc:	4630      	mov	r0, r6
 23fe5de:	689b      	ldr	r3, [r3, #8]
 23fe5e0:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe5e4:	4798      	blx	r3
     if (chunk>=0)
 23fe5e6:	1e03      	subs	r3, r0, #0
 23fe5e8:	db01      	blt.n	23fe5ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe5ea:	441c      	add	r4, r3
  while (size--) {
 23fe5ec:	e7f3      	b.n	23fe5d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe5ee:	2c00      	cmp	r4, #0
 23fe5f0:	bf08      	it	eq
 23fe5f2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe5f4:	4620      	mov	r0, r4
 23fe5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe5f8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fe5f8:	b513      	push	{r0, r1, r4, lr}
 23fe5fa:	4604      	mov	r4, r0
    }
 23fe5fc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe5fe:	b159      	cbz	r1, 23fe618 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe600:	9101      	str	r1, [sp, #4]
 23fe602:	f7fc fc71 	bl	23faee8 <strlen>
 23fe606:	4602      	mov	r2, r0
 23fe608:	4620      	mov	r0, r4
 23fe60a:	6823      	ldr	r3, [r4, #0]
 23fe60c:	9901      	ldr	r1, [sp, #4]
 23fe60e:	68db      	ldr	r3, [r3, #12]
    }
 23fe610:	b002      	add	sp, #8
 23fe612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe616:	4718      	bx	r3
    }
 23fe618:	b002      	add	sp, #8
 23fe61a:	bd10      	pop	{r4, pc}

023fe61c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fe61c:	6803      	ldr	r3, [r0, #0]
 23fe61e:	689b      	ldr	r3, [r3, #8]
 23fe620:	4718      	bx	r3

023fe622 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe622:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe624:	2a01      	cmp	r2, #1
 23fe626:	bf98      	it	ls
 23fe628:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe62a:	b530      	push	{r4, r5, lr}
 23fe62c:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe62e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe632:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe634:	460d      	mov	r5, r1
 23fe636:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe63a:	fb01 5312 	mls	r3, r1, r2, r5
 23fe63e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe642:	2b09      	cmp	r3, #9
 23fe644:	bf94      	ite	ls
 23fe646:	3330      	addls	r3, #48	; 0x30
 23fe648:	3337      	addhi	r3, #55	; 0x37
 23fe64a:	b2db      	uxtb	r3, r3
  } while(n);
 23fe64c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe64e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe652:	d9ef      	bls.n	23fe634 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe654:	4621      	mov	r1, r4
 23fe656:	f7ff ffcf 	bl	23fe5f8 <_ZN5Print5writeEPKc>
}
 23fe65a:	b00b      	add	sp, #44	; 0x2c
 23fe65c:	bd30      	pop	{r4, r5, pc}
	...

023fe660 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fe660:	2200      	movs	r2, #0
 23fe662:	4b01      	ldr	r3, [pc, #4]	; (23fe668 <_GLOBAL__sub_I_RGB+0x8>)
 23fe664:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe666:	4770      	bx	lr
 23fe668:	1007aea8 	.word	0x1007aea8

023fe66c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fe66c:	2100      	movs	r1, #0
 23fe66e:	f7fe b941 	b.w	23fc8f4 <hal_spi_release>

023fe672 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fe672:	2100      	movs	r1, #0
 23fe674:	f7fe b930 	b.w	23fc8d8 <hal_spi_acquire>

023fe678 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe678:	b510      	push	{r4, lr}
 23fe67a:	4604      	mov	r4, r0
 23fe67c:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe67e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe680:	f7fe f8d6 	bl	23fc830 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe684:	2300      	movs	r3, #0
}
 23fe686:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe688:	6063      	str	r3, [r4, #4]
}
 23fe68a:	bd10      	pop	{r4, pc}

023fe68c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fe68c:	7800      	ldrb	r0, [r0, #0]
 23fe68e:	f7ff bfed 	b.w	23fe66c <_ZN8SPIClass6unlockEv.isra.0>
	...

023fe694 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fe694:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fe696:	2400      	movs	r4, #0
 23fe698:	0840      	lsrs	r0, r0, #1
 23fe69a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe69c:	6818      	ldr	r0, [r3, #0]
 23fe69e:	b2e5      	uxtb	r5, r4
 23fe6a0:	4288      	cmp	r0, r1
 23fe6a2:	d906      	bls.n	23fe6b2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fe6a4:	3401      	adds	r4, #1
 23fe6a6:	2c08      	cmp	r4, #8
 23fe6a8:	d002      	beq.n	23fe6b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fe6aa:	0840      	lsrs	r0, r0, #1
 23fe6ac:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe6ae:	e7f5      	b.n	23fe69c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fe6b0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fe6b2:	4b02      	ldr	r3, [pc, #8]	; (23fe6bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fe6b4:	5d5b      	ldrb	r3, [r3, r5]
 23fe6b6:	7013      	strb	r3, [r2, #0]
}
 23fe6b8:	bd30      	pop	{r4, r5, pc}
 23fe6ba:	bf00      	nop
 23fe6bc:	023ffd9c 	.word	0x023ffd9c

023fe6c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fe6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe6c4:	4606      	mov	r6, r0
 23fe6c6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fe6c8:	7800      	ldrb	r0, [r0, #0]
{
 23fe6ca:	460c      	mov	r4, r1
    CHECK(lock());
 23fe6cc:	f7ff ffd1 	bl	23fe672 <_ZN8SPIClass4lockEv.isra.0>
 23fe6d0:	2800      	cmp	r0, #0
 23fe6d2:	db1b      	blt.n	23fe70c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe6d4:	2214      	movs	r2, #20
 23fe6d6:	2100      	movs	r1, #0
 23fe6d8:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fe6da:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe6dc:	f000 fced 	bl	23ff0ba <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe6e0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fe6e2:	2200      	movs	r2, #0
 23fe6e4:	4628      	mov	r0, r5
 23fe6e6:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe6e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fe6ec:	f7fe f8bc 	bl	23fc868 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fe6f0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fe6f4:	b113      	cbz	r3, 23fe6fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fe6f6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fe6fa:	b155      	cbz	r5, 23fe712 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fe6fc:	2700      	movs	r7, #0
 23fe6fe:	2501      	movs	r5, #1
 23fe700:	46b9      	mov	r9, r7
 23fe702:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fe704:	7923      	ldrb	r3, [r4, #4]
 23fe706:	b15d      	cbz	r5, 23fe720 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fe708:	b1c3      	cbz	r3, 23fe73c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fe70a:	2000      	movs	r0, #0
}
 23fe70c:	b00f      	add	sp, #60	; 0x3c
 23fe70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fe712:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fe716:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fe71a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fe71e:	e7f1      	b.n	23fe704 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fe720:	2b00      	cmp	r3, #0
 23fe722:	d135      	bne.n	23fe790 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fe724:	68a3      	ldr	r3, [r4, #8]
 23fe726:	4543      	cmp	r3, r8
 23fe728:	d108      	bne.n	23fe73c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fe72a:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe72e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe732:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe736:	89a3      	ldrh	r3, [r4, #12]
 23fe738:	429a      	cmp	r2, r3
 23fe73a:	d0e6      	beq.n	23fe70a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fe73c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe73e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fe740:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe744:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fe746:	ab04      	add	r3, sp, #16
 23fe748:	f10d 020f 	add.w	r2, sp, #15
 23fe74c:	f7ff ffa2 	bl	23fe694 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fe750:	7921      	ldrb	r1, [r4, #4]
 23fe752:	b985      	cbnz	r5, 23fe776 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fe754:	b989      	cbnz	r1, 23fe77a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe756:	68a3      	ldr	r3, [r4, #8]
 23fe758:	4543      	cmp	r3, r8
 23fe75a:	d30e      	bcc.n	23fe77a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fe75c:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe760:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe764:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe768:	89a3      	ldrh	r3, [r4, #12]
 23fe76a:	429a      	cmp	r2, r3
 23fe76c:	d105      	bne.n	23fe77a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fe76e:	9b04      	ldr	r3, [sp, #16]
 23fe770:	4543      	cmp	r3, r8
 23fe772:	d102      	bne.n	23fe77a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe774:	e7c9      	b.n	23fe70a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fe776:	2900      	cmp	r1, #0
 23fe778:	d1f9      	bne.n	23fe76e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fe77a:	2300      	movs	r3, #0
 23fe77c:	9301      	str	r3, [sp, #4]
 23fe77e:	7b63      	ldrb	r3, [r4, #13]
 23fe780:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fe784:	9300      	str	r3, [sp, #0]
 23fe786:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fe788:	7830      	ldrb	r0, [r6, #0]
 23fe78a:	f7fe f897 	bl	23fc8bc <hal_spi_set_settings>
 23fe78e:	e7bc      	b.n	23fe70a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fe790:	462b      	mov	r3, r5
 23fe792:	462a      	mov	r2, r5
 23fe794:	2101      	movs	r1, #1
 23fe796:	e9cd 5500 	strd	r5, r5, [sp]
 23fe79a:	e7f5      	b.n	23fe788 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fe79c <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23fe79c:	b530      	push	{r4, r5, lr}
 23fe79e:	b087      	sub	sp, #28
 23fe7a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fe7a2:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23fe7a4:	9500      	str	r5, [sp, #0]
 23fe7a6:	7800      	ldrb	r0, [r0, #0]
 23fe7a8:	f7fe f86c 	bl	23fc884 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23fe7ac:	b93d      	cbnz	r5, 23fe7be <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23fe7ae:	7820      	ldrb	r0, [r4, #0]
 23fe7b0:	a902      	add	r1, sp, #8
 23fe7b2:	f7fe f875 	bl	23fc8a0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23fe7b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23fe7ba:	07db      	lsls	r3, r3, #31
 23fe7bc:	d4f7      	bmi.n	23fe7ae <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23fe7be:	b007      	add	sp, #28
 23fe7c0:	bd30      	pop	{r4, r5, pc}

023fe7c2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fe7c2:	b510      	push	{r4, lr}
 23fe7c4:	4604      	mov	r4, r0
{
	free(buffer);
 23fe7c6:	6800      	ldr	r0, [r0, #0]
 23fe7c8:	f7fe fae0 	bl	23fcd8c <free>
}
 23fe7cc:	4620      	mov	r0, r4
 23fe7ce:	bd10      	pop	{r4, pc}

023fe7d0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fe7d0:	b510      	push	{r4, lr}
 23fe7d2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fe7d4:	6800      	ldr	r0, [r0, #0]
 23fe7d6:	b108      	cbz	r0, 23fe7dc <_ZN6String10invalidateEv+0xc>
 23fe7d8:	f7fe fad8 	bl	23fcd8c <free>
	buffer = NULL;
 23fe7dc:	2300      	movs	r3, #0
	capacity = len = 0;
 23fe7de:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fe7e2:	6023      	str	r3, [r4, #0]
}
 23fe7e4:	bd10      	pop	{r4, pc}

023fe7e6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe7e6:	b538      	push	{r3, r4, r5, lr}
 23fe7e8:	4604      	mov	r4, r0
 23fe7ea:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe7ec:	6800      	ldr	r0, [r0, #0]
 23fe7ee:	3101      	adds	r1, #1
 23fe7f0:	f7fe fada 	bl	23fcda8 <realloc>
	if (newbuffer) {
 23fe7f4:	b110      	cbz	r0, 23fe7fc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fe7f6:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fe7fa:	2001      	movs	r0, #1
	}
	return 0;
}
 23fe7fc:	bd38      	pop	{r3, r4, r5, pc}

023fe7fe <_ZN6String7reserveEj>:
{
 23fe7fe:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fe800:	6803      	ldr	r3, [r0, #0]
{
 23fe802:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fe804:	b123      	cbz	r3, 23fe810 <_ZN6String7reserveEj+0x12>
 23fe806:	6843      	ldr	r3, [r0, #4]
 23fe808:	428b      	cmp	r3, r1
 23fe80a:	d301      	bcc.n	23fe810 <_ZN6String7reserveEj+0x12>
 23fe80c:	2001      	movs	r0, #1
}
 23fe80e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fe810:	4620      	mov	r0, r4
 23fe812:	f7ff ffe8 	bl	23fe7e6 <_ZN6String12changeBufferEj>
 23fe816:	2800      	cmp	r0, #0
 23fe818:	d0f9      	beq.n	23fe80e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fe81a:	68a3      	ldr	r3, [r4, #8]
 23fe81c:	2b00      	cmp	r3, #0
 23fe81e:	d1f5      	bne.n	23fe80c <_ZN6String7reserveEj+0xe>
 23fe820:	6822      	ldr	r2, [r4, #0]
 23fe822:	7013      	strb	r3, [r2, #0]
 23fe824:	e7f2      	b.n	23fe80c <_ZN6String7reserveEj+0xe>

023fe826 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe826:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe828:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fe82a:	4611      	mov	r1, r2
 23fe82c:	9201      	str	r2, [sp, #4]
{
 23fe82e:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fe830:	f7ff ffe5 	bl	23fe7fe <_ZN6String7reserveEj>
 23fe834:	9a01      	ldr	r2, [sp, #4]
 23fe836:	b928      	cbnz	r0, 23fe844 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fe838:	4620      	mov	r0, r4
 23fe83a:	f7ff ffc9 	bl	23fe7d0 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fe83e:	4620      	mov	r0, r4
 23fe840:	b003      	add	sp, #12
 23fe842:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fe844:	4629      	mov	r1, r5
	len = length;
 23fe846:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fe848:	6820      	ldr	r0, [r4, #0]
 23fe84a:	f000 fc0f 	bl	23ff06c <memcpy>
	buffer[len] = 0;
 23fe84e:	2100      	movs	r1, #0
 23fe850:	6822      	ldr	r2, [r4, #0]
 23fe852:	68a3      	ldr	r3, [r4, #8]
 23fe854:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fe856:	e7f2      	b.n	23fe83e <_ZN6String4copyEPKcj+0x18>

023fe858 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fe858:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fe85a:	b513      	push	{r0, r1, r4, lr}
 23fe85c:	4604      	mov	r4, r0
	capacity = 0;
 23fe85e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe862:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe864:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fe866:	b141      	cbz	r1, 23fe87a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fe868:	4608      	mov	r0, r1
 23fe86a:	9101      	str	r1, [sp, #4]
 23fe86c:	f7fc fb3c 	bl	23faee8 <strlen>
 23fe870:	9901      	ldr	r1, [sp, #4]
 23fe872:	4602      	mov	r2, r0
 23fe874:	4620      	mov	r0, r4
 23fe876:	f7ff ffd6 	bl	23fe826 <_ZN6String4copyEPKcj>
}
 23fe87a:	4620      	mov	r0, r4
 23fe87c:	b002      	add	sp, #8
 23fe87e:	bd10      	pop	{r4, pc}

023fe880 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fe880:	b538      	push	{r3, r4, r5, lr}
 23fe882:	4605      	mov	r5, r0
	if (buffer) {
 23fe884:	6800      	ldr	r0, [r0, #0]
{
 23fe886:	460c      	mov	r4, r1
	if (buffer) {
 23fe888:	b170      	cbz	r0, 23fe8a8 <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fe88a:	686a      	ldr	r2, [r5, #4]
 23fe88c:	688b      	ldr	r3, [r1, #8]
 23fe88e:	429a      	cmp	r2, r3
 23fe890:	d308      	bcc.n	23fe8a4 <_ZN6String4moveERS_+0x24>
 23fe892:	6809      	ldr	r1, [r1, #0]
 23fe894:	b131      	cbz	r1, 23fe8a4 <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fe896:	f000 fc5e 	bl	23ff156 <strcpy>
			len = rhs.len;
 23fe89a:	68a3      	ldr	r3, [r4, #8]
 23fe89c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fe89e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fe8a0:	60a3      	str	r3, [r4, #8]
}
 23fe8a2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fe8a4:	f7fe fa72 	bl	23fcd8c <free>
	buffer = rhs.buffer;
 23fe8a8:	6823      	ldr	r3, [r4, #0]
 23fe8aa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fe8ac:	6863      	ldr	r3, [r4, #4]
 23fe8ae:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fe8b0:	68a3      	ldr	r3, [r4, #8]
 23fe8b2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fe8b4:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fe8b6:	e9c4 3300 	strd	r3, r3, [r4]
 23fe8ba:	e7f1      	b.n	23fe8a0 <_ZN6String4moveERS_+0x20>

023fe8bc <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fe8bc:	2300      	movs	r3, #0
String::String(String &&rval)
 23fe8be:	b510      	push	{r4, lr}
 23fe8c0:	4604      	mov	r4, r0
	capacity = 0;
 23fe8c2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe8c6:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe8c8:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fe8ca:	f7ff ffd9 	bl	23fe880 <_ZN6String4moveERS_>
}
 23fe8ce:	4620      	mov	r0, r4
 23fe8d0:	bd10      	pop	{r4, pc}

023fe8d2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fe8d2:	4288      	cmp	r0, r1
{
 23fe8d4:	b510      	push	{r4, lr}
 23fe8d6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fe8d8:	d005      	beq.n	23fe8e6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fe8da:	680b      	ldr	r3, [r1, #0]
 23fe8dc:	b12b      	cbz	r3, 23fe8ea <_ZN6StringaSERKS_+0x18>
 23fe8de:	688a      	ldr	r2, [r1, #8]
 23fe8e0:	4619      	mov	r1, r3
 23fe8e2:	f7ff ffa0 	bl	23fe826 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fe8e6:	4620      	mov	r0, r4
 23fe8e8:	bd10      	pop	{r4, pc}
	else invalidate();
 23fe8ea:	f7ff ff71 	bl	23fe7d0 <_ZN6String10invalidateEv>
 23fe8ee:	e7fa      	b.n	23fe8e6 <_ZN6StringaSERKS_+0x14>

023fe8f0 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fe8f0:	2300      	movs	r3, #0
String::String(const String &value)
 23fe8f2:	b510      	push	{r4, lr}
 23fe8f4:	4604      	mov	r4, r0
	capacity = 0;
 23fe8f6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe8fa:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe8fc:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fe8fe:	f7ff ffe8 	bl	23fe8d2 <_ZN6StringaSERKS_>
}
 23fe902:	4620      	mov	r0, r4
 23fe904:	bd10      	pop	{r4, pc}
	...

023fe908 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fe908:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe90a:	2000      	movs	r0, #0
 23fe90c:	4b04      	ldr	r3, [pc, #16]	; (23fe920 <_GLOBAL__sub_I_System+0x18>)
 23fe90e:	601a      	str	r2, [r3, #0]
 23fe910:	4b04      	ldr	r3, [pc, #16]	; (23fe924 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fe912:	4a05      	ldr	r2, [pc, #20]	; (23fe928 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fe914:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fe918:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe91a:	f7fe b92d 	b.w	23fcb78 <set_system_mode>
 23fe91e:	bf00      	nop
 23fe920:	1007aec4 	.word	0x1007aec4
 23fe924:	1007aeb8 	.word	0x1007aeb8
 23fe928:	ffff0000 	.word	0xffff0000

023fe92c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fe92c:	4b02      	ldr	r3, [pc, #8]	; (23fe938 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fe92e:	681a      	ldr	r2, [r3, #0]
 23fe930:	4b02      	ldr	r3, [pc, #8]	; (23fe93c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fe932:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fe934:	4770      	bx	lr
 23fe936:	bf00      	nop
 23fe938:	1007a9d4 	.word	0x1007a9d4
 23fe93c:	1007aec8 	.word	0x1007aec8

023fe940 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe940:	4770      	bx	lr

023fe942 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe942:	7441      	strb	r1, [r0, #17]
}
 23fe944:	4770      	bx	lr

023fe946 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe946:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe948:	7c00      	ldrb	r0, [r0, #16]
 23fe94a:	f7fe f843 	bl	23fc9d4 <hal_usart_available_data_for_write>
}
 23fe94e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe952:	bd08      	pop	{r3, pc}

023fe954 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe954:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe956:	7c00      	ldrb	r0, [r0, #16]
 23fe958:	f7fd fff6 	bl	23fc948 <hal_usart_available>
}
 23fe95c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe960:	bd08      	pop	{r3, pc}

023fe962 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe962:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe964:	7c00      	ldrb	r0, [r0, #16]
 23fe966:	f7fe f80b 	bl	23fc980 <hal_usart_peek>
}
 23fe96a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe96e:	bd08      	pop	{r3, pc}

023fe970 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe970:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe972:	7c00      	ldrb	r0, [r0, #16]
 23fe974:	f7fd fff6 	bl	23fc964 <hal_usart_read>
}
 23fe978:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe97c:	bd08      	pop	{r3, pc}

023fe97e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe97e:	7c00      	ldrb	r0, [r0, #16]
 23fe980:	f7fe b80c 	b.w	23fc99c <hal_usart_flush>

023fe984 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe984:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe986:	7c45      	ldrb	r5, [r0, #17]
{
 23fe988:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe98a:	b12d      	cbz	r5, 23fe998 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe98c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe98e:	b003      	add	sp, #12
 23fe990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe994:	f7fd bfca 	b.w	23fc92c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe998:	7c00      	ldrb	r0, [r0, #16]
 23fe99a:	9101      	str	r1, [sp, #4]
 23fe99c:	f7fe f81a 	bl	23fc9d4 <hal_usart_available_data_for_write>
 23fe9a0:	2800      	cmp	r0, #0
 23fe9a2:	9901      	ldr	r1, [sp, #4]
 23fe9a4:	dcf2      	bgt.n	23fe98c <_ZN11USARTSerial5writeEh+0x8>
}
 23fe9a6:	4628      	mov	r0, r5
 23fe9a8:	b003      	add	sp, #12
 23fe9aa:	bd30      	pop	{r4, r5, pc}

023fe9ac <_ZN11USARTSerialD0Ev>:
 23fe9ac:	b510      	push	{r4, lr}
 23fe9ae:	4604      	mov	r4, r0
 23fe9b0:	2114      	movs	r1, #20
 23fe9b2:	f7fc fac2 	bl	23faf3a <_ZdlPvj>
 23fe9b6:	4620      	mov	r0, r4
 23fe9b8:	bd10      	pop	{r4, pc}
	...

023fe9bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe9bc:	b510      	push	{r4, lr}
 23fe9be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe9c2:	4604      	mov	r4, r0
 23fe9c4:	4608      	mov	r0, r1
 23fe9c6:	4611      	mov	r1, r2
 23fe9c8:	2200      	movs	r2, #0
 23fe9ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe9ce:	4b04      	ldr	r3, [pc, #16]	; (23fe9e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe9d0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe9d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe9d4:	2301      	movs	r3, #1
 23fe9d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe9d8:	f7fe f818 	bl	23fca0c <hal_usart_init_ex>
}
 23fe9dc:	4620      	mov	r0, r4
 23fe9de:	bd10      	pop	{r4, pc}
 23fe9e0:	023ffdc8 	.word	0x023ffdc8

023fe9e4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fe9e4:	2300      	movs	r3, #0
 23fe9e6:	7c00      	ldrb	r0, [r0, #16]
 23fe9e8:	f7fe b802 	b.w	23fc9f0 <hal_usart_begin_config>

023fe9ec <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fe9ec:	2200      	movs	r2, #0
 23fe9ee:	f7ff bff9 	b.w	23fe9e4 <_ZN11USARTSerial5beginEmm>

023fe9f2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fe9f2:	7c00      	ldrb	r0, [r0, #16]
 23fe9f4:	f7fd bf8c 	b.w	23fc910 <hal_usart_end>

023fe9f8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe9f8:	7c00      	ldrb	r0, [r0, #16]
 23fe9fa:	f7fd bfdd 	b.w	23fc9b8 <hal_usart_is_enabled>

023fe9fe <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe9fe:	7441      	strb	r1, [r0, #17]
}
 23fea00:	4770      	bx	lr

023fea02 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fea02:	4770      	bx	lr

023fea04 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fea04:	4770      	bx	lr

023fea06 <_ZN9USBSerial4readEv>:
{
 23fea06:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fea08:	2100      	movs	r1, #0
 23fea0a:	7c00      	ldrb	r0, [r0, #16]
 23fea0c:	f7fe f852 	bl	23fcab4 <HAL_USB_USART_Receive_Data>
}
 23fea10:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fea14:	bd08      	pop	{r3, pc}

023fea16 <_ZN9USBSerial4peekEv>:
{
 23fea16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fea18:	2101      	movs	r1, #1
 23fea1a:	7c00      	ldrb	r0, [r0, #16]
 23fea1c:	f7fe f84a 	bl	23fcab4 <HAL_USB_USART_Receive_Data>
}
 23fea20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fea24:	bd08      	pop	{r3, pc}

023fea26 <_ZN9USBSerial17availableForWriteEv>:
{
 23fea26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fea28:	7c00      	ldrb	r0, [r0, #16]
 23fea2a:	f7fe f835 	bl	23fca98 <HAL_USB_USART_Available_Data_For_Write>
}
 23fea2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fea32:	bd08      	pop	{r3, pc}

023fea34 <_ZN9USBSerial9availableEv>:
{
 23fea34:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fea36:	7c00      	ldrb	r0, [r0, #16]
 23fea38:	f7fe f820 	bl	23fca7c <HAL_USB_USART_Available_Data>
}
 23fea3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fea40:	bd08      	pop	{r3, pc}

023fea42 <_ZN9USBSerial5writeEh>:
{
 23fea42:	b513      	push	{r0, r1, r4, lr}
 23fea44:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fea46:	7c00      	ldrb	r0, [r0, #16]
{
 23fea48:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fea4a:	f7fe f825 	bl	23fca98 <HAL_USB_USART_Available_Data_For_Write>
 23fea4e:	2800      	cmp	r0, #0
 23fea50:	9901      	ldr	r1, [sp, #4]
 23fea52:	dc01      	bgt.n	23fea58 <_ZN9USBSerial5writeEh+0x16>
 23fea54:	7c60      	ldrb	r0, [r4, #17]
 23fea56:	b120      	cbz	r0, 23fea62 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fea58:	7c20      	ldrb	r0, [r4, #16]
 23fea5a:	f7fe f839 	bl	23fcad0 <HAL_USB_USART_Send_Data>
 23fea5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fea62:	b002      	add	sp, #8
 23fea64:	bd10      	pop	{r4, pc}

023fea66 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fea66:	7c00      	ldrb	r0, [r0, #16]
 23fea68:	f7fe b840 	b.w	23fcaec <HAL_USB_USART_Flush_Data>

023fea6c <_ZN9USBSerialD0Ev>:
 23fea6c:	b510      	push	{r4, lr}
 23fea6e:	4604      	mov	r4, r0
 23fea70:	2114      	movs	r1, #20
 23fea72:	f7fc fa62 	bl	23faf3a <_ZdlPvj>
 23fea76:	4620      	mov	r0, r4
 23fea78:	bd10      	pop	{r4, pc}
	...

023fea7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fea7c:	b510      	push	{r4, lr}
 23fea7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fea82:	4604      	mov	r4, r0
 23fea84:	4608      	mov	r0, r1
 23fea86:	2100      	movs	r1, #0
 23fea88:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fea8c:	4b04      	ldr	r3, [pc, #16]	; (23feaa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fea8e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fea90:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fea92:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fea94:	4611      	mov	r1, r2
  _blocking = true;
 23fea96:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fea98:	f7fd ffc6 	bl	23fca28 <HAL_USB_USART_Init>
}
 23fea9c:	4620      	mov	r0, r4
 23fea9e:	bd10      	pop	{r4, pc}
 23feaa0:	023ffdf8 	.word	0x023ffdf8

023feaa4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23feaa4:	2200      	movs	r2, #0
 23feaa6:	7c00      	ldrb	r0, [r0, #16]
 23feaa8:	f7fd bfcc 	b.w	23fca44 <HAL_USB_USART_Begin>

023feaac <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23feaac:	7c00      	ldrb	r0, [r0, #16]
 23feaae:	f7fd bfd7 	b.w	23fca60 <HAL_USB_USART_End>

023feab2 <_Z19acquireSerialBufferv>:
{
 23feab2:	b510      	push	{r4, lr}
 23feab4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23feab6:	2214      	movs	r2, #20
 23feab8:	2100      	movs	r1, #0
 23feaba:	f000 fafe 	bl	23ff0ba <memset>
}
 23feabe:	4620      	mov	r0, r4
 23feac0:	bd10      	pop	{r4, pc}
	...

023feac4 <_Z16_fetch_usbserialv>:
{
 23feac4:	b510      	push	{r4, lr}
 23feac6:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23feac8:	a803      	add	r0, sp, #12
 23feaca:	f7ff fff2 	bl	23feab2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23feace:	4c0c      	ldr	r4, [pc, #48]	; (23feb00 <_Z16_fetch_usbserialv+0x3c>)
 23fead0:	e8d4 1f8f 	ldab	r1, [r4]
 23fead4:	f011 0101 	ands.w	r1, r1, #1
 23fead8:	d10f      	bne.n	23feafa <_Z16_fetch_usbserialv+0x36>
 23feada:	4620      	mov	r0, r4
 23feadc:	9101      	str	r1, [sp, #4]
 23feade:	f7fc fa3b 	bl	23faf58 <__cxa_guard_acquire>
 23feae2:	9901      	ldr	r1, [sp, #4]
 23feae4:	b148      	cbz	r0, 23feafa <_Z16_fetch_usbserialv+0x36>
 23feae6:	aa03      	add	r2, sp, #12
 23feae8:	4806      	ldr	r0, [pc, #24]	; (23feb04 <_Z16_fetch_usbserialv+0x40>)
 23feaea:	f7ff ffc7 	bl	23fea7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23feaee:	4620      	mov	r0, r4
 23feaf0:	f7fc fa37 	bl	23faf62 <__cxa_guard_release>
 23feaf4:	4804      	ldr	r0, [pc, #16]	; (23feb08 <_Z16_fetch_usbserialv+0x44>)
 23feaf6:	f000 faab 	bl	23ff050 <atexit>
	return _usbserial;
}
 23feafa:	4802      	ldr	r0, [pc, #8]	; (23feb04 <_Z16_fetch_usbserialv+0x40>)
 23feafc:	b008      	add	sp, #32
 23feafe:	bd10      	pop	{r4, pc}
 23feb00:	1007aecc 	.word	0x1007aecc
 23feb04:	1007aed0 	.word	0x1007aed0
 23feb08:	023fea03 	.word	0x023fea03

023feb0c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23feb0c:	2200      	movs	r2, #0
 23feb0e:	6840      	ldr	r0, [r0, #4]
 23feb10:	4611      	mov	r1, r2
 23feb12:	f7fe b8af 	b.w	23fcc74 <network_ready>

023feb16 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23feb16:	2200      	movs	r2, #0
 23feb18:	6840      	ldr	r0, [r0, #4]
 23feb1a:	4611      	mov	r1, r2
 23feb1c:	f7fe b8e2 	b.w	23fcce4 <network_listening>

023feb20 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23feb20:	2200      	movs	r2, #0
 23feb22:	6840      	ldr	r0, [r0, #4]
 23feb24:	4611      	mov	r1, r2
 23feb26:	f7fe b8f9 	b.w	23fcd1c <network_get_listen_timeout>

023feb2a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23feb2a:	2200      	movs	r2, #0
 23feb2c:	6840      	ldr	r0, [r0, #4]
 23feb2e:	f7fe b8e7 	b.w	23fcd00 <network_set_listen_timeout>

023feb32 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23feb32:	2200      	movs	r2, #0
 23feb34:	6840      	ldr	r0, [r0, #4]
 23feb36:	f081 0101 	eor.w	r1, r1, #1
 23feb3a:	f7fe b8c5 	b.w	23fccc8 <network_listen>

023feb3e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23feb3e:	2300      	movs	r3, #0
 23feb40:	6840      	ldr	r0, [r0, #4]
 23feb42:	461a      	mov	r2, r3
 23feb44:	4619      	mov	r1, r3
 23feb46:	f7fe b8b1 	b.w	23fccac <network_off>

023feb4a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23feb4a:	2300      	movs	r3, #0
 23feb4c:	6840      	ldr	r0, [r0, #4]
 23feb4e:	461a      	mov	r2, r3
 23feb50:	4619      	mov	r1, r3
 23feb52:	f7fe b89d 	b.w	23fcc90 <network_on>

023feb56 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23feb56:	2200      	movs	r2, #0
 23feb58:	6840      	ldr	r0, [r0, #4]
 23feb5a:	4611      	mov	r1, r2
 23feb5c:	f7fe b86e 	b.w	23fcc3c <network_connecting>

023feb60 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23feb60:	2200      	movs	r2, #0
 23feb62:	2102      	movs	r1, #2
 23feb64:	6840      	ldr	r0, [r0, #4]
 23feb66:	f7fe b877 	b.w	23fcc58 <network_disconnect>

023feb6a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23feb6a:	2300      	movs	r3, #0
 23feb6c:	6840      	ldr	r0, [r0, #4]
 23feb6e:	461a      	mov	r2, r3
 23feb70:	f7fe b856 	b.w	23fcc20 <network_connect>

023feb74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23feb74:	2204      	movs	r2, #4
 23feb76:	4b02      	ldr	r3, [pc, #8]	; (23feb80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23feb78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23feb7a:	4a02      	ldr	r2, [pc, #8]	; (23feb84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23feb7c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23feb7e:	4770      	bx	lr
 23feb80:	1007aee4 	.word	0x1007aee4
 23feb84:	023ffe28 	.word	0x023ffe28

023feb88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23feb88:	4b01      	ldr	r3, [pc, #4]	; (23feb90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23feb8a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23feb8c:	4770      	bx	lr
 23feb8e:	bf00      	nop
 23feb90:	1007a9dc 	.word	0x1007a9dc

023feb94 <serialEventRun>:
{
 23feb94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23feb96:	4b0f      	ldr	r3, [pc, #60]	; (23febd4 <serialEventRun+0x40>)
 23feb98:	b143      	cbz	r3, 23febac <serialEventRun+0x18>
 23feb9a:	f7ff ff93 	bl	23feac4 <_Z16_fetch_usbserialv>
 23feb9e:	6803      	ldr	r3, [r0, #0]
 23feba0:	691b      	ldr	r3, [r3, #16]
 23feba2:	4798      	blx	r3
 23feba4:	2800      	cmp	r0, #0
 23feba6:	dd01      	ble.n	23febac <serialEventRun+0x18>
        serialEvent();
 23feba8:	e000      	b.n	23febac <serialEventRun+0x18>
 23febaa:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23febac:	4b0a      	ldr	r3, [pc, #40]	; (23febd8 <serialEventRun+0x44>)
 23febae:	b143      	cbz	r3, 23febc2 <serialEventRun+0x2e>
 23febb0:	f000 f98e 	bl	23feed0 <_Z22__fetch_global_Serial1v>
 23febb4:	6803      	ldr	r3, [r0, #0]
 23febb6:	691b      	ldr	r3, [r3, #16]
 23febb8:	4798      	blx	r3
 23febba:	2800      	cmp	r0, #0
 23febbc:	dd01      	ble.n	23febc2 <serialEventRun+0x2e>
        serialEvent1();
 23febbe:	e000      	b.n	23febc2 <serialEventRun+0x2e>
 23febc0:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23febc2:	4b06      	ldr	r3, [pc, #24]	; (23febdc <serialEventRun+0x48>)
 23febc4:	b10b      	cbz	r3, 23febca <serialEventRun+0x36>
 23febc6:	f000 f9c9 	bl	23fef5c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23febca:	4b05      	ldr	r3, [pc, #20]	; (23febe0 <serialEventRun+0x4c>)
 23febcc:	b10b      	cbz	r3, 23febd2 <serialEventRun+0x3e>
 23febce:	f000 f9fb 	bl	23fefc8 <_Z15serialEventRun3v>
}
 23febd2:	bd08      	pop	{r3, pc}
	...

023febe4 <_post_loop>:
{
 23febe4:	b508      	push	{r3, lr}
	serialEventRun();
 23febe6:	f7ff ffd5 	bl	23feb94 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23febea:	f7fd fcfb 	bl	23fc5e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23febee:	4b01      	ldr	r3, [pc, #4]	; (23febf4 <_post_loop+0x10>)
 23febf0:	6018      	str	r0, [r3, #0]
}
 23febf2:	bd08      	pop	{r3, pc}
 23febf4:	1007aef4 	.word	0x1007aef4

023febf8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23febf8:	4805      	ldr	r0, [pc, #20]	; (23fec10 <_Z33system_initialize_user_backup_ramv+0x18>)
 23febfa:	4a06      	ldr	r2, [pc, #24]	; (23fec14 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23febfc:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23febfe:	1a12      	subs	r2, r2, r0
 23fec00:	4905      	ldr	r1, [pc, #20]	; (23fec18 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fec02:	f000 fa33 	bl	23ff06c <memcpy>
    __backup_sram_signature = signature;
 23fec06:	4b05      	ldr	r3, [pc, #20]	; (23fec1c <_Z33system_initialize_user_backup_ramv+0x24>)
 23fec08:	4a05      	ldr	r2, [pc, #20]	; (23fec20 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fec0a:	601a      	str	r2, [r3, #0]
}
 23fec0c:	bd08      	pop	{r3, pc}
 23fec0e:	bf00      	nop
 23fec10:	1007b400 	.word	0x1007b400
 23fec14:	1007b404 	.word	0x1007b404
 23fec18:	085ffaa0 	.word	0x085ffaa0
 23fec1c:	1007b400 	.word	0x1007b400
 23fec20:	9a271c1e 	.word	0x9a271c1e

023fec24 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fec24:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fec26:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fec28:	461a      	mov	r2, r3
 23fec2a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fec2e:	9300      	str	r3, [sp, #0]
 23fec30:	f7fd ffda 	bl	23fcbe8 <system_ctrl_set_result>
}
 23fec34:	b003      	add	sp, #12
 23fec36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fec3c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fec3c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fec3e:	8843      	ldrh	r3, [r0, #2]
 23fec40:	2b0a      	cmp	r3, #10
 23fec42:	d008      	beq.n	23fec56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fec44:	2b50      	cmp	r3, #80	; 0x50
 23fec46:	d10b      	bne.n	23fec60 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fec48:	4b09      	ldr	r3, [pc, #36]	; (23fec70 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fec4a:	681b      	ldr	r3, [r3, #0]
 23fec4c:	b14b      	cbz	r3, 23fec62 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fec4e:	b003      	add	sp, #12
 23fec50:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fec54:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fec56:	f7ff ffe5 	bl	23fec24 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fec5a:	b003      	add	sp, #12
 23fec5c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fec60:	2300      	movs	r3, #0
 23fec62:	461a      	mov	r2, r3
 23fec64:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fec68:	9300      	str	r3, [sp, #0]
 23fec6a:	f7fd ffbd 	bl	23fcbe8 <system_ctrl_set_result>
}
 23fec6e:	e7f4      	b.n	23fec5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fec70:	1007aef0 	.word	0x1007aef0

023fec74 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fec74:	2100      	movs	r1, #0
{
 23fec76:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fec78:	4811      	ldr	r0, [pc, #68]	; (23fecc0 <module_user_init_hook+0x4c>)
 23fec7a:	f7fe f8cd 	bl	23fce18 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fec7e:	4b11      	ldr	r3, [pc, #68]	; (23fecc4 <module_user_init_hook+0x50>)
 23fec80:	681a      	ldr	r2, [r3, #0]
 23fec82:	4b11      	ldr	r3, [pc, #68]	; (23fecc8 <module_user_init_hook+0x54>)
 23fec84:	429a      	cmp	r2, r3
 23fec86:	bf0c      	ite	eq
 23fec88:	2201      	moveq	r2, #1
 23fec8a:	2200      	movne	r2, #0
 23fec8c:	4b0f      	ldr	r3, [pc, #60]	; (23feccc <module_user_init_hook+0x58>)
 23fec8e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fec90:	d001      	beq.n	23fec96 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fec92:	f7ff ffb1 	bl	23febf8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fec96:	f7fd fc89 	bl	23fc5ac <HAL_RNG_GetRandomNumber>
 23fec9a:	4604      	mov	r4, r0
    srand(seed);
 23fec9c:	f000 fa16 	bl	23ff0cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23feca0:	4b0b      	ldr	r3, [pc, #44]	; (23fecd0 <module_user_init_hook+0x5c>)
 23feca2:	b113      	cbz	r3, 23fecaa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23feca4:	4620      	mov	r0, r4
 23feca6:	e000      	b.n	23fecaa <module_user_init_hook+0x36>
 23feca8:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fecaa:	2100      	movs	r1, #0
 23fecac:	4808      	ldr	r0, [pc, #32]	; (23fecd0 <module_user_init_hook+0x5c>)
 23fecae:	f7fd ffa9 	bl	23fcc04 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fecb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fecb6:	2100      	movs	r1, #0
 23fecb8:	4806      	ldr	r0, [pc, #24]	; (23fecd4 <module_user_init_hook+0x60>)
 23fecba:	f7fd bf87 	b.w	23fcbcc <system_ctrl_set_app_request_handler>
 23fecbe:	bf00      	nop
 23fecc0:	023feb89 	.word	0x023feb89
 23fecc4:	1007b400 	.word	0x1007b400
 23fecc8:	9a271c1e 	.word	0x9a271c1e
 23feccc:	1007aeec 	.word	0x1007aeec
 23fecd0:	00000000 	.word	0x00000000
 23fecd4:	023fec3d 	.word	0x023fec3d

023fecd8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fecd8:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fecda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fecdc:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fecde:	d902      	bls.n	23fece6 <pinAvailable+0xe>
    return false;
 23fece0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fece2:	b003      	add	sp, #12
 23fece4:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fece6:	f1a0 030f 	sub.w	r3, r0, #15
 23fecea:	2b02      	cmp	r3, #2
 23fecec:	d90b      	bls.n	23fed06 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fecee:	2801      	cmp	r0, #1
 23fecf0:	d821      	bhi.n	23fed36 <pinAvailable+0x5e>
 23fecf2:	f000 f899 	bl	23fee28 <_Z19__fetch_global_Wirev>
 23fecf6:	2100      	movs	r1, #0
 23fecf8:	7c00      	ldrb	r0, [r0, #16]
 23fecfa:	f7fd fd45 	bl	23fc788 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fecfe:	f080 0001 	eor.w	r0, r0, #1
 23fed02:	b2c0      	uxtb	r0, r0
 23fed04:	e7ed      	b.n	23fece2 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fed06:	4d11      	ldr	r5, [pc, #68]	; (23fed4c <pinAvailable+0x74>)
 23fed08:	e8d5 1f8f 	ldab	r1, [r5]
 23fed0c:	f011 0101 	ands.w	r1, r1, #1
 23fed10:	d10b      	bne.n	23fed2a <pinAvailable+0x52>
 23fed12:	4628      	mov	r0, r5
 23fed14:	9101      	str	r1, [sp, #4]
 23fed16:	f7fc f91f 	bl	23faf58 <__cxa_guard_acquire>
 23fed1a:	9901      	ldr	r1, [sp, #4]
 23fed1c:	b128      	cbz	r0, 23fed2a <pinAvailable+0x52>
 23fed1e:	480c      	ldr	r0, [pc, #48]	; (23fed50 <pinAvailable+0x78>)
 23fed20:	f7ff fcaa 	bl	23fe678 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fed24:	4628      	mov	r0, r5
 23fed26:	f7fc f91c 	bl	23faf62 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fed2a:	4b09      	ldr	r3, [pc, #36]	; (23fed50 <pinAvailable+0x78>)
 23fed2c:	7818      	ldrb	r0, [r3, #0]
 23fed2e:	f7fd fd8d 	bl	23fc84c <hal_spi_is_enabled>
 23fed32:	2800      	cmp	r0, #0
 23fed34:	d1d4      	bne.n	23fece0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fed36:	3c08      	subs	r4, #8
 23fed38:	2c01      	cmp	r4, #1
 23fed3a:	d805      	bhi.n	23fed48 <pinAvailable+0x70>
 23fed3c:	f000 f8c8 	bl	23feed0 <_Z22__fetch_global_Serial1v>
 23fed40:	7c00      	ldrb	r0, [r0, #16]
 23fed42:	f7fd fe39 	bl	23fc9b8 <hal_usart_is_enabled>
 23fed46:	e7da      	b.n	23fecfe <pinAvailable+0x26>
  return true; // 'pin' is available
 23fed48:	2001      	movs	r0, #1
 23fed4a:	e7ca      	b.n	23fece2 <pinAvailable+0xa>
 23fed4c:	1007ae50 	.word	0x1007ae50
 23fed50:	1007ae54 	.word	0x1007ae54

023fed54 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fed54:	281b      	cmp	r0, #27
{
 23fed56:	b538      	push	{r3, r4, r5, lr}
 23fed58:	4604      	mov	r4, r0
 23fed5a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fed5c:	d80a      	bhi.n	23fed74 <pinMode+0x20>
 23fed5e:	29ff      	cmp	r1, #255	; 0xff
 23fed60:	d008      	beq.n	23fed74 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fed62:	f7ff ffb9 	bl	23fecd8 <pinAvailable>
 23fed66:	b128      	cbz	r0, 23fed74 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fed68:	4629      	mov	r1, r5
 23fed6a:	4620      	mov	r0, r4
}
 23fed6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fed70:	f7fd bc54 	b.w	23fc61c <hal_gpio_mode>
}
 23fed74:	bd38      	pop	{r3, r4, r5, pc}

023fed76 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fed76:	b538      	push	{r3, r4, r5, lr}
 23fed78:	4604      	mov	r4, r0
 23fed7a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fed7c:	f7fd fc5c 	bl	23fc638 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fed80:	28ff      	cmp	r0, #255	; 0xff
 23fed82:	d010      	beq.n	23feda6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fed84:	2806      	cmp	r0, #6
 23fed86:	d804      	bhi.n	23fed92 <digitalWrite+0x1c>
 23fed88:	234d      	movs	r3, #77	; 0x4d
 23fed8a:	fa23 f000 	lsr.w	r0, r3, r0
 23fed8e:	07c3      	lsls	r3, r0, #31
 23fed90:	d409      	bmi.n	23feda6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fed92:	4620      	mov	r0, r4
 23fed94:	f7ff ffa0 	bl	23fecd8 <pinAvailable>
 23fed98:	b128      	cbz	r0, 23feda6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fed9a:	4629      	mov	r1, r5
 23fed9c:	4620      	mov	r0, r4
}
 23fed9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23feda2:	f7fd bc57 	b.w	23fc654 <hal_gpio_write>
}
 23feda6:	bd38      	pop	{r3, r4, r5, pc}

023feda8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23feda8:	b510      	push	{r4, lr}
 23fedaa:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23fedac:	f7fd fc44 	bl	23fc638 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23fedb0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23fedb2:	b2db      	uxtb	r3, r3
 23fedb4:	2b01      	cmp	r3, #1
 23fedb6:	d908      	bls.n	23fedca <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23fedb8:	4620      	mov	r0, r4
 23fedba:	f7ff ff8d 	bl	23fecd8 <pinAvailable>
 23fedbe:	b120      	cbz	r0, 23fedca <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23fedc0:	4620      	mov	r0, r4
}
 23fedc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23fedc6:	f7fd bc53 	b.w	23fc670 <hal_gpio_read>
}
 23fedca:	2000      	movs	r0, #0
 23fedcc:	bd10      	pop	{r4, pc}

023fedce <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23fedce:	b510      	push	{r4, lr}
 23fedd0:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23fedd2:	f7ff ff81 	bl	23fecd8 <pinAvailable>
 23fedd6:	b150      	cbz	r0, 23fedee <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23fedd8:	2103      	movs	r1, #3
 23fedda:	4620      	mov	r0, r4
 23feddc:	f7fd fc10 	bl	23fc600 <hal_pin_validate_function>
 23fede0:	2803      	cmp	r0, #3
 23fede2:	d104      	bne.n	23fedee <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23fede4:	4620      	mov	r0, r4
}
 23fede6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23fedea:	f7fd bc4f 	b.w	23fc68c <hal_adc_read>
}
 23fedee:	2000      	movs	r0, #0
 23fedf0:	bd10      	pop	{r4, pc}

023fedf2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fedf2:	4770      	bx	lr

023fedf4 <_Z17acquireWireBufferv>:
{
 23fedf4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fedf6:	4b0a      	ldr	r3, [pc, #40]	; (23fee20 <_Z17acquireWireBufferv+0x2c>)
{
 23fedf8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fedfa:	6003      	str	r3, [r0, #0]
 23fedfc:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fedfe:	4909      	ldr	r1, [pc, #36]	; (23fee24 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fee00:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fee02:	2020      	movs	r0, #32
 23fee04:	f000 f8f6 	bl	23feff4 <_ZnajRKSt9nothrow_t>
	};
 23fee08:	2520      	movs	r5, #32
 23fee0a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fee0c:	4905      	ldr	r1, [pc, #20]	; (23fee24 <_Z17acquireWireBufferv+0x30>)
 23fee0e:	4628      	mov	r0, r5
	};
 23fee10:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fee12:	f000 f8ef 	bl	23feff4 <_ZnajRKSt9nothrow_t>
	};
 23fee16:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fee1a:	4620      	mov	r0, r4
 23fee1c:	bd38      	pop	{r3, r4, r5, pc}
 23fee1e:	bf00      	nop
 23fee20:	00010018 	.word	0x00010018
 23fee24:	023ffe5c 	.word	0x023ffe5c

023fee28 <_Z19__fetch_global_Wirev>:
{
 23fee28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fee2a:	4d0e      	ldr	r5, [pc, #56]	; (23fee64 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fee2c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fee2e:	e8d5 1f8f 	ldab	r1, [r5]
 23fee32:	f011 0401 	ands.w	r4, r1, #1
 23fee36:	d111      	bne.n	23fee5c <_Z19__fetch_global_Wirev+0x34>
 23fee38:	4628      	mov	r0, r5
 23fee3a:	f7fc f88d 	bl	23faf58 <__cxa_guard_acquire>
 23fee3e:	b168      	cbz	r0, 23fee5c <_Z19__fetch_global_Wirev+0x34>
 23fee40:	4668      	mov	r0, sp
 23fee42:	f7ff ffd7 	bl	23fedf4 <_Z17acquireWireBufferv>
 23fee46:	466a      	mov	r2, sp
 23fee48:	4621      	mov	r1, r4
 23fee4a:	4807      	ldr	r0, [pc, #28]	; (23fee68 <_Z19__fetch_global_Wirev+0x40>)
 23fee4c:	f7fe f8a4 	bl	23fcf98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fee50:	4628      	mov	r0, r5
 23fee52:	f7fc f886 	bl	23faf62 <__cxa_guard_release>
 23fee56:	4805      	ldr	r0, [pc, #20]	; (23fee6c <_Z19__fetch_global_Wirev+0x44>)
 23fee58:	f000 f8fa 	bl	23ff050 <atexit>
	return wire;
}
 23fee5c:	4802      	ldr	r0, [pc, #8]	; (23fee68 <_Z19__fetch_global_Wirev+0x40>)
 23fee5e:	b007      	add	sp, #28
 23fee60:	bd30      	pop	{r4, r5, pc}
 23fee62:	bf00      	nop
 23fee64:	1007aef8 	.word	0x1007aef8
 23fee68:	1007aefc 	.word	0x1007aefc
 23fee6c:	023fedf3 	.word	0x023fedf3

023fee70 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fee70:	4770      	bx	lr
	...

023fee74 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fee74:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fee76:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fee78:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fee7a:	462a      	mov	r2, r5
 23fee7c:	2100      	movs	r1, #0
 23fee7e:	f000 f91c 	bl	23ff0ba <memset>
 23fee82:	8025      	strh	r5, [r4, #0]
 23fee84:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fee86:	4907      	ldr	r1, [pc, #28]	; (23feea4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fee88:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fee8a:	8125      	strh	r5, [r4, #8]
 23fee8c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fee8e:	f000 f8b1 	bl	23feff4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fee92:	4904      	ldr	r1, [pc, #16]	; (23feea4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fee94:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fee96:	4628      	mov	r0, r5
 23fee98:	f000 f8ac 	bl	23feff4 <_ZnajRKSt9nothrow_t>
    };
 23fee9c:	60e0      	str	r0, [r4, #12]
}
 23fee9e:	4620      	mov	r0, r4
 23feea0:	bd38      	pop	{r3, r4, r5, pc}
 23feea2:	bf00      	nop
 23feea4:	023ffe5c 	.word	0x023ffe5c

023feea8 <__tcf_2>:
 23feea8:	4770      	bx	lr

023feeaa <__tcf_1>:
 23feeaa:	4770      	bx	lr

023feeac <_Z20acquireSerial1Bufferv>:
{
 23feeac:	b510      	push	{r4, lr}
 23feeae:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23feeb0:	f7ff ffe0 	bl	23fee74 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23feeb4:	4620      	mov	r0, r4
 23feeb6:	bd10      	pop	{r4, pc}

023feeb8 <_Z20acquireSerial2Bufferv>:
 23feeb8:	b510      	push	{r4, lr}
 23feeba:	4604      	mov	r4, r0
 23feebc:	f7ff ffda 	bl	23fee74 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23feec0:	4620      	mov	r0, r4
 23feec2:	bd10      	pop	{r4, pc}

023feec4 <_Z20acquireSerial3Bufferv>:
 23feec4:	b510      	push	{r4, lr}
 23feec6:	4604      	mov	r4, r0
 23feec8:	f7ff ffd4 	bl	23fee74 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23feecc:	4620      	mov	r0, r4
 23feece:	bd10      	pop	{r4, pc}

023feed0 <_Z22__fetch_global_Serial1v>:
{
 23feed0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23feed2:	4d0e      	ldr	r5, [pc, #56]	; (23fef0c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23feed4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23feed6:	e8d5 1f8f 	ldab	r1, [r5]
 23feeda:	f011 0401 	ands.w	r4, r1, #1
 23feede:	d111      	bne.n	23fef04 <_Z22__fetch_global_Serial1v+0x34>
 23feee0:	4628      	mov	r0, r5
 23feee2:	f7fc f839 	bl	23faf58 <__cxa_guard_acquire>
 23feee6:	b168      	cbz	r0, 23fef04 <_Z22__fetch_global_Serial1v+0x34>
 23feee8:	a801      	add	r0, sp, #4
 23feeea:	f7ff ffdf 	bl	23feeac <_Z20acquireSerial1Bufferv>
 23feeee:	4621      	mov	r1, r4
 23feef0:	aa01      	add	r2, sp, #4
 23feef2:	4807      	ldr	r0, [pc, #28]	; (23fef10 <_Z22__fetch_global_Serial1v+0x40>)
 23feef4:	f7ff fd62 	bl	23fe9bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23feef8:	4628      	mov	r0, r5
 23feefa:	f7fc f832 	bl	23faf62 <__cxa_guard_release>
 23feefe:	4805      	ldr	r0, [pc, #20]	; (23fef14 <_Z22__fetch_global_Serial1v+0x44>)
 23fef00:	f000 f8a6 	bl	23ff050 <atexit>
    return serial1;
}
 23fef04:	4802      	ldr	r0, [pc, #8]	; (23fef10 <_Z22__fetch_global_Serial1v+0x40>)
 23fef06:	b007      	add	sp, #28
 23fef08:	bd30      	pop	{r4, r5, pc}
 23fef0a:	bf00      	nop
 23fef0c:	1007af10 	.word	0x1007af10
 23fef10:	1007af1c 	.word	0x1007af1c
 23fef14:	023fee71 	.word	0x023fee71

023fef18 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fef18:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fef1a:	4c0d      	ldr	r4, [pc, #52]	; (23fef50 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fef1c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fef1e:	e8d4 3f8f 	ldab	r3, [r4]
 23fef22:	07db      	lsls	r3, r3, #31
 23fef24:	d411      	bmi.n	23fef4a <_Z22__fetch_global_Serial2v+0x32>
 23fef26:	4620      	mov	r0, r4
 23fef28:	f7fc f816 	bl	23faf58 <__cxa_guard_acquire>
 23fef2c:	b168      	cbz	r0, 23fef4a <_Z22__fetch_global_Serial2v+0x32>
 23fef2e:	a801      	add	r0, sp, #4
 23fef30:	f7ff ffc2 	bl	23feeb8 <_Z20acquireSerial2Bufferv>
 23fef34:	2101      	movs	r1, #1
 23fef36:	aa01      	add	r2, sp, #4
 23fef38:	4806      	ldr	r0, [pc, #24]	; (23fef54 <_Z22__fetch_global_Serial2v+0x3c>)
 23fef3a:	f7ff fd3f 	bl	23fe9bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fef3e:	4620      	mov	r0, r4
 23fef40:	f7fc f80f 	bl	23faf62 <__cxa_guard_release>
 23fef44:	4804      	ldr	r0, [pc, #16]	; (23fef58 <_Z22__fetch_global_Serial2v+0x40>)
 23fef46:	f000 f883 	bl	23ff050 <atexit>
	return serial2;
}
 23fef4a:	4802      	ldr	r0, [pc, #8]	; (23fef54 <_Z22__fetch_global_Serial2v+0x3c>)
 23fef4c:	b006      	add	sp, #24
 23fef4e:	bd10      	pop	{r4, pc}
 23fef50:	1007af14 	.word	0x1007af14
 23fef54:	1007af30 	.word	0x1007af30
 23fef58:	023feeab 	.word	0x023feeab

023fef5c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fef5c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fef5e:	f7ff ffdb 	bl	23fef18 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fef62:	4b07      	ldr	r3, [pc, #28]	; (23fef80 <_Z15serialEventRun2v+0x24>)
 23fef64:	4604      	mov	r4, r0
 23fef66:	b153      	cbz	r3, 23fef7e <_Z15serialEventRun2v+0x22>
 23fef68:	f7ff fd46 	bl	23fe9f8 <_ZN11USARTSerial9isEnabledEv>
 23fef6c:	b138      	cbz	r0, 23fef7e <_Z15serialEventRun2v+0x22>
 23fef6e:	6823      	ldr	r3, [r4, #0]
 23fef70:	4620      	mov	r0, r4
 23fef72:	691b      	ldr	r3, [r3, #16]
 23fef74:	4798      	blx	r3
 23fef76:	2800      	cmp	r0, #0
 23fef78:	dd01      	ble.n	23fef7e <_Z15serialEventRun2v+0x22>
        handler();
 23fef7a:	e000      	b.n	23fef7e <_Z15serialEventRun2v+0x22>
 23fef7c:	bf00      	nop
}
 23fef7e:	bd10      	pop	{r4, pc}
 23fef80:	00000000 	.word	0x00000000

023fef84 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fef84:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fef86:	4c0d      	ldr	r4, [pc, #52]	; (23fefbc <_Z22__fetch_global_Serial3v+0x38>)
{
 23fef88:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fef8a:	e8d4 3f8f 	ldab	r3, [r4]
 23fef8e:	07db      	lsls	r3, r3, #31
 23fef90:	d411      	bmi.n	23fefb6 <_Z22__fetch_global_Serial3v+0x32>
 23fef92:	4620      	mov	r0, r4
 23fef94:	f7fb ffe0 	bl	23faf58 <__cxa_guard_acquire>
 23fef98:	b168      	cbz	r0, 23fefb6 <_Z22__fetch_global_Serial3v+0x32>
 23fef9a:	a801      	add	r0, sp, #4
 23fef9c:	f7ff ff92 	bl	23feec4 <_Z20acquireSerial3Bufferv>
 23fefa0:	2102      	movs	r1, #2
 23fefa2:	aa01      	add	r2, sp, #4
 23fefa4:	4806      	ldr	r0, [pc, #24]	; (23fefc0 <_Z22__fetch_global_Serial3v+0x3c>)
 23fefa6:	f7ff fd09 	bl	23fe9bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fefaa:	4620      	mov	r0, r4
 23fefac:	f7fb ffd9 	bl	23faf62 <__cxa_guard_release>
 23fefb0:	4804      	ldr	r0, [pc, #16]	; (23fefc4 <_Z22__fetch_global_Serial3v+0x40>)
 23fefb2:	f000 f84d 	bl	23ff050 <atexit>
	return serial3;
}
 23fefb6:	4802      	ldr	r0, [pc, #8]	; (23fefc0 <_Z22__fetch_global_Serial3v+0x3c>)
 23fefb8:	b006      	add	sp, #24
 23fefba:	bd10      	pop	{r4, pc}
 23fefbc:	1007af18 	.word	0x1007af18
 23fefc0:	1007af44 	.word	0x1007af44
 23fefc4:	023feea9 	.word	0x023feea9

023fefc8 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fefc8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fefca:	f7ff ffdb 	bl	23fef84 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fefce:	4b07      	ldr	r3, [pc, #28]	; (23fefec <_Z15serialEventRun3v+0x24>)
 23fefd0:	4604      	mov	r4, r0
 23fefd2:	b153      	cbz	r3, 23fefea <_Z15serialEventRun3v+0x22>
 23fefd4:	f7ff fd10 	bl	23fe9f8 <_ZN11USARTSerial9isEnabledEv>
 23fefd8:	b138      	cbz	r0, 23fefea <_Z15serialEventRun3v+0x22>
 23fefda:	6823      	ldr	r3, [r4, #0]
 23fefdc:	4620      	mov	r0, r4
 23fefde:	691b      	ldr	r3, [r3, #16]
 23fefe0:	4798      	blx	r3
 23fefe2:	2800      	cmp	r0, #0
 23fefe4:	dd01      	ble.n	23fefea <_Z15serialEventRun3v+0x22>
        handler();
 23fefe6:	e000      	b.n	23fefea <_Z15serialEventRun3v+0x22>
 23fefe8:	bf00      	nop
}
 23fefea:	bd10      	pop	{r4, pc}
 23fefec:	00000000 	.word	0x00000000

023feff0 <_ZnwjRKSt9nothrow_t>:
 23feff0:	f7fb bf9f 	b.w	23faf32 <_Znwj>

023feff4 <_ZnajRKSt9nothrow_t>:
 23feff4:	f7fb bf9f 	b.w	23faf36 <_Znaj>

023feff8 <sqrtf>:
 23feff8:	b508      	push	{r3, lr}
 23feffa:	ed2d 8b02 	vpush	{d8}
 23feffe:	eeb0 8a40 	vmov.f32	s16, s0
 23ff002:	f000 f821 	bl	23ff048 <__ieee754_sqrtf>
 23ff006:	4b0e      	ldr	r3, [pc, #56]	; (23ff040 <sqrtf+0x48>)
 23ff008:	f993 3000 	ldrsb.w	r3, [r3]
 23ff00c:	3301      	adds	r3, #1
 23ff00e:	d00b      	beq.n	23ff028 <sqrtf+0x30>
 23ff010:	eeb4 8a48 	vcmp.f32	s16, s16
 23ff014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ff018:	d606      	bvs.n	23ff028 <sqrtf+0x30>
 23ff01a:	eddf 8a0a 	vldr	s17, [pc, #40]	; 23ff044 <sqrtf+0x4c>
 23ff01e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 23ff022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ff026:	d402      	bmi.n	23ff02e <sqrtf+0x36>
 23ff028:	ecbd 8b02 	vpop	{d8}
 23ff02c:	bd08      	pop	{r3, pc}
 23ff02e:	f7fd fed7 	bl	23fcde0 <__errno>
 23ff032:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 23ff036:	2321      	movs	r3, #33	; 0x21
 23ff038:	6003      	str	r3, [r0, #0]
 23ff03a:	ecbd 8b02 	vpop	{d8}
 23ff03e:	bd08      	pop	{r3, pc}
 23ff040:	1007a9d8 	.word	0x1007a9d8
 23ff044:	00000000 	.word	0x00000000

023ff048 <__ieee754_sqrtf>:
 23ff048:	eeb1 0ac0 	vsqrt.f32	s0, s0
 23ff04c:	4770      	bx	lr
 23ff04e:	bf00      	nop

023ff050 <atexit>:
 23ff050:	2300      	movs	r3, #0
 23ff052:	4601      	mov	r1, r0
 23ff054:	461a      	mov	r2, r3
 23ff056:	4618      	mov	r0, r3
 23ff058:	f000 b93a 	b.w	23ff2d0 <__register_exitproc>

023ff05c <isprint>:
 23ff05c:	4b02      	ldr	r3, [pc, #8]	; (23ff068 <isprint+0xc>)
 23ff05e:	4418      	add	r0, r3
 23ff060:	7840      	ldrb	r0, [r0, #1]
 23ff062:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff066:	4770      	bx	lr
 23ff068:	023ffecd 	.word	0x023ffecd

023ff06c <memcpy>:
 23ff06c:	440a      	add	r2, r1
 23ff06e:	1e43      	subs	r3, r0, #1
 23ff070:	4291      	cmp	r1, r2
 23ff072:	d100      	bne.n	23ff076 <memcpy+0xa>
 23ff074:	4770      	bx	lr
 23ff076:	b510      	push	{r4, lr}
 23ff078:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff07c:	4291      	cmp	r1, r2
 23ff07e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff082:	d1f9      	bne.n	23ff078 <memcpy+0xc>
 23ff084:	bd10      	pop	{r4, pc}

023ff086 <memmove>:
 23ff086:	4288      	cmp	r0, r1
 23ff088:	b510      	push	{r4, lr}
 23ff08a:	eb01 0402 	add.w	r4, r1, r2
 23ff08e:	d902      	bls.n	23ff096 <memmove+0x10>
 23ff090:	4284      	cmp	r4, r0
 23ff092:	4623      	mov	r3, r4
 23ff094:	d807      	bhi.n	23ff0a6 <memmove+0x20>
 23ff096:	1e43      	subs	r3, r0, #1
 23ff098:	42a1      	cmp	r1, r4
 23ff09a:	d008      	beq.n	23ff0ae <memmove+0x28>
 23ff09c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff0a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff0a4:	e7f8      	b.n	23ff098 <memmove+0x12>
 23ff0a6:	4402      	add	r2, r0
 23ff0a8:	4601      	mov	r1, r0
 23ff0aa:	428a      	cmp	r2, r1
 23ff0ac:	d100      	bne.n	23ff0b0 <memmove+0x2a>
 23ff0ae:	bd10      	pop	{r4, pc}
 23ff0b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff0b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff0b8:	e7f7      	b.n	23ff0aa <memmove+0x24>

023ff0ba <memset>:
 23ff0ba:	4402      	add	r2, r0
 23ff0bc:	4603      	mov	r3, r0
 23ff0be:	4293      	cmp	r3, r2
 23ff0c0:	d100      	bne.n	23ff0c4 <memset+0xa>
 23ff0c2:	4770      	bx	lr
 23ff0c4:	f803 1b01 	strb.w	r1, [r3], #1
 23ff0c8:	e7f9      	b.n	23ff0be <memset+0x4>
	...

023ff0cc <srand>:
 23ff0cc:	b538      	push	{r3, r4, r5, lr}
 23ff0ce:	4b10      	ldr	r3, [pc, #64]	; (23ff110 <srand+0x44>)
 23ff0d0:	4604      	mov	r4, r0
 23ff0d2:	681d      	ldr	r5, [r3, #0]
 23ff0d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff0d6:	b9b3      	cbnz	r3, 23ff106 <srand+0x3a>
 23ff0d8:	2018      	movs	r0, #24
 23ff0da:	f7fd fe49 	bl	23fcd70 <malloc>
 23ff0de:	4602      	mov	r2, r0
 23ff0e0:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff0e2:	b920      	cbnz	r0, 23ff0ee <srand+0x22>
 23ff0e4:	4b0b      	ldr	r3, [pc, #44]	; (23ff114 <srand+0x48>)
 23ff0e6:	2142      	movs	r1, #66	; 0x42
 23ff0e8:	480b      	ldr	r0, [pc, #44]	; (23ff118 <srand+0x4c>)
 23ff0ea:	f7fd fe87 	bl	23fcdfc <__assert_func>
 23ff0ee:	490b      	ldr	r1, [pc, #44]	; (23ff11c <srand+0x50>)
 23ff0f0:	4b0b      	ldr	r3, [pc, #44]	; (23ff120 <srand+0x54>)
 23ff0f2:	e9c0 1300 	strd	r1, r3, [r0]
 23ff0f6:	4b0b      	ldr	r3, [pc, #44]	; (23ff124 <srand+0x58>)
 23ff0f8:	2100      	movs	r1, #0
 23ff0fa:	6083      	str	r3, [r0, #8]
 23ff0fc:	230b      	movs	r3, #11
 23ff0fe:	8183      	strh	r3, [r0, #12]
 23ff100:	2001      	movs	r0, #1
 23ff102:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff106:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff108:	2200      	movs	r2, #0
 23ff10a:	611c      	str	r4, [r3, #16]
 23ff10c:	615a      	str	r2, [r3, #20]
 23ff10e:	bd38      	pop	{r3, r4, r5, pc}
 23ff110:	1007a9dc 	.word	0x1007a9dc
 23ff114:	023ffe5d 	.word	0x023ffe5d
 23ff118:	023ffe74 	.word	0x023ffe74
 23ff11c:	abcd330e 	.word	0xabcd330e
 23ff120:	e66d1234 	.word	0xe66d1234
 23ff124:	0005deec 	.word	0x0005deec

023ff128 <strchr>:
 23ff128:	b2c9      	uxtb	r1, r1
 23ff12a:	4603      	mov	r3, r0
 23ff12c:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff130:	b11a      	cbz	r2, 23ff13a <strchr+0x12>
 23ff132:	428a      	cmp	r2, r1
 23ff134:	d1f9      	bne.n	23ff12a <strchr+0x2>
 23ff136:	4618      	mov	r0, r3
 23ff138:	4770      	bx	lr
 23ff13a:	2900      	cmp	r1, #0
 23ff13c:	bf18      	it	ne
 23ff13e:	2300      	movne	r3, #0
 23ff140:	e7f9      	b.n	23ff136 <strchr+0xe>

023ff142 <strchrnul>:
 23ff142:	b510      	push	{r4, lr}
 23ff144:	4604      	mov	r4, r0
 23ff146:	f7ff ffef 	bl	23ff128 <strchr>
 23ff14a:	b918      	cbnz	r0, 23ff154 <strchrnul+0x12>
 23ff14c:	4620      	mov	r0, r4
 23ff14e:	f7fb fecb 	bl	23faee8 <strlen>
 23ff152:	4420      	add	r0, r4
 23ff154:	bd10      	pop	{r4, pc}

023ff156 <strcpy>:
 23ff156:	4603      	mov	r3, r0
 23ff158:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff15c:	f803 2b01 	strb.w	r2, [r3], #1
 23ff160:	2a00      	cmp	r2, #0
 23ff162:	d1f9      	bne.n	23ff158 <strcpy+0x2>
 23ff164:	4770      	bx	lr

023ff166 <strncmp>:
 23ff166:	b510      	push	{r4, lr}
 23ff168:	b17a      	cbz	r2, 23ff18a <strncmp+0x24>
 23ff16a:	4603      	mov	r3, r0
 23ff16c:	3901      	subs	r1, #1
 23ff16e:	1884      	adds	r4, r0, r2
 23ff170:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff174:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff178:	4290      	cmp	r0, r2
 23ff17a:	d101      	bne.n	23ff180 <strncmp+0x1a>
 23ff17c:	42a3      	cmp	r3, r4
 23ff17e:	d101      	bne.n	23ff184 <strncmp+0x1e>
 23ff180:	1a80      	subs	r0, r0, r2
 23ff182:	bd10      	pop	{r4, pc}
 23ff184:	2800      	cmp	r0, #0
 23ff186:	d1f3      	bne.n	23ff170 <strncmp+0xa>
 23ff188:	e7fa      	b.n	23ff180 <strncmp+0x1a>
 23ff18a:	4610      	mov	r0, r2
 23ff18c:	e7f9      	b.n	23ff182 <strncmp+0x1c>

023ff18e <strrchr>:
 23ff18e:	b538      	push	{r3, r4, r5, lr}
 23ff190:	4603      	mov	r3, r0
 23ff192:	460c      	mov	r4, r1
 23ff194:	b969      	cbnz	r1, 23ff1b2 <strrchr+0x24>
 23ff196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff19a:	f7ff bfc5 	b.w	23ff128 <strchr>
 23ff19e:	1c43      	adds	r3, r0, #1
 23ff1a0:	4605      	mov	r5, r0
 23ff1a2:	4621      	mov	r1, r4
 23ff1a4:	4618      	mov	r0, r3
 23ff1a6:	f7ff ffbf 	bl	23ff128 <strchr>
 23ff1aa:	2800      	cmp	r0, #0
 23ff1ac:	d1f7      	bne.n	23ff19e <strrchr+0x10>
 23ff1ae:	4628      	mov	r0, r5
 23ff1b0:	bd38      	pop	{r3, r4, r5, pc}
 23ff1b2:	2500      	movs	r5, #0
 23ff1b4:	e7f5      	b.n	23ff1a2 <strrchr+0x14>
	...

023ff1b8 <_strtol_l.constprop.0>:
 23ff1b8:	2b01      	cmp	r3, #1
 23ff1ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff1be:	d001      	beq.n	23ff1c4 <_strtol_l.constprop.0+0xc>
 23ff1c0:	2b24      	cmp	r3, #36	; 0x24
 23ff1c2:	d906      	bls.n	23ff1d2 <_strtol_l.constprop.0+0x1a>
 23ff1c4:	f7fd fe0c 	bl	23fcde0 <__errno>
 23ff1c8:	2316      	movs	r3, #22
 23ff1ca:	6003      	str	r3, [r0, #0]
 23ff1cc:	2000      	movs	r0, #0
 23ff1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff1d2:	460d      	mov	r5, r1
 23ff1d4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff2b8 <_strtol_l.constprop.0+0x100>
 23ff1d8:	462e      	mov	r6, r5
 23ff1da:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff1de:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff1e2:	f017 0708 	ands.w	r7, r7, #8
 23ff1e6:	d1f7      	bne.n	23ff1d8 <_strtol_l.constprop.0+0x20>
 23ff1e8:	2c2d      	cmp	r4, #45	; 0x2d
 23ff1ea:	d132      	bne.n	23ff252 <_strtol_l.constprop.0+0x9a>
 23ff1ec:	782c      	ldrb	r4, [r5, #0]
 23ff1ee:	2701      	movs	r7, #1
 23ff1f0:	1cb5      	adds	r5, r6, #2
 23ff1f2:	2b00      	cmp	r3, #0
 23ff1f4:	d05b      	beq.n	23ff2ae <_strtol_l.constprop.0+0xf6>
 23ff1f6:	2b10      	cmp	r3, #16
 23ff1f8:	d109      	bne.n	23ff20e <_strtol_l.constprop.0+0x56>
 23ff1fa:	2c30      	cmp	r4, #48	; 0x30
 23ff1fc:	d107      	bne.n	23ff20e <_strtol_l.constprop.0+0x56>
 23ff1fe:	782c      	ldrb	r4, [r5, #0]
 23ff200:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff204:	2c58      	cmp	r4, #88	; 0x58
 23ff206:	d14d      	bne.n	23ff2a4 <_strtol_l.constprop.0+0xec>
 23ff208:	786c      	ldrb	r4, [r5, #1]
 23ff20a:	2310      	movs	r3, #16
 23ff20c:	3502      	adds	r5, #2
 23ff20e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff212:	f04f 0c00 	mov.w	ip, #0
 23ff216:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff21a:	4666      	mov	r6, ip
 23ff21c:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff220:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff224:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff228:	f1be 0f09 	cmp.w	lr, #9
 23ff22c:	d816      	bhi.n	23ff25c <_strtol_l.constprop.0+0xa4>
 23ff22e:	4674      	mov	r4, lr
 23ff230:	42a3      	cmp	r3, r4
 23ff232:	dd24      	ble.n	23ff27e <_strtol_l.constprop.0+0xc6>
 23ff234:	f1bc 0f00 	cmp.w	ip, #0
 23ff238:	db1e      	blt.n	23ff278 <_strtol_l.constprop.0+0xc0>
 23ff23a:	45b1      	cmp	r9, r6
 23ff23c:	d31c      	bcc.n	23ff278 <_strtol_l.constprop.0+0xc0>
 23ff23e:	d101      	bne.n	23ff244 <_strtol_l.constprop.0+0x8c>
 23ff240:	45a2      	cmp	sl, r4
 23ff242:	db19      	blt.n	23ff278 <_strtol_l.constprop.0+0xc0>
 23ff244:	fb06 4603 	mla	r6, r6, r3, r4
 23ff248:	f04f 0c01 	mov.w	ip, #1
 23ff24c:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff250:	e7e8      	b.n	23ff224 <_strtol_l.constprop.0+0x6c>
 23ff252:	2c2b      	cmp	r4, #43	; 0x2b
 23ff254:	bf04      	itt	eq
 23ff256:	782c      	ldrbeq	r4, [r5, #0]
 23ff258:	1cb5      	addeq	r5, r6, #2
 23ff25a:	e7ca      	b.n	23ff1f2 <_strtol_l.constprop.0+0x3a>
 23ff25c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff260:	f1be 0f19 	cmp.w	lr, #25
 23ff264:	d801      	bhi.n	23ff26a <_strtol_l.constprop.0+0xb2>
 23ff266:	3c37      	subs	r4, #55	; 0x37
 23ff268:	e7e2      	b.n	23ff230 <_strtol_l.constprop.0+0x78>
 23ff26a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff26e:	f1be 0f19 	cmp.w	lr, #25
 23ff272:	d804      	bhi.n	23ff27e <_strtol_l.constprop.0+0xc6>
 23ff274:	3c57      	subs	r4, #87	; 0x57
 23ff276:	e7db      	b.n	23ff230 <_strtol_l.constprop.0+0x78>
 23ff278:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff27c:	e7e6      	b.n	23ff24c <_strtol_l.constprop.0+0x94>
 23ff27e:	f1bc 0f00 	cmp.w	ip, #0
 23ff282:	da05      	bge.n	23ff290 <_strtol_l.constprop.0+0xd8>
 23ff284:	2322      	movs	r3, #34	; 0x22
 23ff286:	4646      	mov	r6, r8
 23ff288:	6003      	str	r3, [r0, #0]
 23ff28a:	b942      	cbnz	r2, 23ff29e <_strtol_l.constprop.0+0xe6>
 23ff28c:	4630      	mov	r0, r6
 23ff28e:	e79e      	b.n	23ff1ce <_strtol_l.constprop.0+0x16>
 23ff290:	b107      	cbz	r7, 23ff294 <_strtol_l.constprop.0+0xdc>
 23ff292:	4276      	negs	r6, r6
 23ff294:	2a00      	cmp	r2, #0
 23ff296:	d0f9      	beq.n	23ff28c <_strtol_l.constprop.0+0xd4>
 23ff298:	f1bc 0f00 	cmp.w	ip, #0
 23ff29c:	d000      	beq.n	23ff2a0 <_strtol_l.constprop.0+0xe8>
 23ff29e:	1e69      	subs	r1, r5, #1
 23ff2a0:	6011      	str	r1, [r2, #0]
 23ff2a2:	e7f3      	b.n	23ff28c <_strtol_l.constprop.0+0xd4>
 23ff2a4:	2430      	movs	r4, #48	; 0x30
 23ff2a6:	2b00      	cmp	r3, #0
 23ff2a8:	d1b1      	bne.n	23ff20e <_strtol_l.constprop.0+0x56>
 23ff2aa:	2308      	movs	r3, #8
 23ff2ac:	e7af      	b.n	23ff20e <_strtol_l.constprop.0+0x56>
 23ff2ae:	2c30      	cmp	r4, #48	; 0x30
 23ff2b0:	d0a5      	beq.n	23ff1fe <_strtol_l.constprop.0+0x46>
 23ff2b2:	230a      	movs	r3, #10
 23ff2b4:	e7ab      	b.n	23ff20e <_strtol_l.constprop.0+0x56>
 23ff2b6:	bf00      	nop
 23ff2b8:	023ffece 	.word	0x023ffece

023ff2bc <strtol>:
 23ff2bc:	4613      	mov	r3, r2
 23ff2be:	460a      	mov	r2, r1
 23ff2c0:	4601      	mov	r1, r0
 23ff2c2:	4802      	ldr	r0, [pc, #8]	; (23ff2cc <strtol+0x10>)
 23ff2c4:	6800      	ldr	r0, [r0, #0]
 23ff2c6:	f7ff bf77 	b.w	23ff1b8 <_strtol_l.constprop.0>
 23ff2ca:	bf00      	nop
 23ff2cc:	1007a9dc 	.word	0x1007a9dc

023ff2d0 <__register_exitproc>:
 23ff2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff2d4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff394 <__register_exitproc+0xc4>
 23ff2d8:	4606      	mov	r6, r0
 23ff2da:	461f      	mov	r7, r3
 23ff2dc:	460d      	mov	r5, r1
 23ff2de:	f8d8 0000 	ldr.w	r0, [r8]
 23ff2e2:	4691      	mov	r9, r2
 23ff2e4:	f000 f858 	bl	23ff398 <__retarget_lock_acquire_recursive>
 23ff2e8:	4b26      	ldr	r3, [pc, #152]	; (23ff384 <__register_exitproc+0xb4>)
 23ff2ea:	681c      	ldr	r4, [r3, #0]
 23ff2ec:	b934      	cbnz	r4, 23ff2fc <__register_exitproc+0x2c>
 23ff2ee:	4c26      	ldr	r4, [pc, #152]	; (23ff388 <__register_exitproc+0xb8>)
 23ff2f0:	601c      	str	r4, [r3, #0]
 23ff2f2:	4b26      	ldr	r3, [pc, #152]	; (23ff38c <__register_exitproc+0xbc>)
 23ff2f4:	b113      	cbz	r3, 23ff2fc <__register_exitproc+0x2c>
 23ff2f6:	681b      	ldr	r3, [r3, #0]
 23ff2f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff2fc:	6863      	ldr	r3, [r4, #4]
 23ff2fe:	2b1f      	cmp	r3, #31
 23ff300:	dd07      	ble.n	23ff312 <__register_exitproc+0x42>
 23ff302:	f8d8 0000 	ldr.w	r0, [r8]
 23ff306:	f000 f849 	bl	23ff39c <__retarget_lock_release_recursive>
 23ff30a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff312:	b35e      	cbz	r6, 23ff36c <__register_exitproc+0x9c>
 23ff314:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff318:	b988      	cbnz	r0, 23ff33e <__register_exitproc+0x6e>
 23ff31a:	4b1d      	ldr	r3, [pc, #116]	; (23ff390 <__register_exitproc+0xc0>)
 23ff31c:	b923      	cbnz	r3, 23ff328 <__register_exitproc+0x58>
 23ff31e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff322:	f000 f83a 	bl	23ff39a <__retarget_lock_release>
 23ff326:	e7f0      	b.n	23ff30a <__register_exitproc+0x3a>
 23ff328:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff32c:	f7fd fd20 	bl	23fcd70 <malloc>
 23ff330:	2800      	cmp	r0, #0
 23ff332:	d0f4      	beq.n	23ff31e <__register_exitproc+0x4e>
 23ff334:	2300      	movs	r3, #0
 23ff336:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff33a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff33e:	6863      	ldr	r3, [r4, #4]
 23ff340:	2201      	movs	r2, #1
 23ff342:	2e02      	cmp	r6, #2
 23ff344:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff348:	fa02 f203 	lsl.w	r2, r2, r3
 23ff34c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff350:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff354:	ea43 0302 	orr.w	r3, r3, r2
 23ff358:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff35c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff360:	bf02      	ittt	eq
 23ff362:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff366:	4313      	orreq	r3, r2
 23ff368:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff36c:	6863      	ldr	r3, [r4, #4]
 23ff36e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff372:	1c5a      	adds	r2, r3, #1
 23ff374:	3302      	adds	r3, #2
 23ff376:	6062      	str	r2, [r4, #4]
 23ff378:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff37c:	f000 f80e 	bl	23ff39c <__retarget_lock_release_recursive>
 23ff380:	2000      	movs	r0, #0
 23ff382:	e7c4      	b.n	23ff30e <__register_exitproc+0x3e>
 23ff384:	1007afe4 	.word	0x1007afe4
 23ff388:	1007af58 	.word	0x1007af58
 23ff38c:	00000000 	.word	0x00000000
 23ff390:	023fcd71 	.word	0x023fcd71
 23ff394:	1007aa40 	.word	0x1007aa40

023ff398 <__retarget_lock_acquire_recursive>:
 23ff398:	4770      	bx	lr

023ff39a <__retarget_lock_release>:
 23ff39a:	4770      	bx	lr

023ff39c <__retarget_lock_release_recursive>:
 23ff39c:	4770      	bx	lr
	...

023ff3a0 <dynalib_user>:
 23ff3a0:	aef9 023f af21 023f af25 023f 0000 0000     ..?.!.?.%.?.....
 23ff3b0:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ff3c0:	7574 6c61 5300 4355 4543 5353 5320 5445     tual.SUCCESS SET
 23ff3d0:	4954 474e 4720 4941 3a4e 2520 0064 4146     TING GAIN: %d.FA
 23ff3e0:	4c49 4445 5420 204f 4553 2054 4147 4e49     ILED TO SET GAIN
 23ff3f0:	203a 6425 4f00 454c 2044 6546 7461 6568     : %d.OLED Feathe
 23ff400:	5772 6e69 2067 6574 7473 5200 534d 4320     rWing test.RMS C
 23ff410:	7275 6572 746e 203a 6625 5000 776f 7265     urrent: %f.Power
 23ff420:	203a 6625 0000 0000                         : %f....

023ff428 <_ZTV5Timer>:
	...
 23ff430:	b181 023f b1c5 023f af6b 023f               ..?...?.k.?.

023ff43c <_ZTVN5spark10LogHandlerE>:
	...
 23ff44c:	af41 023f af69 023f                         A.?.i.?.

023ff454 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff45c:	b125 023f b159 023f e115 023f e2bd 023f     %.?.Y.?...?...?.

023ff46c <_ZN7Bitmaps3fanE>:
 23ff46c:	0000 0000 0000 7e00 0100 80ff 8103 06c0     .......~........
 23ff47c:	6000 700c 1830 18f0 f818 3018 0c78 2030     .`.p0......0x.0 
 23ff48c:	300c cc1b 5b30 30cc cce7 e331 198c 18e0     .0..0[.0..1.....
 23ff49c:	e018 0c18 3000 0006 0360 c081 ff01 0080     .....0..`.......
 23ff4ac:	007e 0000 0000 0000                         ~.......

023ff4b4 <_ZN7Bitmaps4lampE>:
 23ff4b4:	0000 0000 0000 8003 0300 c083 ff03 07c0     ................
 23ff4c4:	c0ff e30f 1fc0 c0f0 f01f 1fe0 e0f0 f01f     ................
 23ff4d4:	0060 7800 0000 0078 7800 0000 00f8 e000     `..x..x..x......
 23ff4e4:	0100 00c0 8003 0700 0000 0007 7f00 00c0     ................
 23ff4f4:	c07f 0000 0000 0000                         ........

023ff4fc <_ZN7Bitmaps6fridgeE>:
 23ff4fc:	0000 0000 0000 ff07 0fe0 f0ff 000c 0c30     ..............0.
 23ff50c:	3000 c00c 0c30 30c0 000c 0c30 3000 ff0f     .0..0..0..0..0..
 23ff51c:	0ff0 f0ff 000c 0c30 3000 c00c 0c30 30c0     ......0..0..0..0
 23ff52c:	c00c 0c30 30c0 000c 0c30 3000 ff0f 07f0     ..0..0..0..0....
 23ff53c:	e0ff 0000 0000 0000                         ........

023ff544 <_ZN7Bitmaps7blenderE>:
 23ff544:	0000 0000 0000 ff1f 1ff8 fcff ff1f 0fcc     ................
 23ff554:	ccff f90f 07cc ccf9 f907 07cc ccf9 f907     ................
 23ff564:	07cc c0f9 ff07 03c0 c0ff ff03 03c0 c0ff     ................
 23ff574:	0000 0000 0000 ff07 0fe0 f0e7 e70f 0ff0     ................
 23ff584:	f0ff 0000 0000 0000                         ........

023ff58c <_ZL4font>:
 23ff58c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff59c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff5ac:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff5bc:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff5cc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff5dc:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff5ec:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff5fc:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff60c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff61c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff62c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff63c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff64c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff65c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff66c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff67c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff68c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff69c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff6ac:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff6bc:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff6cc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff6dc:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff6ec:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff6fc:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff70c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff71c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff72c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff73c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff74c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff75c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff76c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff77c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff78c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff79c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff7ac:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff7bc:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff7cc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff7dc:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff7ec:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff7fc:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff80c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff81c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff82c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff83c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ff84c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ff85c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ff86c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ff87c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ff88c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ff89c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ff8ac:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ff8bc:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ff8cc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ff8dc:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ff8ec:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ff8fc:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ff90c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ff91c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ff92c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ff93c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ff94c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ff95c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ff96c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ff97c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ff98c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ff99c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ff9ac:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ff9bc:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ff9cc:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ff9dc:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ff9ec:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ff9fc:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ffa0c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ffa1c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ffa2c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ffa3c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ffa4c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ffa5c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ffa6c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ffa7c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

023ffa8c <_ZTV12Adafruit_GFX>:
	...
 23ffa9c:	bed9 023f e5cd 023f af41 023f b98b 023f     ..?...?.A.?...?.
 23ffaac:	b98d 023f b9bf 023f b99b 023f b9ad 023f     ..?...?...?...?.
 23ffabc:	b8cd 023f b98b 023f bbb5 023f bbb3 023f     ..?...?...?...?.
 23ffacc:	b9d7 023f ba15 023f ba4f 023f ba95 023f     ..?...?.O.?...?.
 23ffadc:	bab1 023f bb33 023f                         ..?.3.?.

023ffae4 <_ZTV17Adafruit_GrayOLED>:
	...
 23ffaf4:	bed9 023f e5cd 023f bfdb 023f b98b 023f     ..?...?...?...?.
 23ffb04:	b98d 023f b9bf 023f b99b 023f b9ad 023f     ..?...?...?...?.
 23ffb14:	b8cd 023f b98b 023f bbb5 023f c1d7 023f     ..?...?...?...?.
 23ffb24:	b9d7 023f ba15 023f ba4f 023f ba95 023f     ..?...?.O.?...?.
 23ffb34:	bab1 023f bb33 023f af41 023f               ..?.3.?.A.?.

023ffb40 <_ZTV15Adafruit_SH1107>:
	...
 23ffb48:	c1e5 023f c1f9 023f bed9 023f e5cd 023f     ..?...?...?...?.
 23ffb58:	bfdb 023f b98b 023f b98d 023f b9bf 023f     ..?...?...?...?.
 23ffb68:	b99b 023f b9ad 023f b8cd 023f b98b 023f     ..?...?...?...?.
 23ffb78:	bbb5 023f c1d7 023f b9d7 023f ba15 023f     ..?...?...?...?.
 23ffb88:	ba4f 023f ba95 023f bab1 023f bb33 023f     O.?...?...?.3.?.
 23ffb98:	c235 023f                                   5.?.

023ffb9c <_ZTV15Adafruit_SH110X>:
	...
 23ffba4:	af41 023f af41 023f bed9 023f e5cd 023f     A.?.A.?...?...?.
 23ffbb4:	bfdb 023f b98b 023f b98d 023f b9bf 023f     ..?...?...?...?.
 23ffbc4:	b99b 023f b9ad 023f b8cd 023f b98b 023f     ..?...?...?...?.
 23ffbd4:	bbb5 023f c1d7 023f b9d7 023f ba15 023f     ..?...?...?...?.
 23ffbe4:	ba4f 023f ba95 023f bab1 023f bb33 023f     O.?...?...?.3.?.
 23ffbf4:	c235 023f                                   5.?.

023ffbf8 <_ZTVN5spark13EthernetClassE>:
	...
 23ffc00:	cf23 023f cf19 023f cf0f 023f cf05 023f     #.?...?...?...?.
 23ffc10:	cef9 023f ceed 023f e4a9 023f e4b1 023f     ..?...?...?...?.
 23ffc20:	cee1 023f ced9 023f cecf 023f cec5 023f     ..?...?...?...?.
 23ffc30:	e4e1 023f                                   ..?.

023ffc34 <_ZTV7TwoWire>:
	...
 23ffc3c:	cf41 023f cf8b 023f cf63 023f cf43 023f     A.?...?.c.?.C.?.
 23ffc4c:	cf6b 023f cf73 023f cf7b 023f cf83 023f     k.?.s.?.{.?...?.

023ffc5c <_ZTV9IPAddress>:
	...
 23ffc64:	d061 023f d051 023f d053 023f 7525 7500     a.?.Q.?.S.?.%u.u
 23ffc74:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
 23ffc84:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
 23ffc94:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 23ffca4:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
 23ffcb4:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 23ffcc4:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 23ffcd4:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
 23ffce4:	6961 006c                                   ail.

023ffce8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffcf0:	d50d 023f d533 023f d4f1 023f d16f 023f     ..?.3.?...?.o.?.

023ffd00 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffd08:	d9c1 023f d9d9 023f e115 023f e2bd 023f     ..?...?...?...?.

023ffd18 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffd20:	d9ed 023f da01 023f e2f5 023f d4f9 023f     ..?...?...?...?.

023ffd30 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffd38:	d50b 023f d541 023f e079 023f d4fb 023f     ..?.A.?.y.?...?.

023ffd48 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffd50:	d509 023f d54f 023f d929 023f d571 023f     ..?.O.?.).?.q.?.

023ffd60 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd68:	e469 023f e473 023f e47d 023f e487 023f     i.?.s.?.}.?...?.
 23ffd78:	e491 023f e49d 023f e4a9 023f e4b1 023f     ..?...?...?...?.
 23ffd88:	e4b9 023f e4c5 023f e4cd 023f e4d7 023f     ..?...?...?...?.
 23ffd98:	e4e1 023f                                   ..?.

023ffd9c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffd9c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffdac:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffdbc:	6d69 0065                                   ime.

023ffdc0 <_ZTV11USARTSerial>:
	...
 23ffdc8:	e941 023f e9ad 023f e985 023f e5cd 023f     A.?...?...?...?.
 23ffdd8:	e955 023f e971 023f e963 023f e97f 023f     U.?.q.?.c.?...?.
 23ffde8:	e943 023f e947 023f                         C.?.G.?.

023ffdf0 <_ZTV9USBSerial>:
	...
 23ffdf8:	ea05 023f ea6d 023f ea43 023f e5cd 023f     ..?.m.?.C.?...?.
 23ffe08:	ea35 023f ea07 023f ea17 023f ea67 023f     5.?...?...?.g.?.
 23ffe18:	ea27 023f e9ff 023f                         '.?...?.

023ffe20 <_ZTVN5spark9WiFiClassE>:
	...
 23ffe28:	eb6b 023f eb61 023f eb57 023f eb0d 023f     k.?.a.?.W.?...?.
 23ffe38:	eb4b 023f eb3f 023f e4a9 023f e4b1 023f     K.?.?.?...?...?.
 23ffe48:	eb33 023f eb2b 023f eb21 023f eb17 023f     3.?.+.?.!.?...?.
 23ffe58:	e4e1 023f                                   ..?.

023ffe5c <_ZSt7nothrow>:
 23ffe5c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffe6c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23ffe7c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23ffe8c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23ffe9c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23ffeac:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23ffebc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023ffecd <_ctype_>:
 23ffecd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffedd:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffeed:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffefd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff0d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff1d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff2d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff3d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff4d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffce <link_const_data_end>:
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fb485 	.word	0x023fb485
 23fffd4:	023fceb5 	.word	0x023fceb5
 23fffd8:	023fcf2d 	.word	0x023fcf2d
 23fffdc:	023fe105 	.word	0x023fe105
 23fffe0:	023fe5b9 	.word	0x023fe5b9
 23fffe4:	023fe661 	.word	0x023fe661
 23fffe8:	023fe909 	.word	0x023fe909
 23fffec:	023fe92d 	.word	0x023fe92d
 23ffff0:	023feb75 	.word	0x023feb75
